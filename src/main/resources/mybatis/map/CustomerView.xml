<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="CustomerView">
	
	<select id="getDevicesBySite" resultType="com.nwm.api.entities.DeviceEntity">
		SELECT
			d.id,
			d.devicename,
			d.datatablename,
			d.id_site,
			d.is_excluded_meter,
			d.reverse_poa,
			dt.id AS id_device_type
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.id_site = #{id_site}
			AND d.`status` = 1 
			AND d.is_delete = 0
			AND (CONVERT_TZ(NOW(), 'UTC', t.value) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			AND (d.meter_type = 3 OR d.meter_type IS NULL)
			<include refid="com.nwm.common.deviceByDomainCondition"/>
	</select>
	
	<select id="getHiddenDataListByDevice" resultType="Map">
		SELECT
			date_from,
			date_to
		FROM
			hidden_data
		WHERE
			id_device = #{id}
			AND status = 1
			AND is_delete = 0
	</select>
	
	<select id="getHiddenDataListBySite" resultType="Map">
		SELECT
			hd.id_device,
			hd.date_from,
			hd.date_to
		FROM
			hidden_data hd
			LEFT JOIN device d ON d.id = hd.id_device
			LEFT JOIN site s ON s.id = d.id_site
		WHERE
			s.id = #{id_site}
			AND s.status = 1
			AND s.is_delete = 0
			AND d.status = 1
			AND d.is_delete = 0
			AND hd.status = 1
			AND hd.is_delete = 0
	</select>
	
	<sql id="categories_time_format">
		TRIM(
			<choose>
				<when test="filterBy == 'today'">
					<choose>
						<when test="data_send_time == 8 or data_send_time == 1 or data_send_time == 2 or data_send_time == 3">
							'${time_format}'
						</when>
						<otherwise>
							'%d. %b'
						</otherwise>
					</choose>
				</when>
				<when test="filterBy == '3_day' or filterBy == 'this_week' or filterBy == 'last_week'">
					'%d. %b ${time_format}'
				</when>
				<otherwise>
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[ < ]]> 45 THEN '%m/%d'
						ELSE '%b. %Y'
					END
				</otherwise>
			</choose>
		)
	</sql>
	
	<select id="getDataEnergy" resultType="com.nwm.api.entities.ClientMonthlyDateEntity" >
		SELECT
			t.categories_time,
			t.time_full,
			ROUND(( SUM( t.`value` ) ), 1 ) AS chart_energy_kwh,
			t.id
		FROM
			(
				<foreach collection="groupMeter" item="item" index="index" separator="union all">
					SELECT
						d.id,
						<choose>
							<when test="data_send_time == 8">
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 60)*60), '%Y-%m-%d %H:%i') AS time_full,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 60)*60), <include refid="categories_time_format"><property name="time_format" value="%H:%i" /></include>) AS categories_time,
							</when>
							<when test="data_send_time == 1">
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 300)*300), '%Y-%m-%d %H:%i' ) AS time_full,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 300)*300), <include refid="categories_time_format"><property name="time_format" value="%H:%i" /></include>) AS categories_time,
							</when>
							<when test="data_send_time == 2">
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 900)*900), '%Y-%m-%d %H:%i' ) AS time_full,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 900)*900), <include refid="categories_time_format"><property name="time_format" value="%H:%i" /></include>) AS categories_time,
							</when>
							<when test="data_send_time == 3">
								DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y-%m-%d %H:00' ) AS time_full,
								DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), <include refid="categories_time_format"><property name="time_format" value="%H:00" /></include> ) AS categories_time,
							</when>
						</choose>
						CASE
							WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[ < ]]> 5 THEN
								AVG(IF(
									(dpf.min_value IS NOT NULL AND dv.nvmActivePower <![CDATA[ < ]]> dpf.min_value) OR (dpf.max_value IS NOT NULL AND dv.nvmActivePower <![CDATA[ > ]]> dpf.max_value),
									NULL,
									dv.nvmActivePower
								))
							ELSE
								SUM(IF(
									(dpf.min_value IS NOT NULL AND dv.MeasuredProduction <![CDATA[ < ]]> dpf.min_value) OR (dpf.max_value IS NOT NULL AND dv.MeasuredProduction <![CDATA[ > ]]> dpf.max_value),
									0,
									dv.MeasuredProduction
								))
						END AS `value`
					FROM
						${item.datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site 
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
						LEFT JOIN device_parameters dp ON dp.id_device_group = d.id_device_group AND dp.is_user_defined = 1 AND dp.is_energy = 1 AND ${filterEnabled} = true
						LEFT JOIN device_parameter_filter dpf ON dp.id = dpf.id_device_parameter AND d.id = dpf.id_device AND (dpf.min_value IS NOT NULL OR dpf.max_value IS NOT NULL)
					WHERE
						s.id = #{item.id_site}
						AND d.id = #{item.id}
						AND (CONVERT_TZ( dv.time, 'UTC', t.value ) BETWEEN #{start_date} AND #{end_date})
						<foreach item="hidden" index="index" collection="hidden_data_list">
							AND
								CASE
									WHEN d.id = #{hidden.id_device} THEN CONVERT_TZ( dv.time, 'UTC', t.value ) NOT BETWEEN #{hidden.date_from} AND #{hidden.date_to}
									ELSE TRUE
								END
					    </foreach>
						AND s.`status` = 1 
						AND d.`status` = 1 
					GROUP BY
						d.id,
						time_full
				</foreach>
			) t 
		GROUP BY
			<if test="is_show_each_meter == 1">
				t.id,
			</if>
			t.time_full
	</select>
	
	<select id="getDataSiteDataReport" resultType="com.nwm.api.entities.ClientMonthlyDateEntity" >
		SELECT
			id,
			time_full,
			categories_time,
			ROUND(AVG(nvm_irradiance), 1) AS nvm_irradiance,
			<choose>
				<when test="is_show_each_meter == 1">
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[ < ]]> 5 THEN ROUND(SUM(meterPower), 1)
						ELSE CAST(SUM(meterEnergy) AS DECIMAL)
					END AS chart_energy_kwh
				</when>
				<otherwise>
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[ < ]]> 5 THEN IF(#{totalMeter} > 0, ROUND(SUM(meterPower), 1), ROUND(SUM(inverterPower), 1))
						ELSE IF(#{totalMeter} > 0, CAST(SUM(meterEnergy) AS DECIMAL), CAST(SUM(inverterEnergy) AS DECIMAL))
					END AS chart_energy_kwh,
					IF(#{totalMeter} > 0, ROUND(SUM(meterPower), 1), ROUND(SUM(inverterPower), 1)) AS nvmActivePower,
					IF(#{totalMeter} > 0, CAST(SUM(meterEnergy) AS DECIMAL), CAST(SUM(inverterEnergy) AS DECIMAL)) AS nvmActiveEnergy,
					ROUND(AVG(expected_power), 1) AS expected_power,
					ROUND(SUM(expected_energy), 1) AS expected_energy
				</otherwise>
			</choose>
		FROM
			(
				SELECT
					d.id,
					d.id_device_type,
					<choose>
						<when test="data_send_time == 4">
							DATE_FORMAT( sdr.time, '%Y-%m-%d' ) AS time_full,
							DATE_FORMAT( sdr.time, <include refid="categories_time_format"><property name="time_format" value="" /></include> ) AS categories_time,
						</when>
						<when test="data_send_time == 5">
							DATE_FORMAT(DATE_SUB(sdr.time, INTERVAL (MOD(DATEDIFF(sdr.time, #{start_date}), 7 )) DAY), '%Y-%m-%d') AS time_full,
							DATE_FORMAT( sdr.time, <include refid="categories_time_format"><property name="time_format" value="" /></include> ) AS categories_time,
						</when>
						<when test="data_send_time == 6">
							DATE_FORMAT( sdr.time, '%m/%Y' ) AS time_full,
							DATE_FORMAT( sdr.time, '%b. %Y' ) AS categories_time,
						</when>
						<when test="data_send_time == 7">
							DATE_FORMAT( sdr.time, '%Y' ) AS time_full,
							DATE_FORMAT( sdr.time, '%Y' ) AS categories_time,
						</when>
						<otherwise>
							"all" AS time_full,
							"all" AS categories_time,
						</otherwise>
					</choose>
					AVG(expected_power) AS expected_power,
					AVG(expected_power) * 24 * COUNT(*) AS expected_energy,
					AVG(IF(d.id_device_type = 4, sdr.POAAVG, NULL)) AS nvm_irradiance,
					AVG(IF(
						(dpf1.min_value IS NOT NULL AND sdr.PowerTodayAVG <![CDATA[ < ]]> dpf1.min_value) OR (dpf1.max_value IS NOT NULL AND sdr.PowerTodayAVG <![CDATA[ > ]]> dpf1.max_value),
						NULL,
						IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, sdr.PowerTodayAVG, NULL)
					)) AS meterPower,
					AVG(IF(
						(dpf1.min_value IS NOT NULL AND sdr.PowerTodayAVG <![CDATA[ < ]]> dpf1.min_value) OR (dpf1.max_value IS NOT NULL AND sdr.PowerTodayAVG <![CDATA[ > ]]> dpf1.max_value),
						NULL,
						IF(d.id_device_type = 1, sdr.PowerTodayAVG, NULL)
					)) AS inverterPower,
					SUM(IF(
						(dpf2.min_value IS NOT NULL AND sdr.ActualGeneration <![CDATA[ < ]]> dpf2.min_value) OR (dpf2.max_value IS NOT NULL AND sdr.ActualGeneration <![CDATA[ > ]]> dpf2.max_value),
						0,
						IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, sdr.ActualGeneration, 0)
					)) AS meterEnergy,
					SUM(IF(
						(dpf2.min_value IS NOT NULL AND sdr.ActualGeneration <![CDATA[ < ]]> dpf2.min_value) OR (dpf2.max_value IS NOT NULL AND sdr.ActualGeneration <![CDATA[ > ]]> dpf2.max_value),
						0,
						IF(d.id_device_type = 1, sdr.ActualGeneration, 0)
					)) AS inverterEnergy
				FROM
					(
						SELECT
							sdr.time,
							sdr.POAAVG,
							sdr.PowerTodayAVG,
							sdr.ActualGeneration,
							sdr.id_device,
							IF(
								d.id_device_type = 4 AND d.reverse_poa = 0,
								<include refid="com.nwm.common.expectedPowerByPvModel">
									<property name="irradiance" value="sdr.POAAVG" />
									<property name="temperature" value="sdr.TCellAVG" />
									<property name="panelTemperature" value="sdr.TCellAVG" />
									<property name="power" value="sdr.PowerTodayAVG" />
								</include>,
								NULL
							) AS expected_power
						FROM
							${table_data_report} sdr
							LEFT JOIN device d ON d.id = sdr.id_device
							LEFT JOIN site s ON s.id = d.id_site
						WHERE
							s.`status` = 1
							AND d.`status` = 1
							AND d.id_site = #{id_site}
							AND s.is_delete = 0
							AND d.is_delete = 0
							AND (d.meter_type = 3 OR d.meter_type IS NULL)
							AND sdr.time BETWEEN #{start_date} AND #{end_date}
							<foreach item="item" index="index" collection="hidden_data_list">
								AND
									CASE
										WHEN d.id = #{item.id_device} THEN sdr.time NOT BETWEEN #{item.date_from} AND #{item.date_to}
										ELSE TRUE
									END
							</foreach>
					) sdr
					LEFT JOIN device d ON d.id = sdr.id_device
					LEFT JOIN site s ON s.id = d.id_site
					LEFT JOIN device_parameters dp1 ON dp1.id_device_group = d.id_device_group AND dp1.is_active_power = 1 AND ${filterEnabled} = true
					LEFT JOIN device_parameter_filter dpf1 ON dp1.id = dpf1.id_device_parameter AND d.id = dpf1.id_device AND (dpf1.min_value IS NOT NULL OR dpf1.max_value IS NOT NULL)
					LEFT JOIN device_parameters dp2 ON dp2.id_device_group = d.id_device_group AND dp2.is_user_defined = 1 AND dp2.is_energy = 1 AND ${filterEnabled} = true
					LEFT JOIN device_parameter_filter dpf2 ON dp2.id = dpf2.id_device_parameter AND d.id = dpf2.id_device AND (dpf2.min_value IS NOT NULL OR dpf2.max_value IS NOT NULL)
				GROUP BY
					d.id,
					time_full
			) mt
		GROUP BY
			<if test="is_show_each_meter == 1">
				id,
			</if>
			time_full
	</select>
	
	<select id="getDataVirtualDevice" resultType="com.nwm.api.entities.ClientMonthlyDateEntity" >
		SELECT
			time_full,
			categories_time,
			ROUND(nvm_irradiance, 1) AS nvm_irradiance,
			CASE
				WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[ < ]]> 5 THEN ROUND(nvmActivePower, 1)
				ELSE CAST(nvmActiveEnergy AS DECIMAL)
			END AS chart_energy_kwh,
			ROUND(nvmActivePower, 1) AS nvmActivePower,
			CAST(nvmActiveEnergy AS DECIMAL) AS nvmActiveEnergy,
			ROUND(expected_power, 1) AS expected_power,
			ROUND(expected_energy, 1) AS expected_energy
		FROM
			(
				SELECT
					time_full,
					categories_time,
					AVG(nvmActivePower) AS nvmActivePower,
					SUM(nvmActiveEnergy) AS nvmActiveEnergy,
					AVG(nvm_irradiance) AS nvm_irradiance,
					AVG(expected_power) AS expected_power,
					<choose>
						<when test="data_send_time == 8">
							AVG(expected_power) / 60 AS expected_energy
						</when>
						<when test="data_send_time == 1">
							AVG(expected_power) / 12 AS expected_energy
						</when>
						<when test="data_send_time == 2">
							AVG(expected_power) / 4 AS expected_energy
						</when>
						<when test="data_send_time == 3">
							AVG(expected_power) AS expected_energy
						</when>
						<otherwise>
							AVG(expected_power) * 24 * COUNT(*) AS expected_energy
						</otherwise>
					</choose>
				FROM
					(
						SELECT
							<choose>
								<when test="data_send_time == 8">
									FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 60)*60), '%Y-%m-%d %H:%i') AS group_by_time,
									FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 60)*60), '%Y-%m-%d %H:%i') AS time_full,
									<choose>
										<when test="filterBy == 'today' or filterBy == '3_day' or filterBy == 'this_week' or filterBy == 'last_week'">
											FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 60)*60), <include refid="categories_time_format"><property name="time_format" value="%H:%i" /></include>) AS categories_time,
										</when>
										<otherwise>
											DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), <include refid="categories_time_format"><property name="time_format" value="" /></include> ) AS categories_time,
										</otherwise>
									</choose>
								</when>
								<when test="data_send_time == 1">
									FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 300)*300), '%Y-%m-%d %H:%i') AS group_by_time,
									FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 300)*300), '%Y-%m-%d %H:%i') AS time_full,
									<choose>
										<when test="filterBy == 'today' or filterBy == '3_day' or filterBy == 'this_week' or filterBy == 'last_week'">
											FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 300)*300), <include refid="categories_time_format"><property name="time_format" value="%H:%i" /></include>) AS categories_time,
										</when>
										<otherwise>
											DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), <include refid="categories_time_format"><property name="time_format" value="" /></include> ) AS categories_time,
										</otherwise>
									</choose>
								</when>
								<when test="data_send_time == 2">
									FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 900)*900), '%Y-%m-%d %H:%i') AS group_by_time,
									FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 900)*900), '%Y-%m-%d %H:%i') AS time_full,
									<choose>
										<when test="filterBy == 'today' or filterBy == '3_day' or filterBy == 'this_week' or filterBy == 'last_week'">
											FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 900)*900), <include refid="categories_time_format"><property name="time_format" value="%H:%i" /></include>) AS categories_time,
										</when>
										<otherwise>
											DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), <include refid="categories_time_format"><property name="time_format" value="" /></include> ) AS categories_time,
										</otherwise>
									</choose>
								</when>
								<when test="data_send_time == 3">
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y-%m-%d %H:00' ) AS group_by_time,
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y-%m-%d %H:00' ) AS time_full,
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), <include refid="categories_time_format"><property name="time_format" value="%H:00" /></include> ) AS categories_time,
								</when>
								<when test="data_send_time == 4">
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y-%m-%d' ) AS group_by_time,
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y-%m-%d' ) AS time_full,
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), <include refid="categories_time_format"><property name="time_format" value="" /></include> ) AS categories_time,
								</when>
								<when test="data_send_time == 5">
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y-%m-%d' ) AS group_by_time,
									DATE_FORMAT( DATE_SUB(CONVERT_TZ( dv.time, 'UTC', t.value ), INTERVAL (MOD(DATEDIFF(CONVERT_TZ( dv.time, 'UTC', t.value ), #{start_date}), 7 )) DAY), '%Y-%m-%d' ) AS time_full,
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), <include refid="categories_time_format"><property name="time_format" value="" /></include> ) AS categories_time,
								</when>
								<when test="data_send_time == 6">
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y-%m-%d' ) AS group_by_time,
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%m/%Y' ) AS time_full,
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%b. %Y' ) AS categories_time,
								</when>
								<when test="data_send_time == 7">
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y-%m-%d' ) AS group_by_time,
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y' ) AS time_full,
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y' ) AS categories_time,
								</when>
								<otherwise>
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y-%m-%d' ) AS group_by_time,
									"all" AS time_full,
									"all" AS categories_time,
								</otherwise>
							</choose>
							AVG(IF(
								(dpf1.min_value IS NOT NULL AND dv.nvmActivePower <![CDATA[ < ]]> dpf1.min_value) OR (dpf1.max_value IS NOT NULL AND dv.nvmActivePower <![CDATA[ > ]]> dpf1.max_value),
								NULL,
								dv.nvmActivePower
							)) AS nvmActivePower,
							SUM(IF(
								(dpf2.min_value IS NOT NULL AND dv.nvmActiveEnergy <![CDATA[ < ]]> dpf2.min_value) OR (dpf2.max_value IS NOT NULL AND dv.nvmActiveEnergy <![CDATA[ > ]]> dpf2.max_value),
								0,
								dv.nvmActiveEnergy
							)) AS nvmActiveEnergy,
							AVG(dv.nvm_irradiance) AS nvm_irradiance,
							AVG(dv.expected_power_ac) AS expected_power
						FROM
							${datatablename} dv
							LEFT JOIN device d ON d.id = dv.id_device
							LEFT JOIN site s ON s.id = d.id_site 
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
							LEFT JOIN device_parameters dp1 ON dp1.id_device_group = d.id_device_group AND dp1.is_active_power = 1 AND ${filterEnabled} = true
							LEFT JOIN device_parameter_filter dpf1 ON dp1.id = dpf1.id_device_parameter AND d.id = dpf1.id_device AND (dpf1.min_value IS NOT NULL OR dpf1.max_value IS NOT NULL)
							LEFT JOIN device_parameters dp2 ON dp2.id_device_group = d.id_device_group AND dp2.is_user_defined = 1 AND dp2.is_energy = 1 AND ${filterEnabled} = true
							LEFT JOIN device_parameter_filter dpf2 ON dp2.id = dpf2.id_device_parameter AND d.id = dpf2.id_device AND (dpf2.min_value IS NOT NULL OR dpf2.max_value IS NOT NULL)
						WHERE
							s.`status` = 1
							AND d.`status` = 1
							AND d.id_site = #{id_site}
							AND d.id_device_type = 12
							AND s.is_delete = 0
							AND d.is_delete = 0
							AND (d.meter_type = 3 OR d.meter_type IS NULL)
							AND (CONVERT_TZ( dv.time, 'UTC', t.value ) BETWEEN #{start_date} AND #{end_date})
							<foreach item="item" index="index" collection="hidden_data_list">
								AND
									CASE
										WHEN d.id = #{item.id_device} THEN CONVERT_TZ( dv.time, 'UTC', t.value ) NOT BETWEEN #{item.date_from} AND #{item.date_to}
										ELSE TRUE
									END
							</foreach>
						GROUP BY
							group_by_time
					) t
				GROUP BY
					time_full
			) t
	</select>
		
	<select id="getDataIrradiance" resultType="com.nwm.api.entities.ClientMonthlyDateEntity" >
		SELECT
			t.categories_time,
			ROUND( t.nvm_irradiance, 1 ) AS nvm_irradiance,
			ROUND( t.expected_power, 1 ) AS expected_power,
			<choose>
				<when test="data_send_time == 8">
					ROUND( t.expected_power / 60, 1 ) AS expected_energy,
				</when>
				<when test="data_send_time == 1">
					ROUND( t.expected_power * 12, 1 ) AS expected_energy,
				</when>
				<when test="data_send_time == 2">
					ROUND( t.expected_power / 4 , 1 ) AS expected_energy,
				</when>
				<when test="data_send_time == 3">
					ROUND( t.expected_power 	, 1 ) AS expected_energy,
				</when>
			</choose>
			t.time_full
			
		FROM
			(
				SELECT
					<choose>
						<when test="data_send_time == 8">
							FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 60)*60), '%Y-%m-%d %H:%i') AS time_full,
							FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 60)*60), <include refid="categories_time_format"><property name="time_format" value="%H:%i" /></include>) AS categories_time,
						</when>
						<when test="data_send_time == 1">
							FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 300)*300), '%Y-%m-%d %H:%i') AS time_full,
							FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 300)*300), <include refid="categories_time_format"><property name="time_format" value="%H:%i" /></include>) AS categories_time,
						</when>
						<when test="data_send_time == 2">
							FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 900)*900), '%Y-%m-%d %H:%i') AS time_full,
							FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 900)*900), <include refid="categories_time_format"><property name="time_format" value="%H:%i" /></include>) AS categories_time,
						</when>
						<when test="data_send_time == 3">
							DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y-%m-%d %H:00' ) AS time_full,
							DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), <include refid="categories_time_format"><property name="time_format" value="%H:00" /></include> ) AS categories_time,
						</when>
					</choose>
					AVG(
						<include refid="com.nwm.common.expectedPowerByPvModel">
							<property name="irradiance" value="dv.nvm_irradiance" />
							<property name="temperature" value="dv.nvm_temperature" />
							<property name="panelTemperature" value="dv.nvm_panel_temperature" />
							<property name="power" value="NULL" />
						</include>
					) AS expected_power,
					AVG(dv.nvm_irradiance) AS nvm_irradiance
				FROM
					${datatablename} dv
					LEFT JOIN device d ON d.id = dv.id_device
					LEFT JOIN site s ON s.id = d.id_site 
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
				WHERE
					s.id = #{id_site}
					AND d.id_device_type IN(4)
					AND (CONVERT_TZ( dv.time, 'UTC', t.value ) BETWEEN #{start_date} AND #{end_date})
					<foreach item="hidden" index="index" collection="hidden_data_list">
						AND
							CASE
								WHEN d.id = #{hidden.id_device} THEN CONVERT_TZ( dv.time, 'UTC', t.value ) NOT BETWEEN #{hidden.date_from} AND #{hidden.date_to}
								ELSE TRUE
							END
				    </foreach>
					AND s.`status` = 1 
					AND d.`status` = 1
					AND d.id = #{id_device} 
				GROUP BY
					d.id,
					time_full
			) t
	</select>
	
	<select id="getCustomerViewInfo" resultType="Map" >
		SELECT
			s.id,
			s.kiosk_view,
			SHA1(s.id) AS hash_id,
			scm.id_employee,
			<include refid="com.nwm.common.siteName"/> AS `name`,
			s.dc_capacity,
			s.ac_capacity,
			s.lat,
			s.lng,
			s.data_send_time,
			t.`offset`,
			IFNULL(e.energy_today, 0) AS energy_today,
			IFNULL(e.peak_power_today, 0) AS peak_power_today,
			IF(e.energy_lifetime, FORMAT(ROUND(e.energy_lifetime * 0.0117, 0), 0) , 0) AS total_tree,
			IF(e.energy_lifetime, FORMAT(ROUND((e.energy_lifetime * 392), 0), 0) , 0) AS total_co2,
			IFNULL(e.energy_lifetime, 0) AS energy_lifetime,
			CASE
			    WHEN s.unit_type_temp = 1 THEN IF(s.weather_indoor_temp_unit = '°C', s.weather_indoor_temp, ROUND(s.weather_indoor_temp * 1.8 + 32,1) )
			    WHEN s.unit_type_temp = 2 THEN IF(s.weather_indoor_temp_unit = '°C', ROUND(s.weather_indoor_temp * 1.8 + 32,1), ROUND((s.weather_indoor_temp) - 32 * 5/9,1))
			    ELSE "-"
			END AS temperature,
			
			CASE
			    WHEN s.unit_type_temp = 1 THEN "°C"
			    WHEN s.unit_type_temp = 2 THEN "°F"
			    ELSE "N/A"
			END AS temperature_unit,
			
			s.weather_humidity AS humidity
			
			
		FROM
			site s
			LEFT JOIN site_employee_map scm ON scm.id_site = s.id
			LEFT JOIN time_zone t ON t.id = s.id_time_zone 
			LEFT JOIN country c ON c.id = s.id_country
			LEFT JOIN(
				SELECT
					d.id_site,
					ROUND(SUM(d.energy_today), 1) AS energy_today,
					ROUND(SUM(d.last_value), 2) AS peak_power_today,
					ROUND(SUM(d.energy_lifetime), 0) AS energy_lifetime
				FROM
					device d
					LEFT JOIN site s ON s.id = d.id_site
				WHERE 
					s.id = #{id_site}
					AND s.`status` = 1 
					AND s.is_delete = 0
					AND d.`status` = 1
					<choose>
						<when test="meter_type == 0">
							AND d.id_device_type IN (3,7,9)
							AND d.is_excluded_meter = 0
						</when>
						<otherwise>
							AND d.id_device_type IN (1)
						</otherwise>
					</choose>
				GROUP BY d.id_site
			) e ON e.id_site = s.id

		WHERE
			s.id = #{id_site}
			AND s.`status` = 1 
			AND s.is_delete = 0
		GROUP BY
			s.id;
		
	</select>
	
	<select id="getList" resultType="Map">
		SELECT
			s.id,
			SHA1(s.id)  hash_id,
			s.id_country,
			s.id_time_zone,
			<include refid="com.nwm.common.siteName"/> AS `name`,
			s.street,
			s.lat,
			s.lng,
			built_since,
			s.old_data,
			s.number,
			s.postal_code,
			s.city,
			s.state,
			DATE_FORMAT(s.commissioning, '%m/%d/%Y') AS commissioning,
			s.emergency_contact,
			s.ac_capacity,
			s.dc_capacity,
			s.status,
			s.is_delete,
			s.created_date,
			s.created_by,
			s.updated_date,
			s.updated_by,
			s.gallery,
			s.site_default,
			s.data_send_time,
			s.table_data_report,
			s.table_data_virtual,
			TIME_FORMAT(CONVERT_TZ(s.sunrise, 'UTC', tz.`value`), '%H:%i:%s') AS sunrise,
			TIME_FORMAT(CONVERT_TZ(s.sunset, 'UTC', tz.`value`), '%H:%i:%s') AS sunset,
			tz.`value` AS timezone_value,
			CONCAT_WS(', ',s.street, s.city, s.state, c.`name`, s.postal_code) AS address_full
		FROM
			site AS s
			LEFT JOIN country c ON c.id = s.id_country
			LEFT JOIN site_employee_map scm ON scm.id_site = s.id
			LEFT JOIN time_zone tz ON tz.id = s.id_time_zone
		WHERE
			 s.is_delete = 0
			 AND s.status = 1 
			 <if test="is_supper_admin != 1">
				 AND scm.id_employee= #{id_employee}
			 </if>
		GROUP BY
			s.id
		ORDER BY
			s.`name` ASC
	</select>
	
	
	<select id="getAlertSummary" resultType="com.nwm.api.entities.AlertEntity" parameterType="com.nwm.api.entities.AlertEntity">
		SELECT (
			SELECT
				COUNT( e.id_error_level ) AS lowPriority 
			FROM
				alert a
				LEFT JOIN error e ON a.id_error = e.id
				LEFT JOIN device d ON d.id = a.id_device
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN site_employee_map scm ON s.id = scm.id_site
			WHERE
				e.id_error_level = 13
				AND a.`status` = 1 
				AND e.`status` = 1
				AND s.status = 1
				AND s.is_delete = 0
				AND scm.id_employee = #{id_customer}
				AND scm.is_hiding = 0
			GROUP BY
				e.id_error_level
		) AS lowPriority,
		
		(
			SELECT
				COUNT( e.id_error_level ) AS highPriority 
			FROM
				alert a
				LEFT JOIN error e ON a.id_error = e.id 
				LEFT JOIN device d ON d.id = a.id_device
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN site_employee_map scm ON s.id = scm.id_site
			WHERE
				e.id_error_level = 11
				AND a.`status` = 1 
				AND e.`status` = 1 
				AND s.status = 1
				AND s.is_delete = 0
				AND scm.id_employee = #{id_customer}
				AND scm.is_hiding = 0
			GROUP BY
				e.id_error_level
		) AS highPriority,
		
		
		(
			SELECT
				COUNT(*) AS totalError 
			FROM
				alert a
				LEFT JOIN error e ON a.id_error = e.id 
				LEFT JOIN device d ON d.id = a.id_device
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN site_employee_map scm ON s.id = scm.id_site
			WHERE
				a.`status` = 1 
				AND e.`status` = 1 
				AND s.status = 1
				AND s.is_delete = 0
				AND scm.id_employee = #{id_customer}
				AND scm.is_hiding = 0
				<if test="!isUserNW.booleanValue()">
					AND e.id_error_level != 14
				</if>
		) AS totalError
		
				
  	</select>
  	
  	
  	<select id="getListAlertCustomerView" resultType="Map" parameterType="String" >
		SELECT
			l.id,
			l.asset,
			el.name AS priority_name,
			l.capacity,
			l.`status`,
			l.alert_acknowledged,
			l.disable_notification,
			l.resolved,
			IF(l.`status` = 1, 'Open', 'Close') AS status_name,
			el.`name` AS `level`,
			e.message,
			e.error_code,
			d.devicename,
			<include refid="com.nwm.common.siteName"/> AS site_name,
			s.id AS id_site,
			d.id as id_device,
			i.icon AS icon_alert,
			el.id AS id_error_level,
			dt.name AS device_type_name,
			el.color AS color_error_level,
			el.level,
			DATE_FORMAT( CONVERT_TZ( l.start_date, t.`offset`, #{offset_timezone} ), #{format_sql_long} ) AS start,
			DATE_FORMAT( CONVERT_TZ( l.start_date,'+00:00', t.`offset`) , '%m/%d/%Y %h:%i %p') AS start_date,
			DATE_FORMAT(CONVERT_TZ( l.end_date,'+00:00', t.`offset`), '%m/%d/%Y %h:%i %p') AS end_date,
			
			CONCAT_WS('', 
				IF( FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / (60*24))) <![CDATA[<]]> 0 , 0, FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time}) / (60*24)))), 'd ',
				IF(MOD(FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / 60)), 24) <![CDATA[<]]> 0, 0, MOD(FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / 60)), 24)), 'h ',
				IF( MOD((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time})), 60) <![CDATA[<]]> 0, 0, MOD((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time})), 60)), 'm'
			) AS duration,
			IFNULL( FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time}))) , 0) AS open_period,
			
			CASE
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit,
			<include refid="com.nwm.common.keyIndicatorField"/>,
			<include refid="com.nwm.common.unitField"/>
			
		FROM
			`alert` l
			LEFT JOIN error e ON e.id = l.id_error
			LEFT JOIN error_level el ON el.id = e.id_error_level
			LEFT JOIN icon i ON i.id = el.id_icon
			LEFT JOIN device d ON d.id = l.id_device
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN site_employee_map scm ON s.id = scm.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			WHERE e.`status` = 1 AND e.is_delete = 0
			AND l.is_delete = 0
			AND s.status = 1
			AND s.is_delete = 0
			AND scm.id_employee = #{id_customer}
			AND scm.is_hiding = 0
			<if test="view_history == 'active'">
				AND l.status = 1
			</if>
			<if test="view_history != 'active'">
				AND l.status = 0
			</if>
			
			<if test="date_from != null and date_to != null">
				AND CONVERT_TZ( l.start_date, '+00:00', t.`offset` )  BETWEEN #{date_from}  AND #{date_to}
			</if>
			<if test="id_sites != null and !id_sites.isEmpty()">
				AND s.id IN  (
					<foreach item="item" index="index" collection="id_sites" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="id_levels != null and !id_levels.isEmpty()">
				AND el.id IN  (
					<foreach item="item" index="index" collection="id_levels" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="site_name != null">
				AND s.`name` LIKE CONCAT("%",#{site_name}, "%")
			</if>
			
			<if test="!isUserNW.booleanValue()">
				AND el.id != 14
			</if>
			
			GROUP BY l.id 
			
			<choose>
				<when test="sort_column == 'id'">
			      ORDER BY l.`id` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'site_name'">
			      ORDER BY s.`name` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'priority_name'">
			      ORDER BY el.`name` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'message'">
			      ORDER BY e.`message` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'devicename'">
			      ORDER BY d.`devicename` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'times_ago'">
			      ORDER BY l.start_date ${order_by}
			    </when>
			    
			    <when test="sort_column == 'start_date'">
			      ORDER BY l.`start_date` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'end_date'">
			      ORDER BY l.`end_date` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'open_period'">
			      ORDER BY `open_period` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'device_type_name'">
			      ORDER BY dt.name ${order_by}
			    </when>
			    
			    <when test="sort_column == 'key_indicator'">
			      ORDER BY unit, d.field_value1 ${order_by}
			    </when>
			    
			    <otherwise>
			      ORDER BY id DESC
			    </otherwise>
			  </choose>
  
			LIMIT #{limit} OFFSET #{offset};
	</select>
	
	
	<select id="countAlertCustomerView"  resultType="int" parameterType="String">
    	SELECT
			COUNT(l.id) as totalRecord
			
		FROM
			`alert` l
			LEFT JOIN error e ON e.id = l.id_error
			LEFT JOIN error_level el ON el.id = e.id_error_level
			LEFT JOIN device d ON d.id = l.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN site_employee_map scm ON s.id = scm.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE  e.`status` = 1 AND e.is_delete = 0 AND scm.id_employee = #{id_customer} AND s.status = 1 AND s.is_delete = 0
			
			<if test="view_history == 'active'">
				AND l.status = 1
			</if>
			<if test="view_history != 'active'">
				AND l.status = 0
			</if>
			
			<if test="date_from != null and date_to != null">
				AND CONVERT_TZ( l.start_date, '+00:00', t.`offset` )  BETWEEN #{date_from}  AND #{date_to}
			</if>

			<if test="id_sites != null and !id_sites.isEmpty()">
				AND s.id IN  (
					<foreach item="item" index="index" collection="id_sites" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="id_levels != null and !id_levels.isEmpty()">
				AND el.id IN  (
					<foreach item="item" index="index" collection="id_levels" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="site_name != null">
				AND s.`name` LIKE CONCAT("%",#{site_name}, "%")
			</if>
			
			<if test="!isUserNW.booleanValue()">
				AND el.id != 14
			</if>
  	</select>
  	
	

  	
  	<select id="countCustomerViewNotificationAlert" resultType="int" parameterType="com.nwm.api.entities.CustomerEntity">
	  	SELECT
			COUNT( DISTINCT a.id ) AS totalRecord 
		FROM
			site s
			LEFT JOIN site_employee_map scm ON s.id = scm.id_site
			LEFT JOIN device d ON d.id_site = s.id
			LEFT JOIN alert a ON a.id_device = d.id 
			LEFT JOIN error e ON e.id = a.id_error
		WHERE
			
			s.`status` = 1 
			AND s.is_delete = 0 
			AND a.`status` = 1 
			AND a.is_delete = 0 
			AND d.`status` = 1 
			AND d.is_delete = 0
			AND scm.id_employee = #{id_customer}
			AND scm.is_hiding = 0
			<if test="id_sites != null and !id_sites.isEmpty()">
			AND s.id IN  (
				<foreach item="item" index="index" collection="id_sites" separator=", ">
					#{item.id}
				</foreach>
			)
			</if>
			<if test="!isUserNW.booleanValue()">
				AND e.id_error_level != 14
			</if>
			
  	</select>
  	
  	
	
</mapper>
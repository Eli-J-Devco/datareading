<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="CalculationMeasuredProduction">
	
	<select id="getListDeviceMoveData" resultType="com.nwm.api.entities.CalculationMeasuredProductionEntity">
		SELECT
			null AS time,
			d.id,
			d.id AS id_device,
			d.devicename,
			d.datatablename,
			d.id_site,
			d.id_device_type,
			d.id_device_group,
			s.data_send_time,
			null AS start_date,
			null AS end_date,
			null AS MeasuredProduction,
			t.`offset` AS time_zone_value,
			d.view_tablename,
			d.job_tablename,
			dg.table_name AS device_group_table
		FROM
			device d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			s.`status` = 1 
			AND s.is_delete = 0 
			AND d.`status` = 1 
			AND d.is_delete = 0
			<if test="id_site > 0">
				AND d.id_site = #{id_site}
			</if>
	</select>
	
	
	<select id="getListDevice" resultType="com.nwm.api.entities.CalculationMeasuredProductionEntity">
		SELECT
			null AS time,
			d.id,
			d.devicename,
			d.datatablename,
			d.id_site,
			d.id_device_type,
			d.id_device_group,
			s.data_send_time,
			null AS start_date,
			null AS end_date,
			null AS MeasuredProduction,
			t.`offset` AS time_zone_value,
			d.view_tablename,
			d.job_tablename
		FROM
			device d
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			s.`status` = 1 
			AND s.is_delete = 0 
			AND d.`status` = 1 
			AND d.is_delete = 0
			AND d.id_device_type IN (1,3)
			<if test="id_site > 0">
				AND d.id_site = #{id_site}
			</if>
	</select>
	
	
	
	
	
	
	
	<update id="updateModelMeasuredProduction">
		
	
	
		UPDATE ${datatablename} dv
		JOIN (
					SELECT
						dv.time,
						dv.id_device,
						FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV IF(s.data_send_time = 2, 900, 300)  )* IF(s.data_send_time = 2, 900, 300), '%Y-%m-%d %H:%i' ) AS time_group_by,
						ROUND( IFNULL(ROUND(IF(MIN(dv.nvmActiveEnergy) IS NULL OR dv1.nvmActiveEnergy IS NULL OR MIN(dv.nvmActiveEnergy) <![CDATA[<=]]> 0 OR dv1.nvmActiveEnergy <![CDATA[<=]]> 0, NULL, GREATEST(MIN(dv.nvmActiveEnergy) - dv1.nvmActiveEnergy, 0)), 2), 0.001), 2) AS MeasuredProduction
					FROM
						${datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site
						LEFT JOIN time_zone t ON t.id = s.id_time_zone 
						LEFT JOIN (
							SELECT
								dv.time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV IF(s.data_send_time = 2, 900, 300))*IF(s.data_send_time = 2, 900, 300)), '%m-%d-%Y %H:%i' ) AS time_format,
								MIN(dv.nvmActiveEnergy) as nvmActiveEnergy
								FROM
									${datatablename} dv
									LEFT JOIN device d ON d.id = dv.id_device
								LEFT JOIN site s ON s.id = d.id_site
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
							WHERE
								dv.id_device = #{id}
								AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN SUBTIME( #{start_date}, '0:5:0') AND SUBTIME( #{end_date}, '0:5:0'))
							GROUP BY time_format
						) dv1 ON UNIX_TIMESTAMP(CONVERT_TZ( dv1.time, '+00:00', t.`offset` )) DIV IF(s.data_send_time = 2, 900, 300) = UNIX_TIMESTAMP(CONVERT_TZ( SUBTIME(dv.time, '0:5:0'), '+00:00', t.`offset` )) DIV IF(s.data_send_time = 2, 900, 300)
					WHERE
						dv.id_device = #{id}
						AND (
							CAST(
								CONVERT_TZ( dv.time, '+00:00', t.`offset` ) AS DATETIME 
							) BETWEEN CAST( #{start_date} AS DATETIME ) 
						AND CAST( #{end_date} AS DATETIME ))
						
						GROUP BY time_group_by 
						ORDER BY time_group_by ASC
		) vals ON dv.time = vals.time AND dv.id_device = vals.id_device
		SET dv.MeasuredProduction = vals.MeasuredProduction;
	
	
	</update>
	
	
	
	<select id="getListDeviceUpdateMeasuredProductionFTP" resultType="com.nwm.api.entities.DeviceEntity">
		SELECT
			null AS time,
			d.id,
			d.devicename,
			d.datatablename,
			d.id_site,
			d.id_device_type,
			s.data_send_time,
			null AS start_date,
			null AS end_date,
			null AS MeasuredProduction,
			t.`offset` AS timezone_value,
			d.view_tablename,
			d.job_tablename
		FROM
			device d
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			s.`status` = 1 
			AND s.is_delete = 0 
			AND d.`status` = 1 
			AND d.is_delete = 0
			AND d.id_device_group IN (48,46,31,32)
			<if test="id_site > 0">
				AND d.id_site = #{id_site}
			</if>
	</select>
	
	<update id="updateDeviceMeasuredProduction">
		UPDATE ${datatablename} dv
		LEFT JOIN (
			SELECT 
				time,
				IF(nvmActiveEnergy IS NULL OR (LEAD(nvmActiveEnergy, 1) OVER (ORDER BY time)) IS NULL OR nvmActiveEnergy <![CDATA[<=]]> 0 OR (LEAD(nvmActiveEnergy, 1) OVER (ORDER BY time)) <![CDATA[<=]]> 0, 0, ROUND( GREATEST( (LEAD(nvmActiveEnergy, 1) OVER (ORDER BY time)) - nvmActiveEnergy, 0), 0) ) AS MeasuredProduction
			FROM 
				${datatablename}
			WHERE
				id_device = #{id}
		) t ON t.time = dv.time
		SET dv.MeasuredProduction = t.MeasuredProduction
		WHERE dv.id_device = #{id}
	</update>
	
	<select id="getDetailSite" resultType="com.nwm.api.entities.SiteEntity" parameterType="com.nwm.api.entities.SiteEntity">
		SELECT
			CONCAT_WS( ", ", s.city, s.state ) AS address_short,
			CONCAT_WS( ", ", s.number, s.street ) AS street_ws,
			s.id,
			s.id_country,
			s.id_time_zone,
			s.`name`,
			s.lat,
			s.lng,
			s.old_data,
			s.number,
			s.street,
			s.postal_code,
			s.city,
			s.state,
			DATE_FORMAT( s.commissioning, '%m-%d-%Y' ) AS commissioning,
			s.emergency_contact,
			s.ac_capacity,
			s.dc_capacity,
			s.`status`,
			s.is_delete,
			s.created_date,
			s.created_by,
			s.updated_date,
			s.updated_by,
			DATE_FORMAT( s.built_since, '%m-%d-%Y' ) AS built_since,
			c.`name` AS country_name,
			s.gallery,
			c.localization_format,
			c.format_sql_short,
			c.format_sql_long,
			c.format_sql_string_short,
			c.format_sql_string_long,
			c.format_sql_string_mdy
		FROM
			site s 
			LEFT JOIN country c ON c.id = s.id_country
		WHERE
			s.id = #{id} 
			AND s.`status` = 1 
			AND s.is_delete = 0
	</select>
	
	
	
	<insert id="createTableReport">
		CREATE TABLE IF NOT EXISTS `site${id}_data_report` 
		  (
		  	  `time` datetime NOT NULL,
			  `id_device` int(11) NOT NULL,
			  `InverterUptime` int(2) DEFAULT NULL,
			  `DayTime` int(2) DEFAULT NULL,
			  `InverterUptimeDaytime` double DEFAULT NULL COMMENT 'Inverter Uptime/Daytime',
			  `ActualGeneration` double DEFAULT NULL COMMENT 'Actual Generation',
			  `EstimatedGeneration` double DEFAULT NULL COMMENT 'Estimated Generation',
			  `EstimatedGenerationIndex` double DEFAULT NULL COMMENT 'Estimated Generation Index (%)',
			  `InverterAvailability` double DEFAULT NULL COMMENT 'Inverter Availability',
			  `PowerTodayTotal` double DEFAULT NULL,
			  `PowerTodayAVG` double DEFAULT NULL,
			  `POATotal` double DEFAULT NULL,
			  `POAAVG` double DEFAULT NULL,
			  `TCellAVG` double DEFAULT NULL,
			  PRIMARY KEY (`time`,`id_device`) USING BTREE,
			  KEY `id_device` (`id_device`),
			  CONSTRAINT `fk_report${id}_site_data_report` FOREIGN KEY (`id_device`) REFERENCES `device` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
		  )
		  ENGINE=InnoDB DEFAULT CHARSET=utf8;
	</insert>
	
	
	<insert id="moveSiteDataReport">
		INSERT IGNORE INTO `site${id}_data_report`(
			`time`, `id_device`, `InverterUptime`, `DayTime`, `InverterUptimeDaytime`, `ActualGeneration`, `EstimatedGeneration`, `EstimatedGenerationIndex`, `InverterAvailability`, `PowerTodayTotal`, `PowerTodayAVG`, `POATotal`, `POAAVG`, `TCellAVG`
			)
			SELECT 
			   `time`, `id_device`, `InverterUptime`, `DayTime`, `InverterUptimeDaytime`, `ActualGeneration`, `EstimatedGeneration`, `EstimatedGenerationIndex`, `InverterAvailability`, `PowerTodayTotal`, `PowerTodayAVG`, `POATotal`, `POAAVG`, `TCellAVG`
			FROM 
			   site_data_report sr
				 LEFT JOIN device d ON d.id = sr.id_device
			WHERE
			   d.id_site = #{id};
	</insert>
	
	
	
	
	<insert id="createTableVirtualDevice">
		CREATE TABLE IF NOT EXISTS `model${id}_virtual_meter_or_inverter`
		  (
		  
		  	  `time` datetime NOT NULL,
			  `id_device` int(11) NOT NULL,
			  `nvmActivePower` double DEFAULT NULL,
			  `nvmActiveEnergy` double DEFAULT NULL,
			  `nvm_irradiance` double DEFAULT NULL,
			  `nvm_temperature` double DEFAULT NULL,
			  `expected_power_dc` double DEFAULT NULL,
			  `expected_power_ac` double DEFAULT NULL,
			  `expected_energy` double DEFAULT NULL,
			  `r_irradiance` double DEFAULT NULL,
			  `total_poa` double DEFAULT NULL,
			  `panel_temp` double DEFAULT NULL,
			  `ambient_temp` double DEFAULT NULL,
			  `calculation_poa` double DEFAULT NULL,
			  `calculation_temp` double DEFAULT NULL,
			  `calculation_clipping` double DEFAULT NULL,
			  PRIMARY KEY (`time`,`id_device`) USING BTREE,
			  KEY `id_device` (`id_device`),
			  CONSTRAINT `fk_model_virtual_device${id}` FOREIGN KEY (`id_device`) REFERENCES `device` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
		  )
		  ENGINE=InnoDB DEFAULT CHARSET=utf8;
	</insert>
	
	
	
	<insert id="moveSiteDataVirtualDevice">
		INSERT IGNORE INTO `model${id}_virtual_meter_or_inverter`(
			`time`, `id_device`, `nvmActivePower`, `nvmActiveEnergy`, `nvm_irradiance`, `nvm_temperature`, `expected_power_dc`, `expected_power_ac`, `expected_energy`, `r_irradiance`, `total_poa`, `panel_temp`, `ambient_temp`, `calculation_poa`, `calculation_temp`, `calculation_clipping`
			)
			SELECT 
			   `time`, `id_device`, `nvmActivePower`, `nvmActiveEnergy`, `nvm_irradiance`, `nvm_temperature`, `expected_power_dc`, `expected_power_ac`, `expected_energy`, `r_irradiance`, `total_poa`, `panel_temp`, `ambient_temp`, `calculation_poa`, `calculation_temp`, `calculation_clipping`
			FROM 
			   model_virtual_meter_or_inverter sr
				 LEFT JOIN device d ON d.id = sr.id_device
			WHERE
			   d.id_site = #{id};
	</insert>
	
	
	
	
	
	<select id="getListWidgetGroupParameter" resultType="Map">
		SELECT
			wgp.*,
			wg.id_site,
			dp.slug AS fieldname,
			dp.id_device_group,
			dg.table_name AS table_group
		FROM
			widget_group_parameter wgp
			LEFT JOIN widget_group wg ON wg.id = wgp.id_widget_group
			LEFT JOIN device_parameters dp ON dp.id = wgp.id_group_parameter
			LEFT JOIN device_group dg ON dg.id = dp.id_device_group
			WHERE dp.`status` = 1 AND dp.is_delete = 0
			<if test="id_site > 0">
				AND wg.id_site = #{id_site}
			</if>
	</select>
	
	
	<select id="getValueField"  resultType="Long">
    	SELECT 
    		SUM(t.valueField) AS valueField 
    	FROM(
			<if test="dataDevices != null and !dataDevices.isEmpty()">
				<foreach collection="dataDevices" item="item" index="index" separator="union all">
					(
						SELECT 
							<choose>
							    <when test="formula == 1">
							      AVG( ${fieldname} ) AS valueField
							    </when>
							    <when test="formula != 2">
							      SUM( ${fieldname} ) AS valueField
							    </when>
							    <otherwise>
							      AVG( ${fieldname} ) AS valueField
							    </otherwise>
							</choose>
						FROM(
							SELECT
								*
							FROM
								${tablename} 
							WHERE
								<choose>
								    <when test="type == 2">
								      time <![CDATA[>=]]> DATE_ADD(NOW(), INTERVAL -1 HOUR)
								    </when>
								    <when test="type == 3">
								      time <![CDATA[>=]]> SELECT DATE_ADD(NOW(), INTERVAL -1 DAY)
								    </when>
								    <when test="type == 4">
								      time <![CDATA[>=]]> SELECT DATE_ADD(NOW(), INTERVAL -1 MONTH)
								    </when>
								    <when test="type == 5">
								      time <![CDATA[>=]]> SELECT DATE_ADD(NOW(), INTERVAL -12 MONTH)
								    </when>
								    <otherwise>
								      DATE_FORMAT( time, '%Y-%m-%d' ) = DATE_FORMAT( NOW(), '%Y-%m-%d' )
								    </otherwise>
								</choose>
								 
							ORDER BY
								time DESC 
								<if test="type == 1">
									LIMIT 1 
								</if>
								
						)t
					) 
		
				</foreach>
			</if>
			
		)t
  	</select>
  	
  	
  	<update id="updateValueField">
		UPDATE `widget_group_parameter`
		SET `value` = #{totalRecord}
		WHERE `id` = #{id}
	</update>
  	
	
  	
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Reports">
	<resultMap id="ReportsMap" type="com.nwm.api.entities.ReportsEntity">
		<result property="id" column="id" />
		<result property="id_site" column="id_site" />
		<result property="id_employee" column="id_employee" />
		<result property="report_type" column="report_type" />
		<result property="cadence_range" column="cadence_range" />
		<result property="date_from" column="date_from" />
		<result property="date_to" column="date_to" />
		<result property="subscribers" column="subscribers" />
		<result property="data_intervals" column="data_intervals" />
		<result property="file_type" column="file_type" />
		<result property="status" column="status" />
		<result property="created_date" column="created_date" />
		<result property="created_by" column="created_by" />
		<result property="updated_date" column="updated_date" />
		<result property="updated_by" column="updated_by" />
	</resultMap>
	
	<select id="getListSiteByEmployee" resultType="Map">
		SELECT
			s.id,
			s.id AS value,
			s.`name` AS text,
			s.`name` AS label
		FROM
			site AS s
		WHERE
			 s.is_delete = 0 AND s.`status` = 1
			 <if test="id_sites != null">
				AND s.id IN  (
					<foreach item="item" index="index" collection="id_sites" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
		ORDER BY s.`name` ASC
	</select>
	
	<select id="getListSiteByIdEmployee" resultType="Map">
		SELECT
			s.id,
			s.`name`
		FROM
			site_employee_map sem
			LEFT JOIN site s ON s.id = sem.id_site
		WHERE
			s.is_delete = 0
			AND s.`status` = 1
			AND sem.id_employee = #{id_employee}
	</select>
	
	<select id="getListSiteSubGroupByEmployee" resultType="Map" >
		SELECT
			ssg.id,
			ssg.id_site_group,
			ssg.`name` AS text
		FROM
			site s
			LEFT JOIN site_sub_group ssg ON ssg.id = s.id_site_sub_group
			LEFT JOIN site_group sg ON sg.id = ssg.id_site_group
		WHERE 
			ssg.status = 1
			AND ssg.is_delete = 0
			AND sg.status = 1
			AND sg.is_delete = 0
			<if test="id_sites != null">
				AND s.id IN  (
					<foreach item="item" index="index" collection="id_sites" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
		GROUP BY ssg.id
	    ORDER BY ssg.id ASC
	</select>
	
	<select id="getListSiteBySubGroup" resultType="Map" >
		SELECT
			s.id,
			s.`name`
		FROM
			site s
			LEFT JOIN site_sub_group ssg ON ssg.id = s.id_site_sub_group
			LEFT JOIN site_group sg ON sg.id = ssg.id_site_group
		WHERE 
			s.`status` = 1
			AND s.is_delete = 0
			AND ssg.status = 1
			AND ssg.is_delete = 0
			AND sg.status = 1
			AND sg.is_delete = 0
			AND s.id_site_sub_group = #{id_sub_group}
	</select>
	
	<select id="getListSelectedSiteByIdSite" resultType="Map" >
		SELECT
			s.id,
			s.`name`
		FROM
			site s
		WHERE 
			s.`status` = 1
			AND s.is_delete = 0
			AND s.id IN (${ids_site})
	</select>
	
	<insert id="insertReports" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `report`(
			`id_site`,
			`id_employee`,
			`type_report`,
			`cadence_range`,
			`date_from`,
			`date_to`,
			`subscribers`,
			`data_intervals`,
			`file_type`,
			`status`,
			`created_date`,
			`updated_date`,
			`id_sub_group`,
			`type_option`,
			`schedule_enable`,
			`periodicity`,
			`time_schedule`,
			`days_week`,
			`offset_timezone`
		)VALUES(
			#{id_site},
			#{id_employee},
			#{type_report},
			#{cadence_range},
			#{date_from},
			#{date_to},
			#{subscribers},
			#{data_intervals},
			#{file_type},
			#{status},
			NOW(),
			NOW(),
			#{id_sub_group},
			#{type_option},
			#{schedule_enable},
			#{periodicity},
			#{time_schedule},
			#{days_week},
			#{offset_timezone}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	<update id="updateReports">
		UPDATE `report`
		SET
			`id_site` = #{id_site},
			`id_employee` = #{id_employee},
			`type_report` = #{type_report},
			`cadence_range` = #{cadence_range},
			`date_from` = #{date_from},
			`date_to` = #{date_to},
			`subscribers` = #{subscribers},
			`data_intervals` = #{data_intervals},
			`file_type` = #{file_type},
			`status` = #{status},
			`updated_date` = NOW(),
			`id_sub_group` = #{id_sub_group},
			`type_option` = #{type_option},
			`schedule_enable` = #{schedule_enable},
			`periodicity` = #{periodicity},
			`time_schedule` = #{time_schedule},
			`days_week` = #{days_week},
			`offset_timezone` = #{offset_timezone}
		WHERE
			`id` = #{id}
	</update>
	
	
	<select id="getList" resultType="Map" >
		SELECT
			s.`name` AS site_name,
			CASE
		    	WHEN r.type_report = 1 THEN CONCAT_WS( " " , s.`name`, "Solar Production Report") 
		    	WHEN r.type_report = 2 THEN
		    		CASE
		    			WHEN r.type_option = 1 THEN CONCAT_WS( " " , "Entire Portfolio", "Production Trend Report")
		    			WHEN r.type_option = 2 THEN CONCAT_WS( " " , t.sites_name, "Production Trend Report")
		    			WHEN r.type_option = 3 THEN CONCAT_WS( " " , ssg.name, "Sub-Group", "Production Trend Report")
		    		END
		    	ELSE s.`name`
			END	AS report_name,
			
			CASE
		    	WHEN r.cadence_range = 1 THEN "Daily"
				WHEN r.cadence_range = 2 THEN "Monthly"
				WHEN r.cadence_range = 3 THEN "Quarterly"
				WHEN r.cadence_range = 4 THEN "Annually"
				WHEN r.cadence_range = 6 THEN "Weekly"
		    	ELSE "Custom"
			END	AS cadence_range_name,
			
			
			CASE
		    WHEN r.data_intervals = 1 THEN "5 Minutes"
				WHEN r.data_intervals = 2 THEN "15 Minutes"
				WHEN r.data_intervals = 3 THEN "1 Hour"
		    ELSE ""
			END	AS data_intervals_name,
			
			CASE
		    WHEN r.file_type = 1 THEN "PDF"
				WHEN r.file_type = 2 THEN "Excel"
				WHEN r.file_type = 3 THEN "CSV"
		    ELSE ""
			END	AS file_type_name,
		
			r.id,
			s.id AS id_site,
			s.table_data_report,
			r.id_employee,
			r.cadence_range,
			r.type_report,
			r.data_intervals,
			r.subscribers,
			r.file_type,
			r.type_option,
			r.id_sub_group,
			DATE_FORMAT(r.date_from, '%Y-%m-%d %H:%i:%s') AS date_from,
			DATE_FORMAT(r.date_to, '%Y-%m-%d %H:%i:%s') AS date_to,
			r.`status`,
			r.schedule_enable,
			DATE_FORMAT(r.time_schedule, '%Y-%m-%d %H:%i') AS time_schedule,
			r.periodicity,
			r.days_week,
			DATE_FORMAT(r.created_date, '%m/%d/%Y %H:%i %p') AS created_on,
			DATE_FORMAT(r.updated_date, '%m/%d/%Y %H:%i %p') AS last_modified,
			CASE
					WHEN r.type_report = 2 AND r.type_option = 1 THEN (
						SELECT GROUP_CONCAT(s.id SEPARATOR ',') AS ids_site
								FROM site_employee_map sem 
								LEFT JOIN site s ON s.id = sem.id_site
							WHERE sem.id_employee = r.id_employee AND s.`status` = 1 AND s.is_delete = 0
					)
					
					WHEN r.type_report = 2 AND r.type_option = 2 THEN (
						SELECT
							GROUP_CONCAT(s.id SEPARATOR ',')
						FROM
							report_site_map rsm
							LEFT JOIN site s ON s.id = rsm.id_site
							WHERE s.`status` = 1 AND s.is_delete = 0 AND rsm.id_report = r.id
						GROUP BY rsm.id_report
					)
					WHEN r.type_report = 2 AND r.type_option = 3 THEN (
						SELECT GROUP_CONCAT(s.id SEPARATOR ',')
						FROM site s WHERE 
						s.`status` = 1 AND s.is_delete = 0 AND s.id_site_sub_group = r.id_sub_group
					)
					ELSE t.ids_site
			END AS ids_site
		FROM
			report r
			LEFT JOIN site s ON s.id = r.id_site
			LEFT JOIN site_sub_group ssg ON ssg.id = r.id_sub_group
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN (
				SELECT
					rsm.id_report,
					GROUP_CONCAT(s.name SEPARATOR ' - ') AS sites_name,
					GROUP_CONCAT(s.id SEPARATOR ', ') AS ids_site
				FROM
					report_site_map rsm
					LEFT JOIN site s ON s.id = rsm.id_site
				GROUP BY rsm.id_report
			) t ON t.id_report = r.id
		WHERE r.status = 1 
		AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
		
		<if test="is_supper_admin != 1">
			AND r.id_employee = #{id_employee} 
		</if>
			
		GROUP BY r.id 
		    order by
	        <choose>  
	            <when test="sort_column == 'id'">
	                r.id ${order_by}
	            </when>         
	            <when test="sort_column == 'name'">
	                r.name ${order_by}
	            </when>
	            
	            <otherwise>
			      r.id DESC
			    </otherwise>                                                  
	        </choose>  
		 	 
		 LIMIT ${limit} OFFSET ${offset};
	</select>
	
  	
	
	<select id="getListCount"  resultType="int" parameterType="com.nwm.api.entities.ReportsEntity">
    	SELECT count(*) as totalRow
		FROM report r
		WHERE r.status = 1
		<if test="is_supper_admin != 1">
			AND r.id_employee = #{id_employee}
		</if>
		
		
  	</select>
  	
  	
  	
  	<delete id="deleteReports">
		DELETE FROM `report`
		WHERE id = #{id}
	</delete>
	
	
	
	<select id="getSiteDetail" resultType="com.nwm.api.entities.ViewReportEntity" parameterType="com.nwm.api.entities.ViewReportEntity" >
		SELECT
			s.id,
			s.id AS id_site,
			s.`name` AS site_name,
			DATE_FORMAT(NOW(), '%m/%d/%Y') AS report_date,
			s.ac_capacity,
			s.dc_capacity,
			"Normal" AS system_status
		FROM
			site s 
		WHERE
			s.id = #{id_site}
	</select>
	
	
	<select id="getDetailReport" resultType="com.nwm.api.entities.ViewReportEntity" parameterType="com.nwm.api.entities.ViewReportEntity" >
		SELECT
			r.id,
			s.id AS id_site,
			s.`name` AS site_name,
			s.table_data_report,
			DATE_FORMAT(NOW(), '%m/%d/%Y') AS report_date,
			s.ac_capacity,
			s.dc_capacity,
			"Normal" AS system_status,
			r.cadence_range,
			r.subscribers,
			r.data_intervals,
			r.type_report,
			r.type_option,
			r.id_sub_group,
			r.id_employee,
			t.ids_site,
			CASE
		    	WHEN r.type_report = 1 THEN CONCAT_WS( " " , s.`name`, "Solar Production Report") 
		    	WHEN r.type_report = 2 THEN
		    		CASE
		    			WHEN r.type_option = 1 THEN CONCAT_WS( " " , "Entire Portfolio", "Built-in Report")
		    			WHEN r.type_option = 2 THEN CONCAT_WS( " " , t.sites_name, "Built-in Report")
		    			WHEN r.type_option = 3 THEN CONCAT_WS( " " , ssg.name, "Sub-Group", "Built-in Report")
		    		END
		    	ELSE s.`name`
			END	AS report_name,
			CONCAT_WS(', ', s.number, s.street, s.city, s.state, s.postal_code ) AS address
		FROM
			site s 
			LEFT JOIN report r ON r.id_site = s.id
			LEFT JOIN site_sub_group ssg ON ssg.id = r.id_sub_group
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN (
				SELECT
					rsm.id_report,
					GROUP_CONCAT(s.name SEPARATOR ' - ') AS sites_name,
					GROUP_CONCAT(s.id SEPARATOR ', ') AS ids_site
				FROM
					report_site_map rsm
					LEFT JOIN site s ON s.id = rsm.id_site
				GROUP BY rsm.id_report
			) t ON t.id_report = r.id
		WHERE
			r.id = #{id}
			AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
	</select>
  	
  	
  	
  	<select id="getReportYearDataEnergy" resultType="Map" >
		SELECT 
			t.convert_time,
			SUM(t.tmp_energy) AS sumEergy,
			t.year,
			t.month
		FROM (
			SELECT
				iv.time,
				si.id,
				<if test="table_name = 'model_shark100'">
					MAX(iv.w_hours_received) - MIN(iv.w_hours_received) AS tmp_energy,
				</if>
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%Y-%m' ) AS local_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%b. %y' ) AS convert_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%Y' ) AS year,
				LOWER( DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%b' ) )  AS month
				
				
			FROM
				site si
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN ${table_name} iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id_site}
				AND si.`status` = 1
				AND si.is_delete = 0 
				AND iv.error = 0
				AND (CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
				GROUP BY local_time, d.id
		)t GROUP BY t.convert_time ORDER BY t.time
	</select>
	
	
	<select id="getReportEnergyExpectations" resultType="Map" >
		SELECT
			* 
		FROM
			energy_expectations ee 
		WHERE
			ee.id_site = #{id_site}
	</select>
	
	
	<select id="getListDeviceTypeMeter" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
		WHERE
			dt.id = 3 
			AND d.id_site = #{id_site}
			AND d.`status` = 1 
			AND d.is_delete = 0
		GROUP BY d.id_device_type
	</select>
	
	
	<select id="getListDeviceTypeInverter" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
		WHERE
			dt.id = 1
			AND d.id_site = #{id_site}
			AND d.`status` = 1 
			AND d.is_delete = 0
		GROUP BY d.id_device_type
	</select>
	
	
	<select id="getDataEnergyMonthlyReport" resultType="Map" >
		SELECT
			s.id,
			s.id AS id_site,
			s.`name`,
			DATE_FORMAT( sdr.time, '%m' ) AS month,
			DATE_FORMAT( sdr.time, '%Y' ) AS year,
			DATE_FORMAT( sdr.time, '%m/%d/%Y' ) AS categories_time,
			DATE_FORMAT( sdr.time, '%m/%d/%Y' ) AS time_full,
			DATE_FORMAT( sdr.time, '%Y-%m-%d' ) AS time_format,
			
			IF( (SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0))) > 0, (ROUND(SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)), 1)), ROUND(SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)), 1) ) AS chart_energy_kwh,
			IFNULL(SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)), 0.001) AS meterEnergy,
			IFNULL(SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)), 0.001) AS inverterEnergy
			
		FROM
			${table_data_report} sdr 
			LEFT JOIN device d ON d.id = sdr.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			
		WHERE
			s.`status` = 1
			AND d.`status` = 1
			AND s.is_delete = 0
			AND d.is_delete = 0
			AND s.id = #{id_site}
			AND (sdr.time BETWEEN #{start_date} AND #{end_date})
			GROUP BY s.id, DATE_FORMAT( sdr.time , "%Y-%m/%d")
	</select>
	
	<select id="getListSiteREC" resultType="Map" >
		SELECT
			s.id,
			s.name,
			s.id AS id_site,
			IF(s.rec_id IS NULL || s.rec_id = '', CONCAT_WS("-", "NWM", s.id), s.rec_id) AS rec_id,
			IF(s.gu_id IS NULL || s.gu_id = '', CONCAT_WS("-", "NWM", s.id), s.gu_id) AS gu_id,
			IFNULL(ROUND(SUM( d.energy_this_month ) / 1000, 1), 0 ) AS energy_this_month,
			DATE_FORMAT( #{start_date}, "%m/%d/%Y") AS start_date,
			DATE_FORMAT(#{end_date}, "%m/%d/%Y") AS end_date,
			DATE_FORMAT(#{end_date}, "%m/%Y") AS vintage_date
		FROM
			site s
			LEFT JOIN device d ON d.id_site = s.id 
		WHERE
			s.`status` = 1 
			AND d.`status` = 1 
			<if test="id_sites != null">
				AND s.id IN  (
					<foreach item="item" index="index" collection="id_sites" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
		GROUP BY
			s.id
	</select>
	
	
	
	<select id="getDataEnergyRECReport" resultType="Map" >
		<foreach item="item" index="index" collection="id_sites" separator="UNION">
		SELECT
			s.id,
			s.id AS id_site,
			s.`name`,
			IF(s.rec_id IS NULL || s.rec_id = '', CONCAT_WS("-", "NWM", s.id), s.rec_id) AS rec_id,
			IF(s.gu_id IS NULL || s.gu_id = '', CONCAT_WS("-", "NWM", s.id), s.gu_id) AS gu_id,
			DATE_FORMAT( #{start_date}, "%m/%d/%Y") AS start_date,
			DATE_FORMAT(#{end_date}, "%m/%d/%Y") AS end_date,
			DATE_FORMAT(#{end_date}, "%m/%Y") AS vintage_date,
			DATE_FORMAT( sdr.time, '%m' ) AS month,
			DATE_FORMAT( sdr.time, '%Y' ) AS year,
			DATE_FORMAT( sdr.time, '%m/%Y' ) AS categories_time,
			DATE_FORMAT( sdr.time, '%m/%Y' ) AS time_full,
			0 AS is_edit,
			
			CASE
			    WHEN DATE_FORMAT( sdr.time, '%m' ) != DATE_FORMAT(CONVERT_TZ(NOW(),'+00:00', t.`offset`), '%m') THEN FORMAT( (ROUND( (IF( (SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0))) > 0, (ROUND(SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)), 1)), ROUND(SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)), 1) )) / 1000, 2 ) - ROUND( (IF( (SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0))) > 0, (ROUND(SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)), 1)), ROUND(SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)), 1) )) / 1000, 2 ) * 0.03) , 2) 
			    ELSE 0
				END AS energy_this_month,
				
			IFNULL(SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)), 0.001) AS meterEnergy,
			IFNULL(SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)), 0.001) AS inverterEnergy
			
		FROM
			${item.table_data_report} sdr 
			LEFT JOIN device d ON d.id = sdr.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			
		WHERE
			s.`status` = 1
			AND d.`status` = 1
			AND s.id = #{item.id}
			AND s.is_delete = 0
			AND d.is_delete = 0
			AND DATE_FORMAT(sdr.time, '%Y-%m') = DATE_FORMAT( #{end_date}, '%Y-%m')
			AND s.is_rec_report = 1
			GROUP BY s.id
		</foreach>
		
		
	</select>
	
	
	
	<update id="updateRECID">
		UPDATE `site`
		SET
			`rec_id` = #{rec_id}
		WHERE
			`id` = #{id}
	</update>
	
	
	<update id="updateGUID">
		UPDATE `site`
		SET
			`gu_id` = #{gu_id}
		WHERE
			`id` = #{id}
	</update>
	
	
	
	
	<select id="getDataEnergyQurterlyReport" resultType="Map" >
		SELECT
			s.id,
			s.id AS id_site,
			s.`name`,
			DATE_FORMAT( sdr.time, '%b-%Y' ) AS categories_time,
			DATE_FORMAT( sdr.time, '%m/%d/%Y' ) AS categories_time_by_day,
			DATE_FORMAT( sdr.time, '%m-%Y' ) AS time_full,
			DATE_FORMAT( sdr.time, '%Y-%m' ) AS time_format,
			DATE_FORMAT( sdr.time, '%Y-%m-%d' ) AS time_format_by_day,
			IF( (SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0))) > 0, (ROUND(SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)), 1)), ROUND(SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)), 1) ) AS chart_energy_kwh,
			IFNULL(SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)), 0.001) AS meterEnergy,
			IFNULL(SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)), 0.001) AS inverterEnergy
			
		FROM
			${table_data_report} sdr 
			LEFT JOIN device d ON d.id = sdr.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			
		WHERE
			s.`status` = 1
			AND d.`status` = 1
			AND s.is_delete = 0
			AND d.is_delete = 0
			AND s.id = #{id_site}
			AND (sdr.time BETWEEN #{start_date} AND #{end_date})
			GROUP BY s.id,
			<choose>
				<when test="data_intervals == 4">
					time_format_by_day
				</when>
				<when test="data_intervals == 6">
					time_format
				</when>
				<otherwise>
					time_format
				</otherwise>
			</choose>
		
	</select>
	
	<select id="getDataInverterAvailabilityByDay" resultType="Map" >
		SELECT
			ROUND(AVG(sdr.InverterAvailability) * 100, 2) AS InverterAvailability,
			DATE_FORMAT( sdr.time, '%m/%d/%Y' ) AS categories_time,
			DATE_FORMAT( sdr.time, '%Y-%m-%d' ) AS time_format
		FROM
			${table_data_report} sdr
			LEFT JOIN device d ON d.id = sdr.id_device
		WHERE
			d.`status` = 1
			AND d.is_delete = 0
			AND d.id_device_type = 1
			AND d.id_site = #{id_site}
			AND (sdr.time BETWEEN #{start_date} AND #{end_date})
		GROUP BY time_format
	</select>
	
	<select id="getDataWeatherStationByDay" resultType="Map" >
		SELECT
			sdr.POAAVG,
			sdr.TCellAVG,
			DATE_FORMAT( sdr.time, '%m/%d/%Y' ) AS categories_time,
			DATE_FORMAT( sdr.time, '%Y-%m-%d' ) AS time_format
		FROM
			${table_data_report} sdr
			LEFT JOIN device d ON d.id = sdr.id_device
		WHERE
			d.`status` = 1
			AND d.is_delete = 0
			AND d.id_device_type = 4
			AND d.id_site = #{id_site}
			AND (sdr.time BETWEEN #{start_date} AND #{end_date})
	</select>
	
	
	<select id="getDataEnergyAnnuallyReport" resultType="Map" >
		SELECT
			s.id,
			s.id AS id_site,
			s.`name`,
			DATE_FORMAT( sdr.time, '%b-%Y' ) AS categories_time,
			DATE_FORMAT( sdr.time, '%m-%Y' ) AS time_full,
			DATE_FORMAT( sdr.time, '%Y-%m' ) AS time_format,
			DATE_FORMAT( sdr.time, '%Y' ) AS year,
			DATE_FORMAT( sdr.time, '%m' ) AS month_number,
			DATE_FORMAT( sdr.time, '%b' ) AS month,
			IF( (SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0))) > 0, (ROUND(SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)), 1)), ROUND(SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)), 1) ) AS chart_energy_kwh,
			IFNULL(SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)), 0.001) AS meterEnergy,
			IFNULL(SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)), 0.001) AS inverterEnergy
			
		FROM
			${table_data_report} sdr 
			LEFT JOIN device d ON d.id = sdr.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			
		WHERE
			s.`status` = 1
			AND d.`status` = 1
			AND s.is_delete = 0
			AND d.is_delete = 0
			AND s.id = #{id_site}
			AND (sdr.time BETWEEN #{start_date} AND #{end_date})
			GROUP BY s.id, DATE_FORMAT( sdr.time , "%Y-%m")
			
		
	</select>
	
	
	<select id="getInverterAvailability" resultType="Map" >
		SELECT 
			ROUND((SUM(t.InverterAvailability)/ DATE_FORMAT(LAST_DAY(t.time),'%d') ), 1) AS InverterAvailability,
			t.time_full
			FROM (
			SELECT
				sd.time,
				ROUND(AVG(sd.InverterAvailability) * 100, 2) AS InverterAvailability,
				DATE_FORMAT( sd.time, '%b-%Y') AS time_full
			FROM
				${table_data_report} sd
				LEFT JOIN device d ON d.id = sd.id_device 
			WHERE
				d.id_site = #{id_site}
				AND d.id_device_type = 1
				AND (sd.time BETWEEN #{start_date} AND #{end_date})
				GROUP BY sd.time
		)t
		GROUP BY t.time_full
	</select>
	
	<select id="getMeterAvailability" resultType="Map" >
		SELECT 
			ROUND((SUM(t.InverterAvailability)/ DATE_FORMAT(LAST_DAY(t.time),'%d') ), 1) AS InverterAvailability,
			t.time_full
			FROM (
			SELECT
				sd.time,
				ROUND(AVG(sd.InverterAvailability) * 100, 2) AS InverterAvailability,
				DATE_FORMAT( sd.time, '%b-%Y') AS time_full
			FROM
				${table_data_report} sd
				LEFT JOIN device d ON d.id = sd.id_device 
			WHERE
				d.id_site = #{id_site}
				AND d.id_device_type = 3
				AND (sd.time BETWEEN #{start_date} AND #{end_date})
				GROUP BY sd.time
		)t
		GROUP BY t.time_full
	</select>
	
	
	
	
	
	<select id="getDataEnergyMeterDailyReport" resultType="Map" >
		<if test="data_intervals == 1">
			  SELECT
				t.time_format,
				t.categories_time,
				t.hour_time,
				IFNULL(ROUND(SUM( t.nvmActivePower)), 0.001)  AS `power`,
				0 AS irradiance,
				0 AS energy
				
			FROM
				(
					<foreach collection="groupDevices" item="item" index="index" separator="union all">
					<![CDATA[
						SELECT
							m.time,
							m.time_format,
							m.time_full,
							m.categories_time,
							m.hour_time,
							IFNULL(SUM(m.nvmActivePower), NULL) AS nvmActivePower
						FROM
							(
							SELECT
								dv.time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 300)*300), '%Y-%m-%d %H:%i') AS time_format,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 300)*300), '%m/%d/%Y %H:%i') AS time_full,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 300)*300), '%m/%d/%Y %H:%i') AS categories_time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 300)*300), '%H:00') AS hour_time,
								IFNULL(AVG(dv.nvmActivePower), 0) AS nvmActivePower 
							FROM
								${item.datatablename} dv
								LEFT JOIN device d ON d.id = dv.id_device
								LEFT JOIN site s ON s.id = d.id_site 
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
							WHERE
								s.id = #{item.id_site}
								AND d.id_device_type = 3
								AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
								AND s.`status` = 1 
								AND d.`status` = 1 
							GROUP BY
								d.id, time_format
							) m 
						GROUP BY
							m.time_format
						]]>
			      </foreach>
				) t 
			GROUP BY
				t.time_format
		</if>
		
		<if test="data_intervals == 2">
			  SELECT
				t.time_format,
				t.categories_time,
				t.hour_time,
				IFNULL(ROUND(SUM( t.nvmActivePower)), 0.001)  AS `power`,
				0 AS irradiance,
				0 AS energy
				
			FROM
				(
					<foreach collection="groupDevices" item="item" index="index" separator="union all">
					<![CDATA[
						SELECT
							m.time,
							m.time_format,
							m.time_full,
							m.categories_time,
							m.hour_time,
							IFNULL(SUM(m.nvmActivePower), NULL) AS nvmActivePower
						FROM
							(
							SELECT
								dv.time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 900)*900), '%Y-%m-%d %H:%i') AS time_format,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 900)*900), '%m/%d/%Y %H:%i') AS time_full,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 900)*900), '%m/%d/%Y %H:%i') AS categories_time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 900)*900), '%H:00') AS hour_time,
								IFNULL(AVG(dv.nvmActivePower), 0) AS nvmActivePower 
							FROM
								${item.datatablename} dv
								LEFT JOIN device d ON d.id = dv.id_device
								LEFT JOIN site s ON s.id = d.id_site 
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
							WHERE
								s.id = #{item.id_site}
								AND d.id_device_type = 3
								AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
								AND s.`status` = 1 
								AND d.`status` = 1 
							GROUP BY
								d.id, time_format
							) m 
						GROUP BY
							m.time_format
						]]>
			      </foreach>
				) t 
			GROUP BY
				t.time_format
		</if>
		
		<if test="data_intervals == 3">
			  SELECT
				t.time_format,
				t.categories_time,
				t.hour_time,
				IFNULL(ROUND(SUM( t.nvmActivePower)), 0.001)  AS `power`,
				0 AS irradiance,
				0 AS energy
				
			FROM
				(
					<foreach collection="groupDevices" item="item" index="index" separator="union all">
					<![CDATA[
						SELECT
							m.time,
							m.time_format,
							m.time_full,
							m.categories_time,
							m.hour_time,
							IFNULL(SUM(m.nvmActivePower), NULL) AS nvmActivePower
						FROM
							(
							SELECT
								dv.time,
								
								DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_format,
								DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d/%Y %H:00' ) AS time_full,
								DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d/%Y %H:00' ) AS categories_time,
								DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%H:00' ) AS hour_time,
								IFNULL(AVG(dv.nvmActivePower), 0) AS nvmActivePower 
							FROM
								${item.datatablename} dv
								LEFT JOIN device d ON d.id = dv.id_device
								LEFT JOIN site s ON s.id = d.id_site 
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
							WHERE
								s.id = #{item.id_site}
								AND d.id_device_type = 3
								AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
								AND s.`status` = 1 
								AND d.`status` = 1 
							GROUP BY
								d.id, time_format
							) m 
						GROUP BY
							m.time_format
						]]>
			      </foreach>
				) t 
			GROUP BY
				t.time_format
		</if>
	</select>
	
	
	<select id="getDataEnergyInverterDailyReport" resultType="Map" >
		<if test="data_intervals == 1">
			SELECT
				t.time_format,
				t.categories_time,
				t.hour_time,
				IFNULL(ROUND(SUM( t.nvmActivePower)), 0.001)  AS `power`,
				0 AS irradiance,
				0 AS energy
				
			FROM
				(
					<foreach collection="groupDevices" item="item" index="index" separator="union all">
					<![CDATA[
						SELECT
							m.time,
							m.time_format,
							m.time_full,
							m.categories_time,
							m.hour_time,
							IFNULL(SUM(m.nvmActivePower), NULL) AS nvmActivePower
						FROM
							(
							SELECT
								dv.time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 300)*300), '%Y-%m-%d %H:%i') AS time_format,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 300)*300), '%m/%d/%Y %H:%i') AS time_full,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 300)*300), '%m/%d/%Y %H:%i') AS categories_time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 300)*300), '%H:00') AS hour_time,
								
								IFNULL(AVG(dv.nvmActivePower), 0) AS nvmActivePower 
							FROM
								${item.datatablename} dv
								LEFT JOIN device d ON d.id = dv.id_device
								LEFT JOIN site s ON s.id = d.id_site 
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
							WHERE
								s.id = #{item.id_site}
								AND d.id_device_type = 1
								AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
								AND s.`status` = 1 
								AND d.`status` = 1 
							GROUP BY
								d.id, time_format
							) m 
						GROUP BY
							m.time_format
						]]>
			      </foreach>
				) t 
			GROUP BY
				t.time_format
		</if>
		
		<if test="data_intervals == 2">
			SELECT
				t.time_format,
				t.categories_time,
				t.hour_time,
				IFNULL(ROUND(SUM( t.nvmActivePower)), 0.001)  AS `power`,
				0 AS irradiance,
				0 AS energy
				
			FROM
				(
					<foreach collection="groupDevices" item="item" index="index" separator="union all">
					<![CDATA[
						SELECT
							m.time,
							m.time_format,
							m.time_full,
							m.categories_time,
							m.hour_time,
							IFNULL(SUM(m.nvmActivePower), NULL) AS nvmActivePower
						FROM
							(
							SELECT
								dv.time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 900)*900), '%Y-%m-%d %H:%i') AS time_format,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 900)*900), '%m/%d/%Y %H:%i') AS time_full,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 900)*900), '%m/%d/%Y %H:%i') AS categories_time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 900)*900), '%H:00') AS hour_time,
								
								IFNULL(AVG(dv.nvmActivePower), 0) AS nvmActivePower 
							FROM
								${item.datatablename} dv
								LEFT JOIN device d ON d.id = dv.id_device
								LEFT JOIN site s ON s.id = d.id_site 
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
							WHERE
								s.id = #{item.id_site}
								AND d.id_device_type = 1
								AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
								AND s.`status` = 1 
								AND d.`status` = 1 
							GROUP BY
								d.id, time_format
							) m 
						GROUP BY
							m.time_format
						]]>
			      </foreach>
				) t 
			GROUP BY
				t.time_format
		</if>
		
		<if test="data_intervals == 3">
			  SELECT
				t.time_format,
				t.categories_time,
				t.hour_time,
				IFNULL(ROUND(SUM( t.nvmActivePower)), 0.001)  AS `power`,
				0 AS irradiance,
				0 AS energy
				
			FROM
				(
					<foreach collection="groupDevices" item="item" index="index" separator="union all">
					<![CDATA[
						SELECT
							m.time,
							m.time_format,
							m.time_full,
							m.categories_time,
							m.hour_time,
							IFNULL(SUM(m.nvmActivePower), NULL) AS nvmActivePower
						FROM
							(
							SELECT
								dv.time,
								DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_format,
								DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d/%Y %H:00' ) AS time_full,
								DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d/%Y %H:00' ) AS categories_time,
								DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%H:00' ) AS hour_time,
								IFNULL(AVG(dv.nvmActivePower), 0) AS nvmActivePower 
							FROM
								${item.datatablename} dv
								LEFT JOIN device d ON d.id = dv.id_device
								LEFT JOIN site s ON s.id = d.id_site 
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
							WHERE
								s.id = #{item.id_site}
								AND d.id_device_type = 1
								AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
								AND s.`status` = 1 
								AND d.`status` = 1 
							GROUP BY
								d.id, time_format
							) m 
						GROUP BY
							m.time_format
						]]>
			      </foreach>
				) t 
			GROUP BY
				t.time_format
		</if>
		
	</select>
	
	<select id="getDataEnergyCustomReport" resultType="Map" >
			SELECT
				s.id,
				s.id AS id_site,
				s.`name`,
				DATE_FORMAT( sdr.time, '%m' ) AS month,
				DATE_FORMAT( sdr.time, '%Y' ) AS year,
				<choose>
					<when test="data_intervals == 4">
						DATE_FORMAT( sdr.time, '%m/%d/%Y' )
					</when>
					<when test="data_intervals == 6">
						DATE_FORMAT( sdr.time , "%m/%Y" )
					</when>
					<when test="data_intervals == 7">
						DATE_FORMAT( sdr.time , "%Y" )
					</when>
					<otherwise>
						DATE_FORMAT( sdr.time , "%m/%Y" )
					</otherwise>
				</choose>
				AS categories_time,
				DATE_FORMAT( sdr.time, '%m/%d/%Y' ) AS time_full,
				DATE_FORMAT( sdr.time, '%Y-%m-%d' ) AS time_format,
				
				IF( (SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0))) > 0, (ROUND(SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)), 1)), ROUND(SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)), 1) ) AS actual,
				IFNULL(SUM(IF(d.id_device_type = 3, sdr.ActualGeneration, 0)), 0.001) AS meterEnergy,
				IFNULL(SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0)), 0.001) AS inverterEnergy
				
			FROM
				${table_data_report} sdr 
				LEFT JOIN device d ON d.id = sdr.id_device
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
				
			WHERE
				s.`status` = 1
				AND d.`status` = 1
				AND s.is_delete = 0
				AND d.is_delete = 0
				AND s.id = #{id_site}
				AND (sdr.time BETWEEN #{date_from} AND #{date_to})
				
			GROUP BY 
				s.id,
				<choose>
					<when test="data_intervals == 4">
						DATE_FORMAT( sdr.time , "%Y-%m-%d")
					</when>
					<when test="data_intervals == 6">
						DATE_FORMAT( sdr.time , "%Y-%m")
					</when>
					<when test="data_intervals == 7">
						DATE_FORMAT( sdr.time , "%Y")
					</when>
					<otherwise>
						DATE_FORMAT( sdr.time , "%Y-%m")
					</otherwise>
				</choose>
	</select>
	
	
	<select id="getDataIrradiance" resultType="Map" >
		<if test="data_intervals == 1">
			SELECT
				t.time,
				t.time_format,
				IFNULL(ROUND(SUM( t.irradiance)), 0.001)  AS `irradiance`,
				
				t.time_full,
				t.categories_time,
				t.hour_time
				
			FROM
				(
					<foreach collection="groupDevices" item="item" index="index" separator="union all">
					<![CDATA[
						SELECT
							m.time,
							m.time_format,
							m.time_full,
							IFNULL(SUM(m.nvm_irradiance), NULL) AS irradiance,
							m.categories_time,
							m.hour_time
							
						FROM
							(
							SELECT
								dv.time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 300)*300), '%Y-%m-%d %H:%i') AS time_format,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 300)*300), '%m/%d/%Y %H:%i') AS time_full,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 300)*300), '%m/%d/%Y %H:%i') AS categories_time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 300)*300), '%H:00') AS hour_time,
								IFNULL(AVG(dv.nvm_irradiance), 0) AS nvm_irradiance 
							FROM
								${item.datatablename} dv
								LEFT JOIN device d ON d.id = dv.id_device
								LEFT JOIN site s ON s.id = d.id_site 
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
							WHERE
								s.id = #{item.id_site}
								AND d.id_device_type IN(4,6)
								AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
								AND s.`status` = 1 
								AND d.`status` = 1 
							GROUP BY
								d.id, time_format
							) m 
						GROUP BY
							m.time_format
						]]>
			      </foreach>
				) t 
			GROUP BY
				t.time_format
		</if>
		<if test="data_intervals == 2">
			SELECT
				t.time,
				t.time_format,
				IFNULL(ROUND(SUM( t.irradiance)), 0.001)  AS `irradiance`,
				t.time_full,
				t.categories_time,
				t.hour_time
				
			FROM
				(
					<foreach collection="groupDevices" item="item" index="index" separator="union all">
					<![CDATA[
						SELECT
							m.time,
							m.time_format,
							m.time_full,
							IFNULL(SUM(m.nvm_irradiance), NULL) AS irradiance,
							m.categories_time,
							m.hour_time
							
						FROM
							(
							SELECT
								dv.time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 900)*900), '%Y-%m-%d %H:%i') AS time_format,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 900)*900), '%m/%d/%Y %H:%i') AS time_full,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 900)*900), '%m/%d/%Y %H:%i') AS categories_time,
								FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, '+00:00', t.`offset` )) DIV 900)*900), '%H:00') AS hour_time,
								IFNULL(AVG(dv.nvm_irradiance), 0) AS nvm_irradiance 
							FROM
								${item.datatablename} dv
								LEFT JOIN device d ON d.id = dv.id_device
								LEFT JOIN site s ON s.id = d.id_site 
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
							WHERE
								s.id = #{item.id_site}
								AND d.id_device_type IN(4,6)
								AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
								AND s.`status` = 1 
								AND d.`status` = 1 
							GROUP BY
								d.id, time_format
							) m 
						GROUP BY
							m.time_format
						]]>
			      </foreach>
				) t 
			GROUP BY
				t.time_format
		</if>
		<if test="data_intervals == 3">
			SELECT
				t.time,
				t.time_format,
				IFNULL(ROUND(SUM( t.irradiance)), 0.001)  AS `irradiance`,
				t.time_full,
				t.categories_time,
				t.hour_time
				
			FROM
				(
					<foreach collection="groupDevices" item="item" index="index" separator="union all">
					<![CDATA[
						SELECT
							m.time,
							m.time_format,
							m.time_full,
							IFNULL(SUM(m.nvm_irradiance), NULL) AS irradiance,
							m.categories_time,
							m.hour_time
							
						FROM
							(
							SELECT
								dv.time,
								DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:%i' ) AS time_format,
								DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d/%Y %H:00' ) AS time_full,
								DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d/%Y %H:00' ) AS categories_time,
								DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%H:00' ) AS hour_time,
								IFNULL(AVG(dv.nvm_irradiance), 0) AS nvm_irradiance 
							FROM
								${item.datatablename} dv
								LEFT JOIN device d ON d.id = dv.id_device
								LEFT JOIN site s ON s.id = d.id_site 
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
							WHERE
								s.id = #{item.id_site}
								AND d.id_device_type IN(4,6)
								AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
								AND s.`status` = 1 
								AND d.`status` = 1 
							GROUP BY
								d.id, time_format
							) m 
						GROUP BY
							m.time_format
						]]>
			      </foreach>
				) t 
			GROUP BY
				t.time_format
		</if>
	</select>
	
	<select id="getListDeviceTypeIrradiance" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			d.datatablename,
			d.id_site
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
		WHERE
			dt.id IN(4,6)
			AND d.id_site = #{id_site}
			AND d.`status` = 1 
			AND d.is_delete = 0
	</select>
	
	
	<select id="getExpectationsRow" resultType="com.nwm.api.entities.EnergyExpectationsEntity">
		SELECT
			* 
		FROM
			energy_expectations ee 
		WHERE
			ee.id_site = #{id_site}
			AND `year` = DATE_FORMAT(#{start_date},"%Y")
  	</select>
	
	
	<insert id="insertReportSiteMap">
		INSERT INTO `report_site_map`(
			id_report,
			id_site
		)VALUES
			<foreach item="item" collection="dataSite" separator=",">
				(#{id}, #{item.id})
			</foreach>
	</insert>
	
	
	
	<delete id = "deleteReportSiteMap" parameterType = "com.nwm.api.entities.ReportsEntity">
		DELETE FROM `report_site_map`
		WHERE id_report = #{id};
	</delete>
  	
	
</mapper>
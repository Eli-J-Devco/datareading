<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="CronJobAlert">
	<resultMap id="CronJobAlertMap"
		type="com.nwm.api.entities.DeviceEntity">
		<result property="id" column="id" />
		<result property="id_site" column="id_site" />
		<result property="id_vendor" column="id_vendor" />
		<result property="serial_number" column="serial_number" />
		<result property="modbusdevicenumber" column="modbusdevicenumber" />
		<result property="devicename" column="devicename" />
		<result property="devicetype" column="devicetype" />
		<result property="deviceclass" column="deviceclass" />
		<result property="configuration" column="configuration" />
		<result property="configurationchangetime" column="configurationchangetime" />
		<result property="configurationchecksum" column="configurationchecksum" />
		<result property="datatablename" column="datatablename" />
		<result property="id_customer" column="id_customer" />
		<result property="id_device_type" column="id_device_type" />
		<result property="active" column="active" />
		<result property="id_device_group" column="id_device_group" />
		<result property="keyword" column="keyword" />
		
		
	</resultMap>
	
	<select id="getDeviceDatalogger" resultMap="CronJobAlertMap" parameterType="Integer">
		SELECT
			* 
		FROM
			device d 
		WHERE
			d.`status` = 1 
			AND d.id_site = #{id_site}
			AND d.id_device_group = 19 
			LIMIT 1
	</select>
	
	<select id="checkSiteFTPNoDatalogger" parameterType="Integer" resultType="int">
		SELECT
			s.datalogger_type 
		FROM
			site s
		WHERE
			s.`status` = 1 AND s.is_delete = 0
			AND s.id = #{id_site}
			LIMIT 1
	</select>
	
	<select id="getListMeterAndInverterBySite" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			dg.code_prefix,
			s.start_date_time,
			s.end_date_time,
			t.`offset` AS timezone_offset,
			t.`value` AS timezone_value,
			d.id_device_group,
			d.last_updated,
			e.id AS id_error,
			e.error_code
		FROM
			device AS d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN error e ON e.id_device_group = dg.id AND e.error_code = 1000
		WHERE
			d.`status` = 1 AND d.is_delete = 0
			AND s.`status` = 1 AND d.id_device_type IN (1, 3) AND d.disable_alert = 1 AND s.id = #{id_site}
			GROUP BY d.id
	</select>
	
	
	
	<select id="getListWeatherStation" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			dg.code_prefix,
			s.start_date_time,
			s.end_date_time,
			t.`offset` AS timezone_offset,
			t.`value` AS timezone_value,
			d.id_device_group,
			d.last_updated,
			e.id AS id_error,
			e.error_code
		FROM
			device AS d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN error e ON e.id_device_group = dg.id AND e.error_code = 1001
		WHERE
			d.`status` = 1 AND d.is_delete = 0
			AND s.`status` = 1 AND d.id_device_type IN (4) AND d.disable_alert = 1 AND s.id = #{id_site}
			GROUP BY d.id
	</select>
	
	
	
	<select id="getListDeviceCheckNoCom" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			dg.code_prefix,
			s.start_date_time,
			s.end_date_time,
			t.`offset` AS timezone_offset,
			t.`value` AS timezone_value,
			d.id_device_group,
			d.last_updated,
			e.id AS id_error,
			e.error_code
		FROM
			device AS d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN error e ON e.id_device_group = dg.id AND e.error_code = 1001
		WHERE
			d.`status` = 1 AND d.is_delete = 0
			AND s.`status` = 1 AND d.id_device_type IN (1, 3) AND d.disable_alert = 1 AND s.id = #{id_site}
			GROUP BY d.id
	</select>
	
	
	<select id="getListSiteCheckNoCom" resultType="com.nwm.api.entities.SiteEntity" >
		SELECT
			s.id,
			s.`name`,
			s.id_time_zone,
			t.`value` AS time_zone_value,
			s.start_date_time,
			s.end_date_time,
			s.ac_capacity,
			s.dc_capacity
		FROM
			site s
			LEFT JOIN time_zone t ON t.id = s.id_time_zone 
		WHERE
			s.`status` = 1
			AND s.`is_delete` = 0
			<!-- AND s.datalogger_type = 0 -->
			<if test="id_site != null and id_site != 0">
				AND s.id = #{id_site}
			</if>
			GROUP BY s.id
	</select>
	
	
	<select id="getRowItemAlert" resultType="com.nwm.api.entities.BatchJobTableEntity">
    	SELECT
    	u.id,
    	u.id_device,
    	u.id_error
		FROM `alert` as u
		WHERE u.id_device = #{id} AND u.id_error = #{id_error} AND u.`status` = 1 AND u.is_delete = 0
			LIMIT 1;
  	</select>
	
	
	<update id="updateCloseAlert">
		UPDATE `alert`
		SET
			status = 0,
			end_date = #{end_date}
		WHERE
			`id` = #{id} AND `id_device` = #{id_device}
	</update>
	
	
	<select id="checkAlertlExist" parameterType="com.nwm.api.entities.AlertEntity" resultType="int">
    	SELECT
    	COUNT(u.id) as totalRecord
		FROM `alert` as u
		LEFT JOIN error e ON e.id = u.id_error
		WHERE u.id_device = #{id_device} 
		AND u.id_error = #{id_error} 
		AND u.`status` = 1
		AND u.is_delete = 0
		AND e.is_delete = 0 
		AND e.`status` = 1;
  	</select>
  	
  	
  	<insert id="insertAlert" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `alert_queue`(
			`id_device`,
			`id_error`,
			`start_date`,
			`end_date`,
			`asset`,
			`capacity`
		)VALUES(
			#{id_device},
			#{id_error},
			#{start_date},
			#{end_date},
			#{asset},
			#{capacity}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	
	<select id="getLastRowItemCheckNoProduction" resultType="com.nwm.api.entities.BatchJobTableEntity">
    	SELECT 
			t.time,
			t.id_device,
			t.error,
			t.start_date_time,
			t.end_date_time,
			t.id,
			IF( SUM(t.nvmActivePower) = 0.01, 0.001,  SUM(t.nvmActivePower) ) AS nvmActivePower,
			COUNT( IF( (t.nvmActivePower = 0.001 || t.nvmActivePower IS NULL || t.nvmActivePower <![CDATA[<=]]> 0) <![CDATA[&&]]> t.nvmActiveEnergy > 0 , 1, NULL)) AS count_item
		FROM (
			SELECT
					`time`,
					id_device,
					error,
					s.start_date_time,
					s.end_date_time,
					d.id,
					u.nvmActivePower,
					u.nvmActiveEnergy
				FROM
					${datatablename} u
					LEFT JOIN device d ON d.id = u.id_device
					LEFT JOIN site s ON s.id = d.id_site
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					
				WHERE u.id_device = #{id} AND DATE_FORMAT(CONVERT_TZ( u.time, '+00:00', t.`offset` ), "%Y-%m-%d %H:%i:%s") <![CDATA[<=]]> DATE_FORMAT( #{current_time}, "%Y-%m-%d 18:00:00")
				ORDER BY
					u.`time` DESC 
					LIMIT 10
		)t
  	</select>
  	
  	
  	<select id="getLastRowItemNoCommWeather" resultType="com.nwm.api.entities.BatchJobTableEntity">
    	SELECT 
			t.time,
			t.id_device,
			t.error,
			t.start_date_time,
			t.end_date_time,
			t.id,
			COUNT( IF( (t.nvm_irradiance = 0.001 || t.nvm_irradiance = 0 || t.nvm_irradiance = NULL) <![CDATA[&&]]> (t.nvm_temperature = 0.001 || t.nvm_temperature = 0 || t.nvm_temperature = NULL), 1, NULL)) AS count_item
		FROM (
			SELECT
					`time`,
					id_device,
					error,
					s.start_date_time,
					s.end_date_time,
					d.id,
					u.nvm_irradiance,
					u.nvm_temperature
				FROM
					${datatablename} u
					LEFT JOIN device d ON d.id = u.id_device
					LEFT JOIN site s ON s.id = d.id_site
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					
				WHERE u.id_device = #{id} AND DATE_FORMAT(CONVERT_TZ( u.time, '+00:00', t.`offset` ), "%Y-%m-%d %H:%i:%s") <![CDATA[<=]]> DATE_FORMAT( #{current_time}, "%Y-%m-%d 18:00:00")
				ORDER BY
					u.`time` DESC 
					LIMIT 10
		)t
  	</select>
  	
  	
  	<select id="getDataloggerItem" resultType="com.nwm.api.entities.BatchJobTableEntity">
		SELECT
			* 
		FROM
			${datatablename} m
			LEFT JOIN device d ON d.id = m.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			m.id_device = #{id_device}
			AND DATE_FORMAT(CONVERT_TZ( m.time, '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i:%s') <![CDATA[>=]]> DATE_FORMAT(CONVERT_TZ( DATE_ADD( NOW() ,INTERVAL -120 MINUTE) , '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i:%s')
			LIMIT 1;
			
  	</select>
  	
  	
  	<select id="getAlertDetail" resultType="com.nwm.api.entities.AlertEntity">
    	SELECT
    	u.*
		FROM `alert` as u
		WHERE u.id_device = #{id_device} AND u.id_error = #{id_error} AND u.`status` = 1 AND u.is_delete = 0
			LIMIT 1;
  	</select>
  	
  	<select id="getLastRowItemCheckNoCommunication" resultType="com.nwm.api.entities.BatchJobTableEntity">
			
    	SELECT 
			t.time,
			t.id,
			t.devicename,
			t.id_device,
			t.nvmActivePower,
			t.nvmActiveEnergy,
			COUNT( IF(t.nvmActivePower = 0.001 , 1, NULL)) AS count_item,
			COUNT( IF(t.count_is_comm = 1 , 1, NULL)) AS count_is_comm
		FROM (
			SELECT 
			    	u.`time`, 
		    		u.`id_device`, 
		    		u.`error`,
		    		IFNULL(u.nvmActivePower, 0.001) AS nvmActivePower,
		    		u.nvmActiveEnergy,
		    		d.devicename,
		    		d.id,
		    		IF((u.nvmActivePower = 0 <![CDATA[&&]]> u.nvmActiveEnergy = 0) || (u.nvmActivePower IS NULL <![CDATA[&&]]> u.nvmActiveEnergy IS NULL) , 1, NULL) AS count_is_comm
		 FROM ${datatablename} u
		
				LEFT JOIN device d ON u.id_device = d.id
				LEFT JOIN site s ON d.id_site = s.id
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
				WHERE u.id_device = #{id_device}
				AND DATE_FORMAT( u.time , '%Y-%m-%d %H:%i:%s') <![CDATA[>=]]> DATE_FORMAT( DATE_ADD( NOW() ,INTERVAL -5 HOUR) , '%Y-%m-%d %H:%i:%s')
				<!-- AND DATE_FORMAT( u.time , '%Y-%m-%d %H:%i:%s') <![CDATA[<=]]> convert_tz( #{current_time},  t.`offset`, '+00:00') -->
				ORDER BY u.time DESC LIMIT 10
		)t
  	</select>
  	
	
	<select id="getListAllDevice" resultType="com.nwm.api.entities.DeviceEntity">
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			dg.code_prefix,
			s.start_date_time,
			s.end_date_time,
			t.`offset` AS timezone_offset,
			t.`value` AS timezone_value,
			d.id_device_group,
			d.id_device_type,
			d.job_tablename
		FROM
			device AS d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.`status` = 1 AND d.is_delete = 0
			AND s.`status` = 1 AND d.id_device_type IN (1, 3, 4, 6) AND s.`status` = 1 AND d.disable_alert = 1
			<if test="id_site != null and id_site != 0">
				AND s.id = #{id_site}
			</if>
	</select>
	
	<select id="getLastRowItem" resultType="com.nwm.api.entities.BatchJobTableEntity">
    	SELECT
    		`time`, 
    		u.error,
    		id_device, 
    		d.devicename,
    		CONVERT_TZ( u.time, '+00:00', t.`offset` ) AS time_format
		FROM ${datatablename} u
		LEFT JOIN device d ON d.id = u.id_device
		LEFT JOIN site s ON s.id = d.id_site
		LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE u.id_device = #{id_device}
		ORDER BY u.`time` DESC LIMIT 1;
  	</select>
  	
  	<select id="getListErrorByType" resultType="com.nwm.api.entities.ErrorEntity" >
		SELECT
			e.*
		FROM
			error e 
			LEFT JOIN alert a ON a.id_error = e.id
		WHERE
			e.id_error_type = 6
			AND e.id_device_group = #{id_device_group}
			AND e.`status` = 1
			AND a.id_device = #{id_device} 
			AND a.`status` = 1
	</select>
	
	<update id="UpdateErrorMultiRow">
	    UPDATE `alert` SET `status` = 0, `end_date` = #{end_date} 
	    WHERE `id_error` = #{id_error} AND `id_device` = #{id_device}
	</update>
	
	<update id="updateLastValueDevice">
		UPDATE `device`
		SET
			`last_value` = #{last_value}
		WHERE
			`id` = #{id}
	</update>
	
	<select id="getListSiteSentMailAlert" resultType="com.nwm.api.entities.SiteEntity" >
		SELECT
			s.*,
			SHA1(s.id) AS hash_id
		FROM
			site AS s
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN site_mail_map smm ON smm.id_site = s.id
		WHERE
			s.`status` = 1 AND s.is_delete = 0 AND smm.cf_email_subscribers IS NOT NULL
			AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			<if test="id_site != null and id_site != 0">
				AND s.id = #{id_site}
			</if>
			GROUP BY s.id
	</select>
	
	<select id="getListAlertOpenBySite" resultType="Map" >
		SELECT
			a.id,
			a.id_device,
			a.open_send_mail,
			a.close_send_mail,
			d.devicename,
			e.message,
			e.error_code,
			IF(a.`status` = 0, 'Closed', 'Opened') AS `status`,
			IF(a.start_date IS NULL , "-", DATE_FORMAT( CONVERT_TZ( a.start_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS start_date,
			IF(a.end_date IS NULL , "-", DATE_FORMAT( CONVERT_TZ( a.end_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS end_date
		FROM
			alert a
			LEFT JOIN error e ON e.id = a.id_error
			LEFT JOIN device d ON d.id = a.id_device 
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.`status` = 1 
			AND d.id_site  = #{id}
			AND a.open_send_mail = 0
			AND a.`status` = 1
			AND e.nw = 1
			<if test="errorLevel != null and !errorLevel.isEmpty()">
				AND e.id_error_level IN (
					SELECT id_error_level FROM error_level_site_map m WHERE m.id_site = #{id} GROUP BY m.id_error_level
				)
			</if>
			ORDER BY a.`status` DESC
	</select>
	
	<select id="getListAlertOpenBySiteToClients" resultType="Map" >
		SELECT
			a.id,
			a.id_device,
			a.open_send_mail_client,
			a.close_send_mail_client,
			d.devicename,
			e.message,
			e.error_code,
			IF(a.`status` = 0, 'Closed', 'Opened') AS `status`,
			IF(a.start_date IS NULL , "-", DATE_FORMAT( CONVERT_TZ( a.start_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS start_date,
			IF(a.end_date IS NULL , "-", DATE_FORMAT( CONVERT_TZ( a.end_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS end_date
		FROM
			alert a
			LEFT JOIN error e ON e.id = a.id_error
			LEFT JOIN device d ON d.id = a.id_device 
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.`status` = 1 
			AND d.id_site  = #{id}
			AND a.open_send_mail_client = 0
			AND a.`status` = 1
			AND e.client = 1
			<if test="errorLevel != null and !errorLevel.isEmpty()">
				AND e.id_error_level IN (
					SELECT id_error_level FROM error_level_site_map m WHERE m.id_site = #{id} GROUP BY m.id_error_level
				)
			</if>
			ORDER BY a.`status` DESC
	</select>
	
	
	<select id="getListErrorLevel" resultType="Map" >
		SELECT id_error_level
		FROM error_level_site_map m 
		WHERE m.id_site = #{id} GROUP BY m.id_error_level
	</select>
	
	<update id="updateOpenSentAlert">
		UPDATE `alert`
		SET
			open_send_mail = 1
		WHERE
			`id` = #{id} AND `id_device` = #{id_device}
	</update>
	
	<update id="updateOpenSentAlertToClients">
		UPDATE `alert`
		SET
			open_send_mail_client = 1
		WHERE
			`id` = #{id} AND `id_device` = #{id_device}
	</update>
	
	<select id="getListAlertCloseBySite" resultType="Map" >
		SELECT
			a.id,
			a.id_device,
			a.open_send_mail,
			a.close_send_mail,
			d.devicename,
			e.message,
			e.error_code,
			IF(a.`status` = 0, 'Closed', 'Opened') AS `status`,
			IF(a.start_date IS NULL , "-", DATE_FORMAT( CONVERT_TZ( a.start_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS start_date,
			IF(a.end_date IS NULL , "-", DATE_FORMAT( CONVERT_TZ( a.end_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS end_date
		FROM
			alert a
			LEFT JOIN error e ON e.id = a.id_error
			LEFT JOIN device d ON d.id = a.id_device 
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.`status` = 1 
			AND d.id_site  = #{id}
			AND a.close_send_mail = 0 AND a.`status` = 0
			AND e.nw = 1
			ORDER BY a.`status` DESC
	</select>
	
	<select id="getListAlertCloseBySiteToClients" resultType="Map" >
		SELECT
			a.id,
			a.id_device,
			a.open_send_mail_client,
			a.close_send_mail_client,
			d.devicename,
			e.message,
			e.error_code,
			IF(a.`status` = 0, 'Closed', 'Opened') AS `status`,
			IF(a.start_date IS NULL , "-", DATE_FORMAT( CONVERT_TZ( a.start_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS start_date,
			IF(a.end_date IS NULL , "-", DATE_FORMAT( CONVERT_TZ( a.end_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS end_date
		FROM
			alert a
			LEFT JOIN error e ON e.id = a.id_error
			LEFT JOIN device d ON d.id = a.id_device 
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.`status` = 1 
			AND d.id_site  = #{id}
			AND a.close_send_mail_client = 0 AND a.`status` = 0
			AND e.client = 1
			ORDER BY a.`status` DESC
	</select>
	
	<update id="updateCloseSentAlert">
		UPDATE `alert`
		SET
			close_send_mail = 1, open_send_mail = 1
		WHERE
			`id` = #{id} AND `id_device` = #{id_device}
	</update>
	
	<update id="updateCloseSentAlertToClients">
		UPDATE `alert`
		SET
			close_send_mail_client = 1, open_send_mail_client = 1
		WHERE
			`id` = #{id} AND `id_device` = #{id_device}
	</update>
	
	<select id="getLastRowItemResetLastValue" resultType="com.nwm.api.entities.BatchJobTableEntity">
    	SELECT
    		d.id,
    		`time`, 
    		id_device, 
    		d.devicename,
    		<if test="id_device_type == 1 or id_device_type == 3">
				u.nvmActivePower AS nvmActivePower,
			</if>
			
			<if test="id_device_type == 4 or id_device_type == 6 ">
				u.nvm_irradiance AS nvmActivePower,
			</if>
			
    		CONVERT_TZ( u.time, '+00:00', t.`offset` ) AS time_format
    		
    		
		FROM ${datatablename} u
		LEFT JOIN device d ON d.id = u.id_device
		LEFT JOIN site s ON s.id = d.id_site
		LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE u.id_device = #{id_device}
		AND DATE_FORMAT( u.time, '%Y-%m-%d %H:%i:%s') <![CDATA[>=]]> DATE_FORMAT( DATE_ADD( #{current_time} ,INTERVAL -60 MINUTE), '%Y-%m-%d %H:%i:%s')
		ORDER BY u.`time` DESC LIMIT 1;
  	</select>
	
	<select id="getEmployeeHidingSite" resultType="Map" >
  		SELECT
			e.email
		FROM 
			site_employee_map sem
			LEFT JOIN employee e ON e.id = sem.id_employee
		WHERE
			sem.id_site = #{id}
			AND sem.is_hiding = 1
	</select>
	
	<select id="getAllSites" resultType="com.nwm.api.entities.SiteEntity" >
  		SELECT 
  			s.id,
			s.table_data_report,
			s.table_data_virtual,
			IF(v.enable_virtual_device > 0 , 1, 0) AS enable_virtual_device
		FROM
			site s
			LEFT JOIN (
				SELECT
					COUNT(*) AS enable_virtual_device,
					d.id_site
				FROM
					device d 
				WHERE
					d.`status` = 1 
					AND d.is_delete = 0 
					AND d.hidden = 0
					AND d.virtual_device_type IS NOT NULL
					AND d.virtual_device_type != ''
				GROUP BY
					d.id_site
			) v ON v.id_site = s.id
		WHERE
			s.`status` = 1
			AND s.is_delete = 0
	</select>
	
	<select id="getMonthGenerationBySite" parameterType="com.nwm.api.entities.SiteEntity" resultType="com.nwm.api.entities.EEREntity">
		SELECT
			d.id_site AS id,
			IF( (SUM(IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, sdr.ActualGeneration, 0))) > 0, (SUM(IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, sdr.ActualGeneration, 0))), (SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0))) ) AS ActualGeneration,
			IF(ex.expected_energy > 0 OR expected_energy IS NOT NULL,
			ex.expected_energy,
			CASE
				 WHEN MONTH(t.current) = '01' then ROUND(ee.jan * t.currentContainEnergyDate)
				 WHEN MONTH(t.current) = '02' then ROUND(ee.feb * t.currentContainEnergyDate)
				 WHEN MONTH(t.current) = '03' then ROUND(ee.mar * t.currentContainEnergyDate)
				 WHEN MONTH(t.current) = '04' then ROUND(ee.apr * t.currentContainEnergyDate)
				 WHEN MONTH(t.current) = '05' then ROUND(ee.may * t.currentContainEnergyDate)
				 WHEN MONTH(t.current) = '06' then ROUND(ee.jun * t.currentContainEnergyDate)
				 WHEN MONTH(t.current) = '07' then ROUND(ee.jul * t.currentContainEnergyDate)
				 WHEN MONTH(t.current) = '08' then ROUND(ee.aug * t.currentContainEnergyDate)
				 WHEN MONTH(t.current) = '09' then ROUND(ee.sep * t.currentContainEnergyDate)
				 WHEN MONTH(t.current) = '10' then ROUND(ee.oct * t.currentContainEnergyDate)
				 WHEN MONTH(t.current) = '11' then ROUND(ee.nov * t.currentContainEnergyDate)
				 WHEN MONTH(t.current) = '12' then ROUND(ee.dec * t.currentContainEnergyDate)
			END) AS EstimatedGeneration
		FROM
			${table_data_report} sdr
			JOIN device d ON d.id = sdr.id_device
			JOIN (
				SELECT
					s.id,
					<choose>
						<when test="filterBy == 'this_month'">DAY(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value)) / EXTRACT(DAY FROM LAST_DAY(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value)))</when>
						<otherwise>1</otherwise>
					</choose> AS currentContainEnergyDate,
					<choose>
						<when test="filterBy == 'this_month'">CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value)</when>
						<when test="filterBy == 'last_month'">DATE_SUB(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value), INTERVAL 1 MONTH)</when>
						<otherwise>CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value)</otherwise>
					</choose> AS current
				FROM
					site s
					JOIN time_zone t ON t.id = s.id_time_zone
				WHERE
					s.id = #{id}
			) t ON t.id = d.id_site
			JOIN energy_expectations ee ON ee.id_site = d.id_site AND ee.year = YEAR(t.current)
			LEFT JOIN (
				SELECT
					sdr.time,
					s.id,
					AVG(IF(
						d.id_device_type = 4,
						<include refid="com.nwm.common.expectedPowerByPvModel">
							<property name="irradiance" value="sdr.POAAVG" />
							<property name="temperature" value="sdr.TCellAVG" />
							<property name="panelTemperature" value="sdr.TCellAVG" />
							<property name="power" value="sdr.PowerTodayAVG" />
						</include>,
						NULL
					)) * 24 * COUNT(*) AS expected_energy
				FROM
					${table_data_report} sdr
					LEFT JOIN device d ON d.id = sdr.id_device
					LEFT JOIN site s ON s.id = d.id_site
					JOIN (
						SELECT
							s.id,
							<choose>
								<when test="filterBy == 'this_month'">DAY(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value)) / EXTRACT(DAY FROM LAST_DAY(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value)))</when>
								<otherwise>1</otherwise>
							</choose> AS currentContainEnergyDate,
							<choose>
								<when test="filterBy == 'this_month'">CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value)</when>
								<when test="filterBy == 'last_month'">DATE_SUB(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value), INTERVAL 1 MONTH)</when>
								<otherwise>CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value)</otherwise>
							</choose> AS current
						FROM
							site s
							JOIN time_zone t ON t.id = s.id_time_zone
						WHERE
							s.id = #{id}
					) t ON t.id = d.id_site
				WHERE
					s.`status` = 1
					AND d.`status` = 1
					AND d.id_site = #{id}
					AND s.is_delete = 0
					AND d.is_delete = 0
					AND d.id_device_type = 4
					AND sdr.time BETWEEN DATE_FORMAT(DATE_SUB(DATE_ADD(LAST_DAY(t.current), INTERVAL 1 DAY), INTERVAL 1 MONTH), '%Y-%m-%d 00:00:00') AND DATE_FORMAT(LAST_DAY(t.current), '%Y-%m-%d 23:59:59')
			) ex ON ex.id = d.id_site
		WHERE
			d.`status` = 1
			AND d.is_delete = 0
			AND sdr.time BETWEEN DATE_FORMAT(DATE_SUB(DATE_ADD(LAST_DAY(t.current), INTERVAL 1 DAY), INTERVAL 1 MONTH), '%Y-%m-%d 00:00:00') AND DATE_FORMAT(LAST_DAY(t.current), '%Y-%m-%d 23:59:59')
		GROUP BY
			d.id_site
	</select>
	
	<select id="getVirtualMonthGenerationBySite" parameterType="com.nwm.api.entities.SiteEntity" resultType="com.nwm.api.entities.EEREntity">
		SELECT
			d.id_site AS id,
			SUM(vir.nvmActiveEnergy) AS ActualGeneration,
			CASE t.data_send_time
				WHEN 1 THEN SUM(vir.expected_power_ac / 12)
				WHEN 2 THEN SUM(vir.expected_power_ac / 04)
				ELSE 		SUM(vir.expected_power_ac / 60)
			END AS EstimatedGeneration
		FROM
			${table_data_virtual} vir
			JOIN device d ON d.id = vir.id_device
			JOIN (
				SELECT
					s.id,
					t.value,
					s.data_send_time,
					<choose>
						<when test="filterBy == 'this_month'">CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value)</when>
						<when test="filterBy == 'last_month'">DATE_SUB(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value), INTERVAL 1 MONTH)</when>
						<otherwise>CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value)</otherwise>
					</choose> AS current
				FROM
					site s
					JOIN time_zone t ON t.id = s.id_time_zone
				WHERE
					s.id = #{id}
			) t ON t.id = d.id_site
		WHERE
			d.id_site = #{id}
			AND d.id_device_type = 12
			AND d.`status` = 1
			AND d.is_delete = 0
			AND (d.meter_type = 3 OR d.meter_type IS NULL)
			AND vir.time BETWEEN CONVERT_TZ(DATE_FORMAT(DATE_SUB(DATE_ADD(LAST_DAY(t.current), INTERVAL 1 DAY), INTERVAL 1 MONTH), '%Y-%m-%d 00:00:00'), t.value, 'UTC') AND CONVERT_TZ(DATE_FORMAT(LAST_DAY(t.current), '%Y-%m-%d 23:59:59'), t.value, 'UTC')
		GROUP BY
			d.id_site
	</select>
	
	<update id="updateEERAllSites">
		UPDATE site s,
			(
				<foreach collection="data" item="item" separator="UNION ALL">
					SELECT
						#{item.id} AS id,
						#{item.ActualGeneration} AS ActualGeneration,
						#{item.EstimatedGeneration} AS EstimatedGeneration
				</foreach>
			) t
		SET
			s.${column} = IF(t.ActualGeneration IS NULL OR t.EstimatedGeneration IS NULL OR t.EstimatedGeneration <![CDATA[<=]]> 0, NULL, ROUND(t.ActualGeneration / t.EstimatedGeneration * 100 , 1))
		WHERE
			s.id = t.id
	</update>
	
	<select id="getListSiteLowProduction" resultType="com.nwm.api.entities.SiteEntity" >
		SELECT
			s.id,
			s.`name`,
			s.id_time_zone,
			t.`value` AS time_zone_value,
			s.start_date_time,
			s.end_date_time,
			COUNT(IF(d.id_device_type = 1, 1, NULL)) AS totalInverter,
			COUNT(IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, 1, NULL)) AS totalMeter,
			COUNT(IF(d.id_device_type = 4, 1, NULL)) AS totalWeatherStation,
			GROUP_CONCAT(DISTINCT CASE WHEN d.id_device_type IN(1,3) THEN d.id_device_group ELSE NULL END SEPARATOR ',') AS listGroup
		FROM
			site s
			LEFT JOIN time_zone t ON t.id = s.id_time_zone 
			LEFT JOIN device d ON d.id_site = s.id
		WHERE
			s.`status` = 1
			AND s.is_delete = 0
			AND d.`status` = 1 
			AND d.is_delete = 0
			<if test="id != null and id != 0">
				AND s.id = #{id}
			</if>
			GROUP BY s.id
			
	</select>
	
	
	<select id="getListDeviceByGroup" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			IFNULL( d.energy_three_days, 0 ) AS power_now,
			e.error_code,
			e.id AS id_error,
			DATE_FORMAT(d.last_updated, '%Y-%m-%d %H:%i:%s') AS last_updated
			
		FROM
			device d
			LEFT JOIN (
				SELECT
					* 
				FROM
					error e
				WHERE
					e.error_code = 1002 
					AND e.`status` = 1 
					AND e.is_delete = 0 
					AND e.id_device_group = #{id_device_group}
					LIMIT 1
			) e ON e.id_device_group = d.id_device_group 
		WHERE
			d.`status` = 1 
			AND d.is_delete = 0 
			AND d.id_device_group = #{id_device_group}
			AND d.id_site = #{id_site}
			AND d.last_value IS NOT NULL
			AND d.last_value > 0
		GROUP BY
			d.id 
		ORDER BY
			d.last_value DESC
	</select>
	
	
	<select id="getListAlertByGroupDevice" resultType="com.nwm.api.entities.AlertEntity" >
		SELECT
			a.id
		FROM
			device d
			LEFT JOIN alert a ON a.id_device = d.id
			LEFT JOIN error e ON e.id = a.id_error 
		WHERE
			d.`status` = 1 
			AND d.is_delete = 0 
			AND e.`status` = 1 
			AND e.is_delete = 0 
			AND d.id_site = #{id_site}
			AND e.error_code = 1002 
			AND d.id_device_group = #{id_device_group}
	</select>
	
	<update id="closeMultiAlert">
		UPDATE `alert`
		SET
			status = 0,
			end_date = #{end_date}
		WHERE
			<if test="alerts != null and !alerts.isEmpty()">
				`id` IN  (
					<foreach item="item" index="index" collection="alerts" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
	</update>
	
	<select id="getListEmployeeOnSiteMailMap" resultType="Map" >
  		SELECT
			smm.id_site,
			smm.id_employee,
			IF(smm.cf_email_subscribers IS NULL OR smm.cf_email_subscribers = "", "", smm.cf_email_subscribers) AS cf_email_subscribers,
			IF(smm.alert_mail_cc IS NULL OR smm.alert_mail_cc = "", "", smm.alert_mail_cc) AS alert_mail_cc,
			IF(smm.alert_mail_bcc IS NULL OR smm.alert_mail_bcc = "", "", smm.alert_mail_bcc) AS alert_mail_bcc
		FROM 
			site_mail_map smm
		WHERE
			smm.id_site = #{id}
	</select>
	
	<select id="checkNwInternal"  resultType="int" >
  		SELECT
			COUNT(m.id_role) as nw_interal
		FROM (SELECT 
			em.id_role,
			e.id,
			e.email
		FROM employee e
		LEFT JOIN employee_role_map em ON em.id_employee = e.id
		WHERE e.email = #{email}
		) m
		WHERE
			(IF ( 1 IN (m.id_role) OR 12 IN (m.id_role) OR 15 IN (m.id_role), 1 , 0))
  	</select>
</mapper>
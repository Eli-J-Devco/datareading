<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BuiltInReport">
	
	<select id="getSiteReportMappingList" resultType="com.nwm.api.entities.ViewReportEntity" parameterType="com.nwm.api.entities.ViewReportEntity" >
		SELECT
			r.id,
			s.id AS id_site,
			s.`name` AS site_name,
			s.table_data_report,
			s.table_data_virtual,
			DATE_FORMAT(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', tz.value), '%m/%d/%Y') AS report_date,
			s.ac_capacity,
			s.dc_capacity,
			r.subscribers,
			r.data_intervals,
			r.type_report,
			r.type_option,
			r.cadence_range,
			#{start_date} AS start_date,
			#{end_date} AS end_date,
			IF(v.enable_virtual_device > 0 , 1, 0) AS enable_virtual_device,
			COUNT(IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, 1, NULL)) > 0 AS have_meter,
			COUNT(IF(d.id_device_type = 1, 1, NULL)) > 0 AS have_inverter
		FROM
			report r
			LEFT JOIN site_employee_map sem ON sem.id_employee = r.id_employee
			LEFT JOIN site s ON s.id = sem.id_site
			LEFT JOIN time_zone tz ON tz.id = s.id_time_zone
			LEFT JOIN (
				SELECT
					COUNT(*) AS enable_virtual_device,
					d.id_site
				FROM
					device d 
				WHERE
					d.`status` = 1 
					AND d.is_delete = 0 
					AND d.hidden = 0
					AND d.virtual_device_type IS NOT NULL
					AND d.virtual_device_type != ''
					<foreach collection="ids" item="item" open="AND d.id_site IN (" close=")" separator=",">#{item}</foreach>
				GROUP BY
					d.id_site
			) v ON v.id_site = s.id
			LEFT JOIN device d ON d.id_site = s.id
		WHERE
			r.id = #{id}
			<foreach collection="ids" item="item" open="AND s.id IN (" close=")" separator=",">#{item}</foreach>
			AND (CONVERT_TZ(NOW(), 'UTC', tz.value) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
		GROUP BY
			s.id
	</select>
	
	<select id="getListSiteInReport" resultType="com.nwm.api.entities.SiteEntity">
		SELECT
			s.* 
		FROM
			site s 
			LEFT JOIN site_employee_map sem ON sem.id_site = s.id
		WHERE
			sem.id_employee = 1
			AND s.`status` = 1 
			AND s.is_delete = 0
			<if test="id_sites != null">
				AND s.id IN  (
					<foreach item="item" index="index" collection="ids" separator=",">
						#{item}
					</foreach>
				)
			</if>
	</select>
	
	<select id="getListDeviceTypeInverter" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site,
			d.id_device_type
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
		WHERE
			dt.id = 1
			AND d.id_site = #{id_site}
			AND d.`status` = 1 
			AND d.is_delete = 0
	</select>
	
	<select id="getReportEnergyExpectations" resultType="Map" >
		SELECT
			* 
		FROM
			energy_expectations ee 
		WHERE
			ee.id_site = #{id_site}
	</select>
	
	
	
	<select id="getDataAnnualTrendReport" resultType="com.nwm.api.entities.WeeklyDateEntity" >
		SELECT
			DATE_FORMAT(group_by_day, '%b-%y') AS categories_time,
			CAST(SUM(ActualGeneration) AS DECIMAL) AS ActualGeneration,
			CAST(AVG(ExpectedPower) * 24 * DAYOFMONTH(MAX(group_by_day)) AS DECIMAL) AS ExpectedGeneration,
			ROUND(AVG(POA), 2) AS POA,
			CAST(ModeledGeneration AS DECIMAL) AS ModeledGeneration,
			ROUND(SUM(ActualGeneration) / (AVG(ExpectedPower) * 24 * DAYOFMONTH(MAX(group_by_day))) * 100, 1) AS ExpectedGenerationIndex,
			ROUND(SUM(ActualGeneration) / ModeledGeneration * 100, 1) AS ModeledGenerationIndex
		FROM (
			SELECT
				DATE_FORMAT(CONVERT_TZ(vir.time, 'UTC', t.`value`), '%Y-%m-%d') AS group_by_day,
				SUM(vir.nvmActiveEnergy) AS ActualGeneration,
				AVG(vir.expected_power_ac) AS ExpectedPower,
				AVG(vir.nvm_irradiance) AS POA,
				CASE
					 WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 01 THEN ee.jan
					 WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 02 THEN ee.feb
					 WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 03 THEN ee.mar
					 WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 04 THEN ee.apr
					 WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 05 THEN ee.may
					 WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 06 THEN ee.jun
					 WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 07 THEN ee.jul
					 WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 08 THEN ee.aug
					 WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 09 THEN ee.sep
					 WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 10 THEN ee.oct
					 WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 11 THEN ee.nov
					 WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 12 THEN ee.dec
				END AS ModeledGeneration
			FROM
				${table_data_virtual} vir
				LEFT JOIN device d ON d.id = vir.id_device
				LEFT JOIN site s ON s.id = d.id_site 
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
				LEFT JOIN energy_expectations ee ON ee.id_site = s.id AND ee.year = DATE_FORMAT(CONVERT_TZ(vir.time, 'UTC', t.`value`), '%Y')
			WHERE
				d.`status` = 1 
				AND d.is_delete = 0 
				AND s.`status` = 1 
				AND d.is_delete = 0 
				AND s.id = #{id_site}
				AND (CONVERT_TZ( vir.time, 'UTC', t.`value` ) BETWEEN #{start_date} AND #{end_date})
				AND (CONVERT_TZ(NOW(), 'UTC', t.value) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			GROUP BY
				group_by_day
		) t
		GROUP BY
			categories_time
	</select>
	
	
	<select id="getListDeviceTypeMeter" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site,
			d.id_device_type
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
		WHERE
			dt.id IN (3,7,9)
			AND d.is_excluded_meter = 0
			AND d.id_site = #{id_site}
			AND d.`status` = 1 
			AND d.is_delete = 0
	</select>
	
	
	
	<select id="getMonthlyTrendBuitInReport" resultType="com.nwm.api.entities.MonthlyProductionTrendReportEntity" >
			SELECT
				t.categories_time,
				CAST(SUM(t.monthlyProduction) AS DECIMAL) AS monthlyProduction
			FROM
				(
					<foreach collection="groupDevices" item="item" index="index" separator="union all">
						SELECT
							<choose>
								<when test="data_intervals == 2">
									FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.`value` )) DIV 900)*900), '%m/%d/%Y %H:%i:00') AS categories_time,
								</when>
								<when test="data_intervals == 6">
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.`value` ), '%b-%y' ) AS categories_time,
								</when>
								<otherwise>
									DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.`value` ), '%b-%y' ) AS categories_time,
								</otherwise>
							</choose>
							SUM(dv.MeasuredProduction) AS monthlyProduction 
						FROM
							${item.datatablename} dv
							LEFT JOIN device d ON d.id = dv.id_device
							LEFT JOIN site s ON s.id = d.id_site 
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
						WHERE
							s.id = #{item.id_site}
							AND d.id_device_type = #{item.id_device_type}
							AND (CONVERT_TZ( dv.time, 'UTC', t.`value` ) BETWEEN #{start_date} AND #{end_date})
							AND s.`status` = 1 
							AND d.`status` = 1 
							AND (CONVERT_TZ(NOW(), 'UTC', t.value) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
						GROUP BY
							d.id,
							categories_time
			      </foreach>
				) t 
			GROUP BY
				t.categories_time
	</select>
	
	<select id="getDataWeeklyTrendReport" resultType="com.nwm.api.entities.WeeklyDateEntity" >
		SELECT
			categories_time,
			CAST(ActualGeneration AS DECIMAL) AS ActualGeneration,
			CAST(ExpectedGeneration AS DECIMAL) AS ExpectedGeneration,
			ROUND(POA, 2) AS POA,
			CAST(ModeledGeneration AS DECIMAL) AS ModeledGeneration,
			ROUND(ActualGeneration / ExpectedGeneration * 100, 1) AS ExpectedGenerationIndex,
			ROUND(ActualGeneration / ModeledGeneration  * 100, 1) AS ModeledGenerationIndex
		FROM (
			SELECT
				DATE_FORMAT(CONVERT_TZ(vir.time, 'UTC', t.`value`), '%m/%d/%Y' ) AS categories_time,
				SUM(vir.nvmActiveEnergy) AS ActualGeneration,
				AVG(vir.expected_power_ac) * 24 AS ExpectedGeneration,
				AVG(vir.nvm_irradiance) AS POA,
				CASE
					WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 01 THEN (ee.jan / DAY(LAST_DAY(CONVERT_TZ(vir.time, 'UTC', t.`value`))))
					WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 02 THEN (ee.feb / DAY(LAST_DAY(CONVERT_TZ(vir.time, 'UTC', t.`value`))))
					WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 03 THEN (ee.mar / DAY(LAST_DAY(CONVERT_TZ(vir.time, 'UTC', t.`value`))))
					WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 04 THEN (ee.apr / DAY(LAST_DAY(CONVERT_TZ(vir.time, 'UTC', t.`value`))))
					WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 05 THEN (ee.may / DAY(LAST_DAY(CONVERT_TZ(vir.time, 'UTC', t.`value`))))
					WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 06 THEN (ee.jun / DAY(LAST_DAY(CONVERT_TZ(vir.time, 'UTC', t.`value`))))
					WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 07 THEN (ee.jul / DAY(LAST_DAY(CONVERT_TZ(vir.time, 'UTC', t.`value`))))
					WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 08 THEN (ee.aug / DAY(LAST_DAY(CONVERT_TZ(vir.time, 'UTC', t.`value`))))
					WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 09 THEN (ee.sep / DAY(LAST_DAY(CONVERT_TZ(vir.time, 'UTC', t.`value`))))
					WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 10 THEN (ee.oct / DAY(LAST_DAY(CONVERT_TZ(vir.time, 'UTC', t.`value`))))
					WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 11 THEN (ee.nov / DAY(LAST_DAY(CONVERT_TZ(vir.time, 'UTC', t.`value`))))
					WHEN MONTH(CONVERT_TZ( vir.time, 'UTC', t.`value` )) = 12 THEN (ee.dec / DAY(LAST_DAY(CONVERT_TZ(vir.time, 'UTC', t.`value`))))
				END AS ModeledGeneration
			FROM
				${table_data_virtual} vir
				LEFT JOIN device d ON d.id = vir.id_device
				LEFT JOIN site s ON s.id = d.id_site 
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
				LEFT JOIN energy_expectations ee ON ee.id_site = s.id AND ee.year = DATE_FORMAT(CONVERT_TZ(vir.time, 'UTC', t.`value`), '%Y')
			WHERE
				d.`status` = 1 
				AND d.is_delete = 0 
				AND s.`status` = 1 
				AND d.is_delete = 0 
				AND s.id = #{id_site}
				AND (CONVERT_TZ( vir.time, 'UTC', t.`value` ) BETWEEN #{start_date} AND #{end_date})
				AND (CONVERT_TZ(NOW(), 'UTC', t.value) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			GROUP BY
				categories_time
		) t
	</select>
	
</mapper>
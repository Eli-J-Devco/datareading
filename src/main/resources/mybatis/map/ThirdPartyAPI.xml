<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ThirdPartyAPI">
	
	<select id="getListDevices" resultType="Map">
		SELECT
			d.id,
			d.devicename AS name,
			d.datatablename,
			d.id_device_type,
			dt.name AS device_type_name,
			s.id AS id_site,
			s.name AS site_name,
			t.value AS timezone_value,
			JSON_ARRAYAGG(JSON_OBJECT(
				'name', IF(dp.is_active_power = 1, 'AC_Power', TRIM(dp.slug)),
				'unit', IFNULL(dp.unit, ""),
				'aggregate_function', dp.value_chart_tool
			)) AS parameters
		FROM
			device d
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON d.id_site = s.id
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN device_group dg ON d.id_device_group = dg.id
			LEFT JOIN device_parameters dp ON dp.id_device_group = dg.id
		WHERE
			s.third_party_key = #{key}
			AND s.status = 1 
			AND s.is_delete = 0
			AND d.status = 1
			AND d.is_delete = 0
			AND dp.status = 1
			AND dp.is_delete = 0
			AND dp.is_filter = 1
			AND IF(d.id_device_type IN (1,3), dp.name LIKE 'AC_Power' OR dp.name LIKE 'Energy', dp.name != '')
			<if test="id_device_type != null">
				<foreach collection="id_device_type" item="item" open="AND d.id_device_type IN (" close=")" separator=",">
					#{item}
				</foreach>
			</if>
			<if test="id_device != null">
				AND d.id IN (${id_device})
			</if>
			AND (CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
		GROUP BY
			d.id
	</select>
	
	<select id="getEnergyGeneration" resultType="com.nwm.api.entities.SiteEnergyThirdPartyAPIEntity">
		SELECT
			site_name,
			device_type_name AS type,
			JSON_ARRAYAGG(JSON_OBJECT(
				'time', time,
				'value', energy
			)) AS energyJSON
		FROM (
			SELECT
				id_site,
				site_name,
				id_device_type,
				device_type_name,
				time,
				ROUND(SUM(energy), 1) AS energy
			FROM (
				<foreach collection="devicesList" item="item" separator="UNION ALL">
					SELECT
						#{item.id_site} AS id_site,
						#{item.site_name} AS site_name,
						#{item.id_device_type} AS id_device_type,
						#{item.device_type_name} AS device_type_name,
						MeasuredProduction AS energy,
						FROM_UNIXTIME(( UNIX_TIMESTAMP(CONVERT_TZ(time, 'UTC', #{item.timezone_value})) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time
					FROM
						${item.datatablename}
					WHERE
						id_device = ${item.id}
						AND (
							CASE
								WHEN #{startDateTime} IS NULL OR #{endDateTime} IS NULL THEN
									time BETWEEN CONVERT_TZ(DATE_FORMAT(CONVERT_TZ(DATE_SUB(UTC_TIMESTAMP(), INTERVAL 2 DAY), 'UTC', #{item.timezone_value}), '%Y-%m-%d 00:00:00'), #{item.timezone_value}, 'UTC') AND CONVERT_TZ(DATE_FORMAT(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', #{item.timezone_value}), '%Y-%m-%d 23:59:59'), #{item.timezone_value}, 'UTC')
								ELSE 
									time BETWEEN CONVERT_TZ(DATE_FORMAT(#{startDateTime}, '%Y-%m-%d 00:00:00'), #{item.timezone_value}, 'UTC') AND CONVERT_TZ(DATE_FORMAT(#{endDateTime}, '%Y-%m-%d 23:59:59'), #{item.timezone_value}, 'UTC')
							END
						)
				</foreach>
			) d
			GROUP BY
				id_site,
				id_device_type,
				time
		) d
		GROUP BY
			id_site,
			id_device_type
	</select>
	
	<select id="getDeviceData" resultType="Map">
		SELECT	
			<foreach collection="data_types" item="item">
				<choose>
					<when test="item.name == 'SolarInsolation'">
						<choose>
							<when test="interval == '15min' or interval == 'hour' or interval == 'day'">
								IFNULL(AVG(t.${item.name}), 'N/A')
							</when>
							<when test="interval == 'month' or interval == 'year'">
								IFNULL(SUM(t.${item.name}), 'N/A')
							</when>				
						</choose>
					</when>
					
					<otherwise>
						IFNULL(${item.aggregate_function}(t.${item.name}), 'N/A')
					</otherwise>
				</choose>  AS ${item.name},
				
			</foreach>
			
			<choose>
				<when test="interval == 'month'">
					DATE_FORMAT(time_group_by, '%m/%Y')
				</when>

				<when test="interval == 'year'">
					DATE_FORMAT(time_group_by, '%Y')
				</when>
				<otherwise>
					categories_time
				</otherwise>

			</choose> AS time
					
		FROM (
			SELECT
				<foreach collection="data_types" item="item">
					<choose>
						<when test="item.name == 'MeasuredProduction'">
							IF (DATEDIFF(#{endDateTime}, #{startDateTime}) <![CDATA[<=]]> 5, AVG(dv.nvmActivePower), SUM(dv.MeasuredProduction))
						</when>
						<when test="item.name == 'Energy'">
							SUM(dv.MeasuredProduction)
						</when>					
						<when test="item.name == 'AC_Power'">
							${item.aggregate_function}(dv.nvmActivePower)
						</when>
						<when test="item.name == 'SolarInsolation'">
								AVG( dv.nvm_irradiance )
									<choose>
										<when test="interval == '15min'">
											/ 4
										</when>
										<when test="interval == 'hour'">
											* 1
										</when>
										
										<!-- [kWh/m^2/day] = [Wh/m^2/day]/1000 -->
										<when test="interval == 'day'">
											* 24 / 1000
										</when>
										
										<!-- 1 month [kWh/m^2/day_average] = SUM([kWh/m^2/day] in that month)/(number of days in that month that contain data) -->
										<when test="interval == 'month'">
											* 24 / 1000 /
											IF(
												DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%b. %Y' ) = DATE_FORMAT( #{endDateTime} , '%b. %Y' ),
												EXTRACT(DAY FROM LAST_DAY(CONVERT_TZ( dv.time, 'UTC', t.value ))) - DATEDIFF(LAST_DAY(CONVERT_TZ( dv.time, 'UTC', t.value )), #{endDateTime}),
												EXTRACT(DAY FROM LAST_DAY(CONVERT_TZ( dv.time, 'UTC', t.value )))
											)
										</when>
										<!-- 1 year [kWh/m^2/day_average] = SUM([kWh/m^2/day_average] for each month)/(number of months that contain data) -->
										<when test="interval == 'year'">
											* 24 / 1000 /
											IF(
												DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%b. %Y' ) = DATE_FORMAT( #{endDateTime} , '%b. %Y' ),
												EXTRACT(DAY FROM LAST_DAY(CONVERT_TZ( dv.time, 'UTC', t.value ))) - DATEDIFF(LAST_DAY(CONVERT_TZ( dv.time, 'UTC', t.value )), #{endDateTime}),
												EXTRACT(DAY FROM LAST_DAY(CONVERT_TZ( dv.time, 'UTC', t.value )))
											) /
											CASE
												WHEN DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y' ) = DATE_FORMAT( #{startDateTime}, '%Y' ) THEN 13 - Month(IFNULL(si.time_has_data,  #{startDateTime}))
												WHEN DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y' ) = DATE_FORMAT( #{endDateTime}, '%Y' ) THEN Month(#{endDateTime})
												ELSE 12
											END
										</when>
										
									</choose>
							</when>
						
						
						<otherwise>
						${item.aggregate_function}(dv.${item.name}) 
						</otherwise>
					</choose> AS ${item.name},
					
				</foreach>
				<choose>
					<when test="interval == '15min'">
						FROM_UNIXTIME((UNIX_TIMESTAMP(CONVERT_TZ(dv.time, 'UTC', t.value)) DIV 900) * 900, '%Y-%m-%d %H:%i') AS time_group_by,
						FROM_UNIXTIME((UNIX_TIMESTAMP(CONVERT_TZ(dv.time, 'UTC', t.value)) DIV 900) * 900, '%Y-%m-%d %H:%i') AS categories_time
					</when>
					<when test="interval == 'hour'">
						DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC', t.value), '%Y-%m-%d %H:00') AS time_group_by,
						DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC', t.value), '%Y-%m-%d %H:00') AS categories_time
					</when>
					<when test="interval == 'day'">
						DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC', t.value), '%Y-%m-%d') AS time_group_by,
						DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC', t.value), '%Y-%m-%d') AS categories_time
					</when>
					<when test="interval == 'month'">
						DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC', t.value), '%Y-%m-%d') AS time_group_by,
						DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC', t.value), '%m/%Y') AS categories_time
					</when>
					<when test="interval == 'year'">
						DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC', t.value), '%Y-%m-%d') AS time_group_by,
						DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC', t.value), '%Y') AS categories_time
					</when>
					<otherwise>
						FROM_UNIXTIME((UNIX_TIMESTAMP(CONVERT_TZ(dv.time, 'UTC', t.value)) DIV 900) * 900, '%Y-%m-%d %H:%i') AS time_group_by,
						FROM_UNIXTIME((UNIX_TIMESTAMP(CONVERT_TZ(dv.time, 'UTC', t.value)) DIV 900) * 900, '%Y-%m-%d %H:%i') AS categories_time,
					</otherwise>
				</choose> 
			FROM
				${datatablename} dv 
				LEFT JOIN device d ON d.id = dv.id_device
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
				<if test="interval == 'year' or interval == 'month'">
				LEFT JOIN (
					SELECT 
						DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.value ), '%Y-%m-%d') AS time_has_data,
						dv.id_device
					FROM
						${datatablename} dv 
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE
						dv.id_device = #{id}
						AND (CAST(CONVERT_TZ( dv.time, 'UTC', t.value ) AS DATETIME) BETWEEN CAST(#{startDateTime} AS DATETIME) AND CAST(#{endDateTime} AS DATETIME))
						ORDER BY dv.time ASC LIMIT 1
				) si ON si.id_device = dv.id_device
				</if>
			WHERE
				dv.time BETWEEN CONVERT_TZ(DATE_FORMAT(#{startDateTime}, '%Y-%m-%d 00:00:00'), t.value, 'UTC') AND CONVERT_TZ(DATE_FORMAT(#{endDateTime}, '%Y-%m-%d 23:59:59'), t.value, 'UTC')
			GROUP BY
				time_group_by
		) t
		GROUP BY time
	</select>

</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Site">
	<resultMap id="SiteMap"
		type="com.nwm.api.entities.SiteEntity">
		<result property="id" column="id" />
		<result property="id_company" column="id_company" />
		<result property="id_country" column="id_country" />
		<result property="id_time_zone" column="id_time_zone" />
		<result property="name" column="name" />
		<result property="street" column="street" />
		<result property="lat" column="lat" />
		<result property="lng" column="lng" />
		<result property="view_lat" column="view_lat" />
		<result property="view_lng" column="view_lng" />
		
		<result property="built_since" column="built_since" />
		<result property="old_data" column="old_data" />
		<result property="number" column="number" />
		<result property="postal_code" column="postal_code" />
		<result property="city" column="city" />
		<result property="state" column="state" />
		<result property="commissioning" column="commissioning" />
		<result property="emergency_contact" column="emergency_contact" />
		<result property="ac_capacity" column="ac_capacity" />
		<result property="dc_capacity" column="dc_capacity" />
		<result property="status" column="status" />
		<result property="is_delete" column="is_delete" />
		<result property="created_date" column="created_date" />
		<result property="created_by" column="created_by" />
		<result property="updated_date" column="updated_date" />
		<result property="updated_by" column="updated_by" />
		<result property="address_short" column="address_short" />
		
		<result property="watts_3ph_total" column="watts_3ph_total" />
		<result property="sensor1_data" column="sensor1_data" />
		<result property="w_hours_total" column="w_hours_total" />
		<result property="today_kwh" column="today_kwh" />
		<result property="total_energy_this_month" column="total_energy_this_month" />
		<result property="eer_this_month" column="eer_this_month" />
		<result property="eer_last_month" column="eer_last_month" />
		<result property="w_hours_received" column="w_hours_received" />
		<result property="total_error" column="total_error" />
		<result property="alert_list" column="alert_list" />
		<result property="gallery" column="gallery" />
		<result property="street_ws" column="street_ws" />
		<result property="localization_format" column="localization_format" />
		<result property="format_sql_short" column="format_sql_short" />
		<result property="format_sql_long" column="format_sql_long" />
		<result property="format_sql_string_short" column="format_sql_string_short" />
		<result property="format_sql_string_long" column="format_sql_string_long" />
		<result property="format_sql_string_mdy" column="format_sql_string_mdy" />
		<result property="offset_from" column="offset_from" />
		<result property="current_time" column="current_time" />
		<result property="data_send_time" column="data_send_time" />
		<result property="start_date_time" column="start_date_time" />
		<result property="end_date_time" column="end_date_time" />
		<result property="config_sunset_sunrise" column="config_sunset_sunrise" />
		<result property="note" column="note" />
		<result property="is_rec_report" column="is_rec_report" />
		<result property="datalogger_ip" column="datalogger_ip" />
		<result property="about" column="about" />
		<result property="kiosk_view" column="kiosk_view" />
		<result property="site_logo" column="site_logo" />
		<result property="id_site_group" column="id_site_group" />
		<result property="timezone_datalogger" column="timezone_datalogger" />
		<result property="unit_type_temp" column="unit_type_temp" />
		<result property="unit_wind_speed" column="unit_wind_speed" />
		
		<result property="ftp_server" column="ftp_server" />
		<result property="ftp_user" column="ftp_user" />
		<result property="ftp_pass" column="ftp_pass" />
		<result property="ftp_port" column="ftp_port" />
		<result property="ftp_folder" column="ftp_folder" />
		<result property="datalogger_type" column="datalogger_type" />
		<result property="is_supper_admin" column="is_supper_admin" />
		<result property="virtual_status" column="virtual_status" />
		<result property="enable_alert" column="enable_alert" />
		
		
		
		
		
		
	</resultMap>
	
	<select id="getSummaryTotalAlert" resultType="com.nwm.api.entities.SiteEntity">
		SELECT
			COUNT( a.id ) AS total_error 
		FROM
			site s
			LEFT JOIN device d ON d.id_site = s.id
			LEFT JOIN alert a ON a.id_device = d.id 
			LEFT JOIN error e ON e.id = a.id_error
		WHERE
			s.`status` = 1 
			AND s.is_delete = 0 
			AND a.`status` = 1
			AND a.is_delete = 0
			AND e.`status` = 1
			AND e.`is_delete` = 0
			AND d.`status` = 1
			AND d.is_delete = 0
			<if test="id_sites != null">
				AND s.id IN  (
					<foreach item="item" index="index" collection="id_sites" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			AND s.enable_alert = 1
			
	</select>
	
	
	<select id="getSiteByEmployee" resultType="Map">
		SELECT
			s.id,
			SHA1(s.id) AS hash_id,
			s.`name`,
			s.`name` AS text,
			s.`name` AS label,
			s.id AS value,
			s.is_rec_report,
			s.datalogger_ip,
			em.first_name,
			em.last_name,
			sg.name AS site_group,
			s.id_site_group,
			s.id_site_sub_group,
			s.timezone_datalogger,
			s.unit_type_temp,
			s.unit_wind_speed,
			sg.order_id,
			s.street,
			s.city,
			s.postal_code,
			s.state,
			IF(
				s.expiration IS NOT NULL
				AND CONVERT_TZ(NOW(), '+00:00', tz.offset) > DATE_SUB(s.expiration, INTERVAL 1 MONTH),
				1,
				0
			) AS expired,
			h.is_hiding,
			0 AS is_expand
			
		FROM
			site AS s
			LEFT JOIN site_employee_map sem ON sem.id_site = s.id 
			LEFT JOIN time_zone tz ON tz.id = s.id_time_zone
			LEFT JOIN employee em ON em.id = sem.id_employee
			LEFT JOIN site_group sg ON sg.id = s.id_site_group
			LEFT JOIN (
				SELECT
					id_site,
					MAX(is_hiding) AS is_hiding
				FROM site_employee_map
				GROUP BY id_site
			) h ON h.id_site = s.id
			<if test="(keyword != null and keyword != '' and (sort_column == 'hardware_id' or sort_column == 'device_name' or sort_column == 'serial_number')) or (device_ac_rating != null and device_ac_rating != '' and device_ac_rating_condition != null and device_ac_rating_condition != '') or (ids_inverter_group != null) ">			
				LEFT JOIN device d ON s.id = d.id_site
			</if>
		WHERE
			s.is_delete = 0
			AND sem.is_hiding = 0
			AND s.`status` = 1 
			<if test="is_supper_admin != 1">
				AND sem.id_employee = #{id_employee}
			</if>
			
			
			<if test="keyword != null and keyword != '' and sort_column == 'name'">
				AND s.name LIKE CONCAT("%",#{keyword}, "%")
			</if>
			
			<if test="keyword != null and keyword != '' and sort_column == 'street'">
				AND s.street LIKE CONCAT("%",#{keyword}, "%")
			</if>
			
			<if test="keyword != null and keyword != '' and sort_column == 'city'">
				AND s.city LIKE CONCAT("%",#{keyword}, "%")
			</if>
			
			<if test="keyword != null and keyword != '' and sort_column == 'state'">
				AND s.state LIKE CONCAT("%",#{keyword}, "%")
			</if>
			
			<if test="keyword != null and keyword != '' and sort_column == 'postal_code'">
				AND s.postal_code LIKE CONCAT("%",#{keyword}, "%")
			</if>
			
			<if test="keyword != null and keyword != '' and sort_column == 'site_id'">
				AND s.id = #{keyword}
			</if>
			
			<if test="keyword != null and keyword != '' and sort_column == 'customer_id'">
				AND em.first_name LIKE CONCAT("%",#{keyword}, "%")
			</if>
			
			<if test="keyword != null and keyword != '' and sort_column == 'hardware_id'">
				AND d.id = #{keyword}
			</if>
			
			<if test="keyword != null and keyword != '' and sort_column == 'device_name'">
				AND d.devicename LIKE CONCAT("%",#{keyword}, "%")
			</if>
			
			<if test="keyword != null and keyword != '' and sort_column == 'serial_number'">
				AND d.serial_number LIKE CONCAT("%",#{keyword}, "%")
			</if>
			
			<if test="ac_capacity != null and ac_capacity != '' and ac_capacity_condition == 'more'">	
					AND s.ac_capacity <![CDATA[>]]> #{ac_capacity}
			</if>		
			<if test="ac_capacity != null and ac_capacity != '' and ac_capacity_condition == 'equal'">	
					AND s.ac_capacity <![CDATA[=]]> #{ac_capacity}
			</if>	
			<if test="ac_capacity != null and ac_capacity != '' and ac_capacity_condition == 'less'">	
					AND s.ac_capacity <![CDATA[<]]> #{ac_capacity}
			</if>
			
			
			<if test="dc_capacity != null and dc_capacity != '' and dc_capacity_condition == 'more'">	
					AND s.dc_capacity <![CDATA[>]]> #{dc_capacity}
			</if>		
			<if test="dc_capacity != null and dc_capacity != '' and dc_capacity_condition == 'equal'">	
					AND s.dc_capacity <![CDATA[=]]> #{dc_capacity}
			</if>	
			<if test="dc_capacity != null and dc_capacity != '' and dc_capacity_condition == 'less'">	
					AND s.dc_capacity <![CDATA[<]]> #{dc_capacity}
			</if>
			
			<if test="device_ac_rating != null and device_ac_rating != '' and device_ac_rating_condition == 'more'">	
					AND d.rating_ac_power <![CDATA[>]]> #{device_ac_rating}
			</if>		
			<if test="device_ac_rating != null and device_ac_rating != '' and device_ac_rating_condition == 'equal'">	
					AND d.rating_ac_power <![CDATA[=]]> #{device_ac_rating}
			</if>	
			<if test="device_ac_rating != null and device_ac_rating != '' and device_ac_rating_condition == 'less'">	
					AND d.rating_ac_power <![CDATA[<]]> #{device_ac_rating}
			</if>
			
			<if test="data_send_time != null and data_send_time != ''">	
					AND s.data_send_time = #{data_send_time}
			</if>
			
			<if test="built_since != null and built_since != '' and built_since_condition == 'more'">  
          			AND DATE_FORMAT(s.built_since, '%Y-%m-%d') <![CDATA[>]]> #{built_since}
	      	</if>   
	    	<if test="built_since != null and built_since != '' and built_since_condition == 'equal'">  
	          		AND DATE_FORMAT(s.built_since, '%Y-%m-%d') <![CDATA[=]]> #{built_since}
	     	</if> 
	      	<if test="built_since != null and built_since != '' and built_since_condition == 'less'"> 
	          		AND DATE_FORMAT(s.built_since, '%Y-%m-%d') <![CDATA[<]]> #{built_since}
	      	</if>
		      
	      	<if test="commissioning != null and commissioning != '' and commissioning_condition == 'more'"> 
	          		AND DATE_FORMAT(s.commissioning, '%Y-%m-%d') <![CDATA[>]]> #{commissioning}
	      	</if>   
	      	<if test="commissioning != null and commissioning != '' and commissioning_condition == 'equal'">  
	          		AND DATE_FORMAT(s.commissioning, '%Y-%m-%d') <![CDATA[=]]> #{commissioning}
	      	</if> 
	      	<if test="commissioning != null and commissioning != '' and commissioning_condition == 'less'"> 
	          		AND DATE_FORMAT(s.commissioning, '%Y-%m-%d') <![CDATA[<]]> #{commissioning}
	      	</if>
	      	
	      	<if test="ids_inverter_group != null">
				AND d.id_device_group IN  (
					<foreach item="item" index="index" collection="ids_inverter_group" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
	      	
	      	
			
		GROUP BY s.id	
		ORDER BY s.`name`, s.id_company ASC;
			 
	</select>
	
	<select id="getSiteByEmployeeREC" resultType="Map">
		SELECT
			s.id,
			s.`name`,
			s.`name` AS text,
			s.`name` AS label,
			s.id AS value,
			s.is_rec_report,
			s.datalogger_ip,
			s.table_data_report
			
		FROM
			site AS s
			LEFT JOIN site_employee_map sem ON sem.id_site = s.id 
		WHERE
			s.is_delete = 0 
			AND s.`status` = 1 
			AND sem.id_employee = #{id_employee} AND s.is_rec_report = 1
			 
	</select>
	
	<select id="getSiteGroupByEmployee" resultType="Map" >
		SELECT
			sg.id,
			sg.`name`,
			sg.order_id,
			SHA2(sg.id, 256) AS hash_id,
			0 AS is_expand
		FROM
			site s
			LEFT JOIN site_employee_map sem ON sem.id_site = s.id
			LEFT JOIN site_group sg ON sg.id = s.id_site_group
		WHERE
			s.is_delete = 0
			AND s.status = 1
			AND sg.is_delete = 0
			AND sg.status = 1
			AND sem.id_employee = #{id_employee}
		GROUP BY sg.id
	    ORDER BY sg.order_id ASC
		 	 
	</select>
	
	<select id="getSubGroupByGroup" resultType="Map" >
		SELECT
			ssg.id,
			SHA2(ssg.id, 512) AS hash_id,
			ssg.id_site_group,
			ssg.`name`,
			ssg.order_id,
			1 AS is_expand
		FROM
			site_sub_group ssg
			LEFT JOIN site_group sg ON sg.id = ssg.id_site_group
			LEFT JOIN (
				SELECT
					COUNT(*) AS totalSites,
					id_site_sub_group
				FROM site
				GROUP BY id_site_sub_group
			) t ON t.id_site_sub_group = ssg.id
		WHERE 
			ssg.status = 1
			AND ssg.is_delete = 0
			AND sg.status = 1
			AND sg.is_delete = 0
			AND ssg.id_site_group = #{id}
			AND t.totalSites > 0
	    ORDER BY ssg.id ASC
	</select>
	
	<select id="getListEmployeeManageSite" resultType="Map" >
		SELECT
			s.id,
			SHA1(s.id) AS hash_id,
			scm.id_employee,
			s.`name`,
			DATE_FORMAT(s.built_since,'%m/%d/%Y') AS built_since,
			DATE_FORMAT(s.commissioning,'%m/%d/%Y') AS commissioning,
			s.street,
			IF(s.lat = 0 OR s.postal_code IS NOT NULL OR s.state IS NOT NULL, NULL, s.lat) AS lat,
			IF(s.lng = 0 OR s.postal_code IS NOT NULL OR s.state IS NOT NULL, NULL, s.lng) AS lng,
			IF(s.lat = 0, NULL, s.lat) AS view_lat,
			IF(s.lng = 0, NULL, s.lng) AS view_lng,
			s.number,
			s.postal_code,
			s.city,
			s.state,
			s.`status`,
			s.is_delete,
			s.ac_capacity,
			s.dc_capacity,
			s.data_send_time,
			s.start_date_time,
			s.end_date_time,
			s.config_sunset_sunrise,
			s.note,
			CONCAT_WS( ' ', c.first_name,c.last_name) AS customer_name,
			IF(t.is_manage,t.is_manage, 0) AS is_manage,
			s.is_rec_report,
			s.datalogger_ip,
			s.about,
			s.kiosk_view,
			s.site_logo,
			s.id_site_group,
			s.timezone_datalogger,
			s.unit_type_temp,
			s.unit_wind_speed,
			s.ftp_server,
			s.ftp_user,
			s.ftp_pass,
			s.ftp_port,
			s.ftp_folder,
			s.datalogger_type,
			s.enable_alert
		FROM
			site s
			LEFT JOIN site_employee_map scm ON scm.id_site = s.id
			LEFT JOIN employee c ON c.id = scm.id_employee
			LEFT JOIN (
				SELECT si.id, 1 AS is_manage FROM site_employee_map se 
				LEFT JOIN site si ON si.id = se.id_site WHERE se.id_employee = #{id_employee}
			)t ON t.id = s.id
		WHERE s.is_delete = 0 AND s.status = 1 
		<if test="is_supper_admin != 1">
			AND scm.id_employee = #{id_employee}
		</if> 
		
		
		<if test="keyword != null">
			AND s.name LIKE CONCAT("%",#{keyword}, "%")
		</if> 	
		GROUP BY s.id	 
		
	    order by
	        <choose>  
	            <when test="sort_column == 'id'">
	                s.id ${order_by}
	            </when>         
	            <when test="sort_column == 'name'">
	                s.name ${order_by}
	            </when>
	            <when test="sort_column == 'customer_name'">
	                customer_name ${order_by}
	            </when>
	            
	            <otherwise>
			      s.id DESC
			    </otherwise>                                                  
	        </choose>  
		 LIMIT ${limit} OFFSET ${offset};
	</select>
	
	<select id="getManageSiteTotalRecord"  resultType="int" parameterType="com.nwm.api.entities.SiteEntity">
    	SELECT count(*) as totalRecord
		FROM site s  
		LEFT JOIN site_employee_map scm ON scm.id_site = s.id
		WHERE s.is_delete = 0 AND s.status = 1 AND scm.id_employee = #{id_employee}
		<if test="keyword != null">
			AND s.name LIKE CONCAT("%",#{keyword}, "%")
		</if>
  	</select>
  	
  	
  	
  	<select id="checkExitsManageSite"  resultType="int" parameterType="com.nwm.api.entities.SiteEntity">
    	SELECT count(*) as totalRecord
		FROM site_employee_map s  WHERE s.id_employee = #{id_employee} AND s.id_site = #{id_site}
  	</select>
  	
  	
  	<insert id="insertSiteEmployeeMap" useGeneratedKeys="true" keyProperty="id_site">
		INSERT INTO `site_employee_map`(
			id_employee,
			id_site
		)VALUES(
			#{id_employee},
			#{id_site}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	<update id="updateHidingSite">
		UPDATE `site_employee_map` sem
		LEFT JOIN (
			SELECT
				id_employee,
				MIN(id_role) AS id_role
			FROM employee_role_map
			GROUP BY id_employee
		) erm ON erm.id_employee = sem.id_employee
		SET
			`is_hiding` = #{is_hiding}
		WHERE
			sem.`id_site` = #{id}
			AND erm.id_role != 1
	</update>
  	
  	
  	
  	<update id="updateTableVirtualAndReport">
		UPDATE `site` 
		SET
			`table_data_virtual` = #{table_data_virtual},
			`table_data_report` = #{table_data_report}
		WHERE
			`id` = #{id}
	</update>
	
	
	<insert id="createTableReportSite">
		CREATE TABLE IF NOT EXISTS `site${id}_data_report` 
		  (
		  	  `time` datetime NOT NULL,
			  `id_device` int(11) NOT NULL,
			  `InverterUptime` int(2) DEFAULT NULL,
			  `DayTime` int(2) DEFAULT NULL,
			  `InverterUptimeDaytime` double DEFAULT NULL COMMENT 'Inverter Uptime/Daytime',
			  `ActualGeneration` double DEFAULT NULL COMMENT 'Actual Generation',
			  `EstimatedGeneration` double DEFAULT NULL COMMENT 'Estimated Generation',
			  `EstimatedGenerationIndex` double DEFAULT NULL COMMENT 'Estimated Generation Index (%)',
			  `InverterAvailability` double DEFAULT NULL COMMENT 'Inverter Availability',
			  `PowerTodayTotal` double DEFAULT NULL,
			  `PowerTodayAVG` double DEFAULT NULL,
			  `POATotal` double DEFAULT NULL,
			  `POAAVG` double DEFAULT NULL,
			  `TCellAVG` double DEFAULT NULL,
			  PRIMARY KEY (`time`,`id_device`) USING BTREE,
			  KEY `id_device` (`id_device`),
			  CONSTRAINT `fk_report${id}_site_data_report` FOREIGN KEY (`id_device`) REFERENCES `device` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
		  )
		  ENGINE=InnoDB DEFAULT CHARSET=utf8;
	</insert>
	
	
	
	
	
	<insert id="createTableVirtualDeviceSite">
		CREATE TABLE IF NOT EXISTS `model${id}_virtual_meter_or_inverter`
		  (
		  	  `time` datetime NOT NULL,
			  `id_device` int(11) NOT NULL,
			  `nvmActivePower` double DEFAULT NULL,
			  `nvmActiveEnergy` double DEFAULT NULL,
			  `nvm_irradiance` double DEFAULT NULL,
			  `nvm_temperature` double DEFAULT NULL,
			  `expected_power_dc` double DEFAULT NULL,
			  `expected_power_ac` double DEFAULT NULL,
			  `expected_energy` double DEFAULT NULL,
			  `r_irradiance` double DEFAULT NULL,
			  `total_poa` double DEFAULT NULL,
			  `panel_temp` double DEFAULT NULL,
			  `ambient_temp` double DEFAULT NULL,
			  `calculation_poa` double DEFAULT NULL,
			  `calculation_temp` double DEFAULT NULL,
			  `calculation_clipping` double DEFAULT NULL,
			  PRIMARY KEY (`time`,`id_device`) USING BTREE,
			  KEY `id_device` (`id_device`),
			  CONSTRAINT `fk_model_virtual_device${id}` FOREIGN KEY (`id_device`) REFERENCES `device` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
		  )
		  ENGINE=InnoDB DEFAULT CHARSET=utf8;
	</insert>
	
  	
  	
  	
  	<delete id = "deleteSiteEmployeeMap" parameterType = "com.nwm.api.entities.SiteEntity">
		DELETE from `site_employee_map` WHERE id_employee = #{id_employee} AND id_site = #{id_site};
	</delete>
	
	
	<delete id = "deleteSiteEmployeeMapEdit" parameterType = "com.nwm.api.entities.SiteEntity">
		DELETE from `site_employee_map` WHERE id_site = #{id};
	</delete>
  	
  	
  	<insert id="insertSite" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `site`(
			`id_company`,
			`id_country`,
			`id_time_zone`,
			`name`,
			`street`,
			`lat`,
			`lng`,
			`built_since`,
			`old_data`,
			`number`,
			`postal_code`,
			`city`,
			`state`,
			`commissioning`,
			`emergency_contact`,
			`ac_capacity`,
			`dc_capacity`,
			`gallery`,
			`data_send_time`,
			`start_date_time`,
			`end_date_time`,
			`config_sunset_sunrise`,
			`note`,
			`is_rec_report`,
			`datalogger_ip`,
			`about`,
			`kiosk_view`,
			`site_logo`,
			`diagram`,
			`id_site_group`,
			`id_site_sub_group`,
			`timezone_datalogger`,
			`unit_type_temp`,
			`unit_wind_speed`,
			`ftp_server`,
			`ftp_user`,
			`ftp_pass`,
			`ftp_port`,
			`ftp_folder`,
			`datalogger_type`,
			`is_show_each_meter`,
			`expiration`,
			`enable_alert`
		)VALUES(
			#{id_company},
			#{id_country},
			#{id_time_zone},
			#{name},
			#{street},
			#{lat},
			#{lng},
			#{built_since},
			#{old_data},
			#{number},
			#{postal_code},
			#{city},
			#{state},
			#{commissioning},
			#{emergency_contact},
			#{ac_capacity},
			#{dc_capacity},
			#{gallery},
			#{data_send_time},
			#{start_date_time},
			#{end_date_time},
			#{config_sunset_sunrise},
			#{note},
			#{is_rec_report},
			#{datalogger_ip},
			#{about},
			#{kiosk_view},
			#{site_logo},
			#{diagram},
			#{id_site_group},
			#{id_site_sub_group},
			#{timezone_datalogger},
			#{unit_type_temp},
			#{unit_wind_speed},
			#{ftp_server},
			#{ftp_user},
			#{ftp_pass},
			#{ftp_port},
			#{ftp_folder},
			#{datalogger_type},
			#{is_show_each_meter},
			#{expiration},
			#{enable_alert}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	<update id="updateSite">
		UPDATE `site`
		SET
			`id_company` = #{id_company},
			`id_country` = #{id_country},
			`id_time_zone` = #{id_time_zone},
			`name` = #{name},
			`street` = #{street},
			`lat` = #{lat},
			`lng` = #{lng},
			`built_since` = #{built_since},
			`old_data` = #{old_data},
			`number` = #{number},
			`postal_code` = #{postal_code},
			`state` = #{state},
			`city` = #{city},
			`commissioning` = #{commissioning},
			`emergency_contact` = #{emergency_contact},
			`ac_capacity` = #{ac_capacity},
			`dc_capacity` = #{dc_capacity},
			`gallery` = #{gallery},
			`data_send_time` = #{data_send_time},
			`start_date_time` = #{start_date_time},
			`end_date_time` = #{end_date_time},
			`config_sunset_sunrise` = #{config_sunset_sunrise},
			`note` = #{note},
			`is_rec_report` = #{is_rec_report},
			`datalogger_ip` = #{datalogger_ip},
			`about` = #{about},
			`kiosk_view` = #{kiosk_view},
			`site_logo` = #{site_logo},
			`diagram` = #{diagram},
			`id_site_group` = #{id_site_group},
			`id_site_sub_group` = #{id_site_sub_group},
			`timezone_datalogger` = #{timezone_datalogger},
			`unit_type_temp` = #{unit_type_temp},
			`unit_wind_speed` = #{unit_wind_speed},
			`ftp_server` = #{ftp_server},
			`ftp_user` = #{ftp_user},
			`ftp_pass` = #{ftp_pass},
			`ftp_port` = #{ftp_port},
			`ftp_folder` = #{ftp_folder},
			`datalogger_type` = #{datalogger_type},
			`expiration` = #{expiration},
			`is_show_each_meter` = #{is_show_each_meter},
			`enable_alert` = #{enable_alert}
		WHERE
			`id` = #{id}
	</update>
  	
  	<select id="getList" resultType="com.nwm.api.entities.SiteEntity" >
		SELECT
			s.id,
			SHA1(s.id) AS hash_id,
			s.id_company,
			s.`name`,
			DATE_FORMAT(s.built_since,'%m/%d/%Y') AS built_since,
			DATE_FORMAT(s.commissioning,'%m/%d/%Y') AS commissioning,
			DATE_FORMAT(s.expiration,'%m/%d/%Y') AS expiration,
			s.street,
			s.lat,
			s.lng,
			IF(s.lat = 0, NULL, s.lat) AS view_lat,
			IF(s.lng = 0, NULL, s.lng) AS view_lng,
			s.number,
			s.postal_code,
			s.city,
			s.state,
			s.`status`,
			s.is_delete,
			s.ac_capacity,
			s.id_country,
			s.id_time_zone,
			s.dc_capacity,
			CONCAT_WS( ', ', s.number, s.street, s.city, s.state, s.postal_code ) AS address,
			s.site_default,
			s.gallery,
			s.data_send_time,
			s.start_date_time,
			s.end_date_time,
			s.config_sunset_sunrise,
			s.note,
			t.customer_name,
			t.ids_employee,
			s.is_rec_report,
			s.datalogger_ip,
			s.about,
			s.kiosk_view,
			s.site_logo,
			s.id_site_group,
			s.id_site_sub_group,
			s.timezone_datalogger,
			s.unit_type_temp,
			s.unit_wind_speed,
			c.name AS company,
			sg.name AS site_group,
			tz.name AS time_zone,
			IFNULL(DATE_FORMAT(al.modified_date,'%m/%d/%Y %H:%i:%s'), 'N/A') AS last_modified,
			s.ftp_server,
			s.ftp_user,
			s.ftp_pass,
			s.ftp_port,
			s.ftp_folder,
			s.datalogger_type,
			s.diagram,
			h.is_hiding,
			s.is_show_each_meter,
			COUNT(td.id_site) AS virtual_status,
			s.enable_alert
		FROM
			site s
			LEFT JOIN site_employee_map sem ON sem.id_site = s.id
			
			LEFT JOIN (
				SELECT * FROM device d WHERE d.id_device_type = 12 GROUP BY d.id_site
			)td ON td.id_site = s.id
			
			LEFT JOIN (
				SELECT
					id_site,
					MAX(is_hiding) AS is_hiding
				FROM site_employee_map
				GROUP BY id_site
			) h ON h.id_site = s.id
			LEFT JOIN company c ON c.id = s.id_company
			LEFT JOIN site_group sg ON sg.id = s.id_site_group
			LEFT JOIN time_zone tz ON tz.id = s.id_time_zone
			LEFT JOIN (
						SELECT id_site,
						MAX(modified_date) AS modified_date
						FROM auditing_logs
						GROUP BY id_site
						
			) al ON al.id_site = s.id
			LEFT JOIN (
						SELECT id_site, 
							GROUP_CONCAT(CONCAT_WS( ' ', c.first_name,c.last_name) SEPARATOR ', ') AS customer_name,
							c.first_name,
							c.last_name,
							GROUP_CONCAT(c.id SEPARATOR ', ') AS ids_employee
						FROM site_employee_map scm
						LEFT JOIN employee c ON c.id = scm.id_employee
						GROUP BY scm.id_site
					)t ON t.id_site = s.id
					
		WHERE s.is_delete = 0 AND s.`status` = 1 AND sem.id_employee = #{id_employee}
		<if test="keyword != null">
			AND (s.name LIKE CONCAT("%",#{keyword}, "%"))
		</if>
		
		
		GROUP BY s.id 
		
		
		
		 	
		    order by
	        <choose>  
	            <when test="sort_column == 'id'">
	                s.id ${order_by}
	            </when>         
	            <when test="sort_column == 'site_name'">
	                s.name ${order_by}
	            </when>
	            <when test="sort_column == 'customer_name'">
	                t.last_name ${order_by}
	            </when>
	            <when test="sort_column == 'dc_capacity'">
	                dc_capacity ${order_by}
	            </when>
	             <when test="sort_column == 'ac_capacity'">
	                ac_capacity ${order_by}
	            </when>
	            <when test="sort_column == 'built_since'">
	                built_since ${order_by}
	            </when>
	            <when test="sort_column == 'company'">
	                company ${order_by}
	            </when>
	            <when test="sort_column == 'site_group'">
	                site_group ${order_by}
	            </when>
	            <when test="sort_column == 'commissioning'">
	                commissioning ${order_by}
	            </when>
	            <when test="sort_column == 'time_zone'">
	                time_zone ${order_by}
	            </when>
	            <when test="sort_column == 'data_send_time'">
	                s.data_send_time ${order_by}
	            </when>
	            
	            <when test="sort_column == 'status'">
	                status ${order_by}
	            </when>
	            
	            <otherwise>
			      s.`name`, s.id_company ASC
			    </otherwise>                                                  
	        </choose>  
		 	 
		 LIMIT ${limit} OFFSET ${offset};
	</select>
	
  	
	
	<select id="getListCount"  resultType="int" parameterType="com.nwm.api.entities.SiteEntity">
    	SELECT count(*) as totalRow
		FROM site s
		<if test="keyword != null">
			WHERE (s.name LIKE CONCAT("%",#{keyword}, "%"))
		</if> 
  	</select>
  	
  	
  	<update id="updateStatus">
		UPDATE `site`
		SET
			`status` = #{status}
		WHERE
			`id` = #{id}
	</update>
	<update id="deleteSite">
		UPDATE `site`
		SET
			`is_delete` = #{is_delete}
		WHERE
			`id` = #{id}
	</update>
	
	<select id="getAllSiteByEmployee" resultType="Map">
		SELECT
			s.id,
			SHA1(s.id) AS hash_id,
			s.id_company,
			s.id_country,
			s.id_time_zone,
			s.`name`,
			s.street,
			IF(s.lat = 0, NULL, s.lat) AS lat,
			IF(s.lng = 0, NULL, s.lng) AS lng,
			IF(s.lat = 0, NULL, s.lat) AS view_lat,
			IF(s.lng = 0, NULL, s.lng) AS view_lng,
			built_since,
			s.old_data,
			s.number,
			s.postal_code,
			s.city,
			s.state,
			commissioning,
			s.emergency_contact,
			s.ac_capacity,
			s.dc_capacity,
			s.status,
			s.is_delete,
			s.created_date,
			s.created_by,
			s.updated_date,
			s.updated_by,
			s.gallery,
			s.data_send_time,
			s.start_date_time,
			s.end_date_time,
			s.config_sunset_sunrise,
			s.note,
			s.is_rec_report,
			s.datalogger_ip,
			s.about,
			s.kiosk_view,
			s.site_logo,
			s.id_site_group,
			s.timezone_datalogger,
			s.unit_type_temp,
			s.unit_wind_speed,
			s.ftp_server,
			s.ftp_user,
			s.ftp_pass,
			s.ftp_port,
			s.ftp_folder,
			s.datalogger_type,
			s.enable_alert
		FROM
			site AS s
		WHERE
			 s.is_delete = 0 AND s.`status` = 1
			 <if test="id_sites != null">
				AND s.id IN  (
					<foreach item="item" index="index" collection="id_sites" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
	</select>
	
	<select id="getAllSite" resultMap="SiteMap" parameterType="String">
		SELECT
			s.id,
			SHA1(s.id) AS hash_id,
			s.id_company,
			s.id AS value,
			s.id_country,
			s.`name`,
			s.`name` AS label,
			s.street,
			IF(s.lat = 0, NULL, s.lat) AS lat,
			IF(s.lng = 0, NULL, s.lng) AS lng,
			IF(s.lat = 0, NULL, s.lat) AS view_lat,
			IF(s.lng = 0, NULL, s.lng) AS view_lng,
			built_since,
			s.old_data,
			s.number,
			s.postal_code,
			s.city,
			s.state,
			commissioning,
			s.emergency_contact,
			s.ac_capacity,
			s.dc_capacity,
			s.status,
			s.is_delete,
			s.created_date,
			s.created_by,
			s.updated_date,
			s.updated_by,
			s.gallery,
			s.note,
			s.is_rec_report,
			s.datalogger_ip,
			s.about,
			s.kiosk_view,
			s.site_logo,
			s.id_site_group,
			s.timezone_datalogger,
			s.unit_type_temp,
			s.unit_wind_speed,
			s.ftp_server,
			s.ftp_user,
			s.ftp_pass,
			s.ftp_port,
			s.ftp_folder,
			s.datalogger_type,
			s.enable_alert
		FROM
			site AS s
		WHERE s.is_delete = 0;
	</select>
	
	<select id="getAllSiteGroup" resultType="Map">
		SELECT
			id,
			name AS label
		FROM
			site_group
		WHERE
			status = 1
			AND is_delete = 0;
	</select>
	
	
	
	
	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	

	<select id="getAllSiteByIdCustomer" resultMap="SiteMap" parameterType="String">
		SELECT
			s.id,
			s.id_customer,
			s.id_country,
			s.id_time_zone,
			s.`name`,
			s.street,
			s.lat,
			s.lng,
			built_since,
			s.old_data,
			s.number,
			s.postal_code,
			s.city,
			s.state,
			commissioning,
			s.emergency_contact,
			s.ac_capacity,
			s.dc_capacity,
			s.status,
			s.is_delete,
			s.created_date,
			s.created_by,
			s.updated_date,
			s.updated_by,
			s.gallery,
			s.site_logo
		FROM
			site AS s
		WHERE
			s.id_customer = ${id_customer} AND s.is_delete = 0;
	</select>
	
	
	
  	
  	
  	<select id="getSiteCustomerById" resultMap="SiteMap" parameterType="Integer">
		SELECT
			COUNT( s.id ) AS total_site,
			ROUND(SUM( s.dc_capacity ),2) AS installed_capacity,
			SUM( t.expected_last_month ) AS expected_last_month,
			SUM( t.expected_this_month ) AS expected_this_month,
			ROUND(SUM( ivt.today_kwh ),0) AS measured_today,
			ms.w_hours_received,
			SUM( ms.w_hours_received - cFirstMonth.cfirst_month_w_hours_received ) AS measured_this_month,
			SUM( cFirstMonth.cfirst_month_w_hours_received - lFirstMonth.first_month_w_hours_received ) AS measured_last_month,
			ROUND( ( SUM( ms.w_hours_received - cFirstMonth.cfirst_month_w_hours_received ) / SUM( t.expected_this_month ) ) * 100, 2 ) AS err_this_month,
			ROUND( ( SUM( cFirstMonth.cfirst_month_w_hours_received - lFirstMonth.first_month_w_hours_received ) / SUM( t.expected_this_month ) ) * 100, 2 ) AS err_last_month,
			SUM( al.total_error ) AS total_error,
			DAY(LAST_DAY(NOW())) AS lday_off_month,
			ROUND(SUM( t.expected_this_month / DAY(LAST_DAY(NOW())) ), 0) AS expected_today,
			ROUND((SUM( ivt.today_kwh ) / SUM( t.expected_this_month / DAY(LAST_DAY(NOW())) )) * 100, 2) AS err_today,
			DATE_FORMAT(NOW(), '%M %d, %Y') AS today,
			DATE_FORMAT(NOW(), '%M 01, %Y') AS this_month,
			DATE_FORMAT(DATE_ADD(NOW(),INTERVAL -1 MONTH), '%M 01, %Y') AS last_month
		FROM
			site s
			LEFT JOIN (
			SELECT
				en.id_site,
			CASE
					
					WHEN MONTH ( NOW( ) ) = 1 THEN
					en.`jan` 
					WHEN MONTH ( NOW( ) ) = 2 THEN
					en.`feb` 
					WHEN MONTH ( NOW( ) ) = 3 THEN
					en.`mar` 
					WHEN MONTH ( NOW( ) ) = 4 THEN
					en.`apr` 
					WHEN MONTH ( NOW( ) ) = 5 THEN
					en.`may` 
					WHEN MONTH ( NOW( ) ) = 6 THEN
					en.`jun` 
					WHEN MONTH ( NOW( ) ) = 7 THEN
					en.`jul` 
					WHEN MONTH ( NOW( ) ) = 8 THEN
					en.`aug` 
					WHEN MONTH ( NOW( ) ) = 9 THEN
					en.`sep` 
					WHEN MONTH ( NOW( ) ) = 10 THEN
					en.`oct` 
					WHEN MONTH ( NOW( ) ) = 11 THEN
					en.`nov` 
					WHEN MONTH ( NOW( ) ) = 12 THEN
					en.`dec` ELSE 0 
				END AS expected_this_month,
			CASE
					
					WHEN MONTH ( DATE_ADD( NOW( ), INTERVAL - 1 MONTH ) ) = 1 THEN
					en.`jan` 
					WHEN MONTH ( DATE_ADD( NOW( ), INTERVAL - 1 MONTH ) ) = 2 THEN
					en.`feb` 
					WHEN MONTH ( DATE_ADD( NOW( ), INTERVAL - 1 MONTH ) ) = 3 THEN
					en.`mar` 
					WHEN MONTH ( DATE_ADD( NOW( ), INTERVAL - 1 MONTH ) ) = 4 THEN
					en.`apr` 
					WHEN MONTH ( DATE_ADD( NOW( ), INTERVAL - 1 MONTH ) ) = 5 THEN
					en.`may` 
					WHEN MONTH ( DATE_ADD( NOW( ), INTERVAL - 1 MONTH ) ) = 6 THEN
					en.`jun` 
					WHEN MONTH ( DATE_ADD( NOW( ), INTERVAL - 1 MONTH ) ) = 7 THEN
					en.`jul` 
					WHEN MONTH ( DATE_ADD( NOW( ), INTERVAL - 1 MONTH ) ) = 8 THEN
					en.`aug` 
					WHEN MONTH ( DATE_ADD( NOW( ), INTERVAL - 1 MONTH ) ) = 9 THEN
					en.`sep` 
					WHEN MONTH ( DATE_ADD( NOW( ), INTERVAL - 1 MONTH ) ) = 10 THEN
					en.`oct` 
					WHEN MONTH ( DATE_ADD( NOW( ), INTERVAL - 1 MONTH ) ) = 11 THEN
					en.`nov` 
					WHEN MONTH ( DATE_ADD( NOW( ), INTERVAL - 1 MONTH ) ) = 12 THEN
					en.`dec` ELSE 0 
				END AS expected_last_month 
			FROM
				energy_expectations en
				LEFT JOIN site et ON et.id = en.id_site 
			WHERE
				en.`year` = YEAR ( NOW( ) ) 
			) t ON t.id_site = s.id
			LEFT JOIN (
			SELECT
				sh.id_device,
				sh.w_hours_received,
				de.id_site 
			FROM
				model_shark100 AS sh,
				( SELECT id_device, MAX( time ) AS sh_time FROM model_shark100 ms GROUP BY id_device ) AS max_sh
				LEFT JOIN device AS de ON de.id = max_sh.id_device 
			WHERE
				sh.id_device = max_sh.id_device 
				AND sh.time = max_sh.sh_time 
			) ms ON s.id = ms.id_site
			LEFT JOIN (
			SELECT
				ms.time,
				ms.id_device,
				ms.today_kwh,
				dv.id_site 
			FROM
				model_ivt_solaron_ext ms,
				( SELECT id_device, MAX( time ) AS transaction_time FROM model_ivt_solaron_ext GROUP BY id_device ) AS max_ms
				LEFT JOIN device AS dv ON dv.id = max_ms.id_device 
			WHERE
				ms.id_device = max_ms.id_device 
				AND ms.time = max_ms.transaction_time 
			) ivt ON ivt.id_site = s.id
			LEFT JOIN (
			SELECT
				sh.time,
				sh.w_hours_received AS cfirst_month_w_hours_received,
				di.id_site 
			FROM
				model_shark100 sh,
				(
				SELECT
					sh.id_device,
					sh.w_hours_received,
					MIN( time ) AS sh_time 
				FROM
					model_shark100 AS sh 
				WHERE
					YEAR ( sh.time ) = YEAR ( NOW( ) ) 
					AND MONTH ( sh.time ) = MONTH ( NOW( ) ) 
				GROUP BY
					id_device 
				) AS max_first_month
				LEFT JOIN device AS di ON di.id = max_first_month.id_device 
			WHERE
				sh.id_device = max_first_month.id_device 
				AND sh.time = max_first_month.sh_time 
			) cFirstMonth ON cFirstMonth.id_site = s.id
			LEFT JOIN (
			SELECT
				sh.time,
				sh.w_hours_received AS first_month_w_hours_received,
				di.id_site 
			FROM
				model_shark100 sh,
				(
				SELECT
					sh.id_device,
					sh.w_hours_received,
					MIN( time ) AS sh_time 
				FROM
					model_shark100 AS sh 
				WHERE
					YEAR ( sh.time ) = YEAR ( ADDDATE( NOW( ), INTERVAL - 1 MONTH ) ) 
					AND MONTH ( sh.time ) = MONTH ( ADDDATE( NOW( ), INTERVAL - 1 MONTH ) ) 
				GROUP BY
					id_device 
				) AS max_first_month
				LEFT JOIN device AS di ON di.id = max_first_month.id_device 
			WHERE
				sh.id_device = max_first_month.id_device 
				AND sh.time = max_first_month.sh_time 
			) lFirstMonth ON lFirstMonth.id_site = s.id
			LEFT JOIN (
			SELECT
				s.id AS id_site,
				COUNT( a.id ) AS total_error 
			FROM
				site s
				LEFT JOIN device d ON d.id_site = s.id
				RIGHT JOIN alert a ON a.id_device = d.id 
				AND a.`status` = 1
				LEFT JOIN error er ON a.id_error = er.id 
			GROUP BY
				s.id 
			) al ON al.id_site = s.id 
		WHERE
			s.id_customer = #{id_customer}
		GROUP BY
			s.id_customer;
	</select>
	
	
	<select id="getDetailSite" resultType="com.nwm.api.entities.SiteEntity" parameterType="com.nwm.api.entities.SiteEntity">
		SELECT
			CONCAT_WS( ", ", s.city, s.state ) AS address_short,
			CONCAT_WS( ", ", s.number, s.street ) AS street_ws,
			s.id,
			s.id_country,
			s.id_time_zone,
			s.`name`,
			s.lat,
			s.lng,
			s.old_data,
			s.number,
			s.street,
			s.postal_code,
			s.city,
			s.state,
			DATE_FORMAT( s.commissioning, '%m-%d-%Y' ) AS commissioning,
			s.emergency_contact,
			s.ac_capacity,
			s.dc_capacity,
			s.`status`,
			s.is_delete,
			s.created_date,
			s.created_by,
			s.updated_date,
			s.updated_by,
			DATE_FORMAT( s.built_since, '%m-%d-%Y' ) AS built_since,
			c.`name` AS country_name,
			s.gallery,
			c.localization_format,
			c.format_sql_short,
			c.format_sql_long,
			c.format_sql_string_short,
			c.format_sql_string_long,
			c.format_sql_string_mdy
		FROM
			site s 
			LEFT JOIN country c ON c.id = s.id_country
		WHERE
			s.id = #{id} 
			AND s.`status` = 1 
			AND s.is_delete = 0
	</select>
	
	<select id="getActiveAlarm" resultType="Map" >
		SELECT
			a.id,
			a.id_device,
			a.id_level,
			a.id_error,
			a.start_date,
			a.end_date,
			a.asset,
			a.capacity,
			a.`status`,
			al.`name` AS alert_level,
			e.error_code,
			e.message,
			d.devicename,
			d.id_site,
			CASE
		
				WHEN a.start_date <![CDATA[<]]> DATE_ADD( NOW( ), INTERVAL - 1 DAY ) THEN TIMESTAMPDIFF( DAY, a.start_date, NOW( ) )
				WHEN a.start_date <![CDATA[<]]> DATE_ADD( NOW( ), INTERVAL - 1 HOUR ) THEN TIMESTAMPDIFF( HOUR, a.start_date, NOW( ) )
				WHEN a.start_date <![CDATA[<]]> DATE_ADD( NOW( ), INTERVAL - 1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, a.start_date, NOW( ) ) ELSE 0
				END AS times_ago,
				
				CASE
		
				WHEN a.start_date <![CDATA[<]]> DATE_ADD( NOW( ), INTERVAL - 1 DAY ) THEN 'day'
				WHEN a.start_date <![CDATA[<]]> DATE_ADD( NOW( ), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN a.start_date <![CDATA[<]]> DATE_ADD( NOW( ), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
				END AS times_ago_unit
			
		FROM
			site s
			LEFT JOIN device d ON d.id_site = s.id
			RIGHT JOIN alert a ON a.id_device = d.id AND a.`status` = 1
			LEFT JOIN alert_level al ON al.id = a.id_level
			LEFT JOIN error e ON e.id = a.id_error 
		WHERE
			s.id = #{id}
			AND s.`status` = 1 
			AND s.is_delete = 0 LIMIT 6
	</select>
	
	
	<select id="getChartKPIDayIrradiance" resultType="Map" >
		SELECT
			s.id,
			s.id_time_zone,
			mr.id_device,
			DATE_FORMAT( mr.time, '%Y-%m-%d %H:%i:00' ) AS time,
			CONVERT_TZ( mr.time, '+00:00', t.`offset` ) AS local_time,
			DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%H:%i' ) AS time_day,
			mr.sensor1_data 
		FROM
			site s
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN device d ON d.id_site = s.id
			LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
		WHERE
			s.id = #{id} 
			AND s.id_customer = #{id_customer}
			AND s.`status` = 1 
			AND s.is_delete = 0 
			AND YEAR ( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) = YEAR ( #{kpi_filter} ) 
			AND MONTH ( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) = MONTH ( #{kpi_filter} ) 
			AND DAY ( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) = DAY ( #{kpi_filter} )
	</select>
	
	
	<select id="getChartKPIDayPower" resultType="Map" >
		SELECT
			s.id,			
			DATE_FORMAT( mv.time, '%Y-%m-%d %H:%i:00' ) AS time,
			CONVERT_TZ( mv.time, '+00:00', t.`offset` ) AS local_time,
			DATE_FORMAT( CONVERT_TZ( mv.time, '+00:00', t.`offset` ), '%H:%i' ) AS time_day,
	
			mv.id_device,
			mv.ac_power
		FROM
			site s
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN device d ON d.id_site = s.id
			LEFT JOIN model_ivt_solaron_ext mv ON mv.id_device = d.id 
		WHERE
			s.id = #{id} 
			AND s.id_customer = #{id_customer}
			AND s.`status` = 1 
			AND s.is_delete = 0 
			AND YEAR ( CONVERT_TZ( mv.time, '+00:00', t.`offset` ) ) = YEAR ( #{kpi_filter} ) 
			AND MONTH ( CONVERT_TZ( mv.time, '+00:00', t.`offset` ) ) = MONTH ( #{kpi_filter} ) 
			AND DAY ( CONVERT_TZ( mv.time, '+00:00', t.`offset` ) ) = DAY ( #{kpi_filter} )
	</select>
	
	
	<select id="getChartKPIDayEnergy" resultType="Map" >
		SELECT
			t.*
			FROM
				(
					SELECT
						s.id,
						DATE_FORMAT( mv.time, '%Y-%m-%d %H' ) AS time,
						DATE_FORMAT(CONVERT_TZ( mv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H') AS local_time,
						mv.id_device,
					mv.ytd_kwh_total 
					FROM
						site s
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
						LEFT JOIN device d ON d.id_site = s.id
						LEFT JOIN model_ivt_solaron_ext mv ON mv.id_device = d.id 
					WHERE
						s.id = #{id} 
						AND s.id_customer = #{id_customer} 
						AND s.`status` = 1 
						AND s.is_delete = 0 
						AND CONVERT_TZ( mv.time, '+00:00', t.`offset` ) BETWEEN #{kpi_filter} 
						AND  ADDDATE( #{kpi_filter} ,INTERVAL 1 DAY) 
					) t GROUP BY t.local_time
	</select>
	
	
	
	<select id="getChartKPIMonthPower" resultType="Map" >
		SELECT
			t.*,
			ROUND(SUM(t.ac_power),2)  AS total_month_ac_power
		FROM
			(
			SELECT
				s.id,
				DATE_FORMAT( mv.time, '%Y-%m-%d %H:%i:00' ) AS `utc_time`,
				CONVERT_TZ( mv.time, '+00:00', t.`offset` ) AS local_time,
				DATE_FORMAT( CONVERT_TZ( mv.time, '+00:00', t.`offset` ), '%d. %b' ) AS convert_time,
				DATE_FORMAT( CONVERT_TZ( mv.time, '+00:00', t.`offset` ), '%W, %b %d, %Y' ) AS full_time,
				mv.id_device,
				mv.ac_power 
			FROM
				site s
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
				LEFT JOIN device d ON d.id_site = s.id
				LEFT JOIN model_ivt_solaron_ext mv ON mv.id_device = d.id 
			WHERE
				s.id = #{id}
				AND s.id_customer = #{id_customer}
				AND s.`status` = 1 
				AND s.is_delete = 0 
				AND mv.time IS NOT NULL
				AND YEAR ( CONVERT_TZ( mv.time, '+00:00', t.`offset` ) ) = YEAR ( #{kpi_filter} ) 
				AND MONTH ( CONVERT_TZ( mv.time, '+00:00', t.`offset` ) ) = MONTH ( #{kpi_filter} )
			) t 
		GROUP BY
			t.convert_time 
	</select>
	
	
	<select id="getChartKPIMonthInsolation" resultType="Map" >
		SELECT t.*, ROUND(AVG(t.sensor1_data) * 24/1000 ,2)  AS avg_month_sensor1_data FROM (
			SELECT
					s.id,
					s.id_time_zone,
					mr.id_device,
					DATE_FORMAT( mr.time, '%Y-%m-%d %H:%i:00' ) AS `utc_time`,
					CONVERT_TZ( mr.time, '+00:00', t.`offset` ) AS local_time,
					DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%H:%i' ) AS time_day,
					DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%d. %b' ) AS convert_time,
					DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%W, %b %d, %Y' ) AS full_time,
					mr.sensor1_data 
				FROM
					site s
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					LEFT JOIN device d ON d.id_site = s.id
					LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
				WHERE
					s.id = #{id} 
					AND s.id_customer = #{id_customer}
					AND s.`status` = 1 
					AND s.is_delete = 0 
					AND mr.time IS NOT NULL
					AND YEAR ( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) = YEAR ( #{kpi_filter} ) 
					AND MONTH ( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) = MONTH ( #{kpi_filter} ) 
		)t GROUP BY t.convert_time
	</select>
	
	<select id="getChartKPIMonth" resultType="Map" >
		SELECT
			tmin.*,
			m.full_time,
			m.convert_time,
			MIN( tmin.ytd_kwh_total ) AS min_value,
			MAX( tmin.ytd_kwh_total ) AS max_value,
			ROUND(MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2) AS total_day_kw,
			m.avg_month_sensor1_data,
			IFNULL(ROUND( ((MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total )) / (m.avg_month_sensor1_data * tmin.ac_capacity)) * 100 ,2),0) AS day_pr
		FROM
			(
			SELECT
				iv.time,
				si.id,
				si.ac_capacity,
				iv.id_device,
				iv.ytd_kwh_total,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS local_time
				
			FROM
				site si
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id}
				AND si.id_customer = #{id_customer}
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND iv.error = 0
				AND YEAR ( CONVERT_TZ( iv.time, '+00:00', t.`offset` ) ) = YEAR ( #{kpi_filter} ) 
				AND MONTH ( CONVERT_TZ( iv.time, '+00:00', t.`offset` ) ) = MONTH ( #{kpi_filter} ) 
				
			) tmin 
			LEFT JOIN (
				SELECT t.*, ROUND((AVG(t.sensor1_data) * 24)/1000 ,2)  AS avg_month_sensor1_data FROM (
						SELECT
								s.id,
								s.id_time_zone,
								mr.id_device,
								DATE_FORMAT( mr.time, '%Y-%m-%d %H:%i:00' ) AS `utc_time`,
								CONVERT_TZ( mr.time, '+00:00', t.`offset` ) AS local_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%H:%i' ) AS time_day,
								DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%d. %b' ) AS convert_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%W, %b %d, %Y' ) AS full_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS mr_local_time,
								mr.sensor1_data 
							FROM
								site s
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
								LEFT JOIN device d ON d.id_site = s.id
								LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
							WHERE
								s.id = #{id}
								AND s.id_customer = #{id_customer}
								AND s.`status` = 1 
								AND s.is_delete = 0 
								AND mr.time IS NOT NULL
								AND YEAR ( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) = YEAR ( #{kpi_filter} ) 
								AND MONTH ( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) = MONTH ( #{kpi_filter} ) 
					)t GROUP BY t.convert_time
			)m ON m.mr_local_time = tmin.local_time
		GROUP BY tmin.local_time
	</select>
	
	
	<select id="getChartKPIYear" resultType="Map" >
		SELECT
			tmin.*,
			m.full_time,
			m.convert_time,
			MIN( tmin.ytd_kwh_total ) AS min_value,
			MAX( tmin.ytd_kwh_total ) AS max_value,
			ROUND(MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2) AS total_month_kw,
			m.avg_month_sensor1_data,
			IFNULL(ROUND( ((MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total )) / (m.avg_month_sensor1_data * tmin.ac_capacity)) * 100 ,2),0) AS month_pr
		FROM
			(
			SELECT
				iv.time,
				si.id,
				si.ac_capacity,
				iv.id_device,
				iv.ytd_kwh_total,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%Y-%m' ) AS local_time
				
			FROM
				site si
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id}
				AND si.id_customer = #{id_customer}
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND iv.error = 0
				AND YEAR ( CONVERT_TZ( iv.time, '+00:00', t.`offset` ) ) = YEAR ( #{kpi_filter} ) 
				
			) tmin 
			LEFT JOIN (
				SELECT t.*, ROUND((AVG(t.sensor1_data) * 24 * ((DAY(MAX(t.local_time)) + 1) - DAY(MIN(t.local_time))) )/1000 ,2)  AS avg_month_sensor1_data  FROM (
						SELECT
								s.id,
								s.id_time_zone,
								mr.id_device,
								DATE_FORMAT( mr.time, '%Y-%m-%d %H:%i:00' ) AS `utc_time`,
								CONVERT_TZ( mr.time, '+00:00', t.`offset` ) AS local_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%H:%i' ) AS time_day,
								DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), "%b '%y" ) AS convert_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%W, %b %d, %Y' ) AS full_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%Y-%m' ) AS mr_local_time,
								mr.sensor1_data 
							FROM
								site s
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
								LEFT JOIN device d ON d.id_site = s.id
								LEFT JOIN model_rt1_class30000 mr ON mr.id_device = d.id 
							WHERE
								s.id = #{id}
								AND s.id_customer = #{id_customer}
								AND s.`status` = 1 
								AND s.is_delete = 0 
								AND mr.time IS NOT NULL
								AND YEAR ( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) = YEAR ( #{kpi_filter} ) 
					)t GROUP BY t.mr_local_time
			)m ON m.mr_local_time = tmin.local_time
		GROUP BY tmin.local_time
	</select>
	

	
	
	<select id="reportQuickQuery" resultType="Map" >
		SELECT
			d.devicename,
			DATE_FORMAT( CONVERT_TZ( sh.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:%i' ) AS local_time,
			DATE_FORMAT( CONVERT_TZ( sh.time, '+00:00', t.`offset` ), '%H:%i' ) AS local_hour,
			sh.* 
		FROM
			site s
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN device d ON d.id_site = s.id
			<if test="device_type == 1">
			LEFT JOIN model_ivt_solaron_ext sh ON d.id = sh.id_device
			</if>
			
			<if test="device_type == 2">
			LEFT JOIN model_shark100 sh ON d.id = sh.id_device
			</if>
			
			<if test="device_type == 4">
			LEFT JOIN model_rt1_class30000 sh ON d.id = sh.id_device
			</if>
			 
		WHERE
			d.id = #{id_device} 
			AND s.id = #{id} 
			AND s.`status` = 1 
			AND s.is_delete = 0 
			AND CONVERT_TZ( sh.time, '+00:00', t.`offset` ) BETWEEN #{start_date} 
			AND #{end_date}
	</select>

	
	
	<select id="getSpecificYieldMonth" resultType="Map" >
		SELECT
				tmin.*,
				ROUND( MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2 ) AS energy_day_kw,
				CONCAT_WS( ' - ', DATE_FORMAT( k.t_min, #{format_sql_string_mdy} ), DATE_FORMAT( k.t_max, #{format_sql_string_mdy} ) ) AS xAxisTitle 
			FROM
				(
				SELECT
					si.id,
					si.id_customer,
					iv.time,
					iv.ytd_kwh_total,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS local_time,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), #{format_sql_string_short} ) AS full_time,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%d. %b' ) AS convert_time
				FROM
					site si
					LEFT JOIN time_zone t ON t.id = si.id_time_zone
					LEFT JOIN device d ON d.id_site = si.id
					LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
				WHERE
					si.id = #{id}
					AND si.id_customer = #{id_customer}
					AND si.`status` = 1 
					AND si.is_delete = 0 
					AND iv.error = 0 
					AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date}
				) tmin
				
				LEFT JOIN (
					SELECT
						t.* 
					FROM
						(
						SELECT
							s.id,
							s.id_customer,
							s.id_time_zone,
							mr.id_device,
							DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%d. %b' ) AS convert_time,
							DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS mr_local_time,
							MIN( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) AS t_min,
							MAX( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) AS t_max 
						FROM
							site s
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
							LEFT JOIN device d ON d.id_site = s.id
							LEFT JOIN model_ivt_solaron_ext mr ON mr.id_device = d.id 
						WHERE
							s.id = #{id}
							AND s.id_customer = #{id_customer}
							AND s.`status` = 1 
							AND s.is_delete = 0 
							AND mr.time IS NOT NULL 
							AND CONVERT_TZ( mr.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date}
						) t 
					GROUP BY
						t.convert_time 
					) k ON k.id = tmin.id 

			GROUP BY
				tmin.local_time;
	</select>
	
	<select id="getSpecificYieldYear" resultType="Map" >
		SELECT
				tmin.*,
				ROUND( MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2 ) AS energy_month_kw,
				CONCAT_WS( ' - ', DATE_FORMAT( k.t_min, #{format_sql_string_mdy} ), DATE_FORMAT( k.t_max, #{format_sql_string_mdy} ) ) AS xAxisTitle 
			FROM
				(
				SELECT
					si.id,
					si.id_customer,
					iv.time,
					iv.ytd_kwh_total,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%Y-%m' ) AS local_time,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), #{format_sql_string_short} ) AS full_time,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%b %Y' ) AS convert_time
				FROM
					site si
					LEFT JOIN time_zone t ON t.id = si.id_time_zone
					LEFT JOIN device d ON d.id_site = si.id
					LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
				WHERE
					si.id = #{id}
					AND si.id_customer = #{id_customer}
					AND si.`status` = 1 
					AND si.is_delete = 0 
					AND iv.error = 0 
					AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date}
				) tmin
				
				LEFT JOIN (
					SELECT
						t.* 
					FROM
						(
						SELECT
							s.id,
							s.id_customer,
							s.id_time_zone,
							mr.id_device,
							DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%d. %b' ) AS convert_time,
							DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%Y-%m' ) AS mr_local_time,
							MIN( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) AS t_min,
							MAX( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) AS t_max 
						FROM
							site s
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
							LEFT JOIN device d ON d.id_site = s.id
							LEFT JOIN model_ivt_solaron_ext mr ON mr.id_device = d.id 
						WHERE
							s.id = #{id}
							AND s.id_customer = #{id_customer}
							AND s.`status` = 1 
							AND s.is_delete = 0 
							AND mr.time IS NOT NULL 
							AND CONVERT_TZ( mr.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date}
						) t 
					GROUP BY
						t.convert_time 
					) k ON k.id = tmin.id 

			GROUP BY
				tmin.local_time;
	</select>
	
	
	<select id="getDailyReportSumary" resultType="Map" >
		SELECT
				tmin.*,
				ROUND( MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2 ) AS energy_today_kw,
				k.month_ytd_kwh_total,
				k.month_format_time,
				m.year_ytd_kwh_total,
				m.year_format_time
			FROM
				(
				SELECT
					si.id,
					d.devicename,
					si.id_customer,
					iv.time,
					iv.ytd_kwh_total,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), #{format_sql_short} ) AS local_time,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), #{format_sql_string_short} ) AS full_time,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), #{format_sql_string_mdy} ) AS convert_time
				FROM
					site si
					LEFT JOIN time_zone t ON t.id = si.id_time_zone
					LEFT JOIN device d ON d.id_site = si.id
					LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
				WHERE
					si.id = #{id}
					AND si.id_customer = #{id_customer}
					AND si.`status` = 1 
					AND si.is_delete = 0 
					AND iv.error = 0 
					AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date}
				) tmin
				
				LEFT JOIN (
					SELECT
						t.* 
						FROM
							(
							SELECT
								s.id,
								ROUND(MAX(mr.ytd_kwh_total) - MIN(mr.ytd_kwh_total),2) AS month_ytd_kwh_total,
								DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%Y-%m' ) AS local_format_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%M %Y' ) AS month_format_time
							FROM
								site s
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
								LEFT JOIN device d ON d.id_site = s.id
								LEFT JOIN model_ivt_solaron_ext mr ON mr.id_device = d.id 
							WHERE
								s.id = #{id}
								AND s.id_customer = #{id_customer}
								AND s.`status` = 1 
								AND s.is_delete = 0 
								AND mr.error = 0
								AND CONVERT_TZ( mr.time, '+00:00', t.`offset` ) BETWEEN CONCAT_WS('-',YEAR(#{start_date}), MONTH(#{start_date}), '01 00:00:00') AND #{end_date}
							) t 
						GROUP BY t.local_format_time
					) k ON k.id = tmin.id 
					
				LEFT JOIN (
					SELECT
						t.* 
						FROM
							(
							SELECT
								s.id,
								ROUND(MAX(mr.ytd_kwh_total) - MIN(mr.ytd_kwh_total),2) AS year_ytd_kwh_total,
								DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%Y' ) AS local_format_time,
								DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%Y' ) AS year_format_time
							FROM
								site s
								LEFT JOIN time_zone t ON t.id = s.id_time_zone
								LEFT JOIN device d ON d.id_site = s.id
								LEFT JOIN model_ivt_solaron_ext mr ON mr.id_device = d.id 
							WHERE
								s.id = #{id}
								AND s.id_customer = #{id_customer}
								AND s.`status` = 1 
								AND s.is_delete = 0 
								AND mr.error = 0
								AND CONVERT_TZ( mr.time, '+00:00', t.`offset` ) BETWEEN CONCAT_WS('-',YEAR(#{start_date}), '01-01 00:00:00') AND #{end_date}
							) t 
						GROUP BY t.local_format_time 	
				) m ON m.id = tmin.id 
			GROUP BY
				tmin.local_time;
	</select>
	
	
	<select id="getDailyReportChart" resultType="Map" >
	
		<if test="kpi_type == 'daily_report'">
			SELECT
				si.id,
				si.id_customer,
				iv.time,
				iv.ytd_kwh_total,
				CONCAT_WS('',DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), REPLACE(#{format_sql_long}, ":%i:%s", "")),':00') AS local_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%H:00' ) AS convert_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), #{format_sql_string_short} ) AS full_time
			FROM
				site si
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id} 
				AND si.id_customer = #{id_customer}
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND iv.error = 0 
				AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} 
				AND #{end_date} 
			GROUP BY
				local_time;
		</if>
		
		<if test="kpi_type == 'monthly_report'">
			SELECT
				tmin.*,
				ROUND( MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2 ) AS energy_month_kw,
				CONCAT_WS( ' - ', DATE_FORMAT( k.t_min, #{format_sql_string_mdy} ), DATE_FORMAT( k.t_max, #{format_sql_string_mdy} ) ) AS xAxisTitle 
			FROM
				(
				SELECT
					si.id,
					si.id_customer,
					iv.time,
					iv.ytd_kwh_total,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS local_time,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%W, %b %d, %Y' ) AS full_time,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%d. %b' ) AS convert_time
				FROM
					site si
					LEFT JOIN time_zone t ON t.id = si.id_time_zone
					LEFT JOIN device d ON d.id_site = si.id
					LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
				WHERE
					si.id = #{id}
					AND si.id_customer = #{id_customer}
					AND si.`status` = 1 
					AND si.is_delete = 0 
					AND iv.error = 0 
					AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date}
				) tmin
				
				LEFT JOIN (
					SELECT
						t.* 
					FROM
						(
						SELECT
							s.id,
							s.id_customer,
							s.id_time_zone,
							mr.id_device,
							DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%d. %b' ) AS convert_time,
							DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS mr_local_time,
							MIN( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) AS t_min,
							MAX( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) AS t_max 
						FROM
							site s
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
							LEFT JOIN device d ON d.id_site = s.id
							LEFT JOIN model_ivt_solaron_ext mr ON mr.id_device = d.id 
						WHERE
							s.id = #{id}
							AND s.id_customer = #{id_customer}
							AND s.`status` = 1 
							AND s.is_delete = 0 
							AND mr.time IS NOT NULL 
							AND CONVERT_TZ( mr.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date}
						) t 
					GROUP BY
						t.convert_time 
					) k ON k.id = tmin.id 

			GROUP BY
				tmin.local_time;
		</if>
		
	</select>
	
	
	<select id="getReportVisualizationDevice" resultType="Map" >
		SELECT
				tmin.*,
				ROUND( MAX( tmin.ytd_kwh_total ) - MIN( tmin.ytd_kwh_total ), 2 ) AS energy_month_kw,
				CONCAT_WS( ' - ', DATE_FORMAT( k.t_min, #{format_sql_string_mdy} ), DATE_FORMAT( k.t_max, #{format_sql_string_mdy} ) ) AS xAxisTitle 
			FROM
				(
				SELECT
					si.id,
					si.id_customer,
					iv.time,
					iv.ytd_kwh_total,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%Y-%m' ) AS local_time,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%b %Y' ) AS full_time,
					DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%b %Y' ) AS convert_time
				FROM
					site si
					LEFT JOIN time_zone t ON t.id = si.id_time_zone
					LEFT JOIN device d ON d.id_site = si.id
					LEFT JOIN model_ivt_solaron_ext iv ON iv.id_device = d.id 
				WHERE
					si.id = #{id_site}
					AND si.id_customer = #{id_customer}
					AND d.id = #{id_device}
					AND si.`status` = 1 
					AND si.is_delete = 0 
					AND iv.error = 0 
					AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date}
				) tmin
				
				LEFT JOIN (
					SELECT
						t.* 
					FROM
						(
						SELECT
							s.id,
							s.id_customer,
							s.id_time_zone,
							mr.id_device,
							DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%d. %b' ) AS convert_time,
							DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%Y-%m' ) AS mr_local_time,
							MIN( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) AS t_min,
							MAX( CONVERT_TZ( mr.time, '+00:00', t.`offset` ) ) AS t_max 
						FROM
							site s
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
							LEFT JOIN device d ON d.id_site = s.id
							LEFT JOIN model_ivt_solaron_ext mr ON mr.id_device = d.id 
						WHERE
							s.id = #{id_site}
							AND s.id_customer = #{id_customer}
							AND d.id = #{id_device}
							AND s.`status` = 1 
							AND s.is_delete = 0 
							AND mr.time IS NOT NULL 
							AND CONVERT_TZ( mr.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date}
						) t 
					GROUP BY
						t.convert_time 
					) k ON k.id = tmin.id 

			GROUP BY
				tmin.local_time;
	</select>
	
	<select id="getReportVisualizationDeviceDay" resultType="Map" >
		SELECT
			t.*,
			ROUND( MAX( t.ytd_kwh_total ) - MIN( t.ytd_kwh_total ), 2 ) AS hour_kwh_total,
			CONCAT_WS('',DATE_FORMAT( t.convert_time, REPLACE(#{format_sql_long}, ":%i:%s", "") ),':00') AS tooltip_date,
			DATE_FORMAT( t.convert_time, '%H:00' ) AS hour_time,
			DATE_FORMAT( t.convert_time, #{format_sql_string_short} ) AS xAxisTitle 
		FROM
			(
			SELECT
				s.id,
				mr.ac_power,
				mr.ytd_kwh_total,
				DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:%s:%i' ) AS convert_time,
				DATE_FORMAT( CONVERT_TZ( mr.time, '+00:00', t.`offset` ), '%Y-%m-%d %H' ) AS mr_local_time 
			FROM
				site s
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
				LEFT JOIN device d ON d.id_site = s.id
				LEFT JOIN model_ivt_solaron_ext mr ON mr.id_device = d.id 
			WHERE
				s.id = #{id_site}
				AND s.id_customer = #{id_customer}
				AND d.id = #{id_device}
				AND s.`status` = 1 
				AND s.is_delete = 0 
				AND mr.time IS NOT NULL 
				AND CONVERT_TZ( mr.time, '+00:00', t.`offset` ) BETWEEN #{start_date} 
				AND #{end_date} 
			) t 
		GROUP BY
			HOUR ( t.mr_local_time );
	</select>
	
	<select id="getAnnualComparison" resultType="Map" >
		SELECT t.*,
			(
			IFNULL(t.jan_kwh_total, 0) + IFNULL(t.feb_kwh_total, 0) + IFNULL(t.mar_kwh_total, 0) + IFNULL(t.apr_kwh_total, 0) + IFNULL(t.may_kwh_total, 0) + IFNULL(t.jun_kwh_total, 0) + IFNULL(t.jul_kwh_total, 0) + IFNULL(t.aug_kwh_total, 0) + IFNULL(t.sep_kwh_total, 0) + IFNULL(t.oct_kwh_total, 0) + IFNULL(t.nov_kwh_total, 0) + IFNULL(t.dec_kwh_total, 0)
			) AS year_total
			
			FROM (
				SELECT
					s.id,
					iv.time,
					iv.id_device,
					YEAR(iv.time) AS `year`,
					ROUND((IFNULL(MAX(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=1 then iv.ytd_kwh_total end) - MIN(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=1 then iv.ytd_kwh_total end),0))/1000, 2 ) AS jan_kwh_total,
					ROUND((IFNULL(MAX(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=2 then iv.ytd_kwh_total end) - MIN(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=2 then iv.ytd_kwh_total end),0))/1000, 2 ) AS feb_kwh_total,
					ROUND((IFNULL(MAX(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=3 then iv.ytd_kwh_total end) - MIN(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=3 then iv.ytd_kwh_total end),0))/1000, 2 ) AS mar_kwh_total,
					ROUND((IFNULL(MAX(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=4 then iv.ytd_kwh_total end) - MIN(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=4 then iv.ytd_kwh_total end),0))/1000, 2 ) AS apr_kwh_total,
					ROUND((IFNULL(MAX(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=5 then iv.ytd_kwh_total end) - MIN(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=5 then iv.ytd_kwh_total end),0))/1000, 2 ) AS may_kwh_total,
					ROUND((IFNULL(MAX(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=6 then iv.ytd_kwh_total end) - MIN(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=6 then iv.ytd_kwh_total end),0))/1000, 2 ) AS jun_kwh_total,
					ROUND((IFNULL(MAX(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=7 then iv.ytd_kwh_total end) - MIN(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=7 then iv.ytd_kwh_total end),0))/1000, 2 ) AS jul_kwh_total,
					ROUND((IFNULL(MAX(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=8 then iv.ytd_kwh_total end) - MIN(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=8 then iv.ytd_kwh_total end),0))/1000, 2 ) AS aug_kwh_total,
					ROUND((IFNULL(MAX(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=9 then iv.ytd_kwh_total end) - MIN(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=9 then iv.ytd_kwh_total end),0))/1000, 2 ) AS sep_kwh_total,
					ROUND((IFNULL(MAX(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=10 then iv.ytd_kwh_total end) - MIN(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=10 then iv.ytd_kwh_total end),0))/1000, 2 ) AS oct_kwh_total,
					ROUND((IFNULL(MAX(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=11 then iv.ytd_kwh_total end) - MIN(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=11 then iv.ytd_kwh_total end),0))/1000, 2 ) AS nov_kwh_total,
					ROUND((IFNULL(MAX(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=12 then iv.ytd_kwh_total end) - MIN(case when MONTH(CONVERT_TZ( iv.time, '+00:00', t.`offset`))=12 then iv.ytd_kwh_total end),0))/1000, 2 ) AS dec_kwh_total
					
				FROM
					site s 
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					LEFT JOIN device d ON d.id_site = s.id
					LEFT JOIN model_ivt_solaron_ext iv ON d.id = iv.id_device
					WHERE s.id = #{id_site} AND s.id_customer = #{id_customer} AND iv.error = 0 AND iv.ytd_kwh_total > 0 AND CONVERT_TZ( iv.time, t.`offset`, '+07:00') <![CDATA[<=]]> #{current_time}
					GROUP BY iv.id_device, YEAR(iv.time)
			)t GROUP BY t.id_device, YEAR(t.time)
	</select>
	
	
</mapper>
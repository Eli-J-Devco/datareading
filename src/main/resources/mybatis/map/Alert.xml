<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Alert">
	<resultMap id="AlertMap"
		type="com.nwm.api.entities.AlertEntity">
		<result property="id" column="id" />
		<result property="id_customer" column="id_customer" />
		<result property="id_device" column="id_device" />
		<result property="id_error" column="id_error" />
		<result property="start_date" column="start_date" />
		<result property="end_date" column="end_date" />
		<result property="asset" column="asset" />
		<result property="capacity" column="capacity" />
		<result property="status" column="status" />
		<result property="is_delete" column="is_delete" />
		<result property="created_date" column="created_date" />
		<result property="created_by" column="created_by" />
		<result property="updated_date" column="updated_date" />
		<result property="updated_by" column="updated_by" />
		<result property="id_site" column="id_site" />
		<result property="totalRecord" column="totalRecord" />
		<result property="current_time" column="current_time" />
		<result property="user_history" column="user_history" />
		
	</resultMap>
	
	<sql id="viewHistoryCondition">
		<if test="id_sites != null and !id_sites.isEmpty()">
			AND s.id IN  (
				<foreach item="item" index="index" collection="id_sites" separator=" , ">
					#{item.id}
				</foreach>
			)
		</if>
				
		<choose>
			<when test="view_history == 'active'">
				AND ${alertTable}.`status` = 1
				AND ${alertTable}.resolved = 0
			</when>
			
			<when test="view_history == 'review'">
				AND ${alertTable}.`status` = 0
				AND CONVERT_TZ(${alertTable}.start_date, 'UTC', t.value) BETWEEN #{date_from} AND #{date_to}
			</when>
			
			<when test="view_history == 'filter'">
				AND CONVERT_TZ(${alertTable}.start_date, 'UTC', t.value) BETWEEN #{date_from} AND #{date_to}
				
				<if test="id_levels != null and !id_levels.isEmpty()">
					AND el.id IN  (
						<foreach item="item" index="index" collection="id_levels" separator=" , ">
							#{item.id}
						</foreach>
					)
				</if>
				
				<if test="id_status != null and id_status.size() == 1">
					<if test="id_status.get(0).id == 0">
						AND ${alertTable}.`status` = 0
					</if>
					<if test="id_status.get(0).id == 1">
						AND ${alertTable}.`status` = 1
						AND ${alertTable}.resolved = 0
					</if>
				</if>
				
				<if test="id_types != null and !id_types.isEmpty()">
					AND e.id_error_type IN  (
						<foreach item="item" index="index" collection="id_types" separator=" , ">
							#{item.id}
						</foreach>
					)
				</if>
				
				<if test="id_device_type != null and !id_device_type.isEmpty()">
					AND d.id_device_type IN  (
						<foreach item="item" index="index" collection="id_device_type" separator=" , ">
							#{item.id}
						</foreach>
					)
				</if>
				
				<!-- return empty when all options are unchecked -->
				<if test="
					(id_sites == null or id_sites.isEmpty()) and
					(id_levels == null or id_levels.isEmpty()) and
					(id_status == null or id_status.isEmpty()) and
					(id_types == null or id_types.isEmpty()) and
					(id_device_type == null or id_device_type.isEmpty())
				">
					AND 1 = 0
				</if>
			</when>
			
			<otherwise>
			</otherwise>
		</choose>
	</sql>
	
	<select id="getList" resultType="Map" parameterType="String" >
		SELECT
			l.id,
			l.asset,
			el.name AS priority_name,
			l.capacity,
			l.`status`,
			l.alert_acknowledged,
			l.disable_notification,
			l.resolved,
			l.note,
			l.is_read,
			l.is_notification,
			IFNULL(dg.title_trans, "N/A") AS device_group_title_trans,
			IFNULL(el.title_trans, "N/A") AS err_level_title_trans,
			IFNULL(dt.title_trans, "N/A") AS device_type_title_trans,
			IFNULL(e.title_trans, "N/A") AS error_title_trans,
			IF(l.`status` = 1, 'Opened', 'Closed') AS status_name,
			el.`name` AS `level`,
			e.message,
			e.description,
			e.error_code,
			d.devicename,
			<include refid="com.nwm.common.siteName"/> AS site_name,
			s.id AS id_site,
			SHA1(s.id) AS hash_id,
			i.icon AS icon_alert,
			el.id AS id_error_level,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			d.id AS id_device,
			d.id_device_type,
			dt.name AS device_type_name,
			el.color AS color_error_level,
			h.is_hiding,
			
			DATE_FORMAT( CONVERT_TZ( l.start_date,'UTC', t.value), '%Y-%m-%d %H:%i:%s' ) AS start,
			DATE_FORMAT( CONVERT_TZ( l.start_date,'UTC', t.value) , '%c/%e/%Y %h:%i %p') AS start_date,
			DATE_FORMAT(CONVERT_TZ( l.end_date,'UTC', t.value), '%c/%e/%Y %h:%i %p') AS end_date,
			DATE_FORMAT(CONVERT_TZ( d.last_updated,'UTC', t.value), '%c/%e/%Y %h:%i %p') AS last_updated,
			
			CASE
				WHEN CONVERT_TZ( l.start_date, 'UTC', t.value ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( l.start_date, 'UTC', t.value ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( l.start_date, 'UTC', t.value ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( l.start_date, 'UTC', t.value ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( l.start_date, 'UTC', t.value ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( l.start_date, 'UTC', t.value ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( l.start_date, 'UTC', t.value ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( l.start_date, 'UTC', t.value ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( l.start_date, 'UTC', t.value ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit,
			
			<include refid="com.nwm.common.keyIndicatorField"/>,
			<include refid="com.nwm.common.unitField"/>
			
		FROM
			`alert` l
			STRAIGHT_JOIN error e ON e.id = l.id_error
			JOIN error_level el ON el.id = e.id_error_level
			JOIN icon i ON i.id = el.id_icon
			JOIN device d ON d.id = l.id_device
			JOIN device_group dg ON dg.id = d.id_device_group
			JOIN device_type dt ON dt.id = d.id_device_type
			JOIN site s ON s.id = d.id_site
			JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN (
				SELECT
					id_site,
					MAX(is_hiding) AS is_hiding
				FROM site_employee_map
				GROUP BY id_site
			) h ON h.id_site = s.id
			<if test="is_supper_admin != 1">
				JOIN site_employee_map sem ON sem.id_site = s.id AND sem.id_employee = #{id_employee} AND sem.is_hiding = 0
			</if>
			
		WHERE
			e.`status` = 1
			AND e.is_delete = 0
			AND d.`status` = 1
			AND d.is_delete = 0
			AND l.is_delete = 0
			AND s.status = 1
			AND s.is_delete = 0
			AND s.enable_alert = 1
			AND (CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			
			<if test="keyword != null">
				AND s.`name` LIKE CONCAT("%",#{keyword}, "%")
			</if>
			
			<if test="!isUserNW.booleanValue()">
				AND el.id != 14
			</if>
			
			<include refid="com.nwm.common.deviceByDomainCondition"/>
			
			<include refid="com.nwm.common.siteByDomainCondition"/>
			
			<include refid="viewHistoryCondition">
				<property name="alertTable" value="l"/>
			</include>
			
		ORDER BY
			<choose>
			    <when test="sort_column == 'times_ago' or sort_column == 'start_date'">
			    	start ${order_by}
			    </when>
			    
			    <when test="sort_column == 'key_indicator'">
			    	unit, d.field_value1 ${order_by}
			    </when>
			    
			    <when test="sort_column != null and sort_column != ''">
	                ${sort_column} ${order_by}
	            </when>
			    
			    <otherwise>
			    	l.start_date DESC
			    </otherwise>
			  </choose> , l.id DESC
  		
  		<if test="limit > 0">
			LIMIT ${limit} OFFSET ${offset};
		</if>
	</select>
	
	
	<select id="getTotal" resultMap="AlertMap" parameterType="String">
		SELECT
			COUNT(l.id) as totalRecord
			
		FROM
			`alert` l
			STRAIGHT_JOIN error e ON e.id = l.id_error
			JOIN error_level el ON el.id = e.id_error_level
			JOIN device d ON d.id = l.id_device
			JOIN site s ON s.id = d.id_site
			JOIN time_zone t ON t.id = s.id_time_zone
			<if test="is_supper_admin != 1">
				JOIN site_employee_map sem ON sem.id_site = s.id AND sem.id_employee = #{id_employee} AND sem.is_hiding = 0
			</if>
			
		WHERE
			e.`status` = 1
			AND e.is_delete = 0
			AND d.`status` = 1
			AND d.is_delete = 0
			AND l.is_delete = 0 
			AND s.status = 1
			AND s.is_delete = 0
			AND s.enable_alert = 1
			AND (CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			
			<if test="keyword != null">
				AND s.`name` LIKE CONCAT("%",#{keyword}, "%")
			</if>
			
			<if test="!isUserNW.booleanValue()">
				AND el.id != 14
			</if>
			
			<include refid="com.nwm.common.deviceByDomainCondition"/>
			
			<include refid="com.nwm.common.siteByDomainCondition"/>
			
			<include refid="viewHistoryCondition">
				<property name="alertTable" value="l"/>
			</include>
			
			<if test="view_notification == 'active'">
				AND l.is_notification = 0
			</if>
  	</select>
  	
  	
  	
  	<select id="getDetailAlert" resultType="Map">
		SELECT
			l.id,
			l.asset,
			l.capacity,
			l.`status`,
			l.alert_acknowledged,
			l.disable_notification,
			l.resolved,
			l.note,
			IF(l.`status` = 1, 'Open', 'Close') AS status_name,
			al.`name` AS `level`,
			e.message,
			e.error_code,
			d.devicename,
			<include refid="com.nwm.common.siteName"/> AS site_name,
			s.id AS id_site,
			d.id as id_device,
			'kW' AS capacity_unit,
			DATE_FORMAT( CONVERT_TZ( l.start_date, t.`offset`, #{offset_timezone} ), #{format_sql_long} ) AS start,
			DATE_FORMAT( CONVERT_TZ( l.start_date,'+00:00', t.`offset`) , '%m/%d/%Y %H:%i %p') AS start_date,
			DATE_FORMAT(CONVERT_TZ( l.end_date,'+00:00', t.`offset`), '%m/%d/%Y %H:%i %p') AS end_date,
			DATE_FORMAT(CONVERT_TZ( d.last_updated,'+00:00', t.`offset`), '%m/%d/%Y %H:%i %p') AS last_updated,
			CONCAT_WS('', 
				IF( FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / (60*24))) <![CDATA[<]]> 0 , 0, FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time}) / (60*24)))), 'd ',
				IF(MOD(FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / 60)), 24) <![CDATA[<]]> 0, 0, MOD(FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / 60)), 24)), 'h ',
				IF( MOD((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time})), 60) <![CDATA[<]]> 0, 0, MOD((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time})), 60)), 'm'
			) AS duration
			
		FROM
			`alert` l
			LEFT JOIN alert_level al ON al.id = l.id_level
			LEFT JOIN error e ON e.id = l.id_error
			LEFT JOIN device d ON d.id = l.id_device
			
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE s.enable_alert = 1 
				AND s.id_customer = #{id_customer} 
				AND s.id = #{id_site} 
				AND l.id = #{id}

			LIMIT 1;
  	</select>
  	
  	
  	<insert id="insertAlert" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `alert_queue`(
			`id_device`,
			`id_error`,
			`start_date`,
			`end_date`,
			`asset`,
			`capacity`
		)VALUES(
			#{id_device},
			#{id_error},
			#{start_date},
			#{end_date},
			#{asset},
			#{capacity}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	
	<select id="checkAlertlExist" parameterType="com.nwm.api.entities.AlertEntity" resultType="int">
    	SELECT
    	COUNT(id) as totalRecord
		FROM `alert` as u
		WHERE u.id_device = #{id_device} AND u.id_error = #{id_error} AND u.`status` = 1 AND u.is_delete = 0;
  	</select>
  	
  	
  	<select id="getListIdSites" resultType="Map" >
  		SELECT
			s.id,
			<include refid="com.nwm.common.siteName"/> AS `name`,
			<include refid="com.nwm.common.siteName"/> AS `text`,
			s.id_site_group,
			s.id_site_sub_group,
			sg.name AS site_group_name,
			ssg.name AS site_sub_group_name,
			1 AS active 
		FROM
			site s
			LEFT JOIN site_group sg ON sg.id = s.id_site_group
			LEFT JOIN site_sub_group ssg ON ssg.id = s.id_site_sub_group
		WHERE s.is_delete = 0 AND s.`status` = 1
			<if test="id_sites != null and !id_sites.isEmpty()">
				AND s.id IN  (
					<foreach item="item" index="index" collection="id_sites" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
		ORDER BY s.`name` ASC
	</select>
	
	
	<select id="getListAlertBySite" resultType="Map" parameterType="String" >
		SELECT
			l.id,
			l.asset,
			el.name AS priority_name,
			l.capacity,
			l.note,
			l.`status`,
			l.alert_acknowledged,
			l.disable_notification,
			l.resolved,
			IF(l.`status` = 1, 'Open', 'Close') AS status_name,
			el.`name` AS `level`,
			e.message,
			e.error_code,
			d.devicename,
			IFNULL(el.title_trans, "N/A") AS err_level_title_trans,
			IFNULL(dt.title_trans, "N/A") AS device_type_title_trans,
			IFNULL(e.title_trans, "N/A") AS error_title_trans,
			<include refid="com.nwm.common.siteName"/> AS site_name,
			s.id AS id_site,
			d.id as id_device,
			i.icon AS icon_alert,
			el.id AS id_error_level,
			el.level,
			DATE_FORMAT( CONVERT_TZ( l.start_date, t.`offset`, #{offset_timezone} ), #{format_sql_long} ) AS start,
			DATE_FORMAT( CONVERT_TZ( l.start_date,'+00:00', t.`offset`) , '%m/%d/%Y %H:%i %p') AS start_date,
			DATE_FORMAT(CONVERT_TZ( l.end_date,'+00:00', t.`offset`), '%m/%d/%Y %H:%i %p') AS end_date,
			
			CONCAT_WS('', 
				IF( FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / (60*24))) <![CDATA[<]]> 0 , 0, FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time}) / (60*24)))), 'd ',
				IF(MOD(FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / 60)), 24) <![CDATA[<]]> 0, 0, MOD(FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / 60)), 24)), 'h ',
				IF( MOD((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time})), 60) <![CDATA[<]]> 0, 0, MOD((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time})), 60)), 'm'
			) AS duration,
			IFNULL( FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time}))) , 0) AS open_period,
			
			CASE
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit,
			
			CASE
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit,
			
			<include refid="com.nwm.common.keyIndicatorField"/>
			
		FROM
			`alert` l
			LEFT JOIN error e ON e.id = l.id_error
			LEFT JOIN error_level el ON el.id = e.id_error_level
			LEFT JOIN icon i ON i.id = el.id_icon
			LEFT JOIN device d ON d.id = l.id_device
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE e.`status` = 1 AND e.is_delete = 0
			AND s.enable_alert = 1
			AND l.is_delete = 0
			<include refid="com.nwm.common.deviceByDomainCondition"/>
	        
			<if test="view_history == 'active'">
				AND l.status = 1
			</if>
			<if test="view_history != 'active'">
				AND l.status = 0
			</if>
			
			<if test="date_from != null and date_to != null">
				AND CONVERT_TZ( l.start_date, '+00:00', t.`offset` )  BETWEEN #{date_from}  AND #{date_to}
			</if>
			<if test="id_sites != null and !id_sites.isEmpty()">
				AND s.id IN  (
					<foreach item="item" index="index" collection="id_sites" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="id_levels != null and !id_levels.isEmpty()">
				AND el.id IN  (
					<foreach item="item" index="index" collection="id_levels" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="site_name != null">
				AND s.`name` LIKE CONCAT("%",#{site_name}, "%")
			</if>
			
			
			GROUP BY l.id 
			
			<choose>
				<when test="sort_column == 'id'">
			      ORDER BY l.`id` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'site_name'">
			      ORDER BY s.`name` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'priority_name'">
			      ORDER BY el.`level` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'message'">
			      ORDER BY e.`message` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'devicename'">
			      ORDER BY d.`devicename` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'start_date'">
			      ORDER BY l.`start_date` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'end_date'">
			      ORDER BY l.`end_date` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'open_period'">
			      ORDER BY `open_period` ${order_by}
			    </when>
			    
			    
			    <otherwise>
			      ORDER BY id DESC
			    </otherwise>
			  </choose>
  
			LIMIT #{limit} OFFSET #{offset};
	</select>
	
	
	<select id="getAlertCustomerViewTotalCount" resultMap="AlertMap" parameterType="String">
		SELECT
			COUNT(l.id) as totalRecord
			
		FROM
			`alert` l
			LEFT JOIN error e ON e.id = l.id_error
			LEFT JOIN error_level el ON el.id = e.id_error_level
			LEFT JOIN device d ON d.id = l.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE  e.`status` = 1 AND e.is_delete = 0
			AND s.enable_alert = 1
			<if test="view_history == 'active'">
				AND l.status = 1
				AND l.resolved = 0
			</if>
			<if test="view_history != 'active'">
				AND l.status = 0
			</if>
			
			<if test="date_from != null and date_to != null">
				AND CONVERT_TZ( l.start_date, '+00:00', t.`offset` )  BETWEEN #{date_from}  AND #{date_to}
			</if>

			<if test="id_sites != null and !id_sites.isEmpty()">
				AND s.id IN  (
					<foreach item="item" index="index" collection="id_sites" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="id_levels != null and !id_levels.isEmpty()">
				AND el.id IN  (
					<foreach item="item" index="index" collection="id_levels" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="site_name != null">
				AND s.`name` LIKE CONCAT("%",#{site_name}, "%")
			</if>
  	</select>
  	
  	
  	<select id="countNotificationAlert" resultType="int" parameterType="com.nwm.api.entities.CustomerEntity">
	  	SELECT
			COUNT( DISTINCT a.id ) AS totalRecord 
		FROM
			site s
			LEFT JOIN site_customer_map scm ON s.id = scm.id_site
			LEFT JOIN device d ON d.id_site = s.id
			LEFT JOIN alert a ON a.id_device = d.id 
		WHERE
			
			s.`status` = 1 
			AND s.is_delete = 0 
			AND a.`status` = 1 
			AND a.is_delete = 0 
			AND d.`status` = 1 
			AND d.is_delete = 0
			AND s.enable_alert = 1
			
			<include refid="com.nwm.common.deviceByDomainCondition"/>
	        
			<if test="customer_type == '1d607a2011ba58ed52cc32db71ffd37d' and id_sites != null and !id_sites.isEmpty()">
			AND s.id IN  (
				<foreach item="item" index="index" collection="id_sites" separator=", ">
					#{item.id}
				</foreach>
			)
			</if>

			<if test="customer_type == '4ed69755138c0dde957520f6b995a98b'">
				AND scm.id_customer = #{id_customer}
			</if>
			
  	</select>
  	
  	
  	<select id="getListBySiteAdmin" resultType="Map" parameterType="String" >
		SELECT
			l.id,
			l.asset,
			el.name AS priority_name,
			l.capacity,
			l.`status`,
			l.alert_acknowledged,
			l.disable_notification,
			l.resolved,
			l.note,
			IF(l.`status` = 1, 'Open', 'Close') AS status_name,
			el.`name` AS `level`,
			e.message,
			e.error_code,
			d.devicename,
			<include refid="com.nwm.common.siteName"/> AS site_name,
			s.id AS id_site,
			d.id as id_device,
			i.icon AS icon_alert,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			d.id AS id_device,
			DATE_FORMAT( l.start_date, '%Y-%m-%d %H:%i:%s') AS org_start_date,
			el.id AS id_error_level,
			DATE_FORMAT( CONVERT_TZ( l.start_date, t.`offset`, #{offset_timezone} ), #{format_sql_long} ) AS start,
			DATE_FORMAT( CONVERT_TZ( l.start_date,'+00:00', t.`offset`) , '%m/%d/%Y %H:%i %p') AS start_date,
			DATE_FORMAT(CONVERT_TZ( l.end_date,'+00:00', t.`offset`), '%m/%d/%Y %H:%i %p') AS end_date,
			DATE_FORMAT(CONVERT_TZ( d.last_updated,'+00:00', t.`offset`), '%m/%d/%Y %H:%i %p') AS last_updated,
			CONCAT_WS('', 
				IF( FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / (60*24))) <![CDATA[<]]> 0 , 0, FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time}) / (60*24)))), 'd ',
				IF(MOD(FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / 60)), 24) <![CDATA[<]]> 0, 0, MOD(FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / 60)), 24)), 'h ',
				IF( MOD((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time})), 60) <![CDATA[<]]> 0, 0, MOD((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time})), 60)), 'm'
			) AS duration,
			IFNULL( FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time}))) , 0) AS open_period
			
		FROM
			`alert` l
			LEFT JOIN error e ON e.id = l.id_error
			LEFT JOIN error_level el ON el.id = e.id_error_level
			LEFT JOIN icon i ON i.id = el.id_icon
			LEFT JOIN device d ON d.id = l.id_device
			
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE e.`status` = 1 AND e.is_delete = 0 AND s.id = #{id_site} 
			AND l.is_delete = 0
			AND s.enable_alert = 1
			
			<include refid="com.nwm.common.deviceByDomainCondition"/>
	        
			<if test="view_history == 'active'">
				AND l.status = 1
			</if>
			<if test="view_history != 'active'">
				AND l.status = 0
			</if>
			
			<if test="date_from != null and date_to != null">
				AND CONVERT_TZ( l.start_date, '+00:00', t.`offset` )  BETWEEN #{date_from}  AND #{date_to}
			</if>
			
			
			<if test="id_levels != null and !id_levels.isEmpty()">
				AND el.id IN  (
					<foreach item="item" index="index" collection="id_levels" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="site_name != null">
				AND s.`name` LIKE CONCAT("%",#{site_name}, "%")
			</if>
			
			
			GROUP BY l.id 
			
			<choose>
				<when test="sort_column == 'id'">
			      ORDER BY l.`id` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'site_name'">
			      ORDER BY s.`name` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'priority_name'">
			      ORDER BY el.`level` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'message'">
			      ORDER BY e.`message` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'devicename'">
			      ORDER BY d.`devicename` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'start_date'">
			      ORDER BY l.`start_date` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'end_date'">
			      ORDER BY l.`end_date` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'open_period'">
			      ORDER BY `open_period` ${order_by}
			    </when>
			    
			    
			    <otherwise>
			      ORDER BY id DESC
			    </otherwise>
			  </choose>
	</select>
	
	
	<select id="getSiteDetail" resultType="com.nwm.api.entities.SiteEntity" parameterType="com.nwm.api.entities.AlertEntity">
		SELECT
			* 
		FROM
			site s 
		WHERE
			s.`status` = 1 
			AND s.is_delete = 0 
			AND s.id = #{id_site} LIMIT 1;
  	</select>
	
	
	<update id="updateStatus">
		UPDATE `alert`
		SET
			`status` = #{status},
			`end_date` = #{end_date}
		WHERE
			`id` = #{id}
	</update>
	
	
	<select id="getACKByEmplyee" resultType="com.nwm.api.entities.AlertHistoryEntity" parameterType="com.nwm.api.entities.AlertHistoryEntity">
		SELECT
			* 
		FROM
			alert_history s 
		WHERE
			s.`id_alert` = #{id_alert} 
			AND s.`id_employee` = #{id_employee} 
			LIMIT 1;
  	</select>
  	
  	
  	
  	<insert id="insertAlertHistory" useGeneratedKeys="true" keyProperty="id_alert">
		INSERT INTO `alert_history`(
			`id_alert`,
			`id_employee`,
			`created_date`
		)VALUES(
			#{id_alert},
			#{id_employee},
			NOW()
		);
	</insert>
	
	
	
	<update id="updateAlertHistory">
		UPDATE `alert_history`
		SET
			`created_date` = NOW()
		WHERE
			`id_alert` = #{id_alert} AND `id_employee` = #{id_employee}
	</update>
	
	
	<update id="updateAlert">
		UPDATE `alert`
		SET
			<if test="status == 0">
			`end_date` = NOW(),
			</if>
			<if test="status == 1">
			`end_date` = null,
			</if>
			
			`alert_acknowledged` = #{alert_acknowledged},
			`disable_notification` = #{disable_notification},
			`resolved` = #{resolved},
			`status` = #{status},
			`note` = #{note}
		WHERE
			`id` = #{id}
	</update>
	
	
	<sql id="alertSummary">
		SELECT
			COUNT(*)
		FROM
			alert a
			JOIN device d ON d.id = a.id_device
			JOIN error e ON a.id_error = e.id 
			JOIN site s ON s.id = d.id_site
			JOIN time_zone t ON t.id = s.id_time_zone
			<if test="is_supper_admin != 1">
				JOIN site_employee_map sem ON sem.id_site = s.id AND sem.id_employee = #{id_employee} AND sem.is_hiding = 0
			</if>
		WHERE
			a.`status` = 1 
			AND a.is_delete = 0
			AND a.resolved = 0
			AND e.`status` = 1
			AND e.is_delete = 0
			AND d.`status` = 1
			AND d.is_delete = 0
			AND s.status = 1
			AND s.is_delete = 0
			AND s.enable_alert = 1
			AND (CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			<if test="id_sites != null and !id_sites.isEmpty()">
				AND d.id_site IN  (
					<foreach item="item" index="index" collection="id_sites" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="!isUserNW.booleanValue()">
				AND e.id_error_level != 14
			</if>
			
			<include refid="com.nwm.common.deviceByDomainCondition"/>
			
			<include refid="com.nwm.common.siteByDomainCondition"/>
	</sql>
	
	<select id="getAlertSummary" resultType="com.nwm.api.entities.AlertEntity" parameterType="com.nwm.api.entities.AlertEntity">
		SELECT (
			<include refid="alertSummary" />
			AND e.id_error_level = 13
		) AS lowPriority,
		(
			<include refid="alertSummary" />
			AND e.id_error_level = 11
		) AS highPriority,
		(
			<include refid="alertSummary" />
		) AS totalError
		
				
  	</select>
  	
  	
  	<select id="getDetailSendMail" resultType="com.nwm.api.entities.AlertEntity" parameterType="com.nwm.api.entities.AlertEntity">
		SELECT
			a.id,
			<include refid="com.nwm.common.siteName"/> AS site_name,
			d.devicename,
			IF(a.start_date IS NULL , "-", DATE_FORMAT( CONVERT_TZ( a.start_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS start_date,
			IF(a.end_date IS NULL , "-", DATE_FORMAT( CONVERT_TZ( a.end_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS end_date,
			e.message,
			e.error_code,
			IF(a.`status` = 0, 'Closed', 'Opened') AS `status_name`,
			a.open_send_mail,
			a.close_send_mail,
			s.cf_email_subscribers,
			a.`status`,
			a.note,
			s.id AS id_site,
			s.alert_mail_bcc,
			s.alert_mail_cc
		FROM
			alert a
			LEFT JOIN error e ON e.id = a.id_error
			LEFT JOIN device d ON d.id = a.id_device
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			s.enable_alert = 1
			AND a.id = #{id};
  	</select>
  	
  	
  	<update id="UpdateErrorRow">
	    UPDATE `alert` SET `status` = 0, `end_date` = #{end_date} 
	    WHERE `id_error` = #{id_error} AND `id_device` = #{id_device} AND id = #{id}
	</update>
	
	
	<select id="getListAlertGroupBySite" resultType="Map">
	
		SELECT
			s.id,
			SHA1(s.id) AS hash_id,
			<include refid="com.nwm.common.siteName"/> AS site_name,
			s.dc_capacity,
			s.ac_capacity,
			SUM(if(d.id_device_type = 1, 1, 0)) AS totalInverter,
			SUM(if(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, 1, 0)) AS totalMeter,
			IF( (SUM(IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, d.last_value, 0))) > 0, SUM(IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, d.last_value, 0)), SUM(IF(d.id_device_type = 1, d.last_value, 0)) ) AS power,
			DATE_FORMAT(CONVERT_TZ(MAX(IF(d.id_device_type = 5, d.last_updated, NULL)), 'UTC', t.value), '%m/%d/%Y %H:%i') AS last_updated,
			h.is_hiding,
			g.alertMeter,
			g.alertInverter,
			g.totalAlert,
			g.start_date
		FROM
			site s
			JOIN device d ON d.id_site = s.id
			JOIN time_zone t ON t.id = s.id_time_zone
			
			<if test="is_supper_admin != 1">
				JOIN site_employee_map sem ON sem.id_site = s.id AND sem.id_employee = #{id_employee} AND sem.is_hiding = 0
			</if>
			
			LEFT JOIN (
				SELECT
					id_site,
					MAX(is_hiding) AS is_hiding
				FROM site_employee_map
				GROUP BY id_site
			) h ON h.id_site = s.id
			
			JOIN (
				SELECT
					s.id,
					MAX(a.start_date) AS start_date,
					SUM(if(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, 1, 0)) AS alertMeter,
					SUM(if(d.id_device_type = 1, 1, 0)) AS alertInverter,
					COUNT(a.id) AS totalAlert
				FROM
					alert a
					JOIN error e ON e.id = a.id_error
					JOIN error_level el ON el.id = e.id_error_level
					JOIN device d ON d.id = a.id_device
					JOIN site s ON s.id = d.id_site
					JOIN time_zone t ON t.id = s.id_time_zone
					<if test="is_supper_admin != 1">
						JOIN site_employee_map sem ON sem.id_site = s.id AND sem.id_employee = #{id_employee} AND sem.is_hiding = 0
					</if>
				WHERE
					e.`status` = 1
					AND e.is_delete = 0
					AND d.`status` = 1
					AND d.is_delete = 0
					AND a.is_delete = 0
					AND s.status = 1
					AND s.is_delete = 0
					AND s.enable_alert = 1
					
					<if test="!isUserNW.booleanValue()">
						AND el.id != 14
					</if>
					
					<include refid="com.nwm.common.deviceByDomainCondition"/>
					
					<include refid="com.nwm.common.siteByDomainCondition"/>
					
					<include refid="viewHistoryCondition">
						<property name="alertTable" value="a"/>
					</include>
					
				GROUP BY s.id
			) g ON g.id = s.id
		WHERE
			s.`status` = 1 
			AND s.is_delete = 0 
			AND s.enable_alert = 1
			AND d.`status` = 1
			AND d.is_delete = 0
			AND (CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			
			<include refid="com.nwm.common.deviceByDomainCondition"/>
			
			<include refid="com.nwm.common.siteByDomainCondition"/>
			
			<if test="keyword != null">
				AND s.`name` LIKE CONCAT("%",#{keyword}, "%")
			</if>
			
		GROUP BY s.id
		
		ORDER BY
			<choose>
			    <when test="sort_column == 'total_alert'">
			    	g.`totalAlert` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'inverter_alert'">
			    	g.`alertInverter` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'meter_alert'">
			    	g.`alertMeter` ${order_by}
			    </when>
			    
			    <when test="sort_column != null and sort_column != ''">
	                ${sort_column} ${order_by}
	            </when>
			    
			    <otherwise>
			    	g.start_date DESC
			    </otherwise>
			  </choose> , s.id DESC
  
		<if test="limit > 0">
			LIMIT ${limit} OFFSET ${offset};
		</if>
	</select>
	
	<select id="getTotalGroupAlertSite" resultMap="AlertMap">
		SELECT
			COUNT(s.id) AS totalRecord
		FROM
			site s
			JOIN time_zone t ON t.id = s.id_time_zone
			<if test="is_supper_admin != 1">
				JOIN site_employee_map sem ON sem.id_site = s.id AND sem.id_employee = #{id_employee} AND sem.is_hiding = 0
			</if>
			
			JOIN (
				SELECT
					s.id,
					SUM(if(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, 1, 0)) AS alertMeter,
					SUM(if(d.id_device_type = 1, 1, 0)) AS alertInverter,
					COUNT(a.id) AS totalAlert
				FROM
					alert a
					JOIN device d ON d.id = a.id_device
					JOIN site s ON s.id = d.id_site
					JOIN time_zone t ON t.id = s.id_time_zone
					JOIN error e ON e.id = a.id_error
					JOIN error_level el ON el.id = e.id_error_level
					<if test="is_supper_admin != 1">
						JOIN site_employee_map sem ON sem.id_site = s.id AND sem.id_employee = #{id_employee} AND sem.is_hiding = 0
					</if>
				WHERE
					e.`status` = 1
					AND e.is_delete = 0
					AND d.`status` = 1
					AND d.is_delete = 0
					AND a.is_delete = 0
					AND s.status = 1
					AND s.is_delete = 0
					AND s.enable_alert = 1
					
					<if test="!isUserNW.booleanValue()">
						AND el.id != 14
					</if>
					
					<include refid="com.nwm.common.deviceByDomainCondition"/>
					
					<include refid="com.nwm.common.siteByDomainCondition"/>
					
					<include refid="viewHistoryCondition">
						<property name="alertTable" value="a"/>
					</include>
				GROUP BY s.id
			) g ON g.id = s.id
		WHERE
			s.`status` = 1 
			AND s.is_delete = 0 
			AND s.enable_alert = 1
			AND (CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', t.value) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			
			<include refid="com.nwm.common.siteByDomainCondition"/>
			
			<if test="keyword != null">
				AND s.`name` LIKE CONCAT("%",#{keyword}, "%")
			</if>
  	</select>
  	
  	
  	<select id="getAllAlertBySite" resultType="Map" >
		SELECT
			l.id,
			l.asset,
			el.name AS priority_name,
			l.capacity,
			l.`status`,
			l.note,
			l.alert_acknowledged,
			l.disable_notification,
			l.resolved,
			IF(l.`status` = 1, 'Open', 'Close') AS status_name,
			DATE_FORMAT( CONVERT_TZ( l.start_date,'UTC', t.value), '%Y-%m-%d %H:%i' ) AS start,
			el.`name` AS `level`,
			e.message,
			e.error_code,
			IFNULL(dg.title_trans, "N/A") AS device_group_title_trans,
			IFNULL(el.title_trans, "N/A") AS err_level_title_trans,
			IFNULL(dt.title_trans, "N/A") AS device_type_title_trans,
			IFNULL(e.title_trans, "N/A") AS error_title_trans,
			d.devicename,
			<include refid="com.nwm.common.siteName"/> AS site_name,
			s.id AS id_site,
			SHA1(s.id) AS hash_id,
			d.id as id_device,
			d.id_device_type,
			d.datatablename,
			i.icon AS icon_alert,
			el.id AS id_error_level,
			el.level,
			DATE_FORMAT(CONVERT_TZ( l.start_date,'UTC', t.value) , '%m/%d/%Y %H:%i') AS start_date,
			DATE_FORMAT(CONVERT_TZ( l.end_date,'UTC', t.value), '%m/%d/%Y %H:%i') AS end_date,
			DATE_FORMAT(CONVERT_TZ( d.last_updated,'UTC', t.value), '%m/%d/%Y %H:%i') AS last_updated,
			
			CONCAT_WS('', 
				IF( FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'UTC', t.value),#{current_time}) / (60*24))) <![CDATA[<]]> 0 , 0, FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'UTC', t.value), #{current_time}) / (60*24)))), 'd ',
				IF(MOD(FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'UTC', t.value),#{current_time}) / 60)), 24) <![CDATA[<]]> 0, 0, MOD(FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'UTC', t.value),#{current_time}) / 60)), 24)), 'h ',
				IF( MOD((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'UTC', t.value), #{current_time})), 60) <![CDATA[<]]> 0, 0, MOD((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'UTC', t.value), #{current_time})), 60)), 'm'
			) AS duration,
			IFNULL( FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'UTC', t.value), #{current_time}))) , 0) AS open_period,
			
			CASE
				WHEN CONVERT_TZ( l.start_date, 'UTC', t.value ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( l.start_date, 'UTC', t.value ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( l.start_date, 'UTC', t.value ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( l.start_date, 'UTC', t.value ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( l.start_date, 'UTC', t.value ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( l.start_date, 'UTC', t.value ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( l.start_date, 'UTC', t.value ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( l.start_date, 'UTC', t.value ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( l.start_date, 'UTC', t.value ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.value ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit,
			<include refid="com.nwm.common.keyIndicatorField"/>
			
		FROM
			`alert` l
			JOIN error e ON e.id = l.id_error
			JOIN error_level el ON el.id = e.id_error_level
			JOIN icon i ON i.id = el.id_icon
			JOIN device d ON d.id = l.id_device
			JOIN device_group dg ON dg.id = d.id_device_group
			JOIN device_type dt ON dt.id = d.id_device_type
			JOIN site s ON s.id = d.id_site
			JOIN time_zone t ON t.id = s.id_time_zone
			
			<if test="is_supper_admin != 1">
				JOIN site_employee_map sem ON sem.id_site = s.id AND sem.id_employee = #{id_employee} AND sem.is_hiding = 0
			</if>
		WHERE
			e.`status` = 1 
			AND e.is_delete = 0
			AND l.is_delete = 0
			AND s.enable_alert = 1
			AND s.id = #{id}
			
			<if test="!isUserNW.booleanValue()">
				AND el.id != 14
			</if>
			
			<include refid="com.nwm.common.deviceByDomainCondition"/>
			
			<include refid="viewHistoryCondition">
				<property name="alertTable" value="l"/>
			</include>
			
		GROUP BY l.id 
		
		ORDER BY	
			<choose>
			    <when test="sort_column == 'start_date'">
			    	l.`start_date` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'end_date'">
			    	l.`end_date` ${order_by}
			    </when>
			    
			    <when test="sort_column != null and sort_column != ''">
	            	${sort_column} ${order_by}
	            </when>
			    
			    <otherwise>
			    	l.start_date DESC
			    </otherwise>
			</choose> , l.id DESC
	</select>
	
	
	<select id="getDataChart" resultType="com.nwm.api.entities.ChartAlertDateEntity" >
  		SELECT
			FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( m.time, 'UTC', t.value ) ) DIV 900  )* 900, '%m-%d-%Y %H:%i' ) AS time_format,
			FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( m.time, 'UTC', t.value ) ) DIV 900  )* 900, '%m-%d-%Y' ) AS categories_time,
			ROUND(m.nvmActivePower, 1) AS power
		FROM
			${datatablename} m 
			LEFT JOIN device d ON d.id = m.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			m.id_device = #{id_device}
			AND CONVERT_TZ(m.time, 'UTC', t.value ) BETWEEN #{start_date} AND #{end_date}
		GROUP BY
			time_format 
	</select>
	
	<update id="updateIsRead">
		UPDATE `alert`
		SET
			`is_read` = #{is_read}
		WHERE
			`id` = #{id}
	</update>
	
	<update id="updateIsNotification">
			UPDATE `alert`
			SET
				`is_notification` = #{is_notification}
			WHERE
				`id` = #{id};
		
	</update>
	
	<select id="getEmployeeHidingSite" resultType="Map" >
  		SELECT
			e.email
		FROM 
			site_employee_map sem
			LEFT JOIN employee e ON e.id = sem.id_employee
		WHERE
			sem.id_site = #{id_site}
			AND sem.is_hiding = 1
	</select>
	
	<select id="getAlertPerPage" resultType="Map">
		SELECT
			e.alert_per_page
			
		FROM
			employee e
			
		WHERE 
			e.id = #{id_employee}
			LIMIT 1;
  	</select>

</mapper>
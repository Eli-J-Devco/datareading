<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BatchJob">
	<resultMap id="BatchJobMap"
		type="com.nwm.api.entities.DeviceEntity">
		<result property="id" column="id" />
		<result property="id_site" column="id_site" />
		<result property="id_vendor" column="id_vendor" />
		<result property="serial_number" column="serial_number" />
		<result property="modbusdevicenumber" column="modbusdevicenumber" />
		<result property="devicename" column="devicename" />
		<result property="devicetype" column="devicetype" />
		<result property="deviceclass" column="deviceclass" />
		<result property="configuration" column="configuration" />
		<result property="configurationchangetime" column="configurationchangetime" />
		<result property="configurationchecksum" column="configurationchecksum" />
		<result property="datatablename" column="datatablename" />
		<result property="id_customer" column="id_customer" />
		<result property="id_device_type" column="id_device_type" />
		<result property="active" column="active" />
		<result property="id_device_group" column="id_device_group" />
		<result property="keyword" column="keyword" />
		
		
	</resultMap>
	
	<select id="getListSiteSentMailAlert" resultType="com.nwm.api.entities.SiteEntity" >
		SELECT
			s.*
		FROM
			site AS s
		WHERE
			s.`status` = 1 AND s.is_delete = 0 AND s.cf_email_subscribers IS NOT NULL
	</select>
	
	
	
	<select id="getListDeviceSolarOpenWeather" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			s.lat,
			s.lng,
			d.devicename,
			d.datatablename
		FROM
			device d
			LEFT JOIN site s ON d.id_site = s.id 
		WHERE
			d.id_device_group = 24 
			AND s.`status` = 1 
			AND d.`status` = 1 
			AND s.is_delete = 0 
			AND d.is_delete = 0
			AND s.lat != 0
			AND s.lng != 0
	</select>
	
	
	<select id="getListAlertOpenBySite" resultType="Map" >
		SELECT
			a.id,
			a.id_device,
			a.open_send_mail,
			a.close_send_mail,
			d.devicename,
			e.message,
			e.error_code,
			IF(a.`status` = 0, 'Closed', 'Opened') AS `status`,
			IF(a.start_date IS NULL , "N/A", DATE_FORMAT( CONVERT_TZ( a.start_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS start_date,
			IF(a.end_date IS NULL , "N/A", DATE_FORMAT( CONVERT_TZ( a.end_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS end_date
		FROM
			alert a
			LEFT JOIN error e ON e.id = a.id_error
			LEFT JOIN device d ON d.id = a.id_device 
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.`status` = 1 
			AND d.id_site  = #{id}
			AND a.`status` = 1
			AND e.`status` = 1
			AND a.is_delete = 0
			AND e.is_delete = 0
			AND d.is_delete = 0
			AND a.open_send_mail = 0 AND a.`status` = 1
			ORDER BY a.`status` DESC
	</select>
	
	<select id="getListAlertCloseBySite" resultType="Map" >
		SELECT
			a.id,
			a.id_device,
			a.open_send_mail,
			a.close_send_mail,
			d.devicename,
			e.message,
			e.error_code,
			IF(a.`status` = 0, 'Closed', 'Opened') AS `status`,
			IF(a.start_date IS NULL , "N/A", DATE_FORMAT( CONVERT_TZ( a.start_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS start_date,
			IF(a.end_date IS NULL , "N/A", DATE_FORMAT( CONVERT_TZ( a.end_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS end_date
		FROM
			alert a
			LEFT JOIN error e ON e.id = a.id_error
			LEFT JOIN device d ON d.id = a.id_device 
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.`status` = 1 
			AND d.id_site  = #{id}
			AND a.`status` = 1
			AND e.`status` = 1
			AND a.is_delete = 0
			AND e.is_delete = 0
			AND d.is_delete = 0
			AND a.close_send_mail = 0 AND a.`status` = 0
			ORDER BY a.`status` DESC
	</select>
	
	
	
	<update id="updateOpenSentAlert">
		UPDATE `alert`
		SET
			open_send_mail = 1
		WHERE
			`id` = #{id} AND `id_device` = #{id_device}
	</update>
	
	
	<update id="updateCloseSentAlert">
		UPDATE `alert`
		SET
			close_send_mail = 1, open_send_mail = 1
		WHERE
			`id` = #{id} AND `id_device` = #{id_device}
	</update>
	
	
	
	<select id="getListErrorByType" resultType="com.nwm.api.entities.ErrorEntity" >
		SELECT
			e.*
		FROM
			error e 
			LEFT JOIN alert a ON a.id_error = e.id
		WHERE
			e.type = 1 
			AND e.id_device_group = #{id_device_group}
			AND e.`status` = 1
			AND a.id_device = #{id_device} 
			AND a.`status` = 1
	</select>
	
	<select id="getListSite" resultType="com.nwm.api.entities.SiteEntity" >
		SELECT
			t.`value` AS time_zone_value,
			s.*
		FROM
			site AS s
			LEFT JOIN time_zone t ON t.id = s.id_time_zone 
		WHERE
			s.`status` = 1 AND s.is_delete = 0
	</select>
	
	
	
	<select id="getListDeviceBySite" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			dg.code_prefix,
			s.start_date_time,
			s.end_date_time,
			t.`offset` AS timezone_offset,
			t.`value` AS timezone_value,
			d.id_device_group
		FROM
			device AS d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.`status` = 1 AND d.disable_alert = 0  AND s.`status` = 1 AND d.id_site = #{id_site} AND d.id_device_type NOT IN(5)
	</select>
	
	<select id="getLastRowItem" resultType="com.nwm.api.entities.BatchJobTableEntity">
    	SELECT
    		`time`, 
    		id_device, 
    		d.devicename,
    		CONVERT_TZ( u.time, '+00:00', t.`offset` ) AS time_format
		FROM ${datatablename} u
		LEFT JOIN device d ON d.id = u.id_device
		LEFT JOIN site s ON s.id = d.id_site
		LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE u.id_device = #{id_device}
		ORDER BY u.`time` DESC LIMIT 1;
  	</select>
  	
  	
  
	
	
	<select id="getLastValueLifetime" resultType="com.nwm.api.entities.DeviceEntity">
		SELECT
			dv.id_device AS id,
			nvmActiveEnergy AS energy_lifetime 
		FROM
			${datatablename} dv 
		WHERE
			dv.id_device = #{id} 
			AND dv.nvmActiveEnergy > 0 
		ORDER BY
			dv.time DESC 
			LIMIT 1;
			
	</select>
	
	<select id="getLastValueEnergyToday" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id_site,
			d.id,
			ROUND((
					MAX( dv.nvmActiveEnergy ) - MIN( dv.nvmActiveEnergy ) 
					),
				1 
			) AS energy_today 
		FROM
			${datatablename} dv
			LEFT JOIN device d ON d.id = dv.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone 
		WHERE
			d.id = #{id}
			AND dv.nvmActiveEnergy > 0 
			AND DATE_FORMAT(CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') = DATE_FORMAT( #{current_time}, '%Y-%m-%d')
			AND s.`status` = 1 
			AND d.`status` = 1 
	</select>
	
	
	<select id="getDataDeviceEnergyThisMonth" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id_site,
			d.id,
			ROUND((
					MAX( dv.nvmActiveEnergy ) - MIN( dv.nvmActiveEnergy ) 
					),
				1 
			) AS energy_this_month 
		FROM
			${datatablename} dv
			LEFT JOIN device d ON d.id = dv.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone 
		WHERE
			d.id = #{id}
			AND dv.nvmActiveEnergy > 0 
			AND DATE_FORMAT(CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m') = DATE_FORMAT( #{current_time}, '%Y-%m')
			AND s.`status` = 1 
			AND d.`status` = 1 
	</select>
	
	<update id="updateDataDeviceEnergyThisMonth">
		UPDATE `device`
		SET
			`energy_this_month` = #{energy_this_month}
		WHERE
			`id` = #{id}
	</update>
	
	
	<update id="updateDataDeviceLifetime">
		UPDATE `device`
		SET
			`energy_lifetime` = #{energy_lifetime}
		WHERE
			`id` = #{id}
	</update>
	
	
	
	<update id="updateDataDeviceEnergyToday">
		UPDATE `device`
		SET
			`energy_today` = #{energy_today}
		WHERE
			`id` = #{id}
	</update>
	

	<select id="getListMeterAndInverter" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			dg.code_prefix,
			s.start_date_time,
			s.end_date_time,
			t.`offset` AS timezone_offset,
			t.`value` AS timezone_value,
			d.id_device_group
		FROM
			device AS d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.`status` = 1 AND d.is_delete = 0
			AND s.`status` = 1 AND d.id_device_type IN (1, 3) AND d.disable_alert = 0
	</select>
	
	
	<select id="getListDeviceCelModem" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			d.id_device_group,
			d.ssh_host,
			d.ssh_port,
			d.ssh_user,
			d.ssh_pass
		FROM
			device AS d
			LEFT JOIN site s ON s.id = d.id_site 
		WHERE
			d.`status` = 1 AND d.is_delete = 0
			AND s.`status` = 1 AND d.id_device_group IN (40) 
			AND d.ssh_host IS NOT NULL
			AND d.ssh_user IS NOT NULL
			AND d.ssh_pass IS NOT NULL
			AND d.ssh_port IS NOT NULL
	</select>
	
	
	
	<select id="getListDeviceCelModemSierraRs50" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			d.id_device_group,
			d.ssh_host,
			d.ssh_port,
			d.ssh_user,
			d.ssh_pass
		FROM
			device AS d
			LEFT JOIN site s ON s.id = d.id_site 
		WHERE
			d.`status` = 1 AND d.is_delete = 0
			AND s.`status` = 1 AND d.id_device_group IN (44) 
			AND d.ssh_host IS NOT NULL
			AND d.ssh_user IS NOT NULL
			AND d.ssh_pass IS NOT NULL
			AND d.ssh_port IS NOT NULL
	</select>
	
	
	<select id="getListDeviceDatalogger" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			d.id_device_group,
			d.ssh_host,
			d.ssh_port,
			d.ssh_user,
			d.ssh_pass
		FROM
			device AS d
			LEFT JOIN site s ON s.id = d.id_site 
		WHERE
			d.`status` = 1 AND d.is_delete = 0
			AND s.`status` = 1 AND d.id_device_group IN (19)
			AND d.ssh_host IS NOT NULL
			AND d.ssh_user IS NOT NULL
			AND d.ssh_pass IS NOT NULL
			AND d.ssh_port IS NOT NULL
	</select>
	
	
	<select id="getListAccountLock" resultType="com.nwm.api.entities.UserEntity" >
		SELECT
			u.`id`,
			u.`password`,
			u.`first_name`,
			u.`last_name`,
			u.`id` AS id_user,
			u.`email` AS user_name,
			concat( u.first_name, ', ', u.last_name ) AS `name`,
			u.avatar,
			u.alert_filter,
			DATE_FORMAT(u.lock_time, "%Y-%m-%d %H:%s:%i") AS lock_time,
			u.account_locked,
			u.failed_attempt,
			( SELECT `value` FROM system_setup WHERE type = 'max_failed_attempt' ) AS max_failed_attempt,
			( SELECT `value` FROM system_setup WHERE type = 'time_account_locked' ) AS time_account_locked
			
		FROM
			`employee` u
		WHERE u.`status` = 1 AND u.is_delete = 0 AND u.account_locked = 1 GROUP BY u.id;
	</select>
	
	
	
	
	<select id="getListMeterAndInverterBySite" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			dg.code_prefix,
			s.start_date_time,
			s.end_date_time,
			t.`offset` AS timezone_offset,
			t.`value` AS timezone_value,
			d.id_device_group,
			d.last_updated,
			d.job_tablename
		FROM
			device AS d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.`status` = 1 AND d.is_delete = 0
			AND s.`status` = 1 AND d.id_device_type IN (1, 3) AND d.disable_alert = 0 AND s.id = #{id_site}
	</select>
	
	
	
	<select id="getListAllDevice" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			dg.code_prefix,
			s.start_date_time,
			s.end_date_time,
			t.`offset` AS timezone_offset,
			t.`value` AS timezone_value,
			d.id_device_group,
			d.id_device_type,
			d.job_tablename
		FROM
			device AS d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.`status` = 1 AND d.is_delete = 0
			AND s.`status` = 1 AND d.id_device_type IN (1, 3, 4, 6) AND s.`status` = 1 AND d.disable_alert = 0
	</select>
	
	
	<select id="getLastRowItemResetLastValue" resultType="com.nwm.api.entities.BatchJobTableEntity">
    	SELECT
    		d.id,
    		`time`, 
    		id_device, 
    		d.devicename,
    		<if test="id_device_type == 1 or id_device_type == 3">
				u.nvmActivePower AS nvmActivePower,
			</if>
			
			<if test="id_device_type == 4 or id_device_type == 6 ">
				u.nvm_irradiance AS nvmActivePower,
			</if>
			
    		CONVERT_TZ( u.time, '+00:00', t.`offset` ) AS time_format
    		
    		
		FROM ${datatablename} u
		LEFT JOIN device d ON d.id = u.id_device
		LEFT JOIN site s ON s.id = d.id_site
		LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE u.id_device = #{id_device}
		AND DATE_FORMAT( u.time, '%Y-%m-%d %H:%i:%s') <![CDATA[>=]]> DATE_FORMAT( DATE_ADD( #{current_time} ,INTERVAL -60 MINUTE), '%Y-%m-%d %H:%i:%s')
		ORDER BY u.`time` DESC LIMIT 1;
  	</select>
	

	
	<select id="getLastRowItemCheckNoProduction" resultType="com.nwm.api.entities.BatchJobTableEntity">
    	SELECT
			`time`,
			id_device,
			error,
			s.start_date_time,
			s.end_date_time,
			d.id,
			IFNULL(u.nvmActivePower, 0.001) AS nvmActivePower
		FROM
			${datatablename} u
			LEFT JOIN device d ON d.id = u.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			
		WHERE
		
			u.id_device = #{id}
			AND DATE_FORMAT(CONVERT_TZ( u.time, '+00:00', t.`offset` ), "%Y-%m-%d %H:%i:%s") <![CDATA[<=]]> DATE_FORMAT( #{current_time}, "%Y-%m-%d 18:00:00")
		ORDER BY
			u.`time` DESC 
			LIMIT 1;
  	</select>
  	
	<select id="checkAlertlExist" parameterType="com.nwm.api.entities.AlertEntity" resultType="int">
    	SELECT
    	COUNT(u.id) as totalRecord
		FROM `alert` as u
		LEFT JOIN error e ON e.id = u.id_error
		WHERE u.id_device = #{id_device} 
		AND u.id_error = #{id_error} 
		AND u.`status` = 1
		AND u.is_delete = 0
		AND e.is_delete = 0 
		AND e.`status` = 1;
		
			
  	</select>
  	
  	
  	<select id="checkErrorExist" parameterType="com.nwm.api.entities.ErrorEntity" resultType="int">
    	SELECT
    	COUNT(e.id) as totalRecord
		FROM `error` as e
		WHERE e.id = #{id_error} 
		AND e.is_delete = 0 
		AND e.`status` = 1;
		
			
  	</select>
	
	
	
	<select id="getRowItemAlert" resultType="com.nwm.api.entities.BatchJobTableEntity">
    	SELECT
    	u.id,
    	u.id_device,
    	u.id_error
		FROM `alert` as u
		WHERE u.id_device = #{id} AND u.id_error = #{id_error} AND u.`status` = 1 AND u.is_delete = 0
			LIMIT 1;
  	</select>
  	
  	
	
	<update id="updateCloseAlert">
		UPDATE `alert`
		SET
			status = 0,
			end_date = #{end_date}
		WHERE
			`id` = #{id} AND `id_device` = #{id_device}
	</update>
	
	
	
	<update id="updateWeather">
		UPDATE `site`
		SET
			weather_icon = #{weather_icon},
			weather_description = #{weather_description}
		WHERE
			`id` = #{id_site}
	</update>
	
	
	<update id="updateLastValueDevice">
		UPDATE `device`
		SET
			`last_value` = #{last_value}
		WHERE
			`id` = #{id}
	</update>
	
	
	<update id="updateSunriseSunset">
		UPDATE `site`
		SET
			start_date_time = #{start_date_time},
			end_date_time = #{end_date_time}
		WHERE
			`id` = #{id}
	</update>
		

	<select id="getListDevice" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			dg.code_prefix,
			s.start_date_time,
			s.end_date_time,
			t.`offset` AS timezone_offset,
			t.`value` AS timezone_value,
			d.id_device_group
		FROM
			device AS d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			d.`status` = 1 
			AND s.`status` = 1 AND d.id_device_type IN (1, 3)  AND d.id_device_type NOT IN(5)
	</select>
	
	
	
	
	
	
  	
  	
  	<select id="getErrorItem" resultType="com.nwm.api.entities.ErrorEntity">
    	SELECT
    		*
		FROM error e
		WHERE e.error_code = #{error_code} AND e.id_device_group = #{id_device_group} LIMIT 1;
  	</select>
  	
  	
  	
  	
  	
  	<insert id="insertAlert" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `alert`(
			`id_device`,
			`id_error`,
			`start_date`,
			`end_date`,
			`asset`,
			`capacity`
		)VALUES(
			#{id_device},
			#{id_error},
			#{start_date},
			#{end_date},
			#{asset},
			#{capacity}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	
	<select id="getListAlertCronJob" resultType="Map" parameterType="String">
		SELECT
			a.id,
			a.id_device,
			a.id_error,
			d.datatablename,
			d.id_device_type,
			d.id_device_group
		FROM
			alert AS a
			LEFT JOIN device d ON d.id = a.id_device 
		WHERE
			a.`status` = 1 
			AND a.is_delete = 0 
			AND d.`status` = 1 
			AND d.is_delete = 0
					
	</select>
	
	
	<select id="getLastRowItemAutoCloseAlert" resultType="com.nwm.api.entities.BatchJobTableEntity">
    	SELECT
    		u.`time`, 
    		u.`id_device`, 
    		u.`error`
		FROM ${datatablename} u 
		LEFT JOIN device d ON u.id_device = d.id
		LEFT JOIN site s ON d.id_site = s.id
		LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE u.id_device = #{id_device}
		AND CONVERT_TZ( u.time, '+00:00', t.`offset` ) <![CDATA[<=]]>  CONVERT_TZ( ( NOW() ), 'UTC', t.`value` )
		ORDER BY `time` DESC LIMIT 1;
  	</select>
  	
  	
  	<select id="getLastRowItemCheckNoCommunication" resultType="com.nwm.api.entities.BatchJobTableEntity">
    	SELECT
    		u.`time`, 
    		u.`id_device`, 
    		u.`error`,
    		IFNULL(u.nvmActivePower, 0.001) AS nvmActivePower,
    		u.nvmActiveEnergy,
    		d.devicename
		FROM ${datatablename} u 
		LEFT JOIN device d ON u.id_device = d.id
		LEFT JOIN site s ON d.id_site = s.id
		LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE u.id_device = #{id_device}
		
		AND DATE_FORMAT( u.time , '%Y-%m-%d %H:%i:%s') <![CDATA[>=]]> DATE_FORMAT( DATE_ADD( NOW() ,INTERVAL -45 MINUTE) , '%Y-%m-%d %H:%i:%s')
		AND DATE_FORMAT( u.time , '%Y-%m-%d %H:%i:%s') <![CDATA[<=]]> convert_tz( #{current_time},  t.`offset`, '+00:00')
		
		<!-- AND DATE_FORMAT(CONVERT_TZ( u.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:%i:%s') <![CDATA[>=]]> DATE_FORMAT(CONVERT_TZ( DATE_ADD( NOW() ,INTERVAL -30 MINUTE) , '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i:%s') 
		
		AND DATE_FORMAT(CONVERT_TZ( u.time, '+00:00', t.`offset` ), "%Y-%m-%d %H:%i:%s") <![CDATA[<=]]> DATE_FORMAT( #{current_time}, "%Y-%m-%d 18:00:00") -->
		
		ORDER BY u.time DESC LIMIT 1;
  	</select>
  	
  	<select id="getAlertDetail" resultType="com.nwm.api.entities.AlertEntity">
    	SELECT
    	u.*
		FROM `alert` as u
		WHERE u.id_device = #{id_device} AND u.id_error = #{id_error} AND u.`status` = 1 AND u.is_delete = 0
			LIMIT 1;
  	</select>
  	
  	

  	
  	
  	<delete id="deleteAlert">
		DELETE FROM `alert`
		WHERE id = #{id} AND id_device = #{id_device} AND id_error = #{id_error}
	</delete>
	
	<update id="UpdateErrorMultiRow">
	    UPDATE `alert` SET `status` = 0, `end_date` = #{end_date} 
	    WHERE `id_error` = #{id_error} AND `id_device` = #{id_device}
	</update>

	
	
	
	<select id="getDeviceDatalogger" resultMap="BatchJobMap" parameterType="Integer">
		SELECT
			* 
		FROM
			device d 
		WHERE
			d.`status` = 1 
			AND d.id_site = #{id_site}
			AND d.id_device_group = 19 
			LIMIT 1
	</select>
	
	
	<select id="getDataloggerItem" resultType="com.nwm.api.entities.BatchJobTableEntity">
		SELECT
			* 
		FROM
			model_datalogger m
			LEFT JOIN device d ON d.id = m.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			m.id_device = #{id_device}
			AND DATE_FORMAT(CONVERT_TZ( m.time, '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i:%s') <![CDATA[>=]]> DATE_FORMAT(CONVERT_TZ( DATE_ADD( NOW() ,INTERVAL -30 MINUTE) , '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i:%s')
			LIMIT 1;
			
  	</select>
  	
  	
  	<select id="getListDeviceMeterAndInverter" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
		WHERE
			dt.id IN(1,3) 
			AND d.id_site = #{id}
			AND d.`status` = 1 
			AND d.is_delete = 0
	</select>
	
	
	<select id="getListDeviceMeterBySite" resultType="com.nwm.api.entities.DeviceEntity">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site,
			s.table_data_report
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
			LEFT JOIN site s ON s.id = d.id_site
		WHERE
			dt.id IN(3) 
			AND d.id_site = #{id}
			AND d.`status` = 1 
			AND d.is_delete = 0
	</select>
	
	<select id="getListDeviceWeather" resultType="com.nwm.api.entities.DeviceEntity">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site,
			s.table_data_report
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
			LEFT JOIN site s ON s.id = d.id_site
		WHERE
			dt.id IN(4) 
			AND d.id_site = #{id}
			AND d.`status` = 1 
			AND d.is_delete = 0
	</select>
	
	
	<select id="getListDeviceInverterBySite" resultType="com.nwm.api.entities.DeviceEntity">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site,
			s.table_data_report
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
			LEFT JOIN site s ON s.id = d.id_site
		WHERE
			dt.id IN(1) 
			AND d.id_site = #{id}
			AND d.`status` = 1 
			AND d.is_delete = 0
	</select>
	
	
	
	
	<select id="getSiteDataReportIIMW" resultType="com.nwm.api.entities.SiteDataReportEntity">
		SELECT
			t.id_device,
			t.time_full AS `time`,
			t.InverterUptime,
			s.table_data_report,
			IFNULL((t.end_date_time - t.start_date_time), 10) AS DayTime,
			ROUND(t.InverterUptime/ (IFNULL((t.end_date_time - t.start_date_time), 10 )), 2 ) AS InverterUptimeDaytime,
			ROUND(ac.nvmActiveEnergy, 2) AS ActualGeneration,
			ROUND(ac.estimated, 2) AS EstimatedGeneration,
			ROUND(ac.nvmActiveEnergy/ac.estimated, 2) AS EstimatedGenerationIndex,
			IF(ROUND(t.InverterUptime / IFNULL((t.end_date_time - t.start_date_time), 10) ,2) > 1, 1, ROUND(t.InverterUptime / IFNULL((t.end_date_time - t.start_date_time), 10) ,2)) AS InverterAvailability,
			ROUND(ac.nvmActivePower, 2) AS PowerTodayTotal,
			ROUND(ac.avg_nvmActivePower, 2) AS PowerTodayAVG,
			NULL AS POATotal,
			NULL AS POAAVG
		FROM (
			SELECT 
				iv.id_site,
				iv.id_device,
				iv.time_full,
				iv.start_date_time,
				iv.end_date_time,
				iv.format_date,
				COUNT(IF(iv.nvmActivePower > 0, format_date, NULL)) AS InverterUptime
			FROM (
				SELECT
						d.id_site,
						dv.id_device,
						s.start_date_time,
						s.end_date_time,
						dv.time,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_format,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
						IF(SUM(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, SUM(dv.nvmActivePower)) AS nvmActivePower
					FROM
						${datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site 
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE
						dv.id_device = #{id}
						AND dv.nvmActiveEnergy > 0
						AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
						AND s.`status` = 1 
						AND d.`status` = 1 
					GROUP BY time_format
			)iv
			GROUP BY iv.format_date
		)t
		
		
		LEFT JOIN (
			SELECT 
				iv.id_device,
				iv.time_full,
				iv.format_date,
				ROUND(iv.nvmActiveEnergy, 0) AS nvmActiveEnergy,
				iv.time_month,
				ROUND(SUM(iv.nvmActivePower), 2) AS nvmActivePower,
				ROUND(SUM(iv.avg_nvmActivePower), 2) AS avg_nvmActivePower,
				CASE
					 when iv.time_month = '01' then ROUND((SELECT en.jan FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '02' then ROUND((SELECT en.feb FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/28)
					 when iv.time_month = '03' then ROUND((SELECT en.mar FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '04' then ROUND((SELECT en.apr FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '05' then ROUND((SELECT en.may FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '06' then ROUND((SELECT en.jun FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '07' then ROUND((SELECT en.jul FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '08' then ROUND((SELECT en.aug FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '09' then ROUND((SELECT en.sep FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '10' then ROUND((SELECT en.oct FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '11' then ROUND((SELECT en.nov FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '12' then ROUND((SELECT en.`dec` FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					END as estimated
			FROM (
				SELECT
						d.id_site,
						dv.id_device,
						dv.time,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_format,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m' ) AS time_month,
						<!--MAX(dv.nvmActiveEnergy) - MIN(dv.nvmActiveEnergy) AS nvmActiveEnergy, -->
						SUM(dv.MeasuredProduction) AS nvmActiveEnergy,
						IF(SUM(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, SUM(dv.nvmActivePower)) AS nvmActivePower,
						IF(AVG(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, AVG(dv.nvmActivePower)) AS avg_nvmActivePower
					FROM
						${datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site 
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE
						dv.id_device = #{id}
						AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN DATE_FORMAT(#{start_date}, '%Y-%m-%d 00:00:00') AND DATE_FORMAT(#{end_date}, '%Y-%m-%d 23:59:59'))
						AND s.`status` = 1 
						AND d.`status` = 1 
						AND dv.nvmActiveEnergy > 0
					GROUP BY d.id, time_format
			)iv
			GROUP BY iv.format_date
			
		)ac ON ac.format_date = t.format_date
		LEFT JOIN site s ON s.id = t.id_site
		LIMIT 1
		
	</select>
	
	
	
	<select id="getSiteDataReportMIMW" resultType="com.nwm.api.entities.SiteDataReportEntity">
		
		SELECT
			t.id_device,
			t.time_full AS `time`,
			t.InverterUptime,
			s.table_data_report,
			IFNULL((t.end_date_time - t.start_date_time), 10) AS DayTime,
			ROUND(t.InverterUptime/ (IFNULL((t.end_date_time - t.start_date_time), 10 )), 2 ) AS InverterUptimeDaytime,
			ROUND(ac.nvmActiveEnergy, 2) AS ActualGeneration,
			ROUND(ac.estimated, 2) AS EstimatedGeneration,
			ROUND(ac.nvmActiveEnergy/ac.estimated, 2) AS EstimatedGenerationIndex,
			IF(ROUND(t.InverterUptime / IFNULL((t.end_date_time - t.start_date_time), 10) ,2) > 1, 1, ROUND(t.InverterUptime / IFNULL((t.end_date_time - t.start_date_time), 10) ,2)) AS InverterAvailability,
			ROUND(ac.nvmActivePower, 2) AS PowerTodayTotal,
			ROUND(ac.avg_nvmActivePower, 2) AS PowerTodayAVG,
			NULL AS POATotal,
			NULL AS POAAVG
		FROM (
			SELECT 
				iv.id_site,
				iv.id_device,
				iv.time_full,
				iv.start_date_time,
				iv.end_date_time,
				iv.format_date,
				COUNT(IF(iv.nvmActivePower > 0, format_date, NULL)) AS InverterUptime
			FROM (
				SELECT
						d.id_site,
						dv.id_device,
						s.start_date_time,
						s.end_date_time,
						dv.time,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_format,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
						IF(SUM(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, SUM(dv.nvmActivePower)) AS nvmActivePower
					FROM
						${datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site 
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE
						dv.id_device = #{id}
						AND dv.nvmActiveEnergy > 0
						AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
						AND s.`status` = 1 
						AND d.`status` = 1 
					GROUP BY time_format
			)iv
			GROUP BY iv.format_date
		)t
		
		
		LEFT JOIN (
			SELECT 
				iv.id_device,
				iv.time_full,
				iv.format_date,
				SUM(iv.nvmActiveEnergy) AS nvmActiveEnergy,
				iv.time_month,
				ROUND(SUM(iv.nvmActivePower), 2) AS nvmActivePower,
				ROUND(SUM(iv.avg_nvmActivePower), 2) AS avg_nvmActivePower,
				CASE
					 when iv.time_month = '01' then ROUND((SELECT en.jan FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '02' then ROUND((SELECT en.feb FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/28)
					 when iv.time_month = '03' then ROUND((SELECT en.mar FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '04' then ROUND((SELECT en.apr FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '05' then ROUND((SELECT en.may FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '06' then ROUND((SELECT en.jun FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '07' then ROUND((SELECT en.jul FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '08' then ROUND((SELECT en.aug FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '09' then ROUND((SELECT en.sep FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '10' then ROUND((SELECT en.oct FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '11' then ROUND((SELECT en.nov FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '12' then ROUND((SELECT en.`dec` FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					END as estimated
			FROM (
				SELECT
						d.id_site,
						dv.id_device,
						dv.time,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_format,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m' ) AS time_month,
						<!--MAX(dv.nvmActiveEnergy) - MIN(dv.nvmActiveEnergy) AS nvmActiveEnergy, -->
						SUM(dv.MeasuredProduction) AS nvmActiveEnergy,
						IF(SUM(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, SUM(dv.nvmActivePower)) AS nvmActivePower,
						IF(AVG(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, AVG(dv.nvmActivePower)) AS avg_nvmActivePower
					FROM
						${datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site 
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE
						dv.id_device = #{id}
						AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN DATE_FORMAT(#{start_date}, '%Y-%m-%d 00:00:00') AND DATE_FORMAT(#{end_date}, '%Y-%m-%d 23:59:59'))
						AND s.`status` = 1 
						AND d.`status` = 1 
						AND dv.nvmActiveEnergy > 0
					GROUP BY d.id, time_format
			)iv
			GROUP BY iv.format_date
			
		)ac ON ac.format_date = t.format_date
		LEFT JOIN site s ON s.id = t.id_site
		LIMIT 1
		
	</select>
	
	
	<select id="getSiteDataReportWeather" resultType="com.nwm.api.entities.SiteDataReportEntity">
		SELECT
			t.id_device,
			t.time_full AS `time`,
			s.table_data_report,
			0 AS InverterUptime,
			IFNULL((t.end_date_time - t.start_date_time), 10) AS DayTime,
			0 AS InverterUptimeDaytime,
			NULL AS ActualGeneration,
			NULL AS EstimatedGeneration,
			0 AS EstimatedGenerationIndex,
			0 AS InverterAvailability,
			NULL AS PowerTodayTotal,
			NULL AS PowerTodayAVG,
			ROUND(t.nvm_irradiance, 1) AS POATotal,
			ROUND(t.avg_nvm_irradiance, 1) AS POAAVG,
			ROUND(t.avg_nvm_temperature, 1) AS TCellAVG
		FROM (
			SELECT
				d.id_site,
				dv.id_device,
				s.start_date_time,
				s.end_date_time,
				dv.time,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_format,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
				DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
				IF(SUM(dv.nvm_irradiance) <![CDATA[<]]> 0.1, 0, SUM(dv.nvm_irradiance)) AS nvm_irradiance,
				IF(AVG(dv.nvm_irradiance) <![CDATA[<]]> 0.1, 0, AVG(dv.nvm_irradiance)) AS avg_nvm_irradiance,
				IF(AVG(dv.nvm_temperature) <![CDATA[<]]> 0.1, 0, AVG(dv.nvm_temperature)) AS avg_nvm_temperature
			FROM
				${datatablename} dv
				LEFT JOIN device d ON d.id = dv.id_device
				LEFT JOIN site s ON s.id = d.id_site 
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE
				dv.id_device = #{id}
				AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN DATE_FORMAT(#{start_date}, '%Y-%m-%d 00:00:00') AND DATE_FORMAT(#{end_date}, '%Y-%m-%d 23:59:59'))
				AND s.`status` = 1 
				AND d.`status` = 1 
			GROUP BY d.id, time_format
		)t
		LEFT JOIN site s ON s.id = t.id_site
		
	</select>
	
	
	<insert id="insertSiteDataReport" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO ${table_data_report}
		<trim prefix="(" suffix=")" suffixOverrides=",">
				`time`,
				`id_device`,
				`InverterUptime`,
				`DayTime`,
				`InverterUptimeDaytime`,
				`ActualGeneration`,
				`EstimatedGeneration`,
				`EstimatedGenerationIndex`,
				`InverterAvailability`,
				`PowerTodayTotal`,
				`PowerTodayAVG`,
				`POATotal`,
				`POAAVG`,
				`TCellAVG`,
		</trim>
		
		<trim prefix="values (" suffix=")" suffixOverrides=",">
				#{time},
				#{id_device},
				#{InverterUptime},
				#{DayTime},
				#{InverterUptimeDaytime},
				#{ActualGeneration},
				#{EstimatedGeneration},
				#{EstimatedGenerationIndex},
				#{InverterAvailability},
				#{PowerTodayTotal},
				#{PowerTodayAVG},
				#{POATotal},
				#{POAAVG},
				#{TCellAVG},
		</trim>
		
		<trim prefix="ON DUPLICATE KEY UPDATE " suffix="" suffixOverrides=",">
				`InverterUptime` = #{InverterUptime},
				`DayTime` = #{DayTime},
				`InverterUptimeDaytime` = #{InverterUptimeDaytime},
				`ActualGeneration` = #{ActualGeneration},
				`EstimatedGeneration` = #{EstimatedGeneration},
				`EstimatedGenerationIndex` = #{EstimatedGenerationIndex},
				`InverterAvailability` = #{InverterAvailability},
				`PowerTodayTotal` = #{PowerTodayTotal},
				`PowerTodayAVG` = #{PowerTodayAVG},
				`POATotal` = #{POATotal},
				`POAAVG` = #{POAAVG},
				`TCellAVG` = #{TCellAVG},
		</trim>
		
	</insert>
	
	
	<select id="getSiteDataReportIIM" resultType="com.nwm.api.entities.SiteDataReportEntity">
		SELECT
			t.id_device,
			t.time_full AS `time`,
			t.InverterUptime,
			s.table_data_report,
			IFNULL((t.end_date_time - t.start_date_time), 10) AS DayTime,
			ROUND(t.InverterUptime/ (IFNULL((t.end_date_time - t.start_date_time), 10 )), 2 ) AS InverterUptimeDaytime,
			ROUND(ac.nvmActiveEnergy, 2) AS ActualGeneration,
			ROUND(ac.estimated, 2) AS EstimatedGeneration,
			ROUND(ac.nvmActiveEnergy/ac.estimated, 2) AS EstimatedGenerationIndex,
			IF(ROUND(t.InverterUptime / IFNULL((t.end_date_time - t.start_date_time), 10) ,2) > 1, 1, ROUND(t.InverterUptime / IFNULL((t.end_date_time - t.start_date_time), 10) ,2)) AS InverterAvailability,
			ROUND(ac.nvmActivePower, 2) AS PowerTodayTotal,
			ROUND(ac.avg_nvmActivePower, 2) AS PowerTodayAVG,
			NULL AS POATotal,
			NULL AS POAAVG
			
			
		FROM (
			SELECT 
				iv.id_site,
				iv.id_device,
				iv.time_full,
				iv.start_date_time,
				iv.end_date_time,
				iv.format_date,
				COUNT(IF(iv.nvmActivePower > 0, format_date, NULL)) AS InverterUptime,
				ROUND(SUM(iv.nvmActivePower), 2) AS nvmActivePower
			FROM (
				SELECT
						d.id_site,
						dv.id_device,
						s.start_date_time,
						s.end_date_time,
						dv.time,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_format,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
						IF(SUM(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, SUM(dv.nvmActivePower)) AS nvmActivePower
					FROM
						${datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site 
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE
						dv.id_device = #{id}
						AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
						AND s.`status` = 1 
						AND d.`status` = 1 
					GROUP BY time_format
			)iv
			GROUP BY iv.format_date
		)t
	
		
		LEFT JOIN (
			SELECT 
				iv.id_device,
				iv.time_full,
				iv.format_date,
				SUM(iv.nvmActiveEnergy) AS nvmActiveEnergy,
				ROUND(SUM(iv.nvmActivePower), 2) AS nvmActivePower,
				ROUND(SUM(iv.avg_nvmActivePower), 2) AS avg_nvmActivePower,
				iv.time_month,
				CASE
					 when iv.time_month = '01' then ROUND((SELECT en.jan FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '02' then ROUND((SELECT en.feb FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/28)
					 when iv.time_month = '03' then ROUND((SELECT en.mar FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '04' then ROUND((SELECT en.apr FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '05' then ROUND((SELECT en.may FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '06' then ROUND((SELECT en.jun FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '07' then ROUND((SELECT en.jul FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '08' then ROUND((SELECT en.aug FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '09' then ROUND((SELECT en.sep FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '10' then ROUND((SELECT en.oct FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '11' then ROUND((SELECT en.nov FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '12' then ROUND((SELECT en.`dec` FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					END as estimated
			FROM (
				SELECT
						d.id_site,
						dv.id_device,
						dv.time,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_format,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m' ) AS time_month,
						<!--MAX(dv.nvmActiveEnergy) - MIN(dv.nvmActiveEnergy) AS nvmActiveEnergy, -->
						SUM(dv.MeasuredProduction) AS nvmActiveEnergy,
						
						IF(SUM(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, SUM(dv.nvmActivePower)) AS nvmActivePower,
						IF(AVG(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, AVG(dv.nvmActivePower)) AS avg_nvmActivePower
					FROM
						${datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site 
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE
						dv.id_device = #{id}
						AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN DATE_FORMAT(#{start_date}, '%Y-%m-%d 00:00:00') AND DATE_FORMAT(#{end_date}, '%Y-%m-%d 23:59:59'))
						AND s.`status` = 1 
						AND d.`status` = 1 
						AND dv.nvmActiveEnergy > 0
					GROUP BY d.id, time_format
			)iv
			GROUP BY iv.format_date
		)ac ON ac.format_date = t.format_date
		LEFT JOIN site s ON s.id = t.id_site
		LIMIT 1
		
	</select>
	
	<select id="getSiteDataReportMIM" resultType="com.nwm.api.entities.SiteDataReportEntity">
		SELECT
			t.id_device,
			t.time_full AS `time`,
			t.InverterUptime,
			s.table_data_report,
			IFNULL((t.end_date_time - t.start_date_time), 10) AS DayTime,
			ROUND(t.InverterUptime/ (IFNULL((t.end_date_time - t.start_date_time), 10 )), 2 ) AS InverterUptimeDaytime,
			ROUND(ac.nvmActiveEnergy, 2) AS ActualGeneration,
			ROUND(ac.estimated, 2) AS EstimatedGeneration,
			ROUND(ac.nvmActiveEnergy/ac.estimated, 2) AS EstimatedGenerationIndex,
			IF(ROUND(t.InverterUptime / IFNULL((t.end_date_time - t.start_date_time), 10) ,2) > 1, 1, ROUND(t.InverterUptime / IFNULL((t.end_date_time - t.start_date_time), 10) ,2)) AS InverterAvailability,
			ROUND(ac.nvmActivePower, 2) AS PowerTodayTotal,
			ROUND(ac.avg_nvmActivePower, 2) AS PowerTodayAVG,
			NULL AS POATotal,
			NULL AS POAAVG
		FROM (
			SELECT 
				iv.id_site,
				iv.id_device,
				iv.time_full,
				iv.start_date_time,
				iv.end_date_time,
				iv.format_date,
				COUNT(IF(iv.nvmActivePower > 0, format_date, NULL)) AS InverterUptime,
				ROUND(SUM(iv.nvmActivePower), 2) AS nvmActivePower
				
			FROM (
				SELECT
						d.id_site,
						dv.id_device,
						s.start_date_time,
						s.end_date_time,
						dv.time,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_format,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
						IF(SUM(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, SUM(dv.nvmActivePower)) AS nvmActivePower
					FROM
						${datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site 
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE
						dv.id_device = #{id}
						AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
						AND s.`status` = 1 
						AND d.`status` = 1 
					GROUP BY time_format
			)iv
			GROUP BY iv.format_date
		)t
		
		LEFT JOIN (
		
			SELECT 
				iv.id_device,
				iv.time_full,
				iv.format_date,
				SUM(iv.nvmActiveEnergy) AS nvmActiveEnergy,
				ROUND(SUM(iv.nvmActivePower), 2) AS nvmActivePower,
				ROUND(SUM(iv.avg_nvmActivePower), 2) AS avg_nvmActivePower,
				iv.time_month,
				CASE
					 when iv.time_month = '01' then ROUND((SELECT en.jan FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '02' then ROUND((SELECT en.feb FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/28)
					 when iv.time_month = '03' then ROUND((SELECT en.mar FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '04' then ROUND((SELECT en.apr FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '05' then ROUND((SELECT en.may FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '06' then ROUND((SELECT en.jun FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '07' then ROUND((SELECT en.jul FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '08' then ROUND((SELECT en.aug FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '09' then ROUND((SELECT en.sep FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '10' then ROUND((SELECT en.oct FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					 when iv.time_month = '11' then ROUND((SELECT en.nov FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
					 when iv.time_month = '12' then ROUND((SELECT en.`dec` FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
					END as estimated
			FROM (
				SELECT
						d.id_site,
						dv.id_device,
						dv.time,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_format,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m' ) AS time_month,
						<!--MAX(dv.nvmActiveEnergy) - MIN(dv.nvmActiveEnergy) AS nvmActiveEnergy, -->
						SUM(dv.MeasuredProduction) AS nvmActiveEnergy,
						IF(SUM(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, SUM(dv.nvmActivePower)) AS nvmActivePower,
						IF(AVG(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, AVG(dv.nvmActivePower)) AS avg_nvmActivePower
					FROM
						${datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site 
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE
						dv.id_device = #{id}
						AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN DATE_FORMAT(#{start_date}, '%Y-%m-%d 00:00:00') AND DATE_FORMAT(#{end_date}, '%Y-%m-%d 23:59:59'))
						AND s.`status` = 1 
						AND d.`status` = 1 
						AND dv.nvmActiveEnergy > 0
					GROUP BY d.id, time_format
			)iv
			GROUP BY iv.format_date
			
		)ac ON ac.format_date = t.format_date
		LEFT JOIN site s ON s.id = t.id_site
		LIMIT 1
		
	</select>
	
	<select id="getSiteDataReportIIW" resultType="com.nwm.api.entities.SiteDataReportEntity">
		SELECT
			t.id_device,
			t.time_full AS `time`,
			t.InverterUptime,
			s.table_data_report,
			IFNULL((t.end_date_time - t.start_date_time), 10) AS DayTime,
			ROUND(t.InverterUptime/ (IFNULL((t.end_date_time - t.start_date_time), 10 )), 2 ) AS InverterUptimeDaytime,
			ROUND(ac.nvmActiveEnergy, 2) AS ActualGeneration,
			ROUND(ac.estimated, 2) AS EstimatedGeneration,
			ROUND(ac.nvmActiveEnergy/ac.estimated, 2) AS EstimatedGenerationIndex,
			IF(ROUND(t.InverterUptime / IFNULL((t.end_date_time - t.start_date_time), 10) ,2) > 1, 1, ROUND(t.InverterUptime / IFNULL((t.end_date_time - t.start_date_time), 10) ,2)) AS InverterAvailability,
			ROUND(ac.nvmActivePower, 2) AS PowerTodayTotal,
			ROUND(ac.avg_nvmActivePower, 2) AS PowerTodayAVG,
			NULL AS POATotal,
			NULL AS POAAVG
		FROM (
			SELECT 
				iv.id_site,
				iv.id_device,
				iv.time_full,
				iv.start_date_time,
				iv.end_date_time,
				iv.format_date,
				COUNT(IF(iv.nvmActivePower > 0.1, format_date, NULL)) AS InverterUptime,
				ROUND(SUM(iv.nvmActivePower), 2) AS nvmActivePower
			FROM (
				SELECT
						d.id_site,
						dv.id_device,
						s.start_date_time,
						s.end_date_time,
						dv.time,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_format,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
						IF(SUM(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, SUM(dv.nvmActivePower)) AS nvmActivePower
					FROM
						${datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site 
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE
						dv.id_device = #{id}
						AND dv.nvmActiveEnergy > 0
						AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
						AND s.`status` = 1 
						AND d.`status` = 1 
					GROUP BY time_format
			)iv
			GROUP BY iv.format_date
		)t
		
		LEFT JOIN (
		
			SELECT 
					iv.id_device,
					iv.time_full,
					iv.format_date,
					SUM(iv.nvmActiveEnergy) AS nvmActiveEnergy,
					ROUND(SUM(iv.nvmActivePower), 2) AS nvmActivePower,
					ROUND(SUM(iv.avg_nvmActivePower), 2) AS avg_nvmActivePower,
					iv.time_month,
					CASE
						 when iv.time_month = '01' then ROUND((SELECT en.jan FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						 when iv.time_month = '02' then ROUND((SELECT en.feb FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/28)
						 when iv.time_month = '03' then ROUND((SELECT en.mar FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						 when iv.time_month = '04' then ROUND((SELECT en.apr FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
						 when iv.time_month = '05' then ROUND((SELECT en.may FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						 when iv.time_month = '06' then ROUND((SELECT en.jun FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
						 when iv.time_month = '07' then ROUND((SELECT en.jul FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						 when iv.time_month = '08' then ROUND((SELECT en.aug FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						 when iv.time_month = '09' then ROUND((SELECT en.sep FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
						 when iv.time_month = '10' then ROUND((SELECT en.oct FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						 when iv.time_month = '11' then ROUND((SELECT en.nov FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
						 when iv.time_month = '12' then ROUND((SELECT en.`dec` FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						END as estimated
				FROM (
					SELECT
							d.id_site,
							dv.id_device,
							dv.time,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_format,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m' ) AS time_month,
							<!--MAX(dv.nvmActiveEnergy) - MIN(dv.nvmActiveEnergy) AS nvmActiveEnergy, -->
							SUM(dv.MeasuredProduction) AS nvmActiveEnergy,
							IF(SUM(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, SUM(dv.nvmActivePower)) AS nvmActivePower,
							IF(AVG(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, AVG(dv.nvmActivePower)) AS avg_nvmActivePower
						FROM
							${datatablename} dv
							LEFT JOIN device d ON d.id = dv.id_device
							LEFT JOIN site s ON s.id = d.id_site 
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
						WHERE
							dv.id_device = #{id}
							AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN DATE_FORMAT(#{start_date}, '%Y-%m-%d 00:00:00') AND DATE_FORMAT(#{end_date}, '%Y-%m-%d 23:59:59'))
							AND s.`status` = 1 
							AND d.`status` = 1 
							AND dv.nvmActiveEnergy > 0
						GROUP BY d.id, time_format
				)iv
				GROUP BY iv.format_date
			
		)ac ON ac.format_date = t.format_date
		LEFT JOIN site s ON s.id = t.id_site
		LIMIT 1
		
	</select>
	
	
	<select id="getSiteDataReportMM" resultType="com.nwm.api.entities.SiteDataReportEntity">
		SELECT
			t.id_device,
			t.time_full AS `time`,
			t.InverterUptime,
			s.table_data_report,
			IFNULL((t.end_date_time - t.start_date_time), 10) AS DayTime,
			ROUND(t.InverterUptime/ (IFNULL((t.end_date_time - t.start_date_time), 10 )), 2 ) AS InverterUptimeDaytime,
			ROUND(ac.nvmActiveEnergy, 2) AS ActualGeneration,
			ROUND(ac.estimated, 2) AS EstimatedGeneration,
			ROUND(ac.nvmActiveEnergy/ac.estimated, 2) AS EstimatedGenerationIndex,
			IF(ROUND(t.InverterUptime / IFNULL((t.end_date_time - t.start_date_time), 10) ,2) > 1, 1, ROUND(t.InverterUptime / IFNULL((t.end_date_time - t.start_date_time), 10) ,2)) AS InverterAvailability,
			ROUND(ac.nvmActivePower, 2) AS PowerTodayTotal,
			ROUND(ac.avg_nvmActivePower, 2) AS PowerTodayAVG,
			NULL AS POATotal,
			NULL AS POAAVG
		FROM (
			SELECT 
				iv.id_site,
				iv.id_device,
				iv.time_full,
				iv.start_date_time,
				iv.end_date_time,
				iv.format_date,
				COUNT(IF(iv.nvmActivePower > 0.1, format_date, NULL)) AS InverterUptime,
				ROUND(SUM(iv.nvmActivePower), 2) AS nvmActivePower
				
			FROM (
				SELECT
						d.id_site,
						dv.id_device,
						s.start_date_time,
						s.end_date_time,
						dv.time,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_format,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
						DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
						IF(SUM(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, SUM(dv.nvmActivePower)) AS nvmActivePower
					FROM
						${datatablename} dv
						LEFT JOIN device d ON d.id = dv.id_device
						LEFT JOIN site s ON s.id = d.id_site 
						LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE
						dv.id_device = #{id}
						AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
						AND s.`status` = 1 
						AND d.`status` = 1 
					GROUP BY time_format
			)iv
			GROUP BY iv.format_date
		)t
		
		LEFT JOIN (
		
			SELECT 
					iv.id_device,
					iv.time_full,
					iv.format_date,
					SUM(iv.nvmActiveEnergy) AS nvmActiveEnergy,
					ROUND(SUM(iv.nvmActivePower), 2) AS nvmActivePower,
					ROUND(SUM(iv.avg_nvmActivePower), 2) AS avg_nvmActivePower,
					iv.time_month,
					CASE
						 when iv.time_month = '01' then ROUND((SELECT en.jan FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						 when iv.time_month = '02' then ROUND((SELECT en.feb FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/28)
						 when iv.time_month = '03' then ROUND((SELECT en.mar FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						 when iv.time_month = '04' then ROUND((SELECT en.apr FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
						 when iv.time_month = '05' then ROUND((SELECT en.may FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						 when iv.time_month = '06' then ROUND((SELECT en.jun FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
						 when iv.time_month = '07' then ROUND((SELECT en.jul FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						 when iv.time_month = '08' then ROUND((SELECT en.aug FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						 when iv.time_month = '09' then ROUND((SELECT en.sep FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
						 when iv.time_month = '10' then ROUND((SELECT en.oct FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						 when iv.time_month = '11' then ROUND((SELECT en.nov FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/30)
						 when iv.time_month = '12' then ROUND((SELECT en.`dec` FROM energy_expectations en WHERE en.id_site=#{id_site} AND `year`=${year})/31)
						END as estimated
				FROM (
					SELECT
							d.id_site,
							dv.id_device,
							dv.time,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_format,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d 00:00' ) AS time_full,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS format_date,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m' ) AS time_month,
							<!--MAX(dv.nvmActiveEnergy) - MIN(dv.nvmActiveEnergy) AS nvmActiveEnergy, -->
							SUM(dv.MeasuredProduction) AS nvmActiveEnergy,
							IF(SUM(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, SUM(dv.nvmActivePower)) AS nvmActivePower,
							IF(AVG(dv.nvmActivePower) <![CDATA[<]]> 0.1, 0, AVG(dv.nvmActivePower)) AS avg_nvmActivePower
						
						FROM
							${datatablename} dv
							LEFT JOIN device d ON d.id = dv.id_device
							LEFT JOIN site s ON s.id = d.id_site 
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
						WHERE
							dv.id_device = #{id}
							AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN DATE_FORMAT(#{start_date}, '%Y-%m-%d 00:00:00') AND DATE_FORMAT(#{end_date}, '%Y-%m-%d 23:59:59'))
							AND s.`status` = 1 
							AND d.`status` = 1 
							AND dv.nvmActiveEnergy > 0
						GROUP BY d.id, time_format
				)iv
				GROUP BY iv.format_date
			
		)ac ON ac.format_date = t.format_date
		LEFT JOIN site s ON s.id = t.id_site
		LIMIT 1
		
	</select>
	
	
	
	<select id="getDataIrradianceYesterday" resultType="com.nwm.api.entities.SiteEntity" >
		SELECT
			t.time_format,
			ROUND(( AVG( t.nvm_irradiance ) ), 1 ) AS nvm_irradiance,
			ROUND(( AVG( t.nvm_temperature ) ), 1 ) AS nvm_temperature
			
		FROM
			(
				<foreach collection="weatherStation" item="item" index="index" separator="union all">
				<![CDATA[
					SELECT
						m.time_format,
						AVG(m.nvm_irradiance) AS nvm_irradiance,
						AVG(m.nvm_temperature) AS nvm_temperature
					FROM
						(
						SELECT
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m-%d-%Y' ) AS time_format,
							CASE
									WHEN d.datatablename = 'model_imtsolar_class8000' THEN AVG( IFNULL(dv.nvm_irradiance, 0) )
									WHEN d.datatablename = 'model_kippzonen_rt1_class8009' THEN AVG( IFNULL(dv.nvm_irradiance, 0) )
									WHEN d.datatablename = 'model_lufft_class8020' THEN AVG( IFNULL(dv.nvm_irradiance, 0) )
									WHEN d.datatablename = 'model_lufft_ws501_umb_weather' THEN AVG( IFNULL(dv.nvm_irradiance, 0) )
									WHEN d.datatablename = 'model_rt1_class30000' THEN AVG( IFNULL(dv.nvm_irradiance, 0) )
									WHEN d.datatablename = 'model_w_kipp_zonen_rt1' THEN AVG( IFNULL(dv.nvm_irradiance, 0) )
									ELSE 0
							END
							 AS nvm_irradiance,
							 
							 
							 CASE
									WHEN d.datatablename = 'model_imtsolar_class8000' THEN AVG( IFNULL((dv.nvm_temperature), 0) )
									WHEN d.datatablename = 'model_kippzonen_rt1_class8009' THEN AVG( IFNULL(dv.nvm_temperature, 0) )
									WHEN d.datatablename = 'model_lufft_class8020' THEN AVG( IFNULL(dv.nvm_temperature, 0) )
									WHEN d.datatablename = 'model_lufft_ws501_umb_weather' THEN AVG( IFNULL(dv.nvm_temperature, 0) )
									WHEN d.datatablename = 'model_rt1_class30000' THEN AVG( IFNULL(dv.nvm_temperature, 0) )
									WHEN d.datatablename = 'model_w_kipp_zonen_rt1' THEN AVG( IFNULL(dv.nvm_temperature, 0) )
									ELSE 0
							END
							 AS nvm_temperature
							
						FROM
							${item.datatablename} dv
							LEFT JOIN device d ON d.id = dv.id_device
							LEFT JOIN site s ON s.id = d.id_site 
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
						WHERE
							s.id = #{item.id_site}
							AND d.id_device_type IN(4)
							AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN DATE_FORMAT(CONVERT_TZ ( SUBDATE(NOW(),1), '+00:00', t.`offset`),'%Y-%m-%d 00:00:00') AND DATE_FORMAT(CONVERT_TZ ( SUBDATE(NOW(),1), '+00:00', t.`offset`),'%Y-%m-%d 23:59:59'))
							AND s.`status` = 1 
							AND d.`status` = 1 
						GROUP BY
							d.id, time_format
						) m 
					GROUP BY
						m.time_format
					]]>
		      </foreach>
			) t 
		GROUP BY
			t.time_format
	</select>
	
	
	<select id="getDataPowerMeterYesterday" resultType="com.nwm.api.entities.SiteEntity" >
		SELECT
			t.time_format,
			ROUND(( AVG( t.actualPower ) ), 1 ) AS actualPower
			
		FROM
			(
				<foreach collection="groupMeter" item="item" index="index" separator="union all">
				<![CDATA[
					SELECT
						m.time_format,
						SUM(m.actualPower) AS actualPower
					FROM
						(
						SELECT
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m-%d-%Y' ) AS time_format,
							AVG( IFNULL(dv.nvmActivePower, 0) ) AS actualPower
						FROM
							${item.datatablename} dv
							LEFT JOIN device d ON d.id = dv.id_device
							LEFT JOIN site s ON s.id = d.id_site 
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
						WHERE
							s.id = #{item.id_site}
							AND d.id_device_type IN(3)
							AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN DATE_FORMAT(CONVERT_TZ ( SUBDATE(NOW(),1), '+00:00', t.`offset`),'%Y-%m-%d 00:00:00') AND DATE_FORMAT(CONVERT_TZ ( SUBDATE(NOW(),1), '+00:00', t.`offset`),'%Y-%m-%d 23:59:59'))
							AND s.`status` = 1 
							AND d.`status` = 1 
						GROUP BY
							d.id, time_format
						) m 
					GROUP BY
						m.time_format
					]]>
		      </foreach>
			) t 
		GROUP BY
			t.time_format
	</select>
	
	
	
	
	<select id="getDataPowerInverterYesterday" resultType="com.nwm.api.entities.SiteEntity" >
		SELECT
			t.time_format,
			ROUND(( SUM( t.actualPower ) ), 1 ) AS actualPower
			
		FROM
			(
				<foreach collection="groupMeter" item="item" index="index" separator="union all">
				<![CDATA[
					SELECT
						m.time_format,
						SUM(m.actualPower) AS actualPower
					FROM
						(
						SELECT
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m-%d-%Y' ) AS time_format,
							AVG( IFNULL(dv.nvmActivePower, 0) ) AS actualPower
						FROM
							${item.datatablename} dv
							LEFT JOIN device d ON d.id = dv.id_device
							LEFT JOIN site s ON s.id = d.id_site 
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
						WHERE
							s.id = #{item.id_site}
							AND d.id_device_type IN(1)
							AND (CONVERT_TZ( dv.time, '+00:00', t.`offset` ) BETWEEN DATE_FORMAT(CONVERT_TZ ( SUBDATE(NOW(),1), '+00:00', t.`offset`),'%Y-%m-%d 00:00:00') AND DATE_FORMAT(CONVERT_TZ ( SUBDATE(NOW(),1), '+00:00', t.`offset`),'%Y-%m-%d 23:59:59'))
							AND s.`status` = 1 
							AND d.`status` = 1 
						GROUP BY
							d.id, time_format
						) m 
					GROUP BY
						m.time_format
					]]>
		      </foreach>
			) t 
		GROUP BY
			t.time_format
	</select>
  	
  	
  	<update id="updatPerformanceRatioYesterday">
		UPDATE `site`
		SET
			`PerformanceRatioYesterday` = #{PerformanceRatioYesterday}
		WHERE
			`id` = #{id}
	</update>
	
	<select id="getListSiteCheckNoCom" resultType="com.nwm.api.entities.SiteEntity" >
		SELECT
			s.id,
			s.`name`,
			s.id_time_zone,
			t.`value` AS time_zone_value,
			s.start_date_time,
			s.end_date_time,
			s.ac_capacity,
			s.dc_capacity
		FROM
			site s
			LEFT JOIN time_zone t ON t.id = s.id_time_zone 
		WHERE
			s.`status` = 1
	</select>
	
	
	<select id="getListReports" resultType="com.nwm.api.entities.ViewReportEntity" >
		SELECT
			r.id,
			r.id_site,
			r.data_intervals,
			r.type_report,
			r.cadence_range,
			r.subscribers,
			r.file_type,
			r.date_from,
			r.date_to,
			t.`value` AS time_zone,
			r.schedule_enable,
			DATE_FORMAT(r.time_schedule, '%Y-%m-%d %H:%i') AS time_schedule,
			r.periodicity,
			r.days_week,
			r.offset_timezone,
			CASE
				WHEN r.type_report = 2 AND r.type_option = 1 THEN (
					SELECT 
						GROUP_CONCAT(s.id SEPARATOR ',')
					FROM
						site_employee_map sem
						LEFT JOIN site s ON s.id = sem.id_site
					WHERE
						sem.id_employee = r.id_employee
						AND s.`status` = 1
						AND s.is_delete = 0
					GROUP BY sem.id_employee
				)
				WHEN r.type_report = 2 AND r.type_option = 2 THEN (
					SELECT
						GROUP_CONCAT(s.id SEPARATOR ',')
					FROM
						report_site_map rsm
						LEFT JOIN site s ON s.id = rsm.id_site
					WHERE
						s.`status` = 1
						AND s.is_delete = 0
						AND rsm.id_report = r.id
					GROUP BY rsm.id_report
				)
				WHEN r.type_report = 2 AND r.type_option = 3 THEN (
					SELECT
						GROUP_CONCAT(s.id SEPARATOR ',')
					FROM 
						site s
					WHERE 
						s.`status` = 1
						AND s.is_delete = 0
						AND s.id_site_sub_group = r.id_sub_group
					GROUP BY s.id_site_sub_group
				)
				ELSE NULL
			END AS id_sites
		FROM
			report r
			LEFT JOIN site s ON s.id = r.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			r.`status` = 1
			AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
	</select>
  	
  	
  	
  	<select id="checkExitsDeviceUploadSungrow" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			t.`value` AS timezone_value,
			t.`offset` AS timezone_offset,
			d.*
		FROM
			device d
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.timezone_datalogger 
		WHERE
			d.`status` = 1
			AND d.modbusdevicenumber = #{modbusdevicenumber}
			AND d.serial_number = #{serial_number}
			AND d.is_delete = 0
			LIMIT 1
	</select>
	
	
	<select id="checkExitsDeviceSMA" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			t.`value` AS timezone_value,
			t.`offset` AS timezone_offset,
			d.*
		FROM
			device d
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.timezone_datalogger 
		WHERE
			d.`status` = 1
			AND d.modbusdevicenumber = #{modbusdevicenumber}
			AND d.is_delete = 0
			LIMIT 1
	</select>
	
	<select id="getListSiteByDataloggerType" resultType="com.nwm.api.entities.SiteEntity" >
		SELECT
			s.id,
			s.`name`,
			s.id_time_zone,
			s.timezone_datalogger,
			s.ftp_server,
			s.ftp_user,
			s.ftp_pass,
			s.ftp_port,
			s.ftp_folder,
			s.datalogger_type,
			t.`value` AS time_zone_value,
			tz.`value` AS display_timezone
		FROM
			site s 
			LEFT JOIN time_zone t ON t.id = s.timezone_datalogger
			
			LEFT JOIN (
				SELECT * FROM time_zone tz
			) tz ON tz.id = s.id_time_zone
		WHERE
			s.datalogger_type = 1 
			AND s.`status` = 1 
			AND s.is_delete = 0
			AND s.ftp_server IS NOT NULL
			AND s.ftp_user IS NOT NULL
			AND s.ftp_pass IS NOT NULL
			AND s.ftp_folder IS NOT NULL
	</select>
	
	
	
	<select id="getDeviceDetailByModbus" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.*
		FROM
			device d
		WHERE
			d.`status` = 1
			AND d.modbusdevicenumber = #{modbusdevicenumber}
			AND d.id_site = #{id_site}
			AND d.is_delete = 0
			LIMIT 1
	</select>
	
	<select id="getListDeviceSMABySite" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			d.id_device_group,
			d.ssh_host,
			d.ssh_port,
			d.ssh_user,
			d.ssh_pass,
			dg.table_name  AS device_group_table
		FROM
			device AS d
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN device_group dg ON d.id_device_group = dg.id
		WHERE
			d.`status` = 1 
			AND d.is_delete = 0
			AND d.id_site = #{id_site} GROUP BY d.id
	</select>
	
	
	
	<select id="getListDeviceUpdateLastUpdate" resultType="com.nwm.api.entities.DeviceEntity" >
		SELECT
			d.id,
			d.id_site,
			d.id_vendor,
			d.serial_number,
			d.modbusdevicenumber,
			d.devicename,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			d.id_device_group
		FROM
			device AS d
		WHERE
			d.`status` = 1 
			AND d.is_delete = 0
	</select>
	
	
	<select id="getLastRowItemUpdateDate" resultType="com.nwm.api.entities.BatchJobTableEntity">
    	SELECT
    		`time`, 
    		id_device, 
    		d.devicename
		FROM ${datatablename} u
		LEFT JOIN device d ON d.id = u.id_device
		WHERE u.id_device = #{id_device}
		ORDER BY u.`time` DESC LIMIT 1;
  	</select>
	
	
	<update id="updateLastUpdatedCronJob">
		UPDATE `device`
		SET
			 `last_updated` = #{last_updated}
		WHERE
			`id` = #{id}
	</update>
	
	<select id="getEmployeeHidingSite" resultType="Map" >
  		SELECT
			e.email
		FROM 
			site_employee_map sem
			LEFT JOIN employee e ON e.id = sem.id_employee
		WHERE
			sem.id_site = #{id}
			AND sem.is_hiding = 1
	</select>
	
  	
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="DeviceParameter">
	<select id="getListCategorizeData" resultType="Map">
		SELECT
			id,
			name AS text
		FROM
			categorize_data
		WHERE
			`status` = 1 
			AND is_delete = 0 
	</select>
	
	<insert id="insertCategorizeDataDeviceParameterMap">
		INSERT INTO `categorize_data_device_parameter_map` (
			`id_categorize_data`,
			`id_device_parameter`
		) VALUES (
			#{id_categorize_data},
			#{id}
		) ON DUPLICATE KEY UPDATE id_categorize_data=VALUES(id_categorize_data)
	</insert>
	
	<delete id = "deleteCategorizeDataDeviceParameterMap">
		DELETE FROM `categorize_data_device_parameter_map`
		WHERE `id_device_parameter` = #{id}
	</delete>
	
	<select id="getListParameterByDevice"  resultType="Map" parameterType="String">
		SELECT
			dp.*,
			d.id_site,
			scm.id_customer,
			d.devicename,
			d.datatablename,
			d.id AS id_device,
			CONCAT(d.id,dp.id) AS id_alias,
			0 AS active 
		FROM
			device d
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN site_customer_map scm ON scm.id_site = s.id
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN device_parameters dp ON dp.id_device_group = dg.id 
		WHERE
			dp.`status` = 1 
			AND dp.is_delete = 0 
			AND dp.is_filter = 1 
			AND d.id = ${id_device}
		GROUP BY
			dp.id
	</select>
	
	<select id="getListDeviceGroup" resultType="Map">
		SELECT
			dg.id,
			dg.group_name AS name,
			dt.name AS device_type,
			dg.`status`,
			dg.is_delete
		FROM
			device_group AS dg
			LEFT JOIN device_type dt ON dt.id = dg.id_device_type
		WHERE
			dg.`status` = 1 AND dg.is_delete = 0
			<if test="keyword != null">
				AND dg.group_name LIKE CONCAT("%",#{keyword}, "%")
			</if>
	    ORDER BY
	        <choose>  
	            <when test="sort_column == 'id'">
	                dg.id ${order_by}
	            </when>         
	            <when test="sort_column == 'name'">
	                dg.group_name ${order_by}
	            </when>
	            
	            <when test="sort_column == 'device_type'">
	                dt.name ${order_by}
	            </when>
	            
	            <otherwise>
			      dg.id DESC
			    </otherwise>                                                  
	        </choose>  
		LIMIT ${limit} OFFSET ${offset};
	</select>
	
	<select id="getTotalRecordDeviceGroup" resultType="int" parameterType="com.nwm.api.entities.DeviceParameterEntity">
    	SELECT count(*) as totalRow
		FROM device_group dg
		WHERE dg.`status` = 1 AND dg.is_delete = 0
		<if test="keyword != null">
			AND dg.name LIKE CONCAT("%",#{keyword}, "%")
		</if> 
  	</select>
	
	<select id="getListParameterByDeviceGroup" resultType="Map">
		SELECT
			dp.id,
			dp.name,
			dp.standard_name,
			dp.`status`,
			dp.is_delete,
			ct.id AS id_categorize_data,
			ct.name AS categorize_data_name
		FROM
			device_parameters AS dp
			LEFT JOIN categorize_data_device_parameter_map m ON m.id_device_parameter = dp.id
			LEFT JOIN categorize_data ct ON ct.id = m.id_categorize_data AND ct.status = 1 AND ct.is_delete = 0
		WHERE
			dp.id_device_group = #{id_device_group}
			AND dp.`status` = 1
			AND dp.is_delete = 0
	    ORDER BY
	        <choose>  
	            <when test="sort_column == 'id'">
	                dp.id ${order_by}
	            </when>         
	            <when test="sort_column == 'register_name'">
	                dp.name ${order_by}
	            </when>
	            
	            <when test="sort_column == 'standard_name'">
	                dp.standard_name ${order_by}
	            </when>
	            
	            <otherwise>
			      dp.id DESC
			    </otherwise>                                                  
	        </choose>  
		LIMIT ${limit} OFFSET ${offset};
	</select>
	
	<select id="getTotalRecordParameterByDeviceGroup" resultType="int" parameterType="com.nwm.api.entities.DeviceParameterEntity">
    	SELECT count(*) as totalRow
		FROM device_parameters dp
		WHERE
			dp.id_device_group = #{id_device_group}
			AND dp.`status` = 1
			AND dp.is_delete = 0
  	</select>
  	
  	<insert id="insertDeviceParameter" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `device_parameters`(
			`name`,
			`id_device_group`,
			`standard_name`
		)VALUES(
			#{name},
			#{id_device_group},
			#{standard_name}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	<update id="updateDeviceParameter">
		UPDATE `device_parameters`
		SET
			`standard_name` = #{standard_name}
		WHERE
			`id` = #{id}
	</update>
	
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Employee">
	<resultMap id="EmployeeAuthMap"
		type="com.nwm.api.entities.UserEntity">
		<result property="user_name" column="user_name" />
		<result property="email" column="email" />
		<result property="password" column="password" />
		<result property="name" column="name" />
		<result property="first_name" column="first_name" />
		<result property="last_name" column="last_name" />
		<result property="id" column="id_user" />
		<result property="logo" column="logo" />
		<result property="table_column" column="table_column" />
		<result property="alert_filter" column="alert_filter" />
		<result property="hash_id_user" column="hash_id_user" />
		<result property="id_company" column="id_company" />
		
	</resultMap>
	
	
	<resultMap id="EmployeeMap"
		type="com.nwm.api.entities.EmployeeManageEntity">
		<result property="first_name" column="first_name" />
		<result property="last_name" column="last_name" />
		<result property="password" column="password" />
		<result property="address" column="address" />
		<result property="email" column="email" />
		<result property="phone" column="phone" />
		<result property="id" column="id" />
		<result property="skype" column="skype" />
		<result property="status" column="status" />
		<result property="is_delete" column="is_delete" />
		<result property="created_date" column="created_date" />
		<result property="created_by" column="created_by" />
		<result property="updated_date" column="updated_date" />
		<result property="updated_by" column="updated_by" />
		<result property="avatar" column="avatar" />
		<result property="birthday" column="birthday" />
		<result property="order_by" column="order_by" />
		<result property="sort_column" column="sort_column" />
		<result property="limit" column="limit" />
		<result property="offset" column="offset" />
		<result property="keyword" column="keyword" />
		<result property="fullname" column="fullname" />
		<result property="manage_site_total" column="manage_site_total" />
		<result property="color" column="color" />
		<result property="id_role" column="id_role" />
		<result property="last_login" column="last_login" />
		<result property="offset_timezone" column="offset_timezone" />
		<result property="page_login" column="page_login" />
		<result property="table_column" column="table_column" />
		<result property="alert_filter" column="alert_filter" />
		<result property="failed_attempt" column="failed_attempt" />
		<result property="account_locked" column="account_locked" />
		<result property="lock_time" column="lock_time" />
		<result property="id_company" column="id_company" />
		
	</resultMap>
	
	<resultMap id="EmployeeDropdownMap" type="com.nwm.api.entities.EmployeeManageEntity">
  			<result property="id" column="id" />
  			<result property="first_name" column="first_name" />
  			<result property="last_name" column="last_name" />
  			<result property="fullname" column="fullname" />
  			<result property="text" column="text" />	
  			<result property="label" column="label" />
  			<result property="value" column="value" />
  			<result property="role_ids" column="role_ids" />
	</resultMap>
	
	
	<select id="getAll" resultMap="EmployeeDropdownMap" parameterType="String" >
		SELECT
			id,
			CONCAT_WS( ' ', first_name, last_name ) AS fullname,
			CONCAT_WS( ' ', first_name, last_name ) AS text,
			CONCAT_WS( ' ', first_name, last_name ) AS label,
			id AS value,
			email,
			GROUP_CONCAT(er.id_role) AS role_ids
		FROM
			`employee` e
			LEFT JOIN employee_role_map er ON er.id_employee = e.id
		WHERE
			`status` = 1 
			AND is_delete = 0 
			<if test="email != null">
				AND e.email = #{email}
			</if>
		GROUP BY e.id
		ORDER BY
			id DESC;
	</select>
	
	
	
	<select id="findByAdminLoginId" resultMap="EmployeeAuthMap" parameterType="String">
		SELECT
			u.`id`,
			u.`password`,
			u.`first_name`,
			u.`last_name`,
			u.`id` AS id_user,
			u.`email` AS user_name,
			concat( u.first_name, ', ', u.last_name ) AS `name`,
			u.avatar,
			t.roles,
			k.id_sites,
			u.table_column,
			u.alert_filter,
			u.lock_time,
			u.account_locked,
			SHA2(u.`id`, 256) AS hash_id_user,
			u.failed_attempt,
			u.is_send_email_unblock,
			u.id_company,
			( SELECT `value` FROM system_setup WHERE type = 'max_failed_attempt' ) AS max_failed_attempt,
			( SELECT `value` FROM system_setup WHERE type = 'time_account_locked' ) AS time_account_locked
			
		FROM
			`employee` u
			LEFT JOIN (
				SELECT id_employee, GROUP_CONCAT(er.id_role) AS roles FROM employee_role_map er GROUP BY er.id_employee
			)t ON t.id_employee = u.id
			
			LEFT JOIN (
				SELECT 
					si.id_employee, 
					GROUP_CONCAT(si.id_site) AS id_sites 
				FROM site_employee_map si 
				LEFT JOIN employee em ON em.id = si.id_employee  
				WHERE
					em.email = #{value}
					AND si.is_hiding = 0
				GROUP BY em.id
			)k ON k.id_employee = u.id
		WHERE email = #{value} AND u.status = 1 AND u.is_delete = 0 GROUP BY u.id;
	
			
	</select>
	
	<select id="getPermissionByUser" resultType="Map">
		SELECT 
			m.id_screen,
			m.screen_name,
			IF(m.class_icon != '', m.class_icon, '') AS class_icon,
			m.has_child,
			m.`level`,
			m.parent,
			m.path,
			m.show_menu,
			(MAX(m.`view`) + MAX(m.`new`) + MAX(m.`delete`) + MAX(m.`edit`) + MAX(m.`excel`) + MAX(m.`pdf`) + MAX(m.`print`) + MAX(m.`translate`) + MAX(m.`approval`)) AS auths
			
			
			FROM (
				SELECT
					rs.id_role, 
					r.`name` AS role_name,
					rs.id_screen,
					s.screen_name,
					s.class_icon,
					s.has_child,
					s.`level`,
					s.parent,
					s.path,
					s.show_menu,
					CONCAT_WS(', ',e.first_name,e.last_name) AS full_name,
					
					IF(rs.auths >= 1, 1, 0) AS `view`,
					IF(rs.auths >= 2, 2, 0) AS `new`,
					IF(rs.auths >= 4, 4, 0) AS `delete`,
					IF(rs.auths >= 8, 8, 0) AS `edit`,
					IF(rs.auths >= 16, 16, 0) AS `excel`,
					IF(rs.auths >= 32, 32, 0) AS `pdf`,
					IF(rs.auths >= 64, 64, 0) AS `print`,
					IF(rs.auths >= 128, 128, 0) AS `translate`,
					IF(rs.auths >= 256, 256, 0)  AS `approval`
		
				FROM
					role_screen_map rs
					LEFT JOIN screen s ON s.id = rs.id_screen
					LEFT JOIN role r ON r.id = rs.id_role
					LEFT JOIN employee_role_map er ON r.id = er.id_role
					LEFT JOIN employee e ON e.id = er.id_employee
				WHERE e.id = #{id} AND s.`status` = 1 AND s.is_delete = 0 AND rs.auths > 0
			)m  GROUP BY m.id_screen ORDER BY m.`level`
	</select>
	
	
	<select id="getList" resultMap="EmployeeMap" parameterType="com.nwm.api.entities.EmployeeManageEntity" >
		SELECT
			e.id,
			e.first_name,
			e.last_name,
			e.phone,
			e.email,
			e.email AS re_email,
			e.address,
			e.is_delete,
			e.`status`,
			e.skype,
			e.avatar,
			DATE_FORMAT(e.birthday, '%m/%d%Y') AS birthday,
			CONCAT_WS(' ',e.first_name,e.last_name) AS fullname,
			t.group_roles,
			t.role_ids,
			t.color,
			IFNULL(st.manage_site_total, 0) AS manage_site_total,
			m.ids_site,
			s.last_login,
			s.offset_timezone,
			s.page_login,
			e.account_locked,
			e.failed_attempt,
			e.lock_time,
			e.created_by,
			SHA2(e.`id`, 256) AS hash_id_user,
			e.id_company
		FROM
			`employee` e	
			
			LEFT JOIN (
						SELECT id_employee, GROUP_CONCAT(sem.`id_site`) AS ids_site, GROUP_CONCAT(s.`name`) AS site_name
						FROM site_employee_map sem
						LEFT JOIN site s ON s.id = sem.id_site
						GROUP BY sem.id_employee
					)m ON m.id_employee = e.id
					
					
			LEFT JOIN (
						SELECT er.id_employee, GROUP_CONCAT(r.`name` SEPARATOR ', ') AS group_roles, GROUP_CONCAT(r.`id`) AS role_ids, r.color 
						FROM employee_role_map er 
						LEFT JOIN role r ON r.id = er.id_role
						<!-- <if test="id_role != 0">
							WHERE r.id = #{id_role}
						</if> -->
						
						<if test="roles != null and !roles.isEmpty()">
							WHERE r.id IN  (
								<foreach item="item" index="index" collection="roles" separator=" , ">
									#{item.id}
								</foreach>
							)
						</if>
						
						GROUP BY er.id_employee
					)t ON t.id_employee = e.id
					
			LEFT JOIN (
				SELECT COUNT(se.id_employee) AS manage_site_total, se.id_employee FROM site_employee_map se GROUP BY se.id_employee
			)st ON st.id_employee = e.id

			LEFT JOIN (
				SELECT *
				FROM account_status
				WHERE (id_employee, id) IN (
					SELECT 
						id_employee,
						MAX(id) AS id
					FROM account_status
					GROUP BY id_employee
				)
			)s ON s.id_employee = e.id
		WHERE e.is_delete = 0
		<if test="roles != null and !roles.isEmpty() ">
			AND t.group_roles <![CDATA[!=]]> ""
		</if>
		
		
		<if test="keyword != null">
			<choose>
				<when test="filter == 'fullname'">
					AND ( e.first_name LIKE CONCAT("%",#{keyword}, "%") OR e.last_name LIKE CONCAT("%",#{keyword}, "%") )
				</when>
				<when test="filter == 'phone'">
					AND e.phone LIKE CONCAT("%",#{keyword}, "%")
				</when>
				<when test="filter == 'email'">
					AND e.email LIKE CONCAT("%",#{keyword}, "%")
				</when>
				<when test="filter == 'manage_site'">
					AND m.site_name LIKE CONCAT("%",#{keyword}, "%")
				</when>
				<otherwise>
					AND ( e.first_name LIKE CONCAT("%",#{keyword}, "%") OR e.last_name LIKE CONCAT("%",#{keyword}, "%") )
				</otherwise>
			</choose>
		</if> 	
		    order by
	        <choose>  
	            <when test="sort_column == 'id'">
	                e.id ${order_by}
	            </when>         
	            <when test="sort_column == 'first_name'">
	                e.first_name ${order_by}
	            </when>
	            <when test="sort_column == 'last_name'">
	                e.last_name ${order_by}
	            </when>
	            <when test="sort_column == 'roles'">
	                t.group_roles ${order_by}
	            </when>
	            <when test="sort_column == 'phone'">
	                e.phone ${order_by}
	            </when>
	            <when test="sort_column == 'email'">
	                e.email ${order_by}
	            </when>
	            <when test="sort_column == 'status'">
	                s.last_login ${order_by}
	            </when>
	            <when test="sort_column == 'manage_site'">
	                st.manage_site_total ${order_by}
	            </when>
	            <when test="sort_column == 'locked'">
	                e.status ${order_by}
	            </when>
	            <when test="sort_column == 'created_by'">
	                e.created_by ${order_by}
	            </when>
	            <otherwise>
			      t.group_roles ASC
			    </otherwise>                                                  
	        </choose>  
		 	 
		 LIMIT ${limit} OFFSET ${offset};
	</select>
	
	<select id="getListCount"  resultType="int" parameterType="com.nwm.api.entities.EmployeeManageEntity">
    	SELECT count(*) as totalRecord
		FROM employee e
		LEFT JOIN (
				SELECT er.id_employee, GROUP_CONCAT(r.`name` SEPARATOR ', ') AS group_roles, GROUP_CONCAT(r.`id`) AS role_ids, r.color 
				FROM employee_role_map er 
				LEFT JOIN role r ON r.id = er.id_role
				
				<if test="roles != null and !roles.isEmpty()">
					WHERE r.id IN  (
						<foreach item="item" index="index" collection="roles" separator=" , ">
							#{item.id}
						</foreach>
					)
				</if>
				
				GROUP BY er.id_employee
			)t ON t.id_employee = e.id
		
		WHERE e.is_delete = 0
		<if test="roles != null and !roles.isEmpty() ">
			AND t.group_roles <![CDATA[!=]]> ""
		</if>
		
		<if test="keyword != null">
			AND ( first_name LIKE CONCAT("%",#{keyword}, "%") OR last_name LIKE CONCAT("%",#{keyword}, "%") OR phone LIKE CONCAT("%",#{keyword}, "%") OR email LIKE CONCAT("%",#{keyword}, "%"))
		</if>
  	</select>
  	
  	<update id="updateStatus">
		UPDATE `employee`
		SET
			`status` = #{status}
		WHERE
			`id` = #{id}
	</update>
	
	
	
	<update id="updateLockAccount">
		UPDATE `employee`
		SET
			`failed_attempt` = #{failed_attempt},
			`account_locked` = #{account_locked},
			`lock_time` = #{lock_time}
		WHERE
			`id` = #{id}
	</update>
	
	<update id="updateLockAccountAndEmail">
		UPDATE `employee`
		SET
			`failed_attempt` = #{failed_attempt},
			`account_locked` = #{account_locked},
			`lock_time` = #{lock_time},
			`is_send_email_unblock` = #{is_send_email_unblock}
		WHERE
			`id` = #{id}
	</update>
	
	
	<update id="updatePasswordEmployee">
		UPDATE `employee`
		SET
			`password` = #{password}
		WHERE
			`id` = #{id}
	</update>
	
	<delete id="deleteEmployee">
		DELETE FROM `employee`
		WHERE id = #{id}
	</delete>
	

	
	<select id="getEmployeeByEmail" resultMap="EmployeeMap" parameterType="String">
    	SELECT
    		id, 
    		first_name, 
    		last_name, 
    		phone, 
    		email, 
    		address, 
    		is_delete, 
    		`status`, 
    		avatar
		FROM `employee` u
		WHERE u.email = #{value}
		;
  	</select>
  	
  	<select id="checkEmployeeEmailExist" parameterType="com.nwm.api.entities.EmployeeManageEntity" resultType="int">
    	SELECT
    	COUNT(id) as totalRecord
		FROM `employee` as u
		WHERE u.email = #{email} AND u.id != #{id};
  	</select>
  	<select id="getEmployeeById" resultMap="EmployeeMap" parameterType="int">
    	SELECT
    		id, 
    		first_name, 
    		last_name, 
    		phone,  
    		password,
    		email, 
    		address, 
    		is_delete, 
    		`status`, 
    		avatar
		FROM `employee` u
		WHERE u.id = #{value}
		;
  	</select>
  	
  	<insert id="insertEmployee" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `employee`(
			first_name,
			last_name,
			phone,
			email,
			address,
			password,
			avatar,
			birthday,
			skype,
			created_by,
			created_date,
			id_company
		)VALUES(
			#{first_name},
			#{last_name},
			#{phone},
			#{email},
			#{address},
			#{password},
			#{avatar},
			#{birthday},
			#{skype},
			#{created_by},
			NOW(),
			id_company
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	<insert id="insertEmployeeRoleMap" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO  `employee_role_map`(
			id_employee,
			id_role
		)VALUES(
			#{id_employee},
			#{id_role}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	
	<insert id="insertEmployeeSiteMap" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO  `site_employee_map`(
			id_employee,
			id_site
		)VALUES(
			#{id_employee},
			#{id_site}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	
	<update id="updateEmployee">
		UPDATE `employee`
		SET
			`first_name` = #{first_name},
			`last_name` = #{last_name},
			`phone` = #{phone},
			`email` = #{email},
			`address` = #{address},
			`avatar` = #{avatar},
			`birthday` = #{birthday},
			`skype` = #{skype},
			`updated_by` = #{created_by},
			`updated_date` = NOW(),
			`id_company` = #{id_company}
			
		WHERE
			`id` = #{id}
	</update>
	
	
	<delete id = "deleteEmpyeeRoleMap" parameterType = "int">
		DELETE from `employee_role_map` WHERE `id_employee` = #{id};
	</delete>
	
	<delete id = "deleteSiteEmployeeMap" parameterType = "com.nwm.api.entities.EmployeeManageEntity">
		DELETE from `site_employee_map` WHERE id_employee = #{id};
	</delete>
	
	<update id="updateTableColumn" parameterType = "com.nwm.api.entities.EmployeeManageEntity">
		UPDATE `employee`
		SET
			`table_column` = #{table_column}
		WHERE
			`id` = #{id};
	</update>
	
  	<select id="getTableColumnEmployeeById" resultMap="EmployeeMap"  parameterType="int">
    	SELECT
    		table_column
		FROM `employee` u
		WHERE u.id = #{value};
  	</select>
  	
  	<select id="getAlertFilterEmployeeById" resultMap="EmployeeMap"  parameterType="int">
    	SELECT
    		alert_filter
		FROM `employee` u
		WHERE u.id = #{id};
  	</select>
  	
  	<update id="updateAlertPerPage">
		UPDATE `employee`
		SET
			`alert_per_page` = #{alert_per_page}
		WHERE
			`id` = #{id}
	</update>
	
	<update id="updateAlertFilter" parameterType = "com.nwm.api.entities.EmployeeManageEntity">
		UPDATE `employee`
		SET
			`alert_filter` = #{alert_filter}
		WHERE
			`id` = #{id};
	</update>
	
	<update id="updateLockedAccount">
		UPDATE `employee`
		SET
			`status` = #{status}
		WHERE
			`id` = #{id}
	</update>
	
	<update id="updateUnLockedAccount">
		UPDATE `employee`
		SET
			`status` = #{status},
			`failed_attempt` = #{failed_attempt},
			`account_locked` = #{account_locked},
			`lock_time` = #{lock_time},
			`is_send_email_unblock` = #{is_send_email_unblock}
		WHERE
			SHA2(`id`, 256) = #{hash_id_user}
	</update>
	
	<update id="updateSendEmailUnblock">
		UPDATE `employee`
		SET
			`is_send_email_unblock` = #{is_send_email_unblock}
		WHERE
			SHA2(`id`, 256) = #{hash_id_user}
	</update>
  	
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SitesAnalytics">
	<select id="getListDeviceBySite" resultType="Map">
		SELECT
			d.serial_number,
			d.id,
			d.id_site,
			d.id_device_group,
			d.devicename,
			d.view_tablename,
			d.job_tablename,
			d.datatablename AS datatablename, 
			dg.group_name,
			d.id AS id_device,
			d.id_device_type,
			d.hidden,
			s.table_data_virtual,
			1 AS is_paramerter_expand,
			1 AS is_calculation_expand,
			1 AS is_hidden,
			0 AS is_checked
		FROM
			device d
			LEFT JOIN device_group dg ON d.id_device_group = dg.id
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON d.id_site = s.id
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			
		WHERE
			d.id_site = #{id_site} AND d.`status` = 1 AND d.is_delete = 0 AND s.status = 1
			AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
	</select>
	
	<select id="getListDeviceParameter" resultType="Map">
		<foreach item="item" index="index" collection="list" separator="UNION">
			SELECT
				dp.id,
				dp.`name`,
				dp.standard_name,
				dp.slug,
				dp.unit,
				dp.value_chart_tool,
				dp.chart_type,
				dp.hide,
				d.id AS id_device,
				d.id_device_type,
				d.id_device_group,
				dp.is_checked,
				dp.is_calculation,
				IF(dp.is_common = 1, 1, 0) AS is_common,
				dp.menu_order
			FROM
				device d
				LEFT JOIN device_group dg ON dg.id = d.id_device_group 
				LEFT JOIN device_parameters dp ON dp.id_device_group = dg.id
			WHERE
				d.id = #{item.id} AND d.`status` = 1 AND dp.is_delete = 0 AND dp.`status` = 1 AND dp.is_filter = 1
		</foreach>
		ORDER BY id_device_group ASC, menu_order DESC;
	</select>
	
	<select id="getHiddenDataListByDevice" resultType="Map">
		SELECT
			date_from,
			date_to
		FROM
			hidden_data
		WHERE
			id_device = #{id}
			AND status = 1
			AND is_delete = 0
	</select>
	
	<select id="getFilterParamsByDevice" resultType="Map">
		SELECT
			id_device,
			id_device_parameter,
			min_value,
			max_value
		FROM
			device_parameter_filter
		WHERE
			id_device = #{id}
	</select>
	
	<select id="getDeviceGroupsList" resultType="Map">
		SELECT
			table_name
		FROM
			device_group
		WHERE
			`status` = 1
			AND is_delete = 0
			AND id IN (
				<foreach collection="dataDevice" item="item" separator=",">
					#{item.id_device_group}
				</foreach>
			)
	</select>
	
	<select id="getDataChartParameter" resultType="Map">
		SELECT
			time,
			id_device,
			id_device_group,
			time_full,
			categories_time,
			<choose>
				<when test="data_send_time == 6">
					FLOOR(DATEDIFF(time_group_by, #{start_date}) / 7 )
				</when>
				
				<when test="data_send_time == 7">
					DATE_FORMAT(time_group_by, '%m/%Y')
				</when>
				
				<when test="data_send_time == 8">
					DATE_FORMAT(time_group_by, '%Y')
				</when>
				
				<otherwise>
					time_group_by
				</otherwise>
			</choose> AS time_group_by,
			
			<foreach collection="dataParameter" item="param" separator=",">
				<if test="param.is_checked == 1">
					<choose>
						<when test="
							(table_name == 'model_campell_scientific_meter1' and param.slug == 'Meter1_ACPower') or
							(table_name == 'model_campell_scientific_meter2' and param.slug == 'Meter2_ACPower') or
							(table_name == 'model_campell_scientific_meter3' and param.slug == 'Meter3_ACPower') or
							(table_name == 'model_campell_scientific_meter4' and param.slug == 'Meter4_ACPower') or
							(table_name == 'model_adam4017ws_class8110_nelis190' and param.slug == 'POACMP11') or
							(table_name == 'model_adam4017ws_class8110_nelis190' and param.slug == 'IrradiancePOA') or
							(table_name == 'model_sma_inverter_stp1200tlus10' and param.slug == 'GridMs_TotW') or
							(table_name == 'model_sma_inverter_stp24ktlus10' and param.slug == 'GridMs_TotW') or
							(table_name == 'model_sma_cluster_controller' and param.slug == 'GridMs_TotW') or
							(table_name == 'model_solaredge_inverter' and param.slug == 'I_AC_Power') or
							(table_name == 'model_sungrow_umg604' and param.slug == 'M_AC_P') or
							(table_name == 'model_sungrow_sg110cx' and param.slug == 'P_DC') or
							(table_name == 'model_sungrow_sg50cx' and param.slug == 'P_DC') or
							(table_name == 'model_sungrow_logger1000' and param.slug == 'TotalActivePower') or
							(table_name == 'model_hukseflux_sr30d1_deviceclass_v0' and param.slug == 'IrradianceTcs') or
							(table_name == 'model_chint_solectria_inverter_class9725' and param.slug == 'AC_ActivePower') or
							(table_name == 'model_pv_powered_35_50_260_500kw_inverter' and param.slug == 'OutputGeneration') or
							(table_name == 'model_shark100' and param.slug == 'watts_3ph_total') or
							(table_name == 'model_kippzonen_rt1_class8009' and param.slug == 'sensor1_data') or
							(table_name == 'model_ivt_solaron_ext' and param.slug == 'ac_power') or
							(table_name == 'model_pvmet_100' and param.slug == 'TransientHorizontalIrradiance') or
							(table_name == 'model_pvmet_100' and param.slug == 'DailyHorizontalIrradiance') or
							(table_name == 'model_pvp_inverter' and param.slug == 'line_kw') or
							(table_name == 'model_imtsolar_class8000' and param.slug == 'irradiance') or
							(table_name == 'model_advanced_energy_solaron' and param.slug == 'ac_power') or
							(table_name == 'model_rt1_class30000' and param.slug == 'sensor1_data') or
							(table_name == 'model_veris_industries_e51c2_power_meter' and param.slug == 'TotalRealPowerPresentDemand') or
							(table_name == 'model_veris_industries_e50c2a' and param.slug == 'TotalRealPowerPresentDemand') or
							(table_name == 'model_satcon_pvs357_inverter' and param.slug == 'Output_kw') or
							(table_name == 'model_w_kipp_zonen_rt1' and param.slug == 'SunPOATempComp') or
							(table_name == 'model_elkor_wattson_pv_meter' and param.slug == 'TotalRealPower') or
							(table_name == 'model_elkor_production_meter' and param.slug == 'ActivePowerTotal') or
							(table_name == 'model_abb_trio_class6210' and param.slug == 'GridPower') or
							(table_name == 'model_lufft_class8020' and param.slug == 'IrradianceActual') or
							(table_name == 'model_lufft_ws501_umb_weather' and param.slug == 'GlobalRadiation') or
							(table_name == 'model_solectria_sgi_226ivt' and param.slug == 'ACPowerOutput') or
							(table_name == 'model_xantrex_gt100_250_500' and param.slug == 'ReadPower') or
							(table_name == 'model_xantrex_inverter' and param.slug == 'ReadPower') or
							(table_name == 'model_ae1000nx_class9644' and param.slug == 'ACPower') or
							(table_name == 'model_eri_weather_icp_class8050' and param.slug == 'solar_irradiation') or
							(table_name == 'model_sma_inverter_12_15_20_24_30tlus10' and param.slug == 'Power')
						">
							IFNULL(ROUND(IF(AVG(${param.slug}) <![CDATA[<]]> 0, 0, AVG(${param.slug})), 2), 0.001) AS ${param.slug}
						</when>
						
						<when test="
							(table_name == 'model_satcon_powergate_225_inverter' and param.slug == 'Fault1') or
							(table_name == 'model_satcon_powergate_225_inverter' and param.slug == 'Fault2') or
							(table_name == 'model_satcon_powergate_225_inverter' and param.slug == 'Fault3') or
							(table_name == 'model_satcon_powergate_225_inverter' and param.slug == 'Fault4') or
							(table_name == 'model_sunny_central_class9775_inverter' and param.slug == 'Fault') or
							(table_name == 'model_chint_solectria_inverter_class9725' and param.slug == 'PermanentFaultCode') or
							(table_name == 'model_chint_solectria_inverter_class9725' and param.slug == 'WarnCode') or
							(table_name == 'model_chint_solectria_inverter_class9725' and param.slug == 'FaultCode0') or
							(table_name == 'model_chint_solectria_inverter_class9725' and param.slug == 'FaultCode1') or
							(table_name == 'model_chint_solectria_inverter_class9725' and param.slug == 'FaultCode2') or
							(table_name == 'model_kippzonen_rt1_class8009' and param.slug == 'error_code') or
							(table_name == 'model_ivt_solaron_ext' and param.slug == 'active_faults1') or
							(table_name == 'model_ivt_solaron_ext' and param.slug == 'active_faults2') or
							(table_name == 'model_ivt_solaron_ext' and param.slug == 'active_faults3') or
							(table_name == 'model_ivt_solaron_ext' and param.slug == 'warnings1') or
							(table_name == 'model_ivt_solaron_ext' and param.slug == 'warnings2_reserved') or
							(table_name == 'model_ivt_solaron_ext' and param.slug == 'warnings3_reserved') or
							(table_name == 'model_pvp_inverter' and param.slug == 'inverter_fault_word0') or
							(table_name == 'model_pvp_inverter' and param.slug == 'inverter_fault_word1') or
							(table_name == 'model_pvp_inverter' and param.slug == 'inverter_fault_word2') or
							(table_name == 'model_advanced_energy_solaron' and param.slug == 'active_faults1') or
							(table_name == 'model_advanced_energy_solaron' and param.slug == 'active_faults2') or
							(table_name == 'model_advanced_energy_solaron' and param.slug == 'active_faults3') or
							(table_name == 'model_advanced_energy_solaron' and param.slug == 'warnings1') or
							(table_name == 'model_advanced_energy_solaron' and param.slug == 'warnings2_reserved') or
							(table_name == 'model_advanced_energy_solaron' and param.slug == 'warnings3_reserved') or
							(table_name == 'model_rt1_class30000' and param.slug == 'error_code')
						">
							IFNULL(ROUND(COUNT(${param.slug}), 2), 0.001) AS ${param.slug}
						</when>
						
						<when test="
							(table_name != 'model_virtual_meter_or_inverter' and param.slug == 'Energy') or
							(table_name == 'model_virtual_meter_or_inverter' and param.slug == 'nvmActiveEnergy') or
							(table_name == 'model_virtual_meter_or_inverter' and param.slug == 'expected_energy')
						">
							IFNULL(ROUND(SUM(${param.slug}), 2), 0.001) AS ${param.slug}
						</when>
						
						<when test="param.slug == 'MeasuredProduction'">
							<choose>
								<when test="filterBy == 'today' or filterBy == '3_day' or (filterBy == 'custom' and diff5Days)">
									IFNULL(ROUND(AVG(MeasuredProduction), 2), 0.001) AS MeasuredProduction
								</when>
								
								<otherwise>
									IFNULL(ROUND(SUM(MeasuredProduction), 2), 0.001) AS MeasuredProduction
								</otherwise>
							</choose>
						</when>
						
						<otherwise>
							IFNULL(ROUND(AVG(${param.slug}), 2), 0.001) AS ${param.slug}
						</otherwise>
					</choose>
				</if>
				
				<if test="param.is_checked != 1">
					${param.slug}
				</if>
			</foreach>
			
		FROM (
			SELECT
				dv.time,
				dv.id_device,
				d.id_device_group,
				
				<foreach collection="dataParameter" item="param" separator="," close=",">
					<if test="param.is_checked == 1">
						<choose>
							<when test="
								(table_name == 'model_campell_scientific_meter1' and param.slug == 'Meter1_ACPower') or
								(table_name == 'model_campell_scientific_meter2' and param.slug == 'Meter2_ACPower') or
								(table_name == 'model_campell_scientific_meter3' and param.slug == 'Meter3_ACPower') or
								(table_name == 'model_campell_scientific_meter4' and param.slug == 'Meter4_ACPower') or
								(table_name == 'model_adam4017ws_class8110_nelis190' and param.slug == 'POACMP11') or
								(table_name == 'model_adam4017ws_class8110_nelis190' and param.slug == 'IrradiancePOA') or
								(table_name == 'model_sma_inverter_stp1200tlus10' and param.slug == 'GridMs_TotW') or
								(table_name == 'model_sma_inverter_stp24ktlus10' and param.slug == 'GridMs_TotW') or
								(table_name == 'model_sma_cluster_controller' and param.slug == 'GridMs_TotW') or
								(table_name == 'model_solaredge_inverter' and param.slug == 'I_AC_Power') or
								(table_name == 'model_sungrow_umg604' and param.slug == 'M_AC_P') or
								(table_name == 'model_sungrow_sg110cx' and param.slug == 'P_DC') or
								(table_name == 'model_sungrow_sg50cx' and param.slug == 'P_DC') or
								(table_name == 'model_sungrow_logger1000' and param.slug == 'TotalActivePower') or
								(table_name == 'model_hukseflux_sr30d1_deviceclass_v0' and param.slug == 'IrradianceTcs') or
								(table_name == 'model_chint_solectria_inverter_class9725' and param.slug == 'AC_ActivePower') or
								(table_name == 'model_pv_powered_35_50_260_500kw_inverter' and param.slug == 'OutputGeneration') or
								(table_name == 'model_shark100' and param.slug == 'watts_3ph_total') or
								(table_name == 'model_kippzonen_rt1_class8009' and param.slug == 'sensor1_data') or
								(table_name == 'model_ivt_solaron_ext' and param.slug == 'ac_power') or
								(table_name == 'model_pvmet_100' and param.slug == 'TransientHorizontalIrradiance') or
								(table_name == 'model_pvmet_100' and param.slug == 'DailyHorizontalIrradiance') or
								(table_name == 'model_pvp_inverter' and param.slug == 'line_kw') or
								(table_name == 'model_imtsolar_class8000' and param.slug == 'irradiance') or
								(table_name == 'model_advanced_energy_solaron' and param.slug == 'ac_power') or
								(table_name == 'model_rt1_class30000' and param.slug == 'sensor1_data') or
								(table_name == 'model_veris_industries_e51c2_power_meter' and param.slug == 'TotalRealPowerPresentDemand') or
								(table_name == 'model_veris_industries_e50c2a' and param.slug == 'TotalRealPowerPresentDemand') or
								(table_name == 'model_satcon_pvs357_inverter' and param.slug == 'Output_kw') or
								(table_name == 'model_w_kipp_zonen_rt1' and param.slug == 'SunPOATempComp') or
								(table_name == 'model_elkor_wattson_pv_meter' and param.slug == 'TotalRealPower') or
								(table_name == 'model_elkor_production_meter' and param.slug == 'ActivePowerTotal') or
								(table_name == 'model_abb_trio_class6210' and param.slug == 'GridPower') or
								(table_name == 'model_lufft_class8020' and param.slug == 'IrradianceActual') or
								(table_name == 'model_lufft_ws501_umb_weather' and param.slug == 'GlobalRadiation') or
								(table_name == 'model_solectria_sgi_226ivt' and param.slug == 'ACPowerOutput') or
								(table_name == 'model_xantrex_gt100_250_500' and param.slug == 'ReadPower') or
								(table_name == 'model_xantrex_inverter' and param.slug == 'ReadPower') or
								(table_name == 'model_ae1000nx_class9644' and param.slug == 'ACPower') or
								(table_name == 'model_eri_weather_icp_class8050' and param.slug == 'solar_irradiation') or
								(table_name == 'model_sma_inverter_12_15_20_24_30tlus10' and param.slug == 'Power')
							">
								IF(AVG(dv.${param.slug}) <![CDATA[<]]> 0, 0, AVG(dv.${param.slug})) AS ${param.slug}
							</when>
							
							<when test="
								(table_name == 'model_satcon_powergate_225_inverter' and param.slug == 'Fault1') or
								(table_name == 'model_satcon_powergate_225_inverter' and param.slug == 'Fault2') or
								(table_name == 'model_satcon_powergate_225_inverter' and param.slug == 'Fault3') or
								(table_name == 'model_satcon_powergate_225_inverter' and param.slug == 'Fault4') or
								(table_name == 'model_sunny_central_class9775_inverter' and param.slug == 'Fault') or
								(table_name == 'model_chint_solectria_inverter_class9725' and param.slug == 'PermanentFaultCode') or
								(table_name == 'model_chint_solectria_inverter_class9725' and param.slug == 'WarnCode') or
								(table_name == 'model_chint_solectria_inverter_class9725' and param.slug == 'FaultCode0') or
								(table_name == 'model_chint_solectria_inverter_class9725' and param.slug == 'FaultCode1') or
								(table_name == 'model_chint_solectria_inverter_class9725' and param.slug == 'FaultCode2') or
								(table_name == 'model_kippzonen_rt1_class8009' and param.slug == 'error_code') or
								(table_name == 'model_ivt_solaron_ext' and param.slug == 'active_faults1') or
								(table_name == 'model_ivt_solaron_ext' and param.slug == 'active_faults2') or
								(table_name == 'model_ivt_solaron_ext' and param.slug == 'active_faults3') or
								(table_name == 'model_ivt_solaron_ext' and param.slug == 'warnings1') or
								(table_name == 'model_ivt_solaron_ext' and param.slug == 'warnings2_reserved') or
								(table_name == 'model_ivt_solaron_ext' and param.slug == 'warnings3_reserved') or
								(table_name == 'model_pvp_inverter' and param.slug == 'inverter_fault_word0') or
								(table_name == 'model_pvp_inverter' and param.slug == 'inverter_fault_word1') or
								(table_name == 'model_pvp_inverter' and param.slug == 'inverter_fault_word2') or
								(table_name == 'model_advanced_energy_solaron' and param.slug == 'active_faults1') or
								(table_name == 'model_advanced_energy_solaron' and param.slug == 'active_faults2') or
								(table_name == 'model_advanced_energy_solaron' and param.slug == 'active_faults3') or
								(table_name == 'model_advanced_energy_solaron' and param.slug == 'warnings1') or
								(table_name == 'model_advanced_energy_solaron' and param.slug == 'warnings2_reserved') or
								(table_name == 'model_advanced_energy_solaron' and param.slug == 'warnings3_reserved') or
								(table_name == 'model_rt1_class30000' and param.slug == 'error_code')
							">
								COUNT(dv.${param.slug}) AS ${param.slug}
							</when>
							
							<when test="table_name != 'model_virtual_meter_or_inverter' and param.slug == 'Energy'">
								SUM(dv.MeasuredProduction) AS Energy
							</when>
							
							<when test="table_name == 'model_virtual_meter_or_inverter' and (param.slug == 'nvmActiveEnergy' or param.slug == 'expected_energy')">
								SUM(dv.${param.slug}) AS ${param.slug}
							</when>
							
							<when test="param.slug == 'MeasuredProduction'">
								<choose>
									<when test="filterBy == 'today' or filterBy == '3_day' or (filterBy == 'custom' and diff5Days)">
										AVG(dv.nvmActivePower) AS MeasuredProduction
									</when>
									
									<otherwise>
										<if test="table_name != 'model_virtual_meter_or_inverter'">
											SUM(dv.MeasuredProduction) AS MeasuredProduction
										</if>
										
										<if test="table_name == 'model_virtual_meter_or_inverter'">
											SUM(dv.nvmActiveEnergy) AS MeasuredProduction
										</if>
									</otherwise>
								</choose>
							</when>
							
							<when test="table_name == 'model_virtual_meter_or_inverter' and param.slug == 'expected_power'">
								AVG(dv.expected_power_ac) AS expected_power
							</when>
							
							<otherwise>
								AVG(dv.${param.slug}) AS ${param.slug}
							</otherwise>
						</choose>
					</if>
					
					<if test="param.is_checked != 1">
						NULL AS ${param.slug}
					</if>
				</foreach>
				
				<if test="(filterBy == 'today') and data_send_time == 1">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%H:%i' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == 'today') and data_send_time == 2">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%H:%i' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == 'today') and data_send_time == 3">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%H:00' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
				</if>
				
				<if test="(filterBy == 'today') and data_send_time == 4">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%H:%i' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == 'today') and data_send_time == 5">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
	
				<if test="(filterBy == '3_day') and data_send_time == 1">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%e. %b %H:%i' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == '3_day') and data_send_time == 2">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%e. %b %H:%i' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
	
				<if test="(filterBy == '3_day') and data_send_time == 3">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%e. %b %H:00' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
				</if>
				
				<if test="(filterBy == '3_day') and data_send_time == 4">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%e. %b %H:%i' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == '3_day') and data_send_time == 5">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
	
				<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 1">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%e. %b %H:%i' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 2">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%e. %b %H:%i' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
	
				<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 3">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%e. %b %H:%i' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
				</if>
				
				<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 4">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%e. %b %H:%i' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
				
				<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 5">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
	
				<if test="(filterBy == 'this_month' or filterBy == 'last_month') and data_send_time == 2">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%m/%d' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == 'this_month' or filterBy == 'last_month') and data_send_time == 3">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
				</if>
	
				<if test="(filterBy == 'this_month' or filterBy == 'last_month') and data_send_time == 5">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
	
				<if test="(filterBy == 'this_month' or filterBy == 'last_month') and data_send_time == 6">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
	
				<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime') and data_send_time == 2">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%b. %Y' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
				
				<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime') and data_send_time == 3">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
				</if>
				
				<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime') and data_send_time == 5">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_group_by
				</if>
				
				<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime' or filterBy == 'custom') and data_send_time == 6">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
				
				<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime' or filterBy == 'custom') and data_send_time == 7">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%Y' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
	
				<if test="(filterBy == 'lifetime' or filterBy == 'custom') and data_send_time == 8">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
				
				<if test="filterBy == 'custom' and data_send_time == 1">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_full,
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
						ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
					END AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="filterBy == 'custom' and data_send_time == 2">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
						ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
					END AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="filterBy == 'custom' and data_send_time == 3">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
						ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
					END AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
				</if>
				
				<if test="filterBy == 'custom' and data_send_time == 4">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_full,
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
						ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
					END AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
				
				<if test="filterBy == 'custom' and data_send_time == 5">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_full,
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
						ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
					END AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_group_by
				</if>
			
			FROM
				${datatablename} dv 
				LEFT JOIN device d ON d.id = dv.id_device
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE
				dv.id_device = #{id}
				AND (CAST(CONVERT_TZ( dv.time, '+00:00', t.`offset` ) AS DATETIME) BETWEEN CAST(#{start_date} AS DATETIME) AND CAST(#{end_date} AS DATETIME))
			    <foreach item="item" index="index" collection="hidden_data_list">
					AND CONVERT_TZ( dv.time, '+00:00', t.`offset` ) NOT BETWEEN #{item.date_from} AND #{item.date_to}
			    </foreach>
			GROUP BY time_group_by
			ORDER BY time_group_by ASC
		) t
		GROUP BY
			<choose>
				<when test="data_send_time == 6">
	                FLOOR(DATEDIFF(time_group_by, #{start_date}) / 7 )
				</when>
				
				<when test="data_send_time == 7">
					DATE_FORMAT(time_group_by, '%m/%Y')
				</when>
				
				<when test="data_send_time == 8">
					DATE_FORMAT(time_group_by, '%Y')
				</when>
				
				<otherwise>
					time_group_by
				</otherwise>
			</choose>
	</select>
</mapper>
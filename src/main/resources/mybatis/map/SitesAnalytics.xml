<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SitesAnalytics">
	<select id="getListDeviceBySite" resultType="com.nwm.api.entities.SitesDevicesEntity" parameterType="com.nwm.api.entities.SitesDevicesEntity">
		SELECT
			d.serial_number,
			d.id,
			d.id_site,
			d.id_device_group,
			d.devicename,
			d.view_tablename,
			d.job_tablename,
			d.datatablename AS datatablename, 
			dg.group_name,
			d.id AS id_device,
			d.id_device_type,
			d.hidden,
			s.table_data_virtual,
			1 AS is_paramerter_expand,
			1 AS is_calculation_expand,
			1 AS is_hidden,
			0 AS is_checked
		FROM
			device d
			LEFT JOIN device_group dg ON d.id_device_group = dg.id
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON d.id_site = s.id
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			
		WHERE
			d.id_site = #{id_site} AND d.`status` = 1 AND d.is_delete = 0 AND s.status = 1
			AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
	</select>
	
	<select id="getListDeviceParameter" resultType="com.nwm.api.entities.DeviceParameterEntity" parameterType="com.nwm.api.entities.DeviceParameterEntity">
		SELECT
			dp.id,
			dp.`name`,
			dp.standard_name,
			dp.slug,
			dp.unit,
			dp.value_chart_tool,
			dp.chart_type,
			dp.description,
			dp.register,
			dp.hide,
			dp.standard_alert_message,
			d.id AS id_device,
			d.id_device_type,
			d.id_device_group,
			dp.is_checked,
			dp.is_calculation,
			dp.is_common,
			dp.menu_order
		FROM
			device d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group 
			LEFT JOIN device_parameters dp ON dp.id_device_group = dg.id
		WHERE
			d.id = #{id} AND d.`status` = 1 AND dp.is_delete = 0 AND dp.`status` = 1 AND dp.is_filter = 1 ORDER BY menu_order DESC;
	</select>
	
	<select id="getHiddenDataListByDevice" resultType="Map">
		SELECT
			date_from,
			date_to
		FROM
			hidden_data
		WHERE
			id_device = #{id}
			AND status = 1
			AND is_delete = 0
	</select>
	
	<select id="getDeviceGroupsList" resultType="Map">
		SELECT
			table_name
		FROM
			device_group
		WHERE
			`status` = 1
			AND is_delete = 0
	</select>
	
	<select id="getDataChartParameter" resultType="Map">
		SELECT
			time,
			id_device,
			is_checked,
			datatablename,
			view_tablename,
			job_tablename,
			id_device_group,
			time_full,
			categories_first_time,
			categories_time,
			<choose>
				<when test="data_send_time == 6">
					FLOOR(DATEDIFF(time_group_by, #{start_date}) / 7 )
				</when>
				
				<when test="data_send_time == 7">
					DATE_FORMAT(time_group_by, '%m/%Y')
				</when>
				
				<when test="data_send_time == 8">
					DATE_FORMAT(time_group_by, '%Y')
				</when>
				
				<otherwise>
					time_group_by
				</otherwise>
			</choose> AS time_group_by,
			
			<!-- Energy & Measured Production calculation field -->
			<if test="id_device_type == 1 or id_device_type == 3 or id_device_type == 7 or id_device_type == 8 or id_device_type == 9">
				IFNULL(ROUND(SUM(Energy), 2), 0.001) AS Energy,
				<choose>
					<when test="filterBy == 'today' or filterBy == '3_day' or (filterBy == 'custom' and diff5Days)">
						IFNULL(ROUND(AVG(nvmActivePower), 2), 0.001)
					</when>
					<otherwise>
						IFNULL(ROUND(SUM(MeasuredProduction), 2), 0.001)
					</otherwise>
				</choose> AS MeasuredProduction,
			</if>
			
			<if test="table_name == 'model_ae_refusol'">
				IFNULL(ROUND(AVG(ACPower), 2), 0.001) AS ACPower,
				IFNULL(ROUND(AVG(ACVoltageAverageRMS), 2), 0.001) AS ACVoltageAverageRMS,
				IFNULL(ROUND(AVG(ACVoltage1RMS), 2), 0.001) AS ACVoltage1RMS,
				IFNULL(ROUND(AVG(ACVoltage2RMS), 2), 0.001) AS ACVoltage2RMS,
				IFNULL(ROUND(AVG(ACVoltage3RMS), 2), 0.001) AS ACVoltage3RMS,
				IFNULL(ROUND(AVG(ACCurrentSum), 2), 0.001) AS ACCurrentSum,
				IFNULL(ROUND(AVG(ACCurrent1), 2), 0.001) AS ACCurrent1,
				IFNULL(ROUND(AVG(ACCurrent2), 2), 0.001) AS ACCurrent2,
				IFNULL(ROUND(AVG(ACCurrent3), 2), 0.001) AS ACCurrent3,
				IFNULL(ROUND(AVG(ACFrequency1), 2), 0.001) AS ACFrequency1,
				IFNULL(ROUND(AVG(ACFrequency2), 2), 0.001) AS ACFrequency2,
				IFNULL(ROUND(AVG(ACFrequency3), 2), 0.001) AS ACFrequency3,
				IFNULL(ROUND(AVG(DCPower), 2), 0.001) AS DCPower,
				IFNULL(ROUND(AVG(DCVoltage), 2), 0.001) AS DCVoltage,
				IFNULL(ROUND(AVG(DCCurrent), 2), 0.001) AS DCCurrent,
				IFNULL(ROUND(AVG(HeatSink), 2), 0.001) AS HeatSink,
				IFNULL(ROUND(AVG(Interior), 2), 0.001) AS Interior,
				IFNULL(ROUND(AVG(Irradiation), 2), 0.001) AS Irradiation,
				IFNULL(ROUND(AVG(Panel), 2), 0.001) AS Panel,
				IFNULL(ROUND(AVG(DailyYield), 2), 0.001) AS DailyYield,
				IFNULL(ROUND(AVG(TotalYield), 2), 0.001) AS TotalYield,
				IFNULL(ROUND(AVG(OperatingHours), 2), 0.001) AS OperatingHours,
				IFNULL(ROUND(AVG(Status), 2), 0.001) AS Status,
				IFNULL(ROUND(AVG(ErrorMessageCode), 2), 0.001) AS ErrorMessageCode
			</if>
			
			
			<if test="table_name == 'model_elster_a1700'">
				IFNULL(ROUND(AVG(PhaseAVoltage), 2), 0.001) AS PhaseAVoltage,
				IFNULL(ROUND(AVG(PhaseBVoltage), 2), 0.001) AS PhaseBVoltage,
				IFNULL(ROUND(AVG(PhaseCVoltage), 2), 0.001) AS PhaseCVoltage,
				IFNULL(ROUND(AVG(ABLineVoltage), 2), 0.001) AS ABLineVoltage,
				IFNULL(ROUND(AVG(BCLineVoltage), 2), 0.001) AS BCLineVoltage,
				IFNULL(ROUND(AVG(CALineVoltage), 2), 0.001) AS CALineVoltage,
				IFNULL(ROUND(AVG(PhaseACurrent), 2), 0.001) AS PhaseACurrent,
				IFNULL(ROUND(AVG(PhaseBCurrent), 2), 0.001) AS PhaseBCurrent,
				IFNULL(ROUND(AVG(PhaseCCurrent), 2), 0.001) AS PhaseCCurrent,
				IFNULL(ROUND(AVG(PhaseAActivePower), 2), 0.001) AS PhaseAActivePower,
				IFNULL(ROUND(AVG(PhaseBActivePower), 2), 0.001) AS PhaseBActivePower,
				IFNULL(ROUND(AVG(PhaseCActivePower), 2), 0.001) AS PhaseCActivePower,
				IFNULL(ROUND(AVG(TotalActivePower), 2), 0.001) AS TotalActivePower,
				IFNULL(ROUND(AVG(TotalReactivePower), 2), 0.001) AS TotalReactivePower,
				IFNULL(ROUND(AVG(TotalApparentPower), 2), 0.001) AS TotalApparentPower,
				IFNULL(ROUND(AVG(TotalPowerFactor), 2), 0.001) AS TotalPowerFactor,
				IFNULL(ROUND(AVG(GridFrequency), 2), 0.001) AS GridFrequency,
				IFNULL(ROUND(AVG(TotalForwardActiveEnergy), 2), 0.001) AS TotalForwardActiveEnergy,
				IFNULL(ROUND(AVG(TotalReverseActiveEnergy), 2), 0.001) AS TotalReverseActiveEnergy,
				IFNULL(ROUND(AVG(TotalForwardReactiveEnergy), 2), 0.001) AS TotalForwardReactiveEnergy,
				IFNULL(ROUND(AVG(TotalReverseReactiveEnergy), 2), 0.001) AS TotalReverseReactiveEnergy,
				IFNULL(ROUND(AVG(PhaseAForwardActivePower), 2), 0.001) AS PhaseAForwardActivePower,
				IFNULL(ROUND(AVG(PhaseBForwardActivePower), 2), 0.001) AS PhaseBForwardActivePower,
				IFNULL(ROUND(AVG(PhaseCForwardActivePower), 2), 0.001) AS PhaseCForwardActivePower,
				IFNULL(ROUND(AVG(PhaseAReverseActivePower), 2), 0.001) AS PhaseAReverseActivePower,
				IFNULL(ROUND(AVG(PhaseBReverseActivePower), 2), 0.001) AS PhaseBReverseActivePower,
				IFNULL(ROUND(AVG(PhaseCReverseActivePower), 2), 0.001) AS PhaseCReverseActivePower,
				IFNULL(ROUND(AVG(PhaseAForwardReactivePower), 2), 0.001) AS PhaseAForwardReactivePower,
				IFNULL(ROUND(AVG(PhaseBForwardReactivePower), 2), 0.001) AS PhaseBForwardReactivePower,
				IFNULL(ROUND(AVG(PhaseCForwardReactivePower), 2), 0.001) AS PhaseCForwardReactivePower,
				IFNULL(ROUND(AVG(PhaseAReverseReactivePower), 2), 0.001) AS PhaseAReverseReactivePower,
				IFNULL(ROUND(AVG(PhaseBReverseReactivePower), 2), 0.001) AS PhaseBReverseReactivePower,
				IFNULL(ROUND(AVG(PhaseCReverseReactivePower), 2), 0.001) AS PhaseCReverseReactivePower,
				IFNULL(ROUND(AVG(FlatForwardActiveEnergy), 2), 0.001) AS FlatForwardActiveEnergy,
				IFNULL(ROUND(AVG(PeakForwardActiveEnergy), 2), 0.001) AS PeakForwardActiveEnergy,
				IFNULL(ROUND(AVG(ValleyForwardActiveEnergy), 2), 0.001) AS ValleyForwardActiveEnergy,
				IFNULL(ROUND(AVG(FlatReverseActiveEnergy), 2), 0.001) AS FlatReverseActiveEnergy,
				IFNULL(ROUND(AVG(PeakReverseActiveEnergy), 2), 0.001) AS PeakReverseActiveEnergy,
				IFNULL(ROUND(AVG(ValleyReverseActiveEnergy), 2), 0.001) AS ValleyReverseActiveEnergy
			</if>
			
			<if test="table_name == 'model_sev_sg110cx'">
				IFNULL(ROUND(AVG(TotalYield), 2), 0.001) AS TotalYield,
				IFNULL(ROUND(AVG(DailyYield), 2), 0.001) AS DailyYield,
				IFNULL(ROUND(AVG(ArrayInsulationResistance), 2), 0.001) AS ArrayInsulationResistance,
				IFNULL(ROUND(AVG(InteriorTemperature), 2), 0.001) AS InteriorTemperature,
				IFNULL(ROUND(AVG(TotalDCPower), 2), 0.001) AS TotalDCPower,
				IFNULL(ROUND(AVG(TotalApparentPower), 2), 0.001) AS TotalApparentPower,
				IFNULL(ROUND(AVG(TotalActivePower), 2), 0.001) AS TotalActivePower,
				IFNULL(ROUND(AVG(TotalReactivePower), 2), 0.001) AS TotalReactivePower,
				IFNULL(ROUND(AVG(TotalPowerFactor), 2), 0.001) AS TotalPowerFactor,
				IFNULL(ROUND(AVG(GridFrequency), 2), 0.001) AS GridFrequency,
				IFNULL(ROUND(AVG(PhaseAVoltage), 2), 0.001) AS PhaseAVoltage,
				IFNULL(ROUND(AVG(PhaseBVoltage), 2), 0.001) AS PhaseBVoltage,
				IFNULL(ROUND(AVG(PhaseCVoltage), 2), 0.001) AS PhaseCVoltage,
				IFNULL(ROUND(AVG(PhaseACurrent), 2), 0.001) AS PhaseACurrent,
				IFNULL(ROUND(AVG(PhaseBCurrent), 2), 0.001) AS PhaseBCurrent,
				IFNULL(ROUND(AVG(PhaseCCurrent), 2), 0.001) AS PhaseCCurrent
			</if>
			
			<if test="table_name == 'model_wattsun_tracker'">
				IFNULL(ROUND(AVG(MODE), 2), 0.001) AS MODE,
				IFNULL(ROUND(AVG(ST_CLEAR_ACCUMULATOR), 2), 0.001) AS ST_CLEAR_ACCUMULATOR,
				IFNULL(ROUND(AVG(ND_CLEAR_ACCUMULATOR), 2), 0.001) AS ND_CLEAR_ACCUMULATOR,
				IFNULL(ROUND(AVG(TRACKER_ANGLE_SETPOINT), 2), 0.001) AS TRACKER_ANGLE_SETPOINT,
				IFNULL(ROUND(AVG(TRACKER_ANGLE), 2), 0.001) AS TRACKER_ANGLE,
				IFNULL(ROUND(AVG(NIGHT_STOW_POSITION), 2), 0.001) AS NIGHT_STOW_POSITION,
				IFNULL(ROUND(AVG(WIND_STOW_POSITION), 2), 0.001) AS WIND_STOW_POSITION
			</if>
			
			<if test="table_name == 'model_wattsun_tcu'">
				IFNULL(ROUND(AVG(TRACKER_ADDRESS), 2), 0.001) AS TRACKER_ADDRESS,
				IFNULL(ROUND(AVG(HOUR), 2), 0.001) AS HOUR,
				IFNULL(ROUND(AVG(MINUTE), 2), 0.001) AS MINUTE,
				IFNULL(ROUND(AVG(DAY), 2), 0.001) AS DAY,
				IFNULL(ROUND(AVG(DIGITAL_INPUTS), 2), 0.001) AS DIGITAL_INPUTS,
				IFNULL(ROUND(AVG(DIGITAL_OUTPUTS), 2), 0.001) AS DIGITAL_OUTPUTS,
				IFNULL(ROUND(AVG(WATCHDOG_COUNTER), 2), 0.001) AS WATCHDOG_COUNTER,
				IFNULL(ROUND(AVG(ANGLE_CALC), 2), 0.001) AS ANGLE_CALC,
				IFNULL(ROUND(AVG(LATITUDE), 2), 0.001) AS LATITUDE,
				IFNULL(ROUND(AVG(LONGITUDE), 2), 0.001) AS LONGITUDE
			</if>
			
			<if test="table_name == 'model_xantrex_gt500e'">
				IFNULL(ROUND(AVG(AC_CURRENT_A), 2), 0.001) AS AC_CURRENT_A,
				IFNULL(ROUND(AVG(AC_CURRENT_B), 2), 0.001) AS AC_CURRENT_B,
				IFNULL(ROUND(AVG(AC_CURRENT_C), 2), 0.001) AS AC_CURRENT_C,
				IFNULL(ROUND(AVG(AC_POWER), 2), 0.001) AS AC_POWER,
				IFNULL(ROUND(AVG(AC_VOLTAGE_AB), 2), 0.001) AS AC_VOLTAGE_AB,
				IFNULL(ROUND(AVG(AC_VOLTAGE_BC), 2), 0.001) AS AC_VOLTAGE_BC,
				IFNULL(ROUND(AVG(AC_VOLTAGE_CA), 2), 0.001) AS AC_VOLTAGE_CA,
				IFNULL(ROUND(AVG(DC_CURRENT), 2), 0.001) AS DC_CURRENT,
				IFNULL(ROUND(AVG(DC_POWER), 2), 0.001) AS DC_POWER,
				IFNULL(ROUND(AVG(DC_VOLTAGE), 2), 0.001) AS DC_VOLTAGE,
				IFNULL(ROUND(AVG(ENERGY_DELIVERED), 2), 0.001) AS ENERGY_DELIVERED,
				IFNULL(ROUND(AVG(FREQUENCY), 2), 0.001) AS FREQUENCY,
				IFNULL(ROUND(AVG(STATUS_FAULT), 2), 0.001) AS STATUS_FAULT,
				IFNULL(ROUND(AVG(STATUS_GOAL), 2), 0.001) AS STATUS_GOAL,
				IFNULL(ROUND(AVG(STATUS_INVERTER), 2), 0.001) AS STATUS_INVERTER,
				IFNULL(ROUND(AVG(STATUS_OPERATING), 2), 0.001) AS STATUS_OPERATING,
				IFNULL(ROUND(AVG(STATUS_PV), 2), 0.001) AS STATUS_PV,
				IFNULL(ROUND(AVG(T_LEFT_MATRIX), 2), 0.001) AS T_LEFT_MATRIX,
				IFNULL(ROUND(AVG(T_RIGHT_MATRIX), 2), 0.001) AS T_RIGHT_MATRIX
				
				
			</if>
			
			<if test="table_name == 'model_power_measurement_ion_7650'">
				IFNULL(ROUND(AVG(Ia), 2), 0.001) AS Ia,
				IFNULL(ROUND(AVG(Ib), 2), 0.001) AS Ib,
				IFNULL(ROUND(AVG(Ic), 2), 0.001) AS Ic,
				IFNULL(ROUND(AVG(I4), 2), 0.001) AS I4,
				IFNULL(ROUND(AVG(I5), 2), 0.001) AS I5,
				IFNULL(ROUND(AVG(IAvg), 2), 0.001) AS IAvg,
				IFNULL(ROUND(AVG(IAvgMn), 2), 0.001) AS IAvgMn,
				IFNULL(ROUND(AVG(IAvgMx), 2), 0.001) AS IAvgMx,
				IFNULL(ROUND(AVG(IAvgMean), 2), 0.001) AS IAvgMean,
				IFNULL(ROUND(AVG(Freq), 2), 0.001) AS Freq,
				IFNULL(ROUND(AVG(FreqMn), 2), 0.001) AS FreqMn,
				IFNULL(ROUND(AVG(FreqMx), 2), 0.001) AS FreqMx,
				IFNULL(ROUND(AVG(FreqMean), 2), 0.001) AS FreqMean,
				IFNULL(ROUND(AVG(VUnbal), 2), 0.001) AS VUnbal,
				IFNULL(ROUND(AVG(IUnbal), 2), 0.001) AS IUnbal,
				IFNULL(ROUND(AVG(PhaseRev), 2), 0.001) AS PhaseRev,
				IFNULL(ROUND(AVG(VInA), 2), 0.001) AS VInA,
				IFNULL(ROUND(AVG(VInB), 2), 0.001) AS VInB,
				IFNULL(ROUND(AVG(VInC), 2), 0.001) AS VInC,
				IFNULL(ROUND(AVG(VInAvg), 2), 0.001) AS VInAvg,
				IFNULL(ROUND(AVG(VInAvgMx), 2), 0.001) AS VInAvgMx,
				IFNULL(ROUND(AVG(VIIAb), 2), 0.001) AS VIIAb,
				IFNULL(ROUND(AVG(VIIBc), 2), 0.001) AS VIIBc,
				IFNULL(ROUND(AVG(VIICa), 2), 0.001) AS VIICa,
				IFNULL(ROUND(AVG(VIIAvg), 2), 0.001) AS VIIAvg,
				IFNULL(ROUND(AVG(VIIAvgMx), 2), 0.001) AS VIIAvgMx,
				IFNULL(ROUND(AVG(VIIAvgMean), 2), 0.001) AS VIIAvgMean,
				IFNULL(ROUND(AVG(kWA), 2), 0.001) AS kWA,
				IFNULL(ROUND(AVG(kWB), 2), 0.001) AS kWB,
				IFNULL(ROUND(AVG(kWC), 2), 0.001) AS kWC,
				IFNULL(ROUND(AVG(kWTot), 2), 0.001) AS kWTot,
				IFNULL(ROUND(AVG(kWTotMax), 2), 0.001) AS kWTotMax,
				IFNULL(ROUND(AVG(kVARA), 2), 0.001) AS kVARA,
				IFNULL(ROUND(AVG(kVARB), 2), 0.001) AS kVARB,
				IFNULL(ROUND(AVG(kVARC), 2), 0.001) AS kVARC,
				IFNULL(ROUND(AVG(kVARTot), 2), 0.001) AS kVARTot,
				IFNULL(ROUND(AVG(kVARTotMax), 2), 0.001) AS kVARTotMax,
				IFNULL(ROUND(AVG(kVAA), 2), 0.001) AS kVAA,
				IFNULL(ROUND(AVG(kVAB), 2), 0.001) AS kVAB,
				IFNULL(ROUND(AVG(kVAC), 2), 0.001) AS kVAC,
				IFNULL(ROUND(AVG(kVATot), 2), 0.001) AS kVATot,
				IFNULL(ROUND(AVG(kVATotMax), 2), 0.001) AS kVATotMax,
				IFNULL(ROUND(AVG(kWhDel), 2), 0.001) AS kWhDel,
				IFNULL(ROUND(AVG(kWhRec), 2), 0.001) AS kWhRec,
				IFNULL(ROUND(AVG(kVARhDel), 2), 0.001) AS kVARhDel,
				IFNULL(ROUND(AVG(kVARhRec), 2), 0.001) AS kVARhRec,
				IFNULL(ROUND(AVG(kVARhDelRec), 2), 0.001) AS kVARhDelRec,
				
				IFNULL(ROUND(AVG(PFSignA), 2), 0.001) AS PFSignA,
				IFNULL(ROUND(AVG(PFSignB), 2), 0.001) AS PFSignB,
				IFNULL(ROUND(AVG(PFSignC), 2), 0.001) AS PFSignC,
				IFNULL(ROUND(AVG(PFSignTot), 2), 0.001) AS PFSignTot,
				IFNULL(ROUND(AVG(V1THDMx), 2), 0.001) AS V1THDMx,
				IFNULL(ROUND(AVG(V2THDMx), 2), 0.001) AS V2THDMx,
				IFNULL(ROUND(AVG(V3THDMx), 2), 0.001) AS V3THDMx,
				IFNULL(ROUND(AVG(I1THDMx), 2), 0.001) AS I1THDMx,
				IFNULL(ROUND(AVG(I2THDMx), 2), 0.001) AS I2THDMx,
				IFNULL(ROUND(AVG(I3THDMx), 2), 0.001) AS I3THDMx,
				IFNULL(ROUND(AVG(I1KFactor), 2), 0.001) AS I1KFactor,
				IFNULL(ROUND(AVG(I2KFactor), 2), 0.001) AS I2KFactor,
				IFNULL(ROUND(AVG(I3KFactor), 2), 0.001) AS I3KFactor,
				IFNULL(ROUND(AVG(I1CrestFactor), 2), 0.001) AS I1CrestFactor,
				IFNULL(ROUND(AVG(I2CrestFactor), 2), 0.001) AS I2CrestFactor,
				IFNULL(ROUND(AVG(I3CrestFactor), 2), 0.001) AS I3CrestFactor
				
				
			</if>
			
			<if test="table_name == 'model_pyranometer_poa'">
				IFNULL(ROUND(AVG(poa), 2), 0.001) AS poa,
				IFNULL(ROUND(SUM(point1), 2), 0.001) AS point1,
				IFNULL(ROUND(AVG(point2), 2), 0.001) AS point2,
				IFNULL(ROUND(AVG(point3), 2), 0.001) AS point3
			</if>
			
			<if test="table_name == 'model_janitza_umg604pro'">
				IFNULL(ROUND(AVG(PhaseAVoltage), 2), 0.001) AS PhaseAVoltage,
				IFNULL(ROUND(AVG(PhaseBVoltage), 2), 0.001) AS PhaseBVoltage,
				IFNULL(ROUND(AVG(PhaseCVoltage), 2), 0.001) AS PhaseCVoltage,
				IFNULL(ROUND(AVG(ABVoltage), 2), 0.001) AS ABVoltage,
				IFNULL(ROUND(AVG(BCVoltage), 2), 0.001) AS BCVoltage,
				IFNULL(ROUND(AVG(CAVoltage), 2), 0.001) AS CAVoltage,
				IFNULL(ROUND(AVG(PhaseACurrent), 2), 0.001) AS PhaseACurrent,
				IFNULL(ROUND(AVG(PhaseBCurrent), 2), 0.001) AS PhaseBCurrent,
				IFNULL(ROUND(AVG(PhaseCCurrent), 2), 0.001) AS PhaseCCurrent,
				IFNULL(ROUND(AVG(TotalCurrent), 2), 0.001) AS TotalCurrent,
				IFNULL(ROUND(AVG(PhaseAPower), 2), 0.001) AS PhaseAPower,
				
				IFNULL(ROUND(AVG(PhaseBPower), 2), 0.001) AS PhaseBPower,
				IFNULL(ROUND(AVG(PhaseCPower), 2), 0.001) AS PhaseCPower,
				IFNULL(ROUND(AVG(TotalPower), 2), 0.001) AS TotalPower,
				IFNULL(ROUND(AVG(PhaseAApparentPower), 2), 0.001) AS PhaseAApparentPower,
				IFNULL(ROUND(AVG(PhaseBApparentPower), 2), 0.001) AS PhaseBApparentPower,
				IFNULL(ROUND(AVG(PhaseCApparentPower), 2), 0.001) AS PhaseCApparentPower,
				IFNULL(ROUND(AVG(TotalApparentPower), 2), 0.001) AS TotalApparentPower,
				IFNULL(ROUND(AVG(PhaseAReactivePower), 2), 0.001) AS PhaseAReactivePower,
				IFNULL(ROUND(AVG(PhaseBReactivePower), 2), 0.001) AS PhaseBReactivePower,
				IFNULL(ROUND(AVG(PhaseCReactivePower), 2), 0.001) AS PhaseCReactivePower,
				
				IFNULL(ROUND(AVG(TotalReactivePower), 2), 0.001) AS TotalReactivePower,
				IFNULL(ROUND(AVG(PhaseAPowerFactor), 2), 0.001) AS PhaseAPowerFactor,
				IFNULL(ROUND(AVG(PhaseBPowerFactor), 2), 0.001) AS PhaseBPowerFactor,
				IFNULL(ROUND(AVG(PhaseCPowerFactor), 2), 0.001) AS PhaseCPowerFactor,
				IFNULL(ROUND(AVG(PowerFactor), 2), 0.001) AS PowerFactor,
				IFNULL(ROUND(AVG(Frequency), 2), 0.001) AS Frequency,
				IFNULL(ROUND(AVG(TotalForwardActiveEnergy), 2), 0.001) AS TotalForwardActiveEnergy,
				IFNULL(ROUND(AVG(TotalReverseActiveEnergy), 2), 0.001) AS TotalReverseActiveEnergy,
				IFNULL(ROUND(AVG(TotalForwardReactiveEnergy), 2), 0.001) AS TotalForwardReactiveEnergy,
				IFNULL(ROUND(AVG(TotalReverseReactiveEnergy), 2), 0.001) AS TotalReverseReactiveEnergy,
				
				IFNULL(ROUND(AVG(PhaseAForwardActiveEnergy), 2), 0.001) AS PhaseAForwardActiveEnergy,
				IFNULL(ROUND(AVG(PhaseBForwardActiveEnergy), 2), 0.001) AS PhaseBForwardActiveEnergy,
				IFNULL(ROUND(AVG(PhaseCForwardActiveEnergy), 2), 0.001) AS PhaseCForwardActiveEnergy,
				IFNULL(ROUND(AVG(PhaseAReverseActiveEnergy), 2), 0.001) AS PhaseAReverseActiveEnergy,
				IFNULL(ROUND(AVG(PhaseBReverseActiveEnergy), 2), 0.001) AS PhaseBReverseActiveEnergy,
				IFNULL(ROUND(AVG(PhaseCReverseActiveEnergy), 2), 0.001) AS PhaseCReverseActiveEnergy,
				IFNULL(ROUND(AVG(PhaseAForwardReactiveEnergy), 2), 0.001) AS PhaseAForwardReactiveEnergy,
				IFNULL(ROUND(AVG(PhaseBForwardReactiveEnergy), 2), 0.001) AS PhaseBForwardReactiveEnergy,
				IFNULL(ROUND(AVG(PhaseCForwardReactiveEnergy), 2), 0.001) AS PhaseCForwardReactiveEnergy,
				IFNULL(ROUND(AVG(PhaseAReverseReactiveEnergy), 2), 0.001) AS PhaseAReverseReactiveEnergy,
				
				IFNULL(ROUND(AVG(PhaseBReverseReactiveEnergy), 2), 0.001) AS PhaseBReverseReactiveEnergy,
				IFNULL(ROUND(AVG(PhaseCReverseReactiveEnergy), 2), 0.001) AS PhaseCReverseReactiveEnergy
			</if>
			
			
			<if test="table_name == 'model_meter_ion_8600'">
				IFNULL(ROUND(AVG(VlnA), 2), 0.001) AS VlnA,
				IFNULL(ROUND(AVG(VlnB), 2), 0.001) AS VlnB,
				IFNULL(ROUND(AVG(VlnC), 2), 0.001) AS VlnC,
				IFNULL(ROUND(AVG(VlnAve), 2), 0.001) AS VlnAve,
				IFNULL(ROUND(AVG(VllAb), 2), 0.001) AS VllAb,
				IFNULL(ROUND(AVG(VllAc), 2), 0.001) AS VllAc,
				IFNULL(ROUND(AVG(VllCa), 2), 0.001) AS VllCa,
				IFNULL(ROUND(AVG(IA), 2), 0.001) AS IA,
				IFNULL(ROUND(AVG(IB), 2), 0.001) AS IB,
				IFNULL(ROUND(AVG(IC), 2), 0.001) AS IC,
				IFNULL(ROUND(AVG(IAve), 2), 0.001) AS IAve,
				
				IFNULL(ROUND(AVG(VUnbal), 2), 0.001) AS VUnbal,
				IFNULL(ROUND(AVG(IUnbal), 2), 0.001) AS IUnbal,
				IFNULL(ROUND(AVG(Freq), 2), 0.001) AS Freq,
				IFNULL(ROUND(AVG(I4), 2), 0.001) AS I4,
				IFNULL(ROUND(AVG(kWA), 2), 0.001) AS kWA,
				IFNULL(ROUND(AVG(kWB), 2), 0.001) AS kWB,
				IFNULL(ROUND(AVG(kWC), 2), 0.001) AS kWC,
				IFNULL(ROUND(AVG(kWTot), 2), 0.001) AS kWTot,
				IFNULL(ROUND(AVG(kVARA), 2), 0.001) AS kVARA,
				IFNULL(ROUND(AVG(kVARB), 2), 0.001) AS kVARB,
				
				IFNULL(ROUND(AVG(kVARC), 2), 0.001) AS kVARC,
				IFNULL(ROUND(AVG(kVARTot), 2), 0.001) AS kVARTot,
				IFNULL(ROUND(AVG(KVAA), 2), 0.001) AS KVAA,
				IFNULL(ROUND(AVG(KVAB), 2), 0.001) AS KVAB,
				IFNULL(ROUND(AVG(KVAC), 2), 0.001) AS KVAC,
				IFNULL(ROUND(AVG(KVATot), 2), 0.001) AS KVATot,
				IFNULL(ROUND(AVG(PFSignA), 2), 0.001) AS PFSignA,
				IFNULL(ROUND(AVG(PFSignB), 2), 0.001) AS PFSignB,
				IFNULL(ROUND(AVG(PFSignC), 2), 0.001) AS PFSignC,
				IFNULL(ROUND(AVG(PFSignTot), 2), 0.001) AS PFSignTot,
				
				IFNULL(ROUND(AVG(VIIAveMx), 2), 0.001) AS VIIAveMx,
				IFNULL(ROUND(AVG(IAveMx), 2), 0.001) AS IAveMx,
				IFNULL(ROUND(AVG(kWTotMx), 2), 0.001) AS kWTotMx,
				IFNULL(ROUND(AVG(kVARTotMx), 2), 0.001) AS kVARTotMx,
				IFNULL(ROUND(AVG(kVATotMx), 2), 0.001) AS kVATotMx,
				IFNULL(ROUND(AVG(FreqMx), 2), 0.001) AS FreqMx,
				IFNULL(ROUND(AVG(VIIAveMn), 2), 0.001) AS VIIAveMn,
				IFNULL(ROUND(AVG(IAveMn), 2), 0.001) AS IAveMn,
				IFNULL(ROUND(AVG(FreqMn), 2), 0.001) AS FreqMn,
				IFNULL(ROUND(AVG(kWSdDelRec), 2), 0.001) AS kWSdDelRec,
				
				IFNULL(ROUND(AVG(kVASdDelRec), 2), 0.001) AS kVASdDelRec,
				IFNULL(ROUND(AVG(kVARSdDelRec), 2), 0.001) AS kVARSdDelRec,
				IFNULL(ROUND(AVG(kWSdMxDR), 2), 0.001) AS kWSdMxDR,
				IFNULL(ROUND(AVG(kVASdMxDR), 2), 0.001) AS kVASdMxDR,
				IFNULL(ROUND(AVG(kVARSdMxDR), 2), 0.001) AS kVARSdMxDR,
				IFNULL(ROUND(AVG(PhaseRev), 2), 0.001) AS PhaseRev,
				IFNULL(ROUND(AVG(kWhDel), 2), 0.001) AS kWhDel,
				IFNULL(ROUND(AVG(kWhRec), 2), 0.001) AS kWhRec,
				IFNULL(ROUND(AVG(kWhDelRec), 2), 0.001) AS kWhDelRec,
				IFNULL(ROUND(AVG(kWhDel_Rec), 2), 0.001) AS kWhDel_Rec,
				IFNULL(ROUND(AVG(kVARhDel), 2), 0.001) AS kVARhDel,
				IFNULL(ROUND(AVG(kVARhRec), 2), 0.001) AS kVARhRec,
				IFNULL(ROUND(AVG(kVARhDelRec), 2), 0.001) AS kVARhDelRec,
				IFNULL(ROUND(AVG(kVARhDel_Rec), 2), 0.001) AS kVARhDel_Rec,
				IFNULL(ROUND(AVG(kVAhDelRec), 2), 0.001) AS kVAhDelRec,
				IFNULL(ROUND(AVG(V1THDMx), 2), 0.001) AS V1THDMx,
				IFNULL(ROUND(AVG(V2THDMx), 2), 0.001) AS V2THDMx,
				IFNULL(ROUND(AVG(V3THDMx), 2), 0.001) AS  V3THDMx,
				IFNULL(ROUND(AVG(I1THDMx), 2), 0.001) AS I1THDMx
			</if>

			<if test="table_name == 'model_meter_ion_8600v1'">
				IFNULL(ROUND(AVG(Frequency), 2), 0.001) AS Frequency,
				IFNULL(ROUND(AVG(VAN), 2), 0.001) AS VAN,
				IFNULL(ROUND(AVG(VlnC), 2), 0.001) AS VlnC,
				IFNULL(ROUND(AVG(VlnAve), 2), 0.001) AS VlnAve,
				IFNULL(ROUND(AVG(VllAb), 2), 0.001) AS VllAb,
				IFNULL(ROUND(AVG(VllAc), 2), 0.001) AS VllAc,
				IFNULL(ROUND(AVG(VllCa), 2), 0.001) AS VllCa,
				IFNULL(ROUND(AVG(IA), 2), 0.001) AS IA,
				IFNULL(ROUND(AVG(IB), 2), 0.001) AS IB,
				IFNULL(ROUND(AVG(IC), 2), 0.001) AS IC,
				IFNULL(ROUND(AVG(IAve), 2), 0.001) AS IAve,
				
				IFNULL(ROUND(AVG(VUnbal), 2), 0.001) AS VUnbal,
				IFNULL(ROUND(AVG(IUnbal), 2), 0.001) AS IUnbal,
				IFNULL(ROUND(AVG(Freq), 2), 0.001) AS Freq,
				IFNULL(ROUND(AVG(I4), 2), 0.001) AS I4,
				IFNULL(ROUND(AVG(kWA), 2), 0.001) AS kWA,
				IFNULL(ROUND(AVG(kWB), 2), 0.001) AS kWB,
				IFNULL(ROUND(AVG(kWC), 2), 0.001) AS kWC,
				IFNULL(ROUND(AVG(kWTot), 2), 0.001) AS kWTot,
				IFNULL(ROUND(AVG(kVARA), 2), 0.001) AS kVARA,
				IFNULL(ROUND(AVG(kVARB), 2), 0.001) AS kVARB,
				
				IFNULL(ROUND(AVG(kVARC), 2), 0.001) AS kVARC,
				IFNULL(ROUND(AVG(kVARTot), 2), 0.001) AS kVARTot,
				IFNULL(ROUND(AVG(KVAA), 2), 0.001) AS KVAA,
				IFNULL(ROUND(AVG(KVAB), 2), 0.001) AS KVAB,
				IFNULL(ROUND(AVG(KVAC), 2), 0.001) AS KVAC,
				IFNULL(ROUND(AVG(KVATot), 2), 0.001) AS KVATot,
				IFNULL(ROUND(AVG(PFSignA), 2), 0.001) AS PFSignA,
				IFNULL(ROUND(AVG(PFSignB), 2), 0.001) AS PFSignB,
				IFNULL(ROUND(AVG(PFSignC), 2), 0.001) AS PFSignC,
				IFNULL(ROUND(AVG(PFSignTot), 2), 0.001) AS PFSignTot,
				
				IFNULL(ROUND(AVG(VIIAveMx), 2), 0.001) AS VIIAveMx,
				IFNULL(ROUND(AVG(IAveMx), 2), 0.001) AS IAveMx,
				IFNULL(ROUND(AVG(kWTotMx), 2), 0.001) AS kWTotMx,
				IFNULL(ROUND(AVG(kVARTotMx), 2), 0.001) AS kVARTotMx,
				IFNULL(ROUND(AVG(kVATotMx), 2), 0.001) AS kVATotMx,
				IFNULL(ROUND(AVG(FreqMx), 2), 0.001) AS FreqMx,
				IFNULL(ROUND(AVG(VIIAveMn), 2), 0.001) AS VIIAveMn,
				IFNULL(ROUND(AVG(IAveMn), 2), 0.001) AS IAveMn,
				IFNULL(ROUND(AVG(FreqMn), 2), 0.001) AS FreqMn,
				IFNULL(ROUND(AVG(kWSdDelRec), 2), 0.001) AS kWSdDelRec,
				
				IFNULL(ROUND(AVG(kVASdDelRec), 2), 0.001) AS kVASdDelRec,
				IFNULL(ROUND(AVG(kVARSdDelRec), 2), 0.001) AS kVARSdDelRec,
				IFNULL(ROUND(AVG(kWSdMxDR), 2), 0.001) AS kWSdMxDR,
				IFNULL(ROUND(AVG(kVASdMxDR), 2), 0.001) AS kVASdMxDR,
				IFNULL(ROUND(AVG(kVARSdMxDR), 2), 0.001) AS kVARSdMxDR,
				IFNULL(ROUND(AVG(PhaseRev), 2), 0.001) AS PhaseRev,
				IFNULL(ROUND(AVG(kWhDel), 2), 0.001) AS kWhDel,
				IFNULL(ROUND(AVG(kWhRec), 2), 0.001) AS kWhRec,
				IFNULL(ROUND(AVG(kWhDelRec), 2), 0.001) AS kWhDelRec,
				IFNULL(ROUND(AVG(kWhDel_Rec), 2), 0.001) AS kWhDel_Rec,
				IFNULL(ROUND(AVG(kVARhDel), 2), 0.001) AS kVARhDel,
				IFNULL(ROUND(AVG(kVARhRec), 2), 0.001) AS kVARhRec,
				IFNULL(ROUND(AVG(kVARhDelRec), 2), 0.001) AS kVARhDelRec,
				IFNULL(ROUND(AVG(kVARhDel_Rec), 2), 0.001) AS kVARhDel_Rec,
				IFNULL(ROUND(AVG(kVAhDelRec), 2), 0.001) AS kVAhDelRec,
				IFNULL(ROUND(AVG(V1THDMx), 2), 0.001) AS V1THDMx,
				IFNULL(ROUND(AVG(V2THDMx), 2), 0.001) AS V2THDMx,
				IFNULL(ROUND(AVG(V3THDMx), 2), 0.001) AS  V3THDMx,
				IFNULL(ROUND(AVG(I1THDMx), 2), 0.001) AS I1THDMx
			</if>
			
			
			<if test="table_name == 'model_aes_tx_inverter'">
				IFNULL(ROUND(AVG(pt0), 2), 0.001) AS pt0,
				IFNULL(ROUND(AVG(pt1), 2), 0.001) AS pt1,
				IFNULL(ROUND(AVG(pt2), 2), 0.001) AS pt2,
				IFNULL(ROUND(AVG(pt3), 2), 0.001) AS pt3,
				IFNULL(ROUND(AVG(pt4), 2), 0.001) AS pt4,
				IFNULL(ROUND(AVG(pt5), 2), 0.001) AS pt5,
				IFNULL(ROUND(AVG(pt6), 2), 0.001) AS pt6,
				IFNULL(ROUND(AVG(pt7), 2), 0.001) AS pt7,
				IFNULL(ROUND(AVG(pt8), 2), 0.001) AS pt8,
				IFNULL(ROUND(AVG(pt9), 2), 0.001) AS pt9,
				IFNULL(ROUND(AVG(pt10), 2), 0.001) AS pt10,
				
				IFNULL(ROUND(AVG(pt11), 2), 0.001) AS pt11,
				IFNULL(ROUND(AVG(pt12), 2), 0.001) AS pt12,
				IFNULL(ROUND(AVG(pt13), 2), 0.001) AS pt13,
				IFNULL(ROUND(AVG(pt14), 2), 0.001) AS pt14,
				IFNULL(ROUND(AVG(pt15), 2), 0.001) AS pt15,
				IFNULL(ROUND(AVG(pt16), 2), 0.001) AS pt16,
				IFNULL(ROUND(AVG(pt17), 2), 0.001) AS pt17,
				IFNULL(ROUND(AVG(pt18), 2), 0.001) AS pt18,
				IFNULL(ROUND(AVG(pt19), 2), 0.001) AS pt19,
				IFNULL(ROUND(AVG(pt20), 2), 0.001) AS pt20,
				
				IFNULL(ROUND(AVG(pt21), 2), 0.001) AS pt21,
				IFNULL(ROUND(AVG(pt22), 2), 0.001) AS pt22,
				IFNULL(ROUND(AVG(pt23), 2), 0.001) AS pt23,
				IFNULL(ROUND(AVG(pt24), 2), 0.001) AS pt24,
				IFNULL(ROUND(AVG(pt25), 2), 0.001) AS pt25,
				IFNULL(ROUND(AVG(pt26), 2), 0.001) AS pt26,
				IFNULL(ROUND(AVG(pt27), 2), 0.001) AS pt27,
				IFNULL(ROUND(AVG(pt28), 2), 0.001) AS pt28,
				IFNULL(ROUND(AVG(pt29), 2), 0.001) AS pt29,
				IFNULL(ROUND(AVG(pt30), 2), 0.001) AS pt30,
				
				IFNULL(ROUND(AVG(pt31), 2), 0.001) AS pt31,
				IFNULL(ROUND(AVG(pt32), 2), 0.001) AS pt32,
				IFNULL(ROUND(AVG(pt33), 2), 0.001) AS pt33,
				IFNULL(ROUND(AVG(pt34), 2), 0.001) AS pt34,
				IFNULL(ROUND(AVG(pt35), 2), 0.001) AS pt35,
				IFNULL(ROUND(AVG(pt36), 2), 0.001) AS pt36,
				IFNULL(ROUND(AVG(pt37), 2), 0.001) AS pt37,
				IFNULL(ROUND(AVG(pt38), 2), 0.001) AS pt38,
				IFNULL(ROUND(AVG(pt39), 2), 0.001) AS pt39,
				IFNULL(ROUND(AVG(pt40), 2), 0.001) AS pt40,
				
				IFNULL(ROUND(AVG(pt41), 2), 0.001) AS pt41,
				IFNULL(ROUND(AVG(pt42), 2), 0.001) AS pt42,
				IFNULL(ROUND(AVG(pt43), 2), 0.001) AS pt43,
				IFNULL(ROUND(AVG(pt44), 2), 0.001) AS pt44,
				IFNULL(ROUND(AVG(pt45), 2), 0.001) AS pt45
			</if>
			
			<if test="table_name == 'model_sma_inverter_stp62us41'">
				IFNULL(ROUND(AVG(VA_phsA), 2), 0.001) AS VA_phsA,
				IFNULL(ROUND(AVG(VA_phsB), 2), 0.001) AS VA_phsB,
				IFNULL(ROUND(AVG(DcMs_Vol0), 2), 0.001) AS DcMs_Vol0,
				IFNULL(ROUND(AVG(DcMs_Vol1), 2), 0.001) AS DcMs_Vol1,
				IFNULL(ROUND(AVG(DcMs_Vol2), 2), 0.001) AS DcMs_Vol2,
				IFNULL(ROUND(AVG(DcMs_Vol3), 2), 0.001) AS DcMs_Vol3,
				IFNULL(ROUND(AVG(DcMs_Vol4), 2), 0.001) AS DcMs_Vol4,
				IFNULL(ROUND(AVG(DcMs_Vol5), 2), 0.001) AS DcMs_Vol5,
				IFNULL(ROUND(AVG(TotW_Pv), 2), 0.001) AS TotW_Pv,
				IFNULL(ROUND(AVG(Isolation_LeakRis), 2), 0.001) AS Isolation_LeakRis,
				IFNULL(ROUND(AVG(PhV_phsC), 2), 0.001) AS PhV_phsC,
				IFNULL(ROUND(AVG(GridMs_Hz), 2), 0.001) AS GridMs_Hz,
				IFNULL(ROUND(AVG(W_phsB), 2), 0.001) AS W_phsB,
				IFNULL(ROUND(AVG(GridMs_TotW), 2), 0.001) AS GridMs_TotW,
				IFNULL(ROUND(AVG(W_phsC), 2), 0.001) AS W_phsC,
				IFNULL(ROUND(AVG(VAr_phsC), 2), 0.001) AS VAr_phsC,
				IFNULL(ROUND(AVG(DcMs_Watt0), 2), 0.001) AS DcMs_Watt0,
				IFNULL(ROUND(AVG(DcMs_Watt1), 2), 0.001) AS DcMs_Watt1,
				IFNULL(ROUND(AVG(DcMs_Watt2), 2), 0.001) AS DcMs_Watt2,
				IFNULL(ROUND(AVG(DcMs_Watt3), 2), 0.001) AS DcMs_Watt3,
				IFNULL(ROUND(AVG(DcMs_Watt4), 2), 0.001) AS DcMs_Watt4,
				IFNULL(ROUND(AVG(DcMs_Watt5), 2), 0.001) AS DcMs_Watt5,
				IFNULL(ROUND(AVG(W_phsA), 2), 0.001) AS W_phsA,
				IFNULL(ROUND(AVG(VAr_phsB), 2), 0.001) AS VAr_phsB,
				IFNULL(ROUND(AVG(TotVAr_Pv), 2), 0.001) AS TotVAr_Pv,
				IFNULL(ROUND(AVG(PhV_phsA2B), 2), 0.001) AS PhV_phsA2B,
				IFNULL(ROUND(AVG(VAr_phsA), 2), 0.001) AS VAr_phsA,
				IFNULL(ROUND(AVG(GridMs_TotVA), 2), 0.001) AS GridMs_TotVA,
				IFNULL(ROUND(AVG(GridMs_TotVAr), 2), 0.001) AS GridMs_TotVAr,
				IFNULL(ROUND(AVG(DcMs_Amp0), 2), 0.001) AS DcMs_Amp0,
				IFNULL(ROUND(AVG(DcMs_Amp1), 2), 0.001) AS DcMs_Amp1,
				IFNULL(ROUND(AVG(DcMs_Amp2), 2), 0.001) AS DcMs_Amp2,
				IFNULL(ROUND(AVG(DcMs_Amp3), 2), 0.001) AS DcMs_Amp3,
				IFNULL(ROUND(AVG(DcMs_Amp4), 2), 0.001) AS DcMs_Amp4,
				IFNULL(ROUND(AVG(DcMs_Amp5), 2), 0.001) AS DcMs_Amp5,
				IFNULL(ROUND(AVG(PhV_phsB2C), 2), 0.001) AS PhV_phsB2C,
				IFNULL(ROUND(AVG(PhV_phsB), 2), 0.001) AS PhV_phsB,
				IFNULL(ROUND(AVG(A_phsA), 2), 0.001) AS A_phsA,
				
				IFNULL(ROUND(AVG(PhV_phsC2A), 2), 0.001) AS PhV_phsC2A,
				IFNULL(ROUND(AVG(A_phsB), 2), 0.001) AS A_phsB,
				IFNULL(ROUND(AVG(PhV_phsA), 2), 0.001) AS PhV_phsA,
				IFNULL(ROUND(AVG(VA_phsC), 2), 0.001) AS VA_phsC,
				IFNULL(ROUND(AVG(A_phsC), 2), 0.001) AS A_phsC,
				IFNULL(ROUND(AVG(Metering_TotWhOut), 2), 0.001) AS Metering_TotWhOut,
				IFNULL(ROUND(AVG(Operation_GriSwCnt), 2), 0.001) AS Operation_GriSwCnt,
				IFNULL(ROUND(AVG(TotWhOut_Pv), 2), 0.001) AS TotWhOut_Pv,
				IFNULL(ROUND(AVG(Metering_TotFeedTms), 2), 0.001) AS Metering_TotFeedTms,
				IFNULL(ROUND(AVG(Metering_TotOpTms), 2), 0.001) AS Metering_TotOpTms
				
			</if>
			
			
			<if test="table_name == 'model_sma_inverter_stp30000tlus10'">
				IFNULL(ROUND(AVG(GridMs_TotVAr), 2), 0.001) AS GridMs_TotVAr,
				IFNULL(ROUND(AVG(DcMs_Watt0), 2), 0.001) AS DcMs_Watt0,
				IFNULL(ROUND(AVG(DcMs_Watt1), 2), 0.001) AS DcMs_Watt1,
				IFNULL(ROUND(AVG(W_phsA), 2), 0.001) AS W_phsA,
				IFNULL(ROUND(AVG(W_phsB), 2), 0.001) AS W_phsB,
				IFNULL(ROUND(AVG(W_phsC), 2), 0.001) AS W_phsC,
				IFNULL(ROUND(AVG(GridMs_TotW), 2), 0.001) AS GridMs_TotW,
				IFNULL(ROUND(AVG(GridMs_TotVA), 2), 0.001) AS GridMs_TotVA,
				IFNULL(ROUND(AVG(A_phsA), 2), 0.001) AS A_phsA,
				IFNULL(ROUND(AVG(A_phsB), 2), 0.001) AS A_phsB,
				IFNULL(ROUND(AVG(A_phsC), 2), 0.001) AS A_phsC,
				IFNULL(ROUND(AVG(GridMs_Hz), 2), 0.001) AS GridMs_Hz,
				IFNULL(ROUND(AVG(Isolation_LeakRis), 2), 0.001) AS Isolation_LeakRis,
				IFNULL(ROUND(AVG(DcMs_Vol0), 2), 0.001) AS DcMs_Vol0,
				IFNULL(ROUND(AVG(DcMs_Vol1), 2), 0.001) AS DcMs_Vol1,
				IFNULL(ROUND(AVG(PhV_phsA), 2), 0.001) AS PhV_phsA,
				IFNULL(ROUND(AVG(PhV_phsB), 2), 0.001) AS PhV_phsB,
				IFNULL(ROUND(AVG(PhV_phsC), 2), 0.001) AS PhV_phsC,
				IFNULL(ROUND(AVG(DcMs_Amp0), 2), 0.001) AS DcMs_Amp0,
				IFNULL(ROUND(AVG(DcMs_Amp1), 2), 0.001) AS DcMs_Amp1,
				
				IFNULL(ROUND(AVG(TotVAr_Pv), 2), 0.001) AS TotVAr_Pv,
				IFNULL(ROUND(AVG( VAr_phsA), 2), 0.001) AS VAr_phsA,
				IFNULL(ROUND(AVG(VAr_phsB), 2), 0.001) AS VAr_phsB,
				IFNULL(ROUND(AVG(VAr_phsC), 2), 0.001) AS VAr_phsC,
				IFNULL(ROUND(AVG(VA_phsA), 2), 0.001) AS VA_phsA,
				IFNULL(ROUND(AVG(VA_phsB), 2), 0.001) AS VA_phsB,
				IFNULL(ROUND(AVG(VA_phsC), 2), 0.001) AS VA_phsC,
				IFNULL(ROUND(AVG(TotW_Pv), 2), 0.001) AS TotW_Pv,
				
				
				IFNULL(ROUND(AVG(Metering_TotFeedTms), 2), 0.001) AS Metering_TotFeedTms,
				IFNULL(ROUND(AVG(Operation_GriSwCnt), 2), 0.001) AS Operation_GriSwCnt,
				IFNULL(ROUND(AVG(Metering_TotOpTms), 2), 0.001) AS Metering_TotOpTms,
				IFNULL(ROUND(AVG( Metering_TotWhOut), 2), 0.001) AS Metering_TotWhOut,
				IFNULL(ROUND(AVG(TotWhOut_Pv), 2), 0.001) AS TotWhOut_Pv
				
			</if>
			
			
			<if test="table_name == 'model_campell_scientific_meter1'">
				
				IFNULL(ROUND(IF(AVG(Meter1_ACPower) <![CDATA[<]]> 0, 0, AVG(Meter1_ACPower)), 2), 0.001) AS Meter1_ACPower,
				
				IFNULL(ROUND(AVG(Total_Energy), 2), 0.001) AS Total_Energy
			</if>
			
			<if test="table_name == 'model_campell_scientific_meter2'">
				IFNULL(ROUND(IF(AVG(Meter2_ACPower) <![CDATA[<]]> 0, 0, AVG(Meter2_ACPower)), 2), 0.001) AS Meter2_ACPower,
				
				IFNULL(ROUND(AVG(Total_Energy), 2), 0.001) AS Total_Energy
			</if>
			
			<if test="table_name == 'model_campell_scientific_meter3'">
				IFNULL(ROUND(IF(AVG(Meter3_ACPower) <![CDATA[<]]> 0, 0, AVG(Meter3_ACPower)), 2), 0.001) AS Meter3_ACPower,
				IFNULL(ROUND(AVG(Total_Energy), 2), 0.001) AS Total_Energy
			</if>
			
			<if test="table_name == 'model_campell_scientific_meter4'">
				IFNULL(ROUND(IF(AVG(Meter4_ACPower) <![CDATA[<]]> 0, 0, AVG(Meter4_ACPower)), 2), 0.001) AS Meter4_ACPower,
				IFNULL(ROUND(AVG(Total_Energy), 2), 0.001) AS Total_Energy
			</if>
			
			
			<if test="table_name == 'model_adam4017ws_class8110_nelis190'">
				IFNULL(ROUND(AVG(AmbientTemp), 2), 0.001) AS AmbientTemp,
				IFNULL(ROUND(AVG(PVPanelTemp), 2), 0.001) AS PVPanelTemp,
				IFNULL(ROUND(AVG(PVPanelTemp1), 2), 0.001) AS PVPanelTemp1,
				IFNULL(ROUND(AVG(WindSpeed), 2), 0.001) AS WindSpeed,
				
				IFNULL(ROUND(IF(AVG(POACMP11) <![CDATA[<]]> 0, 0, AVG(POACMP11)), 2), 0.001) AS POACMP11,
				
				IFNULL(ROUND(IF(AVG(IrradiancePOA) <![CDATA[<]]> 0, 0, AVG(IrradiancePOA)), 2), 0.001) AS IrradiancePOA,
				IFNULL(ROUND(AVG(IMTInternalTemp), 2), 0.001) AS IMTInternalTemp,
				IFNULL(ROUND(AVG(PVPanelTemp2), 2), 0.001) AS PVPanelTemp2,
				IFNULL(ROUND(AVG(code_ch0), 2), 0.001) AS code_ch0,
				IFNULL(ROUND(AVG(code_ch1), 2), 0.001) AS code_ch1,
				IFNULL(ROUND(AVG(code_ch2), 2), 0.001) AS code_ch2,
				IFNULL(ROUND(AVG(code_ch3), 2), 0.001) AS code_ch3,
				IFNULL(ROUND(AVG(code_ch4), 2), 0.001) AS code_ch4,
				IFNULL(ROUND(AVG(code_ch5), 2), 0.001) AS code_ch5,
				IFNULL(ROUND(AVG(code_ch6), 2), 0.001) AS code_ch6,
				IFNULL(ROUND(AVG(code_ch7), 2), 0.001) AS code_ch7
			</if>
			
			<if test="table_name == 'model_sma_inverter_stp1200tlus10'">
				IFNULL(ROUND(AVG(Metering_TotWhOut), 2), 0.001) AS Metering_TotWhOut,
				IFNULL(ROUND(AVG(Operation_GriSwCnt), 2), 0.001) AS Operation_GriSwCnt,
				IFNULL(ROUND(AVG(Metering_TotOpTms), 2), 0.001) AS Metering_TotOpTms,
				IFNULL(ROUND(AVG(Metering_TotFeedTms), 2), 0.001) AS Metering_TotFeedTms,
				IFNULL(ROUND(AVG(Metering_GridMs_TotWhOut), 2), 0.001) AS Metering_GridMs_TotWhOut,
				
				IFNULL(ROUND(IF(AVG(GridMs_TotW) <![CDATA[<]]> 0, 0, AVG(GridMs_TotW)), 2), 0.001) AS GridMs_TotW,
				
				IFNULL(ROUND(AVG(GridMs_Hz), 2), 0.001) AS GridMs_Hz,
				IFNULL(ROUND(AVG(Isolation_FltA), 2), 0.001) AS Isolation_FltA,
				IFNULL(ROUND(AVG(Isolation_LeakRis), 2), 0.001) AS Isolation_LeakRis,
				IFNULL(ROUND(AVG(DcMs_VolA), 2), 0.001) AS DcMs_VolA,
				IFNULL(ROUND(AVG(DcMs_VolB), 2), 0.001) AS DcMs_VolB,
				IFNULL(ROUND(AVG(DcMs_AmpA), 2), 0.001) AS DcMs_AmpA,
				IFNULL(ROUND(AVG(DcMs_AmpB), 2), 0.001) AS DcMs_AmpB,
				IFNULL(ROUND(AVG(GridMs_PhV_phsA), 2), 0.001) AS GridMs_PhV_phsA,
				IFNULL(ROUND(AVG(GridMs_PhV_phsB), 2), 0.001) AS GridMs_PhV_phsB,
				IFNULL(ROUND(AVG(GridMs_PhV_phsC), 2), 0.001) AS GridMs_PhV_phsC,
				IFNULL(ROUND(AVG(GridMs_A_phsA), 2), 0.001) AS GridMs_A_phsA,
				IFNULL(ROUND(AVG(GridMs_A_phsB), 2), 0.001) AS GridMs_A_phsB,
				IFNULL(ROUND(AVG(GridMs_A_phsC), 2), 0.001) AS GridMs_A_phsC,
				IFNULL(ROUND(AVG(DcMs_WattA), 2), 0.001) AS DcMs_WattA,
				IFNULL(ROUND(AVG(DcMs_WattB), 2), 0.001) AS DcMs_WattB
			</if>
			
			<if test="table_name == 'model_satcon_powergate_225_inverter'">
				IFNULL(ROUND(AVG(Fault1), 2), 0.001) AS Fault1,
				IFNULL(ROUND(AVG(Fault2), 2), 0.001) AS Fault2,
				IFNULL(ROUND(AVG(Fault3), 2), 0.001) AS Fault3,
				IFNULL(ROUND(AVG(Fault4), 2), 0.001) AS Fault4,
				IFNULL(ROUND(AVG(GridStatus), 2), 0.001) AS GridStatus,
				IFNULL(ROUND(AVG(Status6), 2), 0.001) AS Status6,
				IFNULL(ROUND(AVG(Status7), 2), 0.001) AS Status7,
				IFNULL(ROUND(AVG(PCSState), 2), 0.001) AS PCSState,
				IFNULL(ROUND(AVG(DCInputPower), 2), 0.001) AS DCInputPower,
				IFNULL(ROUND(AVG(DC_Link_Volts), 2), 0.001) AS DC_Link_Volts,
				IFNULL(ROUND(AVG(DCInputVoltage), 2), 0.001) AS DCInputVoltage,
				IFNULL(ROUND(AVG(DCInputCurrent), 2), 0.001) AS DCInputCurrent,
				IFNULL(ROUND(AVG(OutputKVAR), 2), 0.001) AS OutputKVAR,
				IFNULL(ROUND(AVG(OutputKW), 2), 0.001) AS OutputKW,
				IFNULL(ROUND(AVG(OutputKVA), 2), 0.001) AS OutputKVA,
				IFNULL(ROUND(AVG(Line_Volts_A_TEST), 2), 0.001) AS Line_Volts_A_TEST,
				IFNULL(ROUND(AVG(Line_Volts_B_TEST), 2), 0.001) AS Line_Volts_B_TEST,
				IFNULL(ROUND(AVG(Line_Volts_C_TEST), 2), 0.001) AS Line_Volts_C_TEST,
				IFNULL(ROUND(AVG(Line_Amps_A_TEST), 2), 0.001) AS Line_Amps_A_TEST,
				IFNULL(ROUND(AVG(Line_Amps_B_TEST), 2), 0.001) AS Line_Amps_B_TEST,
				
				IFNULL(ROUND(AVG(Line_Amps_C_TEST), 2), 0.001) AS Line_Amps_C_TEST,
				IFNULL(ROUND(AVG( NeutralCurrent), 2), 0.001) AS NeutralCurrent,
				IFNULL(ROUND(AVG(StopCode), 2), 0.001) AS StopCode,
				IFNULL(ROUND(AVG(KWHlow), 2), 0.001) AS KWHlow,
				IFNULL(ROUND(AVG(KWH), 2), 0.001) AS KWH,
				IFNULL(ROUND(AVG(PowerFactor), 2), 0.001) AS PowerFactor,
				IFNULL(ROUND(AVG(LineFreq), 2), 0.001) AS LineFreq,
				IFNULL(ROUND(AVG(OutputPowerLimit), 2), 0.001) AS OutputPowerLimit
			</if>
			
			
			<if test="table_name == 'model_sma_inverter_stp24ktlus10'">
				IFNULL(ROUND(AVG(Metering_TotWhOut), 2), 0.001) AS Metering_TotWhOut,
				IFNULL(ROUND(AVG(Operation_GriSwCnt), 2), 0.001) AS Operation_GriSwCnt,
				IFNULL(ROUND(AVG(Metering_TotOpTms), 2), 0.001) AS Metering_TotOpTms,
				IFNULL(ROUND(AVG(Metering_TotFeedTms), 2), 0.001) AS Metering_TotFeedTms,
				IFNULL(ROUND(AVG(Metering_GridMs_TotWhOut), 2), 0.001) AS Metering_GridMs_TotWhOut,
				
				IFNULL(ROUND(IF(AVG(GridMs_TotW) <![CDATA[<]]> 0, 0, AVG(GridMs_TotW)), 2), 0.001) AS GridMs_TotW,
				
				IFNULL(ROUND(AVG(GridMs_Hz), 2), 0.001) AS GridMs_Hz,
				IFNULL(ROUND(AVG(Isolation_FltA), 2), 0.001) AS Isolation_FltA,
				IFNULL(ROUND(AVG(Isolation_LeakRis), 2), 0.001) AS Isolation_LeakRis,
				IFNULL(ROUND(AVG(DcMs_VolA), 2), 0.001) AS DcMs_VolA,
				IFNULL(ROUND(AVG(DcMs_VolB), 2), 0.001) AS DcMs_VolB,
				IFNULL(ROUND(AVG(DcMs_AmpA), 2), 0.001) AS DcMs_AmpA,
				IFNULL(ROUND(AVG(DcMs_AmpB), 2), 0.001) AS DcMs_AmpB,
				IFNULL(ROUND(AVG(DcMs_AmpA1), 2), 0.001) AS DcMs_AmpA1,
				IFNULL(ROUND(AVG(GridMs_PhV_phsA), 2), 0.001) AS GridMs_PhV_phsA,
				IFNULL(ROUND(AVG(GridMs_PhV_phsB), 2), 0.001) AS GridMs_PhV_phsB,
				IFNULL(ROUND(AVG(GridMs_PhV_phsC), 2), 0.001) AS GridMs_PhV_phsC,
				IFNULL(ROUND(AVG(GridMs_A_phsA), 2), 0.001) AS GridMs_A_phsA,
				IFNULL(ROUND(AVG(GridMs_A_phsB), 2), 0.001) AS GridMs_A_phsB,
				IFNULL(ROUND(AVG(GridMs_A_phsC), 2), 0.001) AS GridMs_A_phsC,
				IFNULL(ROUND(AVG(DcMs_WattA), 2), 0.001) AS DcMs_WattA,
				IFNULL(ROUND(AVG(DcMs_WattB), 2), 0.001) AS DcMs_WattB
			</if>
			
			<if test="table_name == 'model_sma_cluster_controller'">
				IFNULL(ROUND(AVG(Metering_TotWhOut), 2), 0.001) AS Metering_TotWhOut,
				IFNULL(ROUND(AVG(Operation_GriSwCnt), 2), 0.001) AS Operation_GriSwCnt,
				IFNULL(ROUND(AVG(Metering_TotOpTms), 2), 0.001) AS Metering_TotOpTms,
				IFNULL(ROUND(AVG(Metering_TotFeedTms), 2), 0.001) AS Metering_TotFeedTms,
				
				IFNULL(ROUND(IF(AVG(GridMs_TotW) <![CDATA[<]]> 0, 0, AVG(GridMs_TotW)), 2), 0.001) AS GridMs_TotW,
				
				IFNULL(ROUND(AVG(GridMs_Hz), 2), 0.001) AS GridMs_Hz,
				IFNULL(ROUND(AVG(Isolation_FltA), 2), 0.001) AS Isolation_FltA,
				IFNULL(ROUND(AVG(Isolation_LeakRis), 2), 0.001) AS Isolation_LeakRis,
				IFNULL(ROUND(AVG(DcMs_VolA), 2), 0.001) AS DcMs_VolA,
				IFNULL(ROUND(AVG(DcMs_VolB), 2), 0.001) AS DcMs_VolB,
				IFNULL(ROUND(AVG(DcMs_AmpA), 2), 0.001) AS DcMs_AmpA,
				IFNULL(ROUND(AVG(DcMs_AmpB), 2), 0.001) AS DcMs_AmpB,
				IFNULL(ROUND(AVG(GridMs_PhV_phsA), 2), 0.001) AS GridMs_PhV_phsA,
				IFNULL(ROUND(AVG(GridMs_PhV_phsB), 2), 0.001) AS GridMs_PhV_phsB,
				IFNULL(ROUND(AVG(GridMs_PhV_phsC), 2), 0.001) AS GridMs_PhV_phsC,
				IFNULL(ROUND(AVG(GridMs_A_phsA), 2), 0.001) AS GridMs_A_phsA,
				IFNULL(ROUND(AVG(GridMs_A_phsB), 2), 0.001) AS GridMs_A_phsB,
				IFNULL(ROUND(AVG(GridMs_A_phsC), 2), 0.001) AS GridMs_A_phsC,
				IFNULL(ROUND(AVG(DcMs_WattA), 2), 0.001) AS DcMs_WattA,
				IFNULL(ROUND(AVG(DcMs_WattB), 2), 0.001) AS DcMs_WattB,
				IFNULL(ROUND(AVG(InOut_AnInA1), 2), 0.001) AS InOut_AnInA1,
				IFNULL(ROUND(AVG(InOut_AnInA2), 2), 0.001) AS InOut_AnInA2,
				IFNULL(ROUND(AVG(InOut_AnInA3), 2), 0.001) AS InOut_AnInA3,
				IFNULL(ROUND(AVG(InOut_AnInVol4), 2), 0.001) AS InOut_AnInVol4,
				IFNULL(ROUND(AVG(Env_ExInsol), 2), 0.001) AS Env_ExInsol
			</if>
			
			<if test="table_name == 'model_solaredge_inverter'">
				IFNULL(ROUND(AVG(C_DeviceAddress), 2), 0.001) AS C_DeviceAddress,
				IFNULL(ROUND(AVG(C_SunSpec_DID), 2), 0.001) AS C_SunSpec_DID,
				IFNULL(ROUND(AVG(C_SunSpec_Length), 2), 0.001) AS C_SunSpec_Length,
				IFNULL(ROUND(AVG(I_AC_Current), 2), 0.001) AS I_AC_Current,
				IFNULL(ROUND(AVG(I_AC_CurrentA), 2), 0.001) AS I_AC_CurrentA,
				IFNULL(ROUND(AVG(I_AC_CurrentB), 2), 0.001) AS I_AC_CurrentB,
				IFNULL(ROUND(AVG(I_AC_CurrentC), 2), 0.001) AS I_AC_CurrentC,
				IFNULL(ROUND(AVG(I_AC_Current_SF), 2), 0.001) AS I_AC_Current_SF,
				IFNULL(ROUND(AVG(I_AC_VoltageAB), 2), 0.001) AS I_AC_VoltageAB,
				IFNULL(ROUND(AVG(I_AC_VoltageBC), 2), 0.001) AS I_AC_VoltageBC,
				IFNULL(ROUND(AVG(I_AC_VoltageCA), 2), 0.001) AS I_AC_VoltageCA,
				IFNULL(ROUND(AVG(I_AC_VoltageAN), 2), 0.001) AS I_AC_VoltageAN,
				IFNULL(ROUND(AVG(I_AC_VoltageBN), 2), 0.001) AS I_AC_VoltageBN,
				IFNULL(ROUND(AVG(I_AC_VoltageCN), 2), 0.001) AS I_AC_VoltageCN,
				IFNULL(ROUND(AVG(I_AC_Voltage_SF), 2), 0.001) AS I_AC_Voltage_SF,

				IFNULL(ROUND(IF(AVG(I_AC_Power) <![CDATA[<]]> 0, 0, AVG(I_AC_Power)), 2), 0.001) AS I_AC_Power,
				
				IFNULL(ROUND(AVG(I_AC_Power_SF), 2), 0.001) AS I_AC_Power_SF,
				IFNULL(ROUND(AVG(I_AC_Frequency), 2), 0.001) AS I_AC_Frequency,
				IFNULL(ROUND(AVG(I_AC_Frequency_SF), 2), 0.001) AS I_AC_Frequency_SF,
				IFNULL(ROUND(AVG(I_AC_VA), 2), 0.001) AS I_AC_VA,
				IFNULL(ROUND(AVG(I_AC_VA_SF), 2), 0.001) AS I_AC_VA_SF,
				IFNULL(ROUND(AVG(I_AC_VAR), 2), 0.001) AS I_AC_VAR,
				IFNULL(ROUND(AVG(I_AC_VAR_SF), 2), 0.001) AS I_AC_VAR_SF,
				IFNULL(ROUND(AVG(I_AC_PF), 2), 0.001) AS I_AC_PF,
				IFNULL(ROUND(AVG(I_AC_PF_SF), 2), 0.001) AS I_AC_PF_SF,
				IFNULL(ROUND(AVG(I_AC_Energy_WH), 2), 0.001) AS I_AC_Energy_WH,
				IFNULL(ROUND(AVG(I_AC_Energy_WH_SF), 2), 0.001) AS I_AC_Energy_WH_SF,
				IFNULL(ROUND(AVG(I_DC_Current), 2), 0.001) AS I_DC_Current,
				IFNULL(ROUND(AVG(I_DC_Current_SF), 2), 0.001) AS I_DC_Current_SF,
				IFNULL(ROUND(AVG(I_DC_Voltage), 2), 0.001) AS I_DC_Voltage,
				IFNULL(ROUND(AVG(I_DC_Voltage_SF), 2), 0.001) AS I_DC_Voltage_SF,
				IFNULL(ROUND(AVG(I_DC_Power), 2), 0.001) AS I_DC_Power,
				IFNULL(ROUND(AVG(I_DC_Power_SF), 2), 0.001) AS I_DC_Power_SF,
				IFNULL(ROUND(AVG(I_Temp_Sink), 2), 0.001) AS I_Temp_Sink,
				IFNULL(ROUND(AVG(I_Temp_SF), 2), 0.001) AS I_Temp_SF,
				IFNULL(ROUND(AVG(I_Status), 2), 0.001) AS I_Status,
				IFNULL(ROUND(AVG(I_Status_Vendor), 2), 0.001) AS I_Status_Vendor

			</if>
			
			<if test="table_name == 'model_sungrow_umg604'">
				IFNULL(ROUND(AVG(M_AC_U1), 2), 0.001) AS M_AC_U1,
				IFNULL(ROUND(AVG(M_AC_U2), 2), 0.001) AS M_AC_U2,
				IFNULL(ROUND(AVG(M_AC_U3), 2), 0.001) AS M_AC_U3,
				IFNULL(ROUND(AVG(M_AC_U_L1L2), 2), 0.001) AS M_AC_U_L1L2,
				IFNULL(ROUND(AVG(M_AC_U_L2L3), 2), 0.001) AS M_AC_U_L2L3,
				IFNULL(ROUND(AVG(M_AC_U_L3L1), 2), 0.001) AS M_AC_U_L3L1,
				IFNULL(ROUND(AVG(M_AC_I1), 2), 0.001) AS M_AC_I1,
				IFNULL(ROUND(AVG(M_AC_I2), 2), 0.001) AS M_AC_I2,
				IFNULL(ROUND(AVG(M_AC_I3), 2), 0.001) AS M_AC_I3,
				IFNULL(ROUND(AVG(M_AC_P1), 2), 0.001) AS M_AC_P1,
				IFNULL(ROUND(AVG(M_AC_P2), 2), 0.001) AS M_AC_P2,
				IFNULL(ROUND(AVG(M_AC_P3), 2), 0.001) AS M_AC_P3,
				
				IFNULL(ROUND(IF(AVG(M_AC_P) <![CDATA[<]]> 0, 0, AVG(M_AC_P)), 2), 0.001) AS M_AC_P,
				
				IFNULL(ROUND(AVG(M_AC_E_M1), 2), 0.001) AS M_AC_E_M1,
				IFNULL(ROUND(AVG(M_AC_Q1), 2), 0.001) AS M_AC_Q1,
				IFNULL(ROUND(AVG(M_AC_Q2), 2), 0.001) AS M_AC_Q2,
				IFNULL(ROUND(AVG(M_AC_Q3), 2), 0.001) AS M_AC_Q3,
				IFNULL(ROUND(AVG(M_AC_Q), 2), 0.001) AS M_AC_Q,
				IFNULL(ROUND(AVG(M_AC_S1), 2), 0.001) AS M_AC_S1,
				IFNULL(ROUND(AVG(M_AC_S2), 2), 0.001) AS M_AC_S2,
				IFNULL(ROUND(AVG(M_AC_S3), 2), 0.001) AS M_AC_S3,
				IFNULL(ROUND(AVG(M_AC_S), 2), 0.001) AS M_AC_S,
				IFNULL(ROUND(AVG(M_AC_PF), 2), 0.001) AS M_AC_PF,
				IFNULL(ROUND(AVG(M_AC_F), 2), 0.001) AS M_AC_F,
				IFNULL(ROUND(AVG(M_AC_E_EXP), 2), 0.001) AS M_AC_E_EXP,
				IFNULL(ROUND(AVG(M_AC_E_IMP), 2), 0.001) AS M_AC_E_IMP
			</if>
			<if test="table_name == 'model_sungrow_sg110cx'">
				IFNULL(ROUND(AVG(E_DAY), 2), 0.001) AS E_DAY,
				IFNULL(ROUND(AVG(E_TOTAL), 2), 0.001) AS E_TOTAL,
				IFNULL(ROUND(AVG(E_YEAR), 2), 0.001) AS E_YEAR,
				IFNULL(ROUND(AVG(OT_AC_TOTAL), 2), 0.001) AS OT_AC_TOTAL,
				IFNULL(ROUND(AVG(T_WR), 2), 0.001) AS T_WR,
				IFNULL(ROUND(AVG(U_DC1), 2), 0.001) AS U_DC1,
				IFNULL(ROUND(AVG(I_DC1), 2), 0.001) AS I_DC1,
				IFNULL(ROUND(AVG(U_DC2), 2), 0.001) AS U_DC2,
				IFNULL(ROUND(AVG(I_DC2), 2), 0.001) AS I_DC2,
				IFNULL(ROUND(AVG(U_DC3), 2), 0.001) AS U_DC3,
				IFNULL(ROUND(AVG(I_DC3), 2), 0.001) AS I_DC3,
				IFNULL(ROUND(AVG(U_DC4), 2), 0.001) AS U_DC4,
				IFNULL(ROUND(AVG(I_DC4), 2), 0.001) AS I_DC4,
				IFNULL(ROUND(AVG(U_DC5), 2), 0.001) AS U_DC5,
				IFNULL(ROUND(AVG(I_DC5), 2), 0.001) AS I_DC5,
				IFNULL(ROUND(AVG(U_DC6), 2), 0.001) AS U_DC6,
				IFNULL(ROUND(AVG(I_DC6), 2), 0.001) AS I_DC6,
				IFNULL(ROUND(AVG(U_DC7), 2), 0.001) AS U_DC7,
				IFNULL(ROUND(AVG(I_DC7), 2), 0.001) AS I_DC7,
				IFNULL(ROUND(AVG(U_DC8), 2), 0.001) AS U_DC8,
				IFNULL(ROUND(AVG(I_DC8), 2), 0.001) AS I_DC8,
				IFNULL(ROUND(AVG(U_DC9), 2), 0.001) AS U_DC9,
				IFNULL(ROUND(AVG(I_DC9), 2), 0.001) AS I_DC9,
				IFNULL(ROUND(AVG(U_STR1), 2), 0.001) AS U_STR1,
				IFNULL(ROUND(AVG(I_STR1), 2), 0.001) AS I_STR1,
				IFNULL(ROUND(AVG(U_STR2), 2), 0.001) AS U_STR2,
				IFNULL(ROUND(AVG(I_STR2), 2), 0.001) AS I_STR2,
				IFNULL(ROUND(AVG(U_STR3), 2), 0.001) AS U_STR3,
				IFNULL(ROUND(AVG(I_STR3), 2), 0.001) AS I_STR3,
				IFNULL(ROUND(AVG(U_STR4), 2), 0.001) AS U_STR4,
				IFNULL(ROUND(AVG(I_STR4), 2), 0.001) AS I_STR4,
				IFNULL(ROUND(AVG(U_STR5), 2), 0.001) AS U_STR5,
				IFNULL(ROUND(AVG(I_STR5), 2), 0.001) AS I_STR5,
				IFNULL(ROUND(AVG(U_STR6), 2), 0.001) AS U_STR6,
				IFNULL(ROUND(AVG(I_STR6), 2), 0.001) AS I_STR6,
				IFNULL(ROUND(AVG(U_STR7), 2), 0.001) AS U_STR7,
				IFNULL(ROUND(AVG(I_STR7), 2), 0.001) AS I_STR7,
				IFNULL(ROUND(AVG(U_STR8), 2), 0.001) AS U_STR8,
				IFNULL(ROUND(AVG(I_STR8), 2), 0.001) AS I_STR8,
				IFNULL(ROUND(AVG(U_STR9), 2), 0.001) AS U_STR9,
				IFNULL(ROUND(AVG(I_STR9), 2), 0.001) AS I_STR9,
				IFNULL(ROUND(AVG(U_STR10), 2), 0.001) AS U_STR10,
				IFNULL(ROUND(AVG(I_STR10), 2), 0.001) AS I_STR10,
				IFNULL(ROUND(AVG(U_STR11), 2), 0.001) AS U_STR11,
				IFNULL(ROUND(AVG(I_STR11), 2), 0.001) AS I_STR11,
				IFNULL(ROUND(AVG(U_STR12), 2), 0.001) AS U_STR12,
				IFNULL(ROUND(AVG(I_STR12), 2), 0.001) AS I_STR12,
				IFNULL(ROUND(AVG(U_STR13), 2), 0.001) AS U_STR13,
				IFNULL(ROUND(AVG(I_STR13), 2), 0.001) AS I_STR13,
				IFNULL(ROUND(AVG(U_STR14), 2), 0.001) AS U_STR14,
				IFNULL(ROUND(AVG(I_STR14), 2), 0.001) AS I_STR14,
				IFNULL(ROUND(AVG(U_STR15), 2), 0.001) AS U_STR15,
				IFNULL(ROUND(AVG(I_STR15), 2), 0.001) AS I_STR15,
				IFNULL(ROUND(AVG(U_STR16), 2), 0.001) AS U_STR16,
				IFNULL(ROUND(AVG(I_STR16), 2), 0.001) AS I_STR16,
				IFNULL(ROUND(AVG(U_STR17), 2), 0.001) AS U_STR17,
				IFNULL(ROUND(AVG(I_STR17), 2), 0.001) AS I_STR17,
				IFNULL(ROUND(AVG(U_STR18), 2), 0.001) AS U_STR18,
				IFNULL(ROUND(AVG(I_STR18), 2), 0.001) AS I_STR18,
				
				IFNULL(ROUND(IF(AVG(P_DC) <![CDATA[<]]> 0, 0, AVG(P_DC)), 2), 0.001) AS P_DC,
				
				IFNULL(ROUND(AVG(U_AC1), 2), 0.001) AS U_AC1,
				IFNULL(ROUND(AVG(U_AC2), 2), 0.001) AS U_AC2,
				IFNULL(ROUND(AVG(U_AC3), 2), 0.001) AS U_AC3,
				IFNULL(ROUND(AVG(I_AC1), 2), 0.001) AS I_AC1,
				IFNULL(ROUND(AVG(I_AC2), 2), 0.001) AS I_AC2,
				IFNULL(ROUND(AVG(I_AC3), 2), 0.001) AS I_AC3,
				IFNULL(ROUND(AVG(S_AC), 2), 0.001) AS S_AC,
				IFNULL(ROUND(AVG(P_AC), 2), 0.001) AS P_AC,
				IFNULL(ROUND(AVG(Q_AC), 2), 0.001) AS Q_AC,
				IFNULL(ROUND(AVG(COS_PHI), 2), 0.001) AS COS_PHI,
				IFNULL(ROUND(AVG(F_AC), 2), 0.001) AS F_AC,
				IFNULL(ROUND(AVG(FT_AC_DAY), 2), 0.001) AS FT_AC_DAY,
				IFNULL(ROUND(AVG(R_ISO), 2), 0.001) AS R_ISO
			</if>
			<if test="table_name == 'model_sungrow_sg50cx'">
				IFNULL(ROUND(AVG(E_DAY), 2), 0.001) AS E_DAY,
				IFNULL(ROUND(AVG(E_TOTAL), 2), 0.001) AS E_TOTAL,
				IFNULL(ROUND(AVG(E_YEAR), 2), 0.001) AS E_YEAR,
				IFNULL(ROUND(AVG(OT_AC_TOTAL), 2), 0.001) AS OT_AC_TOTAL,
				IFNULL(ROUND(AVG(T_WR), 2), 0.001) AS T_WR,
				IFNULL(ROUND(AVG(U_DC1), 2), 0.001) AS U_DC1,
				IFNULL(ROUND(AVG(I_DC1), 2), 0.001) AS I_DC1,
				IFNULL(ROUND(AVG(U_DC2), 2), 0.001) AS U_DC2,
				IFNULL(ROUND(AVG(I_DC2), 2), 0.001) AS I_DC2,
				IFNULL(ROUND(AVG(U_DC3), 2), 0.001) AS U_DC3,
				IFNULL(ROUND(AVG(I_DC3), 2), 0.001) AS I_DC3,
				IFNULL(ROUND(AVG(U_DC4), 2), 0.001) AS U_DC4,
				IFNULL(ROUND(AVG(I_DC4), 2), 0.001) AS I_DC4,
				IFNULL(ROUND(AVG(U_DC5), 2), 0.001) AS U_DC5,
				IFNULL(ROUND(AVG(I_DC5), 2), 0.001) AS I_DC5,
				IFNULL(ROUND(AVG(U_DC6), 2), 0.001) AS U_DC6,
				IFNULL(ROUND(AVG(I_DC6), 2), 0.001) AS I_DC6,
				IFNULL(ROUND(AVG(U_DC7), 2), 0.001) AS U_DC7,
				IFNULL(ROUND(AVG(I_DC7), 2), 0.001) AS I_DC7,
				IFNULL(ROUND(AVG(U_DC8), 2), 0.001) AS U_DC8,
				IFNULL(ROUND(AVG(I_DC8), 2), 0.001) AS I_DC8,
				IFNULL(ROUND(AVG(U_DC9), 2), 0.001) AS U_DC9,
				IFNULL(ROUND(AVG(I_DC9), 2), 0.001) AS I_DC9,
				IFNULL(ROUND(AVG(U_DC10), 2), 0.001) AS U_DC10,
				IFNULL(ROUND(AVG(I_DC10), 2), 0.001) AS I_DC10,
				IFNULL(ROUND(AVG(U_DC11), 2), 0.001) AS U_DC11,
				IFNULL(ROUND(AVG(I_DC11), 2), 0.001) AS I_DC11,
				IFNULL(ROUND(AVG(U_DC12), 2), 0.001) AS U_DC12,
				IFNULL(ROUND(AVG(I_DC12), 2), 0.001) AS I_DC12,
				IFNULL(ROUND(AVG(U_DC13), 2), 0.001) AS U_DC13,
				IFNULL(ROUND(AVG(I_DC13), 2), 0.001) AS I_DC13,
				IFNULL(ROUND(AVG(U_DC14), 2), 0.001) AS U_DC14,
				IFNULL(ROUND(AVG(I_DC14), 2), 0.001) AS I_DC14,
				IFNULL(ROUND(AVG(U_DC15), 2), 0.001) AS U_DC15,
				IFNULL(ROUND(AVG(I_DC15), 2), 0.001) AS I_DC15,
				IFNULL(ROUND(AVG(U_DC16), 2), 0.001) AS U_DC16,
				IFNULL(ROUND(AVG(I_DC16), 2), 0.001) AS I_DC16,
				IFNULL(ROUND(AVG(U_DC17), 2), 0.001) AS U_DC17,
				IFNULL(ROUND(AVG(I_DC17), 2), 0.001) AS I_DC17,
				IFNULL(ROUND(AVG(U_DC18), 2), 0.001) AS U_DC18,
				IFNULL(ROUND(AVG(I_DC18), 2), 0.001) AS I_DC18,
				IFNULL(ROUND(AVG(U_DC19), 2), 0.001) AS U_DC19,
				IFNULL(ROUND(AVG(I_DC19), 2), 0.001) AS I_DC19,
				IFNULL(ROUND(AVG(U_DC20), 2), 0.001) AS U_DC20,
				IFNULL(ROUND(AVG(I_DC20), 2), 0.001) AS I_DC20,
			
				IFNULL(ROUND(AVG(U_STR1), 2), 0.001) AS U_STR1,
				IFNULL(ROUND(AVG(I_STR1), 2), 0.001) AS I_STR1,
				IFNULL(ROUND(AVG(U_STR2), 2), 0.001) AS U_STR2,
				IFNULL(ROUND(AVG(I_STR2), 2), 0.001) AS I_STR2,
				IFNULL(ROUND(AVG(U_STR3), 2), 0.001) AS U_STR3,
				IFNULL(ROUND(AVG(I_STR3), 2), 0.001) AS I_STR3,
				IFNULL(ROUND(AVG(U_STR4), 2), 0.001) AS U_STR4,
				IFNULL(ROUND(AVG(I_STR4), 2), 0.001) AS I_STR4,
				IFNULL(ROUND(AVG(U_STR5), 2), 0.001) AS U_STR5,
				IFNULL(ROUND(AVG(I_STR5), 2), 0.001) AS I_STR5,
				IFNULL(ROUND(AVG(U_STR6), 2), 0.001) AS U_STR6,
				IFNULL(ROUND(AVG(I_STR6), 2), 0.001) AS I_STR6,
				IFNULL(ROUND(AVG(U_STR7), 2), 0.001) AS U_STR7,
				IFNULL(ROUND(AVG(I_STR7), 2), 0.001) AS I_STR7,
				IFNULL(ROUND(AVG(U_STR8), 2), 0.001) AS U_STR8,
				IFNULL(ROUND(AVG(I_STR8), 2), 0.001) AS I_STR8,
				IFNULL(ROUND(AVG(U_STR9), 2), 0.001) AS U_STR9,
				IFNULL(ROUND(AVG(I_STR9), 2), 0.001) AS I_STR9,
				IFNULL(ROUND(AVG(U_STR10), 2), 0.001) AS U_STR10,
				IFNULL(ROUND(AVG(I_STR10), 2), 0.001) AS I_STR10,
				IFNULL(ROUND(AVG(I_STR11), 2), 0.001) AS I_STR11,
				IFNULL(ROUND(AVG(I_STR12), 2), 0.001) AS I_STR12,
				IFNULL(ROUND(AVG(I_STR13), 2), 0.001) AS I_STR13,
				IFNULL(ROUND(AVG(I_STR14), 2), 0.001) AS I_STR14,
				IFNULL(ROUND(AVG(I_STR15), 2), 0.001) AS I_STR15,
				IFNULL(ROUND(AVG(I_STR16), 2), 0.001) AS I_STR16,
				IFNULL(ROUND(AVG(I_STR17), 2), 0.001) AS I_STR17,
				IFNULL(ROUND(AVG(I_STR18), 2), 0.001) AS I_STR18,
				IFNULL(ROUND(AVG(I_STR19), 2), 0.001) AS I_STR19,
				IFNULL(ROUND(AVG(I_STR20), 2), 0.001) AS I_STR20,
				IFNULL(ROUND(AVG(I_STR21), 2), 0.001) AS I_STR21,
				IFNULL(ROUND(AVG(I_STR22), 2), 0.001) AS I_STR22,
				
				IFNULL(ROUND(IF(AVG(P_DC) <![CDATA[<]]> 0, 0, AVG(P_DC)), 2), 0.001) AS P_DC,
				
				IFNULL(ROUND(AVG(U_AC1), 2), 0.001) AS U_AC1,
				IFNULL(ROUND(AVG(U_AC2), 2), 0.001) AS U_AC2,
				IFNULL(ROUND(AVG(U_AC3), 2), 0.001) AS U_AC3,
				IFNULL(ROUND(AVG(I_AC1), 2), 0.001) AS I_AC1,
				IFNULL(ROUND(AVG(I_AC2), 2), 0.001) AS I_AC2,
				IFNULL(ROUND(AVG(I_AC3), 2), 0.001) AS I_AC3,
				IFNULL(ROUND(AVG(S_AC), 2), 0.001) AS S_AC,
				IFNULL(ROUND(AVG(P_AC), 2), 0.001) AS P_AC,
				IFNULL(ROUND(AVG(Q_AC), 2), 0.001) AS Q_AC,
				IFNULL(ROUND(AVG(COS_PHI), 2), 0.001) AS COS_PHI,
				IFNULL(ROUND(AVG(F_AC), 2), 0.001) AS F_AC,
				IFNULL(ROUND(AVG(FT_AC_DAY), 2), 0.001) AS FT_AC_DAY,
				IFNULL(ROUND(AVG(R_ISO), 2), 0.001) AS R_ISO
			</if>
			<if test="table_name == 'model_sungrow_weather_pvmet75200'">
				  IFNULL(ROUND(AVG(SRAD_D_H), 2), 0.001) AS SRAD_D_H
			</if>
			
			<if test="table_name == 'model_sungrow_logger1000'">
		        IFNULL(ROUND(AVG(TotalNumberOfConnectedDevices), 2), 0.001) AS TotalNumberOfConnectedDevices,
		        IFNULL(ROUND(AVG(TotalFaultDeviceNumber), 2), 0.001) AS TotalFaultDeviceNumber,
		        IFNULL(ROUND(IF(AVG(TotalActivePower) <![CDATA[<]]> 0, 0, AVG(TotalActivePower)), 2), 0.001) AS TotalActivePower,
		        IFNULL(ROUND(AVG(DailyYield), 2), 0.001) AS DailyYield,
		        IFNULL(ROUND(AVG(TotalReactivePower), 2), 0.001) AS TotalReactivePower,
		        IFNULL(ROUND(AVG(TotalYield), 2), 0.001) AS TotalYield,
		        IFNULL(ROUND(AVG(DigitalInputState), 2), 0.001) AS DigitalInputState,
		        IFNULL(ROUND(AVG(PT1001), 2), 0.001) AS PT1001,
		        IFNULL(ROUND(AVG(PT1002), 2), 0.001) AS PT1002,
		        IFNULL(ROUND(AVG(ADC1Voltage), 2), 0.001) AS ADC1Voltage,
		        IFNULL(ROUND(AVG(ADC1Current), 2), 0.001) AS ADC1Current,
		        IFNULL(ROUND(AVG(ADC2Voltage), 2), 0.001) AS ADC2Voltage,
		        IFNULL(ROUND(AVG(ADC2Current), 2), 0.001) AS ADC2Current,
		        IFNULL(ROUND(AVG(ADC3Voltage), 2), 0.001) AS ADC3Voltage,
		        IFNULL(ROUND(AVG(ADC3Current), 2), 0.001) AS ADC3Current,
		        IFNULL(ROUND(AVG(ADC4Voltage), 2), 0.001) AS ADC4Voltage,
		        IFNULL(ROUND(AVG(ADC4Current), 2), 0.001) AS ADC4Current,
		        IFNULL(ROUND(AVG(Longitude), 2), 0.001) AS Longitude,
		        IFNULL(ROUND(AVG(Latitude), 2), 0.001) AS Latitude,
		        IFNULL(ROUND(AVG(MaxTotalRatedActivePower), 2), 0.001) AS MaxTotalRatedActivePower,
		        IFNULL(ROUND(AVG(MinTotalRatedActivePower), 2), 0.001) AS MinTotalRatedActivePower,
		        IFNULL(ROUND(AVG(MaxTotalRatedReactivePower), 2), 0.001) AS MaxTotalRatedReactivePower,
		        IFNULL(ROUND(AVG(MinTotalRatedReactivePower), 2), 0.001) AS MinTotalRatedReactivePower,
		        IFNULL(ROUND(AVG(ActualTotalInverterActivePower), 2), 0.001) AS ActualTotalInverterActivePower,
		        IFNULL(ROUND(AVG(ActualTotalInverterReactivePower), 2), 0.001) AS ActualTotalInverterReactivePower,
		        IFNULL(ROUND(AVG(OnOffStateOfDataLogger), 2), 0.001) AS OnOffStateOfDataLogger,
		        IFNULL(ROUND(AVG(LockingStateOfDataLogger), 2), 0.001) AS LockingStateOfDataLogger,
		        IFNULL(ROUND(AVG(MinAdjustableActivePower), 2), 0.001) AS MinAdjustableActivePower,
		        IFNULL(ROUND(AVG(MaxAdjustableActivePower), 2), 0.001) AS MaxAdjustableActivePower,
		        IFNULL(ROUND(AVG(MinAdjustableReactivePower), 2), 0.001) AS MinAdjustableReactivePower,
		        IFNULL(ROUND(AVG(MaxAdjustableReactivePower), 2), 0.001) AS MaxAdjustableReactivePower,
		        IFNULL(ROUND(AVG(RatedActivePower), 2), 0.001) AS RatedActivePower,
		        IFNULL(ROUND(AVG(RatedReactivePower), 2), 0.001) AS RatedReactivePower,
		        IFNULL(ROUND(AVG(NumberOfOnGridDevices), 2), 0.001) AS NumberOfOnGridDevices,
		        IFNULL(ROUND(AVG(NumberOfOffGridDevices), 2), 0.001) AS NumberOfOffGridDevices
	      </if>
			
			<if test="table_name == 'model_imtsolar_tmodul_class8006'">
				  IFNULL(ROUND(AVG(ModuleTemperature), 2), 0.001) AS ModuleTemperature
			</if>
			
			<if test="table_name == 'model_hukseflux_sr30d1_deviceclass_v0'">
				  
				  IFNULL(ROUND(IF(AVG(IrradianceTcs) <![CDATA[<]]> 0, 0, AVG(IrradianceTcs)), 2), 0.001) AS IrradianceTcs,
				  
			      IFNULL(ROUND(AVG(IrradianceUs), 2), 0.001) AS IrradianceUs,
			      IFNULL(ROUND(AVG(SensorBodyTemperature), 2), 0.001) AS SensorBodyTemperature,
			      IFNULL(ROUND(AVG(SensorElectricalResistance), 2), 0.001) AS SensorElectricalResistance,
			      IFNULL(ROUND(AVG(ScalingFactorIrradiance), 2), 0.001) AS ScalingFactorIrradiance,
			      IFNULL(ROUND(AVG(ScalingFactorTemperature), 2), 0.001) AS ScalingFactorTemperature,
			      IFNULL(ROUND(AVG(SensorSerialNumber), 2), 0.001) AS SensorSerialNumber,
			      IFNULL(ROUND(AVG(SensorSensitivity), 2), 0.001) AS SensorSensitivity,
			      IFNULL(ROUND(AVG(SensorCalibrationDate), 2), 0.001) AS SensorCalibrationDate,
			      IFNULL(ROUND(AVG(InternalHumidity), 2), 0.001) AS InternalHumidity,
			      IFNULL(ROUND(AVG(TiltAngle), 2), 0.001) AS TiltAngle,
			      IFNULL(ROUND(AVG(TiltAngleaverage), 2), 0.001) AS TiltAngleaverage,
			      IFNULL(ROUND(AVG(FanSpeedRPM), 2), 0.001) AS FanSpeedRPM,
			      IFNULL(ROUND(AVG(HeaterCurrent), 2), 0.001) AS HeaterCurrent,
			      IFNULL(ROUND(AVG(FanCurrent), 2), 0.001) AS FanCurrent
			</if>
			
			
			<if test="table_name == 'model_sunny_central_class9775_inverter'">
				  IFNULL(ROUND(AVG(Fault), 2), 0.001) AS Fault,
			      IFNULL(ROUND(AVG(OperatingState), 2), 0.001) AS OperatingState,
			      IFNULL(ROUND(AVG(Status), 2), 0.001) AS Status,
			      IFNULL(ROUND(AVG(EventNumber), 2), 0.001) AS EventNumber,
			      IFNULL(ROUND(AVG(LifekWhTotal), 2), 0.001) AS LifekWhTotal,
			      IFNULL(ROUND(AVG(PVCurrent), 2), 0.001) AS PVCurrent,
			      IFNULL(ROUND(AVG(PVVoltage), 2), 0.001) AS PVVoltage,
			      IFNULL(ROUND(AVG(PVPower), 2), 0.001) AS PVPower,
			      IFNULL(ROUND(AVG(ACPower), 2), 0.001) AS ACPower,
			      IFNULL(ROUND(AVG(ACVoltageAB), 2), 0.001) AS ACVoltageAB,
			      IFNULL(ROUND(AVG(ACVoltageBC), 2), 0.001) AS ACVoltageBC,
			      IFNULL(ROUND(AVG(ACVoltageCA), 2), 0.001) AS ACVoltageCA,
			      IFNULL(ROUND(AVG(ACCurrent), 2), 0.001) AS ACCurrent,
			      IFNULL(ROUND(AVG(ACCurrentL1), 2), 0.001) AS ACCurrentL1,
			      IFNULL(ROUND(AVG(ACCurrentL2), 2), 0.001) AS ACCurrentL2,
			      IFNULL(ROUND(AVG(ACCurrentL3), 2), 0.001) AS ACCurrentL3,
			      IFNULL(ROUND(AVG(ACFrequency), 2), 0.001) AS ACFrequency,
			      IFNULL(ROUND(AVG(ReactivePower), 2), 0.001) AS ReactivePower,
			      IFNULL(ROUND(AVG(ApparentPower), 2), 0.001) AS ApparentPower,
			      IFNULL(ROUND(AVG(PowerFactor), 2), 0.001) AS PowerFactor,
			      IFNULL(ROUND(AVG(ReactivePowerMode), 2), 0.001) AS ReactivePowerMode,
			      IFNULL(ROUND(AVG(PowerFactorFeedback), 2), 0.001) AS PowerFactorFeedback,
			      IFNULL(ROUND(AVG(OperatingMode), 2), 0.001) AS OperatingMode,
			      IFNULL(ROUND(AVG(ACPowerLimit), 2), 0.001) AS ACPowerLimit,
			      IFNULL(ROUND(AVG(ACVoltage), 2), 0.001) AS ACVoltage,
			      IFNULL(ROUND(AVG(HeatSinkTemp), 2), 0.001) AS HeatSinkTemp,
			      IFNULL(ROUND(AVG(InteriorTemperature), 2), 0.001) AS InteriorTemperature,
			      IFNULL(ROUND(AVG(ExternalTemperature), 2), 0.001) AS ExternalTemperature
			</if>
			
			
			<if test="table_name == 'model_tti_tracker'">
				  IFNULL(ROUND(AVG(Mode), 2), 0.001) AS Mode,
			      IFNULL(ROUND(AVG(SubMode), 2), 0.001) AS SubMode,
			      IFNULL(ROUND(AVG(MotorStatus), 2), 0.001) AS MotorStatus,
			      IFNULL(ROUND(AVG(ReadAngle), 2), 0.001) AS ReadAngle,
			      IFNULL(ROUND(AVG(SetAngle), 2), 0.001) AS SetAngle,
			      IFNULL(ROUND(AVG(OptimalAngle), 2), 0.001) AS OptimalAngle,
			      IFNULL(ROUND(AVG(WindSpeed), 2), 0.001) AS WindSpeed,
			      IFNULL(ROUND(AVG(TTiTime), 2), 0.001) AS TTiTime,
			      IFNULL(ROUND(AVG(MotorFault), 2), 0.001) AS MotorFault,
			      IFNULL(ROUND(AVG(RemoteInterfaceFault), 2), 0.001) AS RemoteInterfaceFault,
			      IFNULL(ROUND(AVG(InclinometerFault), 2), 0.001) AS InclinometerFault,
			      IFNULL(ROUND(AVG(ModbusAddress), 2), 0.001) AS ModbusAddress,
			      IFNULL(ROUND(AVG(FirmwareVersion), 2), 0.001) AS FirmwareVersion,
			      IFNULL(ROUND(AVG(Units), 2), 0.001) AS Units,
			      IFNULL(ROUND(AVG(InclinometerOffset), 2), 0.001) AS InclinometerOffset,
			      IFNULL(ROUND(AVG(MotorStopDelay), 2), 0.001) AS MotorStopDelay,
			      IFNULL(ROUND(AVG(CoastAngle), 2), 0.001) AS CoastAngle,
			      IFNULL(ROUND(AVG(MaxRotationWest), 2), 0.001) AS MaxRotationWest,
			      IFNULL(ROUND(AVG(MaxRotationEast), 2), 0.001) AS MaxRotationEast,
			      IFNULL(ROUND(AVG(SoftAngleLimitsEnabled), 2), 0.001) AS SoftAngleLimitsEnabled,
			      IFNULL(ROUND(AVG(MotorMonitorSampleTime), 2), 0.001) AS MotorMonitorSampleTime,
			      IFNULL(ROUND(AVG(MotorMonitorMinAngle), 2), 0.001) AS MotorMonitorMinAngle,
			      IFNULL(ROUND(AVG(EnableMotorMonitor), 2), 0.001) AS EnableMotorMonitor,
			      IFNULL(ROUND(AVG(DeadBand), 2), 0.001) AS DeadBand,
			      IFNULL(ROUND(AVG(NightTimeStowAltitude), 2), 0.001) AS NightTimeStowAltitude,
			      IFNULL(ROUND(AVG(NightTimeStowAngle), 2), 0.001) AS NightTimeStowAngle,
			      IFNULL(ROUND(AVG(PoleSpacing), 2), 0.001) AS PoleSpacing,
			      IFNULL(ROUND(AVG(ModuleWidth), 2), 0.001) AS ModuleWidth,
			      IFNULL(ROUND(AVG(MotorPolarity), 2), 0.001) AS MotorPolarity,
			      IFNULL(ROUND(AVG(InclinometerPolarity), 2), 0.001) AS InclinometerPolarity,
			      IFNULL(ROUND(AVG(Latitude), 2), 0.001) AS Latitude,
			      IFNULL(ROUND(AVG(Longitude), 2), 0.001) AS Longitude,
			      IFNULL(ROUND(AVG(LoggingInterval), 2), 0.001) AS LoggingInterval,
			      IFNULL(ROUND(AVG(HelicalVarationAngle), 2), 0.001) AS HelicalVarationAngle,
			      IFNULL(ROUND(AVG(DriveArmSlope), 2), 0.001) AS DriveArmSlope,
			      IFNULL(ROUND(AVG(WindConstant), 2), 0.001) AS WindConstant,
			      IFNULL(ROUND(AVG(WindStowSpeed), 2), 0.001) AS WindStowSpeed,
			      IFNULL(ROUND(AVG(WindStowTime), 2), 0.001) AS WindStowTime
			</if>
			
			<if test="table_name == 'model_chint_solectria_inverter_class9725'">
				  IFNULL(ROUND(AVG(PowerOnOff), 2), 0.001) AS PowerOnOff,
			      IFNULL(ROUND(AVG(PActiveSet), 2), 0.001) AS PActiveSet,
			      IFNULL(ROUND(AVG(PFactorSet), 2), 0.001) AS PFactorSet,
			      IFNULL(ROUND(AVG(PReactiveSet), 2), 0.001) AS PReactiveSet,
			      IFNULL(ROUND(AVG(GridVMax), 2), 0.001) AS GridVMax,
			      IFNULL(ROUND(AVG(GridVmaxTripT), 2), 0.001) AS GridVmaxTripT,
			      IFNULL(ROUND(AVG(GridVMin), 2), 0.001) AS GridVMin,
			      IFNULL(ROUND(AVG(GridVminTripT), 2), 0.001) AS GridVminTripT,
			      IFNULL(ROUND(AVG(GridFMax), 2), 0.001) AS GridFMax,
			      IFNULL(ROUND(AVG(GridFMin), 2), 0.001) AS GridFMin,
			      IFNULL(ROUND(AVG(GridFTripT), 2), 0.001) AS GridFTripT,
			      IFNULL(ROUND(AVG(ActivePower), 2), 0.001) AS ActivePower,
			      IFNULL(ROUND(AVG(PowerFactor), 2), 0.001) AS PowerFactor,
			      IFNULL(ROUND(AVG(Risomin), 2), 0.001) AS Risomin,
			      IFNULL(ROUND(AVG(PVStartVol), 2), 0.001) AS PVStartVol,
			      IFNULL(ROUND(AVG(DCIMax), 2), 0.001) AS DCIMax,
			      IFNULL(ROUND(AVG(TambientMax), 2), 0.001) AS TambientMax,
			      IFNULL(ROUND(AVG(TmoduleMax), 2), 0.001) AS TmoduleMax,
			      IFNULL(ROUND(AVG(OffsetDiffMax), 2), 0.001) AS OffsetDiffMax,
			      IFNULL(ROUND(AVG(GridVolUnbalance), 2), 0.001) AS GridVolUnbalance,
			      IFNULL(ROUND(AVG(SoftPowerStep), 2), 0.001) AS SoftPowerStep,
			      IFNULL(ROUND(AVG(TotalEnergyToEnergy), 2), 0.001) AS TotalEnergyToEnergy,
			      IFNULL(ROUND(AVG(TotalEnergyToday), 2), 0.001) AS TotalEnergyToday,
			      IFNULL(ROUND(AVG(InverterEfficiency), 2), 0.001) AS InverterEfficiency,
			      IFNULL(ROUND(AVG(PowerFactor1), 2), 0.001) AS PowerFactor1,
			      IFNULL(ROUND(AVG(MaxActivePowerToday), 2), 0.001) AS MaxActivePowerToday,
			      IFNULL(ROUND(AVG(RunTimeToGrid), 2), 0.001) AS RunTimeToGrid,
			      
			      IFNULL(ROUND(IF(AVG(AC_ActivePower) <![CDATA[<]]> 0, 0, AVG(AC_ActivePower)), 2), 0.001) AS AC_ActivePower,
			      
			      IFNULL(ROUND(AVG(AC_ApparentPower), 2), 0.001) AS AC_ApparentPower,
			      IFNULL(ROUND(AVG(GridVoltageUab), 2), 0.001) AS GridVoltageUab,
			      IFNULL(ROUND(AVG(GridVoltageUbc), 2), 0.001) AS GridVoltageUbc,
			      IFNULL(ROUND(AVG(GridVoltageUca), 2), 0.001) AS GridVoltageUca,
			      IFNULL(ROUND(AVG(GridA_PhaseCurrent), 2), 0.001) AS GridA_PhaseCurrent,
			      IFNULL(ROUND(AVG(GridB_PhaseCurrent), 2), 0.001) AS GridB_PhaseCurrent,
			      IFNULL(ROUND(AVG(GridC_PhaseCurrent), 2), 0.001) AS GridC_PhaseCurrent,
			      IFNULL(ROUND(AVG(PV1_Voltage), 2), 0.001) AS PV1_Voltage,
			      IFNULL(ROUND(AVG(PV1_Current), 2), 0.001) AS PV1_Current,
			      IFNULL(ROUND(AVG(PV2_Voltage), 2), 0.001) AS PV2_Voltage,
			      IFNULL(ROUND(AVG(PV2_Current), 2), 0.001) AS PV2_Current,
			      IFNULL(ROUND(AVG(PV3_Voltage), 2), 0.001) AS PV3_Voltage,
			      IFNULL(ROUND(AVG(PV3_Current), 2), 0.001) AS PV3_Current,
			      IFNULL(ROUND(AVG(Grid_Frequency), 2), 0.001) AS Grid_Frequency,
			      IFNULL(ROUND(AVG(ModuleTemp), 2), 0.001) AS ModuleTemp,
			      IFNULL(ROUND(AVG(InternalTemp), 2), 0.001) AS InternalTemp,
			      IFNULL(ROUND(AVG(TransformerTemp), 2), 0.001) AS TransformerTemp,
			      IFNULL(ROUND(AVG(PermanentFaultCode), 2), 0.001) AS PermanentFaultCode,
			      IFNULL(ROUND(AVG(WarnCode), 2), 0.001) AS WarnCode,
			      IFNULL(ROUND(AVG(FaultCode0), 2), 0.001) AS FaultCode0,
			      IFNULL(ROUND(AVG(FaultCode1), 2), 0.001) AS FaultCode1,
			      IFNULL(ROUND(AVG(FaultCode2), 2), 0.001) AS FaultCode2
			</if>
			
			<if test="table_name == 'model_pv_powered_35_50_260_500kw_inverter'">
				IFNULL(ROUND(AVG(VoltageAN), 2), 0.001) AS VoltageAN,
				IFNULL(ROUND(AVG(VoltageBN), 2), 0.001) AS VoltageBN,
				IFNULL(ROUND(AVG(VoltageCN), 2), 0.001) AS VoltageCN,
				IFNULL(ROUND(AVG(CurrentA), 2), 0.001) AS CurrentA,
				IFNULL(ROUND(AVG(CurrentB), 2), 0.001) AS CurrentB,
				IFNULL(ROUND(AVG(CurrentC), 2), 0.001) AS CurrentC,
				IFNULL(ROUND(AVG(DCInputVoltage), 2), 0.001) AS DCInputVoltage,
				IFNULL(ROUND(AVG(DCInputCurrent), 2), 0.001) AS DCInputCurrent,
				IFNULL(ROUND(AVG(LineFrequency), 2), 0.001) AS LineFrequency,
				
				IFNULL(ROUND(IF(AVG(OutputGeneration) <![CDATA[<]]> 0, 0, AVG(OutputGeneration)), 2), 0.001) AS OutputGeneration,
				
				IFNULL(ROUND(AVG(TotalEnergyGeneration), 2), 0.001) AS TotalEnergyGeneration,
				IFNULL(ROUND(AVG(PVInputVoltage), 2), 0.001) AS PVInputVoltage,
				IFNULL(ROUND(AVG(InputGenerationCalculated), 2), 0.001) AS InputGenerationCalculated,
				IFNULL(ROUND(AVG(InverterOperatingStatus), 2), 0.001) AS InverterOperatingStatus,
				IFNULL(ROUND(AVG(MainFault), 2), 0.001) AS MainFault,
				IFNULL(ROUND(AVG(DriveFault), 2), 0.001) AS DriveFault,
				IFNULL(ROUND(AVG(VoltageFault), 2), 0.001) AS VoltageFault,
				IFNULL(ROUND(AVG(GridFault), 2), 0.001) AS GridFault,
				IFNULL(ROUND(AVG(TemperatureFault), 2), 0.001) AS TemperatureFault,
				IFNULL(ROUND(AVG(SystemFault), 2), 0.001) AS SystemFault,
				IFNULL(ROUND(AVG(SystemWarnings), 2), 0.001) AS SystemWarnings,
				IFNULL(ROUND(AVG(PVMStatusCodes), 2), 0.001) AS PVMStatusCodes
			</if>
			<if test="table_name == 'model_shark100'">
				  IFNULL(ROUND(AVG(volts_a_n), 2), 0.001) AS volts_a_n,
			      IFNULL(ROUND(AVG(volts_b_n), 2), 0.001) AS volts_b_n,
			      IFNULL(ROUND(AVG(volts_c_n), 2), 0.001) AS volts_c_n,
			      IFNULL(ROUND(AVG(volts_a_b), 2), 0.001) AS volts_a_b,
			      IFNULL(ROUND(AVG(volts_c_a), 2), 0.001) AS volts_c_a,
			      IFNULL(ROUND(AVG(amps_a), 2), 0.001) AS amps_a,
			      IFNULL(ROUND(AVG(amps_b), 2), 0.001) AS amps_b,
			      IFNULL(ROUND(AVG(amps_c), 2), 0.001) AS amps_c,
			      
			      IFNULL(ROUND(IF(AVG(watts_3ph_total) <![CDATA[<]]> 0, 0, AVG(watts_3ph_total)), 2), 0.001) AS watts_3ph_total,
			      
			      IFNULL(ROUND(AVG(vars_3ph_total), 2), 0.001) AS vars_3ph_total,
			      IFNULL(ROUND(AVG(vas_3ph_total), 2), 0.001) AS vas_3ph_total,
			      IFNULL(ROUND(AVG(power_factor_3ph_total), 2), 0.001) AS power_factor_3ph_total,
			      IFNULL(ROUND(AVG(frequency), 2), 0.001) AS frequency,
			      IFNULL(ROUND(AVG(neutral_current), 2), 0.001) AS neutral_current,
			      IFNULL(ROUND(AVG(w_hours_received), 2), 0.001) AS w_hours_received,
			      IFNULL(ROUND(AVG(w_hours_delivered), 2), 0.001) AS w_hours_delivered,
			      IFNULL(ROUND(AVG(w_hours_net), 2), 0.001) AS w_hours_net,
			      IFNULL(ROUND(AVG(w_hours_total), 2), 0.001) AS w_hours_total,
			      IFNULL(ROUND(AVG(var_hours_positive), 2), 0.001) AS var_hours_positive,
			      IFNULL(ROUND(AVG(var_hours_negative), 2), 0.001) AS var_hours_negative,
			      IFNULL(ROUND(AVG(var_hours_net), 2), 0.001) AS var_hours_net,
			      IFNULL(ROUND(AVG(var_hours_total), 2), 0.001) AS var_hours_total,
			      IFNULL(ROUND(AVG(va_hours_total), 2), 0.001) AS va_hours_total,
			      IFNULL(ROUND(AVG(amps_a_average), 2), 0.001) AS amps_a_average,
			      IFNULL(ROUND(AVG(amps_b_average), 2), 0.001) AS amps_b_average,
			      IFNULL(ROUND(AVG(amps_c_average), 2), 0.001) AS amps_c_average,
			      IFNULL(ROUND(AVG(positive_watts_3ph_average), 2), 0.001) AS positive_watts_3ph_average,
			      IFNULL(ROUND(AVG(positive_vars_3ph_average), 2), 0.001) AS positive_vars_3ph_average,
			      IFNULL(ROUND(AVG(negative_watts_3ph_average), 2), 0.001) AS negative_watts_3ph_average,
			      IFNULL(ROUND(AVG(negative_vars_3ph_average), 2), 0.001) AS negative_vars_3ph_average,
			      IFNULL(ROUND(AVG(vas_3ph_average), 2), 0.001) AS vas_3ph_average,
			      IFNULL(ROUND(AVG(positive_pf_3ph_average), 2), 0.001) AS positive_pf_3ph_average,
			      IFNULL(ROUND(AVG(negative_pf_3ph_average), 2), 0.001) AS negative_pf_3ph_average,
			      IFNULL(ROUND(AVG(volts_a_n_min), 2), 0.001) AS volts_a_n_min,
			      IFNULL(ROUND(AVG(volts_b_n_min), 2), 0.001) AS volts_b_n_min,
			      IFNULL(ROUND(AVG(volts_c_n_min), 2), 0.001) AS volts_c_n_min,
			      IFNULL(ROUND(AVG(volts_a_b_min), 2), 0.001) AS volts_a_b_min,
			      IFNULL(ROUND(AVG(volts_b_c_min), 2), 0.001) AS volts_b_c_min,
			      IFNULL(ROUND(AVG(volts_c_a_min), 2), 0.001) AS volts_c_a_min,
			      IFNULL(ROUND(AVG(amps_a_min_avg_demand), 2), 0.001) AS amps_a_min_avg_demand,
			      IFNULL(ROUND(AVG(amps_b_min_avg_demand), 2), 0.001) AS amps_b_min_avg_demand,
			      IFNULL(ROUND(AVG(amps_c_min_avg_demand), 2), 0.001) AS amps_c_min_avg_demand,
			      IFNULL(ROUND(AVG(positive_watts_3ph_min_avg_demand), 2), 0.001) AS positive_watts_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(positive_vars_3ph_min_avg_demand), 2), 0.001) AS positive_vars_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(negative_watts_3ph_min_avg_demand), 2), 0.001) AS negative_watts_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(negative_vars_3ph_min_avg_demand), 2), 0.001) AS negative_vars_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(vas_3ph_min_avg_demand), 2), 0.001) AS vas_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(positive_pf_3ph_min_avg_demand), 2), 0.001) AS positive_pf_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(negative_pf_3ph_min_avg_demand), 2), 0.001) AS negative_pf_3ph_min_avg_demand,
			      IFNULL(ROUND(AVG(frequency_min), 2), 0.001) AS frequency_min,
			      IFNULL(ROUND(AVG(volts_a_n_max), 2), 0.001) AS volts_a_n_max,
			      IFNULL(ROUND(AVG(volts_b_n_max), 2), 0.001) AS volts_b_n_max,
			      IFNULL(ROUND(AVG(volts_c_n_max), 2), 0.001) AS volts_c_n_max,
			      IFNULL(ROUND(AVG(volts_a_b_max), 2), 0.001) AS volts_a_b_max,
			      IFNULL(ROUND(AVG(volts_b_c_max), 2), 0.001) AS volts_b_c_max,
			      IFNULL(ROUND(AVG(volts_c_a_max), 2), 0.001) AS volts_c_a_max,
			      IFNULL(ROUND(AVG(amps_a_max_avg_demand), 2), 0.001) AS amps_a_max_avg_demand,
			      IFNULL(ROUND(AVG(amps_b_max_avg_demand), 2), 0.001) AS amps_b_max_avg_demand,
			      IFNULL(ROUND(AVG(amps_c_max_avg_demand), 2), 0.001) AS amps_c_max_avg_demand,
			      IFNULL(ROUND(AVG(positive_watts_3ph_max_avg_demand), 2), 0.001) AS positive_watts_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(positive_vars_3ph_max_avg_demand), 2), 0.001) AS positive_vars_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(negative_watts_3ph_max_avg_demand), 2), 0.001) AS negative_watts_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(negative_vars_3ph_max_avg_demand), 2), 0.001) AS negative_vars_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(vas_3ph_max_avg_demand), 2), 0.001) AS vas_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(positive_pf_3ph_max_avg_demand), 2), 0.001) AS positive_pf_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(negative_pf_3ph_max_avg_demand), 2), 0.001) AS negative_pf_3ph_max_avg_demand,
			      IFNULL(ROUND(AVG(frequency_max), 2), 0.001) AS frequency_max,
			      IFNULL(ROUND(AVG(volts_a_n_thd), 2), 0.001) AS volts_a_n_thd,
			      IFNULL(ROUND(AVG(volts_b_n_thd), 2), 0.001) AS volts_b_n_thd,
			      IFNULL(ROUND(AVG(volts_c_n_thd), 2), 0.001) AS volts_c_n_thd,
			      IFNULL(ROUND(AVG(amps_a_thd), 2), 0.001) AS amps_a_thd,
			      IFNULL(ROUND(AVG(amps_b_thd), 2), 0.001) AS amps_b_thd,
			      IFNULL(ROUND(AVG(amps_c_thd), 2), 0.001) AS amps_c_thd,
			      IFNULL(ROUND(AVG(phase_a_current_0th), 2), 0.001) AS phase_a_current_0th,
			      IFNULL(ROUND(AVG(phase_a_current_1st), 2), 0.001) AS phase_a_current_1st,
			      IFNULL(ROUND(AVG(phase_a_current_2nd), 2), 0.001) AS phase_a_current_2nd,
			      IFNULL(ROUND(AVG(phase_a_current_3rd), 2), 0.001) AS phase_a_current_3rd,
			      IFNULL(ROUND(AVG(phase_a_current_4th), 2), 0.001) AS phase_a_current_4th,
			      IFNULL(ROUND(AVG(phase_a_current_5th), 2), 0.001) AS phase_a_current_5th,
			      IFNULL(ROUND(AVG(phase_a_current_6th), 2), 0.001) AS phase_a_current_6th,
			      IFNULL(ROUND(AVG(phase_a_current_7th), 2), 0.001) AS phase_a_current_7th,
			      IFNULL(ROUND(AVG(phase_a_voltage_0th), 2), 0.001) AS phase_a_voltage_0th,
			      IFNULL(ROUND(AVG(phase_a_voltage_1st), 2), 0.001) AS phase_a_voltage_1st,
			      IFNULL(ROUND(AVG(phase_a_voltage_2nd), 2), 0.001) AS phase_a_voltage_2nd,
			      IFNULL(ROUND(AVG(phase_a_voltage_3rd), 2), 0.001) AS phase_a_voltage_3rd,
			      IFNULL(ROUND(AVG(phase_b_current_0th), 2), 0.001) AS phase_b_current_0th,
			      IFNULL(ROUND(AVG(phase_b_current_1st), 2), 0.001) AS phase_b_current_1st,
			      IFNULL(ROUND(AVG(phase_b_current_2nd), 2), 0.001) AS phase_b_current_2nd,
			      IFNULL(ROUND(AVG(phase_b_current_3rd), 2), 0.001) AS phase_b_current_3rd,
			      IFNULL(ROUND(AVG(phase_b_current_4th), 2), 0.001) AS phase_b_current_4th,
			      IFNULL(ROUND(AVG(phase_b_current_5th), 2), 0.001) AS phase_b_current_5th,
			      IFNULL(ROUND(AVG(phase_b_current_6th), 2), 0.001) AS phase_b_current_6th,
			      IFNULL(ROUND(AVG(phase_b_current_7th), 2), 0.001) AS phase_b_current_7th,
			      IFNULL(ROUND(AVG(phase_b_voltage_0th), 2), 0.001) AS phase_b_voltage_0th,
			      IFNULL(ROUND(AVG(phase_b_voltage_1st), 2), 0.001) AS phase_b_voltage_1st,
			      IFNULL(ROUND(AVG(phase_b_voltage_2nd), 2), 0.001) AS phase_b_voltage_2nd,
			      IFNULL(ROUND(AVG(phase_b_voltage_3rd), 2), 0.001) AS phase_b_voltage_3rd,
			      IFNULL(ROUND(AVG(phase_c_current_0th), 2), 0.001) AS phase_c_current_0th,
			      IFNULL(ROUND(AVG(phase_c_current_1st), 2), 0.001) AS phase_c_current_1st,
			      IFNULL(ROUND(AVG(phase_c_current_2nd), 2), 0.001) AS phase_c_current_2nd,
			      IFNULL(ROUND(AVG(phase_c_current_3rd), 2), 0.001) AS phase_c_current_3rd,
			      IFNULL(ROUND(AVG(phase_c_current_4th), 2), 0.001) AS phase_c_current_4th,
			      IFNULL(ROUND(AVG(phase_c_current_5th), 2), 0.001) AS phase_c_current_5th,
			      IFNULL(ROUND(AVG(phase_c_current_6th), 2), 0.001) AS phase_c_current_6th,
			      IFNULL(ROUND(AVG(phase_c_current_7th), 2), 0.001) AS phase_c_current_7th,
			      IFNULL(ROUND(AVG(phase_c_voltage_0th), 2), 0.001) AS phase_c_voltage_0th,
			      IFNULL(ROUND(AVG(phase_c_voltage_1st), 2), 0.001) AS phase_c_voltage_1st,
			      IFNULL(ROUND(AVG(phase_c_voltage_2nd), 2), 0.001) AS phase_c_voltage_2nd,
			      IFNULL(ROUND(AVG(phase_c_voltage_3rd), 2), 0.001) AS phase_c_voltage_3rd,
			      IFNULL(ROUND(AVG(angle_phase_a_current), 2), 0.001) AS angle_phase_a_current,
			      IFNULL(ROUND(AVG(angle_phase_b_current), 2), 0.001) AS angle_phase_b_current,
			      IFNULL(ROUND(AVG(angle_phase_c_current), 2), 0.001) AS angle_phase_c_current,
			      IFNULL(ROUND(AVG(angle_volts_a_b), 2), 0.001) AS angle_volts_a_b,
			      IFNULL(ROUND(AVG(angle_volts_b_c), 2), 0.001) AS angle_volts_b_c,
			      IFNULL(ROUND(AVG(angle_volts_c_a), 2), 0.001) AS angle_volts_c_a
			</if>
			<if test="table_name == 'model_kippzonen_rt1_class8009'">
				  
				  IFNULL(ROUND(IF(AVG(sensor1_data) <![CDATA[<]]> 0, 0, AVG(sensor1_data)), 2), 0.001) AS sensor1_data,
				  
			      IFNULL(ROUND(AVG(panel_temperature), 2), 0.001) AS panel_temperature,
			      IFNULL(ROUND(AVG(external_power_sensor), 2), 0.001) AS external_power_sensor,
			      IFNULL(ROUND(COUNT(error_code), 2), 0.001) AS error_code
			</if>
			<if test="table_name == 'model_ivt_solaron_ext'">
				  IFNULL(ROUND(AVG(today_kwh), 2), 0.001) AS today_kwh,
			      IFNULL(ROUND(AVG(ytd_kwh_total), 2), 0.001) AS ytd_kwh_total,
			      IFNULL(ROUND(AVG(life_kwh_total), 2), 0.001) AS life_kwh_total,
			      IFNULL(ROUND(AVG(ytd_kwh), 2), 0.001) AS ytd_kwh,
			      IFNULL(ROUND(AVG(life_kwh), 2), 0.001) AS life_kwh,
			      IFNULL(ROUND(AVG(last_15min_kwh), 2), 0.001) AS last_15min_kwh,

			      IFNULL(ROUND(IF(AVG(ac_power) <![CDATA[<]]> 0, 0, AVG(ac_power)), 2), 0.001) AS ac_power,
			      
			      IFNULL(ROUND(AVG(ac_frequency), 2), 0.001) AS ac_frequency,
			      IFNULL(ROUND(AVG(pv_voltage), 2), 0.001) AS pv_voltage,
			      IFNULL(ROUND(AVG(pv_current), 2), 0.001) AS pv_current,
			      IFNULL(ROUND(AVG(common_mode), 2), 0.001) AS common_mode,
			      IFNULL(ROUND(AVG(coolant_temperature), 2), 0.001) AS coolant_temperature,
			      IFNULL(ROUND(AVG(reactor_temperature), 2), 0.001) AS reactor_temperature,
			      IFNULL(ROUND(AVG(cabinet_temperature), 2), 0.001) AS cabinet_temperature,
			      IFNULL(ROUND(AVG(bus_voltage), 2), 0.001) AS bus_voltage,
			      IFNULL(ROUND(AVG(ground_current), 2), 0.001) AS ground_current,
			      IFNULL(ROUND(AVG(reactive_power), 2), 0.001) AS reactive_power,
			      IFNULL(ROUND(COUNT(active_faults1), 2), 0.001) AS active_faults1,
			      IFNULL(ROUND(COUNT(active_faults2), 2), 0.001) AS active_faults2,
			      IFNULL(ROUND(COUNT(active_faults3), 2), 0.001) AS active_faults3,
			      IFNULL(ROUND(COUNT(warnings1), 2), 0.001) AS warnings1,
			      IFNULL(ROUND(COUNT(warnings2_reserved), 2), 0.001) AS warnings2_reserved,
			      IFNULL(ROUND(COUNT(warnings3_reserved), 2), 0.001) AS warnings3_reserved,
			      IFNULL(ROUND(AVG(ac_current), 2), 0.001) AS ac_current
			</if>
			<if test="table_name == 'model_pvmet_100'">
				  
				  IFNULL(ROUND(IF(AVG(TransientHorizontalIrradiance) <![CDATA[<]]> 0, 0, AVG(TransientHorizontalIrradiance)), 2), 0.001) AS TransientHorizontalIrradiance,
				  IFNULL(ROUND(IF(AVG(DailyHorizontalIrradiance) <![CDATA[<]]> 0, 0, AVG(DailyHorizontalIrradiance)), 2), 0.001) AS DailyHorizontalIrradiance,
				  
			      IFNULL(ROUND(AVG(AmbientTemperature), 2), 0.001) AS AmbientTemperature,
			      IFNULL(ROUND(AVG(Temperature), 2), 0.001) AS Temperature_PV_Module,
			      IFNULL(ROUND(AVG(WindAngle), 2), 0.001) AS WindAngle,
			      IFNULL(ROUND(AVG(WindSpeed), 2), 0.001) AS WindSpeed
			</if>
			<if test="table_name == 'model_pvp_inverter'">
				  IFNULL(ROUND(AVG(total_kwh_delivered), 2), 0.001) AS total_kwh_delivered,
			      IFNULL(ROUND(AVG(volts_a_l_n), 2), 0.001) AS volts_a_l_n,
			      IFNULL(ROUND(AVG(volts_b_l_n), 2), 0.001) AS volts_b_l_n,
			      IFNULL(ROUND(AVG(volts_c_l_n), 2), 0.001) AS volts_c_l_n,
			      IFNULL(ROUND(AVG(current_a), 2), 0.001) AS current_a,
			      IFNULL(ROUND(AVG(current_b), 2), 0.001) AS current_b,
			      IFNULL(ROUND(AVG(current_c), 2), 0.001) AS current_c,
			      IFNULL(ROUND(AVG(dc_output_voltage), 2), 0.001) AS dc_output_voltage,
			      IFNULL(ROUND(AVG(dc_output_current), 2), 0.001) AS dc_output_current,
			      IFNULL(ROUND(AVG(line_frenquency), 2), 0.001) AS line_frenquency,
			      
			      IFNULL(ROUND(IF(AVG(line_kw) <![CDATA[<]]> 0, 0, AVG(line_kw)), 2), 0.001) AS line_kw,
			      
			      IFNULL(ROUND(COUNT(inverter_fault_word0), 2), 0.001) AS inverter_fault_word0,
			      IFNULL(ROUND(COUNT(inverter_fault_word1), 2), 0.001) AS inverter_fault_word1,
			      IFNULL(ROUND(COUNT(inverter_fault_word2), 2), 0.001) AS inverter_fault_word2
			</if>
			<if test="table_name == 'model_imtsolar_class8000'">
				
				IFNULL(ROUND(IF(AVG(irradiance) <![CDATA[<]]> 0, 0, AVG(irradiance)), 2), 0.001) AS irradiance,
				
		      	IFNULL(ROUND(AVG(tcell), 2), 0.001) AS tcell
			</if>
			<if test="table_name == 'model_advanced_energy_solaron'">
				  IFNULL(ROUND(AVG(today_kwh), 2), 0.001) AS today_kwh,
			      IFNULL(ROUND(AVG(ytd_kwh_total), 2), 0.001) AS ytd_kwh_total,
			      IFNULL(ROUND(AVG(life_kwh_total), 2), 0.001) AS life_kwh_total,
			      IFNULL(ROUND(AVG(ytd_kwh), 2), 0.001) AS ytd_kwh,
			      IFNULL(ROUND(AVG(life_kwh), 2), 0.001) AS life_kwh,
			      IFNULL(ROUND(AVG(last_15min_kwh), 2), 0.001) AS last_15min_kwh,
			      
			      IFNULL(ROUND(IF(AVG(ac_power) <![CDATA[<]]> 0, 0, AVG(ac_power)), 2), 0.001) AS ac_power,
			      
			      IFNULL(ROUND(AVG(ac_frequency), 2), 0.001) AS ac_frequency,
			      IFNULL(ROUND(AVG(pv_voltage), 2), 0.001) AS pv_voltage,
			      IFNULL(ROUND(AVG(pv_current), 2), 0.001) AS pv_current,
			      IFNULL(ROUND(AVG(ambient_temperature), 2), 0.001) AS ambient_temperature,
			      IFNULL(ROUND(AVG(coolant_temperature), 2), 0.001) AS coolant_temperature,
			      IFNULL(ROUND(AVG(reactor_temperature), 2), 0.001) AS reactor_temperature,
			      IFNULL(ROUND(AVG(cabinet_temperature), 2), 0.001) AS cabinet_temperature,
			      IFNULL(ROUND(AVG(bus_voltage), 2), 0.001) AS bus_voltage,
			      IFNULL(ROUND(AVG(ground_current), 2), 0.001) AS ground_current,
			      IFNULL(ROUND(AVG(reactive_power), 2), 0.001) AS reactive_power,
			      IFNULL(ROUND(COUNT(active_faults1), 2), 0.001) AS active_faults1,
			      IFNULL(ROUND(COUNT(active_faults2), 2), 0.001) AS active_faults2,
			      IFNULL(ROUND(COUNT(active_faults3), 2), 0.001) AS active_faults3,
			      IFNULL(ROUND(COUNT(warnings1), 2), 0.001) AS warnings1,
			      IFNULL(ROUND(COUNT(warnings2_reserved), 2), 0.001) AS warnings2_reserved,
			      IFNULL(ROUND(COUNT(warnings3_reserved), 2), 0.001) AS warnings3_reserved
			</if>
			<if test="table_name == 'model_rt1_class30000'">
				  IFNULL(ROUND(IF(AVG(sensor1_data) <![CDATA[<]]> 0, 0, AVG(sensor1_data  )), 2), 0.001) AS sensor1_data,
				  
			      IFNULL(ROUND(AVG(panel_temperature), 2), 0.001) AS panel_temperature,
			      IFNULL(ROUND(AVG(external_power_sensor), 2), 0.001) AS external_power_sensor,
			      IFNULL(ROUND(COUNT(error_code), 2), 0.001) AS error_code
			</if>
			
			
			<if test="table_name == 'model_veris_industries_e51c2_power_meter'">
				  IFNULL(ROUND(AVG(AccumulatedRealEnergyNet), 2), 0.001) AS AccumulatedRealEnergyNet,
			      IFNULL(ROUND(AVG(RealEnergyQuadrants14Import), 2), 0.001) AS RealEnergyQuadrants14Import,
			      IFNULL(ROUND(AVG(RealEnergyQuadrants23Export), 2), 0.001) AS RealEnergyQuadrants23Export,
			      IFNULL(ROUND(AVG(ReactiveEnergyQuadrant1), 2), 0.001) AS ReactiveEnergyQuadrant1,
			      IFNULL(ROUND(AVG(ReactiveEnergyQuadrant2), 2), 0.001) AS ReactiveEnergyQuadrant2,
			      IFNULL(ROUND(AVG(ReactiveEnergyQuadrant3), 2), 0.001) AS ReactiveEnergyQuadrant3,
			      IFNULL(ROUND(AVG(ReactiveEnergyQuadrant4), 2), 0.001) AS ReactiveEnergyQuadrant4,
			      IFNULL(ROUND(AVG(ApparentEnergyNet), 2), 0.001) AS ApparentEnergyNet,
			      IFNULL(ROUND(AVG(ApparentEnergyQuadrants14), 2), 0.001) AS ApparentEnergyQuadrants14,
			      IFNULL(ROUND(AVG(ApparentEnergyQuadrants23), 2), 0.001) AS ApparentEnergyQuadrants23,
			      IFNULL(ROUND(AVG(TotalNetInstantaneousRealPower), 2), 0.001) AS TotalNetInstantaneousRealPower,
			      IFNULL(ROUND(AVG(TotalNetInstantaneousReactivePower), 2), 0.001) AS TotalNetInstantaneousReactivePower,
			      IFNULL(ROUND(AVG(TotalNetInstantaneousApparentPower), 2), 0.001) AS TotalNetInstantaneousApparentPower,
			      IFNULL(ROUND(AVG(TotalPowerFactor), 2), 0.001) AS TotalPowerFactor,
			      IFNULL(ROUND(AVG(VoltageLL3pAve), 2), 0.001) AS VoltageLL3pAve,
			      IFNULL(ROUND(AVG(VoltageLN3pAve), 2), 0.001) AS VoltageLN3pAve,
			      IFNULL(ROUND(AVG(Current3pAve), 2), 0.001) AS Current3pAve,
			      IFNULL(ROUND(AVG(Frequency), 2), 0.001) AS Frequency,
			      IFNULL(ROUND(IF(AVG(TotalRealPowerPresentDemand) <![CDATA[<]]> 0, 0, AVG(TotalRealPowerPresentDemand)), 2), 0.001) AS TotalRealPowerPresentDemand,
			      IFNULL(ROUND(AVG(TotalReactivePowerPresentDemand), 2), 0.001) AS TotalReactivePowerPresentDemand,
			      IFNULL(ROUND(AVG(TotalApparentPowerPresentDemand), 2), 0.001) AS TotalApparentPowerPresentDemand,
			      IFNULL(ROUND(AVG(TotalRealPowerMaxDemandImport), 2), 0.001) AS TotalRealPowerMaxDemandImport,
			      IFNULL(ROUND(AVG(TotalReactivePowerMaxDemandImport), 2), 0.001) AS TotalReactivePowerMaxDemandImport,
			      IFNULL(ROUND(AVG(TotalApparentPowerMaxDemandImport), 2), 0.001) AS TotalApparentPowerMaxDemandImport,
			      IFNULL(ROUND(AVG(TotalRealPowerMaxDemandExport), 2), 0.001) AS TotalRealPowerMaxDemandExport,
			      IFNULL(ROUND(AVG(TotalReactivePowerMaxDemandExport), 2), 0.001) AS TotalReactivePowerMaxDemandExport,
			      IFNULL(ROUND(AVG(TotalApparentPowerMaxDemandExport), 2), 0.001) AS TotalApparentPowerMaxDemandExport,
			      IFNULL(ROUND(AVG(AccumulatedRealEnergyPhaseAImport), 2), 0.001) AS AccumulatedRealEnergyPhaseAImport,
			      IFNULL(ROUND(AVG(AccumulatedRealEnergyPhaseBImport), 2), 0.001) AS AccumulatedRealEnergyPhaseBImport,
			      IFNULL(ROUND(AVG(AccumulatedRealEnergyPhaseCImport), 2), 0.001) AS AccumulatedRealEnergyPhaseCImport,
			      IFNULL(ROUND(AVG(AccumulatedRealEnergyPhaseAExport), 2), 0.001) AS AccumulatedRealEnergyPhaseAExport,
			      IFNULL(ROUND(AVG(AccumulatedRealEnergyPhaseBExport), 2), 0.001) AS AccumulatedRealEnergyPhaseBExport,
			      IFNULL(ROUND(AVG(AccumulatedRealEnergyPhaseCExport), 2), 0.001) AS AccumulatedRealEnergyPhaseCExport,
			      IFNULL(ROUND(AVG(AccumulatedQ1ReactiveEnergyPhaseAImport), 2), 0.001) AS AccumulatedQ1ReactiveEnergyPhaseAImport,
			      IFNULL(ROUND(AVG(AccumulatedQ1ReactiveEnergyPhaseBImport), 2), 0.001) AS AccumulatedQ1ReactiveEnergyPhaseBImport,
			      IFNULL(ROUND(AVG(AccumulatedQ1ReactiveEnergyPhaseCImport), 2), 0.001) AS AccumulatedQ1ReactiveEnergyPhaseCImport,
			      IFNULL(ROUND(AVG(AccumulatedQ2ReactiveEnergyPhaseAImport), 2), 0.001) AS AccumulatedQ2ReactiveEnergyPhaseAImport,
			      IFNULL(ROUND(AVG(AccumulatedQ2ReactiveEnergyPhaseBImport), 2), 0.001) AS AccumulatedQ2ReactiveEnergyPhaseBImport,
			      IFNULL(ROUND(AVG(AccumulatedQ2ReactiveEnergyPhaseCImport), 2), 0.001) AS AccumulatedQ2ReactiveEnergyPhaseCImport,
			      IFNULL(ROUND(AVG(AccumulatedQ3ReactiveEnergyPhaseAExport), 2), 0.001) AS AccumulatedQ3ReactiveEnergyPhaseAExport,
			      IFNULL(ROUND(AVG(AccumulatedQ3ReactiveEnergyPhaseBExport), 2), 0.001) AS AccumulatedQ3ReactiveEnergyPhaseBExport,
			      IFNULL(ROUND(AVG(AccumulatedQ3ReactiveEnergyPhaseCExport), 2), 0.001) AS AccumulatedQ3ReactiveEnergyPhaseCExport,
			      IFNULL(ROUND(AVG(AccumulatedQ4ReactiveEnergyPhaseAExport), 2), 0.001) AS AccumulatedQ4ReactiveEnergyPhaseAExport,
			      IFNULL(ROUND(AVG(AccumulatedQ4ReactiveEnergyPhaseBExport), 2), 0.001) AS AccumulatedQ4ReactiveEnergyPhaseBExport,
			      IFNULL(ROUND(AVG(AccumulatedQ4ReactiveEnergyPhaseCExport), 2), 0.001) AS AccumulatedQ4ReactiveEnergyPhaseCExport,
			      IFNULL(ROUND(AVG(AccumulatedApparentEnergyPhaseAImport), 2), 0.001) AS AccumulatedApparentEnergyPhaseAImport,
			      IFNULL(ROUND(AVG(AccumulatedApparentEnergyPhaseBImport), 2), 0.001) AS AccumulatedApparentEnergyPhaseBImport,
			      IFNULL(ROUND(AVG(AccumulatedApparentEnergyPhaseCImport), 2), 0.001) AS AccumulatedApparentEnergyPhaseCImport,
			      IFNULL(ROUND(AVG(AccumulatedApparentEnergyPhaseAExport), 2), 0.001) AS AccumulatedApparentEnergyPhaseAExport,
			      IFNULL(ROUND(AVG(AccumulatedApparentEnergyPhaseBExport), 2), 0.001) AS AccumulatedApparentEnergyPhaseBExport,
			      IFNULL(ROUND(AVG(AccumulatedApparentEnergyPhaseCExport), 2), 0.001) AS AccumulatedApparentEnergyPhaseCExport,
			      IFNULL(ROUND(AVG(RealPowerPhaseA), 2), 0.001) AS RealPowerPhaseA,
			      IFNULL(ROUND(AVG(RealPowerPhaseB), 2), 0.001) AS RealPowerPhaseB,
			      IFNULL(ROUND(AVG(RealPowerPhaseC), 2), 0.001) AS RealPowerPhaseC,
			      IFNULL(ROUND(AVG(ReactivePowerPhaseA), 2), 0.001) AS ReactivePowerPhaseA,
			      IFNULL(ROUND(AVG(ReactivePowerPhaseB), 2), 0.001) AS ReactivePowerPhaseB,
			      IFNULL(ROUND(AVG(ReactivePowerPhaseC), 2), 0.001) AS ReactivePowerPhaseC,
			      IFNULL(ROUND(AVG(ApparentPowerPhaseA), 2), 0.001) AS ApparentPowerPhaseA,
			      IFNULL(ROUND(AVG(ApparentPowerPhaseB), 2), 0.001) AS ApparentPowerPhaseB,
			      IFNULL(ROUND(AVG(ApparentPowerPhaseC), 2), 0.001) AS ApparentPowerPhaseC,
			      IFNULL(ROUND(AVG(PowerFactorPhaseA), 2), 0.001) AS PowerFactorPhaseA,
			      IFNULL(ROUND(AVG(PowerFactorPhaseB), 2), 0.001) AS PowerFactorPhaseB,
			      IFNULL(ROUND(AVG(PowerFactorPhaseC), 2), 0.001) AS PowerFactorPhaseC,
			      IFNULL(ROUND(AVG(VoltagePhaseAB), 2), 0.001) AS VoltagePhaseAB,
			      IFNULL(ROUND(AVG(VoltagePhaseBC), 2), 0.001) AS VoltagePhaseBC,
			      IFNULL(ROUND(AVG(VoltagePhaseAC), 2), 0.001) AS VoltagePhaseAC,
			      IFNULL(ROUND(AVG(VoltagePhaseAN), 2), 0.001) AS VoltagePhaseAN,
			      IFNULL(ROUND(AVG(VoltagePhaseBN), 2), 0.001) AS VoltagePhaseBN,
			      IFNULL(ROUND(AVG(VoltagePhaseCN), 2), 0.001) AS VoltagePhaseCN,
			      IFNULL(ROUND(AVG(CurrentPhaseA), 2), 0.001) AS CurrentPhaseA,
			      IFNULL(ROUND(AVG(CurrentPhaseB), 2), 0.001) AS CurrentPhaseB,
			      IFNULL(ROUND(AVG(CurrentPhaseC), 2), 0.001) AS CurrentPhaseC
			</if>
			<if test="table_name == 'model_veris_industries_e50c2a'">
				  IFNULL(ROUND(AVG(RealEnergyConsumption), 2), 0.001) AS RealEnergyConsumption,
			      IFNULL(ROUND(AVG(TotalInstantaneousRealPower), 2), 0.001) AS TotalInstantaneousRealPower,
			      IFNULL(ROUND(AVG(TotalInstantaneousReactivePower), 2), 0.001) AS TotalInstantaneousReactivePower,
			      IFNULL(ROUND(AVG(TotalInstantaneousApparentPower), 2), 0.001) AS TotalInstantaneousApparentPower,
			      IFNULL(ROUND(AVG(TotalPowerFactor), 2), 0.001) AS TotalPowerFactor,
			      IFNULL(ROUND(AVG(VoltageLL3pAve), 2), 0.001) AS VoltageLL3pAve,
			      IFNULL(ROUND(AVG(VoltageLN3pAve), 2), 0.001) AS VoltageLN3pAve,
			      IFNULL(ROUND(AVG(Current3pAve), 2), 0.001) AS Current3pAve,
			      IFNULL(ROUND(AVG(RealPowerPhaseA), 2), 0.001) AS RealPowerPhaseA,
			      IFNULL(ROUND(AVG(RealPowerPhaseB), 2), 0.001) AS RealPowerPhaseB,
			      IFNULL(ROUND(AVG(RealPowerPhaseC), 2), 0.001) AS RealPowerPhaseC,
			      IFNULL(ROUND(AVG(PowerFactorPhaseA), 2), 0.001) AS PowerFactorPhaseA,
			      IFNULL(ROUND(AVG(PowerFactorPhaseB), 2), 0.001) AS PowerFactorPhaseB,
			      IFNULL(ROUND(AVG(PowerFactorPhaseC), 2), 0.001) AS PowerFactorPhaseC,
			      IFNULL(ROUND(AVG(VoltagePhaseAB), 2), 0.001) AS VoltagePhaseAB,
			      IFNULL(ROUND(AVG(VoltagePhaseBC), 2), 0.001) AS VoltagePhaseBC,
			      IFNULL(ROUND(AVG(VoltagePhaseAC), 2), 0.001) AS VoltagePhaseAC,
			      IFNULL(ROUND(AVG(VoltagePhaseAN), 2), 0.001) AS VoltagePhaseAN,
			      IFNULL(ROUND(AVG(VoltagePhaseBN), 2), 0.001) AS VoltagePhaseBN,
			      IFNULL(ROUND(AVG(VoltagePhaseCN), 2), 0.001) AS VoltagePhaseCN,
			      IFNULL(ROUND(AVG(CurrentInstantaneousPhaseA), 2), 0.001) AS CurrentInstantaneousPhaseA,
			      IFNULL(ROUND(AVG(CurrentInstantaneousPhaseB), 2), 0.001) AS CurrentInstantaneousPhaseB,
			      IFNULL(ROUND(AVG(CurrentInstantaneousPhaseC), 2), 0.001) AS CurrentInstantaneousPhaseC,
			      IFNULL(ROUND(AVG(Frequency), 2), 0.001) AS Frequency,
			      IFNULL(ROUND(AVG(ApparentEnergyConsumption), 2), 0.001) AS ApparentEnergyConsumption,
			      IFNULL(ROUND(AVG(ReactiveEnergyConsumption), 2), 0.001) AS ReactiveEnergyConsumption,
			      IFNULL(ROUND(AVG(ApparentPowerPhaseA), 2), 0.001) AS ApparentPowerPhaseA,
			      IFNULL(ROUND(AVG(ApparentPowerPhaseB), 2), 0.001) AS ApparentPowerPhaseB,
			      IFNULL(ROUND(AVG(ApparentPowerPhaseC), 2), 0.001) AS ApparentPowerPhaseC,
			      IFNULL(ROUND(AVG(ReactivePowerPhaseA), 2), 0.001) AS ReactivePowerPhaseA,
			      IFNULL(ROUND(AVG(ReactivePowerPhaseB), 2), 0.001) AS ReactivePowerPhaseB,
			      IFNULL(ROUND(AVG(ReactivePowerPhaseC), 2), 0.001) AS ReactivePowerPhaseC,
			      IFNULL(ROUND(IF(AVG(TotalRealPowerPresentDemand) <![CDATA[<]]> 0, 0, AVG(TotalRealPowerPresentDemand)), 2), 0.001) AS TotalRealPowerPresentDemand,
			      IFNULL(ROUND(AVG(TotalReactivePowerPresentDemand), 2), 0.001) AS TotalReactivePowerPresentDemand,
			      IFNULL(ROUND(AVG(TotalApparentPowerPresentDemand), 2), 0.001) AS TotalApparentPowerPresentDemand,
			      IFNULL(ROUND(AVG(TotalRealPowerMaxDemand), 2), 0.001) AS TotalRealPowerMaxDemand,
			      IFNULL(ROUND(AVG(TotalReactivePowerMaxDemand), 2), 0.001) AS TotalReactivePowerMaxDemand
			</if>
			<if test="table_name == 'model_satcon_pvs357_inverter'">
				  IFNULL(ROUND(AVG(Software_Identification_Number), 2), 0.001) AS Software_Identification_Number,
			      IFNULL(ROUND(AVG(Fault_Word1), 2), 0.001) AS Fault_Word1,
			      IFNULL(ROUND(AVG(Fault_Word2), 2), 0.001) AS Fault_Word2,
			      IFNULL(ROUND(AVG(Fault_Word3), 2), 0.001) AS Fault_Word3,
			      IFNULL(ROUND(AVG(Fault_Word4), 2), 0.001) AS Fault_Word4,
			      IFNULL(ROUND(AVG(Fault_Word5), 2), 0.001) AS Fault_Word5,
			      IFNULL(ROUND(AVG(Fault_Word6), 2), 0.001) AS Fault_Word6,
			      IFNULL(ROUND(AVG(Fault_Word7), 2), 0.001) AS Fault_Word7,
			      IFNULL(ROUND(AVG(Number_of_Faults), 2), 0.001) AS Number_of_Faults,
			      IFNULL(ROUND(AVG(Program_Checksum), 2), 0.001) AS Program_Checksum,
			      IFNULL(ROUND(AVG(DC_Input_Volts), 2), 0.001) AS DC_Input_Volts,
			      IFNULL(ROUND(AVG(DC_Link_Volts), 2), 0.001) AS DC_Link_Volts,
			      IFNULL(ROUND(AVG(DC_Link_Amps), 2), 0.001) AS DC_Link_Amps,
			      IFNULL(ROUND(AVG(DC_Ground_Current), 2), 0.001) AS DC_Ground_Current,
			      IFNULL(ROUND(AVG(Line_Amps_A), 2), 0.001) AS Line_Amps_A,
			      IFNULL(ROUND(AVG(Line_Amps_B), 2), 0.001) AS Line_Amps_B,
			      IFNULL(ROUND(AVG(Line_Amps_C), 2), 0.001) AS Line_Amps_C,
			      IFNULL(ROUND(AVG(Line_Amps_Average), 2), 0.001) AS Line_Amps_Average,
			      IFNULL(ROUND(AVG(Neutral_Current), 2), 0.001) AS Neutral_Current,
			      IFNULL(ROUND(AVG(Line_Volts_A), 2), 0.001) AS Line_Volts_A,
			      IFNULL(ROUND(AVG(Line_Volts_B), 2), 0.001) AS Line_Volts_B,
			      IFNULL(ROUND(AVG(Line_Volts_C), 2), 0.001) AS Line_Volts_C,
			      IFNULL(ROUND(AVG(Line_Volts_Average), 2), 0.001) AS Line_Volts_Average,
			      IFNULL(ROUND(AVG(Line_Voltage_Unbalance), 2), 0.001) AS Line_Voltage_Unbalance,
			      IFNULL(ROUND(AVG(Line_Current_Unbalance), 2), 0.001) AS Line_Current_Unbalance,
			      IFNULL(ROUND(AVG(Input_kW), 2), 0.001) AS Input_kW,
			      
			      IFNULL(ROUND(IF(AVG(Output_kw) <![CDATA[<]]> 0, 0, AVG(Output_kw)), 2), 0.001) AS Output_kw,
			      
			      IFNULL(ROUND(AVG(Output_kvar), 2), 0.001) AS Output_kvar,
			      IFNULL(ROUND(AVG(Output_kva), 2), 0.001) AS Output_kva,
			      IFNULL(ROUND(AVG(Power_Factor), 2), 0.001) AS Power_Factor,
			      IFNULL(ROUND(AVG(Ground_Impedance), 2), 0.001) AS Ground_Impedance,
			      IFNULL(ROUND(AVG(String_Amps1), 2), 0.001) AS String_Amps1,
			      IFNULL(ROUND(AVG(String_Amps2), 2), 0.001) AS String_Amps2,
			      IFNULL(ROUND(AVG(String_Amps3), 2), 0.001) AS String_Amps3,
			      IFNULL(ROUND(AVG(String_Amps4), 2), 0.001) AS String_Amps4,
			      IFNULL(ROUND(AVG(String_Amps5), 2), 0.001) AS String_Amps5,
			      IFNULL(ROUND(AVG(String_Amps6), 2), 0.001) AS String_Amps6,
			      IFNULL(ROUND(AVG(String_Amps7), 2), 0.001) AS String_Amps7,
			      IFNULL(ROUND(AVG(String_Amps8), 2), 0.001) AS String_Amps8,
			      IFNULL(ROUND(AVG(String_Amps9), 2), 0.001) AS String_Amps9,
			      IFNULL(ROUND(AVG(String_Amps10), 2), 0.001) AS String_Amps10,
			      IFNULL(ROUND(AVG(String_Amps11), 2), 0.001) AS String_Amps11,
			      IFNULL(ROUND(AVG(String_Amps12), 2), 0.001) AS String_Amps12,
			      IFNULL(ROUND(AVG(String_Amps13), 2), 0.001) AS String_Amps13,
			      IFNULL(ROUND(AVG(String_Amps14), 2), 0.001) AS String_Amps14,
			      IFNULL(ROUND(AVG(String_Amps15), 2), 0.001) AS String_Amps15,
			      IFNULL(ROUND(AVG(String_Amps16), 2), 0.001) AS String_Amps16,
			      IFNULL(ROUND(AVG(String_Amps17), 2), 0.001) AS String_Amps17,
			      IFNULL(ROUND(AVG(String_Amps18), 2), 0.001) AS String_Amps18,
			      IFNULL(ROUND(AVG(String_Amps19), 2), 0.001) AS String_Amps19,
			      IFNULL(ROUND(AVG(String_Amps20), 2), 0.001) AS String_Amps20,
			      IFNULL(ROUND(AVG(String_Amps21), 2), 0.001) AS String_Amps21,
			      IFNULL(ROUND(AVG(String_Amps22), 2), 0.001) AS String_Amps22,
			      IFNULL(ROUND(AVG(String_Amps23), 2), 0.001) AS String_Amps23,
			      IFNULL(ROUND(AVG(String_Amps24), 2), 0.001) AS String_Amps24,
			      IFNULL(ROUND(AVG(String_Amps25), 2), 0.001) AS String_Amps25,
			      IFNULL(ROUND(AVG(String_Amps26), 2), 0.001) AS String_Amps26,
			      IFNULL(ROUND(AVG(String_Amps27), 2), 0.001) AS String_Amps27,
			      IFNULL(ROUND(AVG(String_Amps28), 2), 0.001) AS String_Amps28,
			      IFNULL(ROUND(AVG(String_Amps29), 2), 0.001) AS String_Amps29,
			      IFNULL(ROUND(AVG(String_Amps30), 2), 0.001) AS String_Amps30,
			      IFNULL(ROUND(AVG(String_Amps31), 2), 0.001) AS String_Amps31,
			      IFNULL(ROUND(AVG(String_Amps32), 2), 0.001) AS String_Amps32,
			      
			      
			      IFNULL(ROUND(AVG(String_Amps_Average), 2), 0.001) AS String_Amps_Average,
			      IFNULL(ROUND(AVG(String_kwh1), 2), 0.001) AS String_kwh1,
			      IFNULL(ROUND(AVG(String_kwh2), 2), 0.001) AS String_kwh2,
			      IFNULL(ROUND(AVG(String_kwh3), 2), 0.001) AS String_kwh3,
			      IFNULL(ROUND(AVG(String_kwh4), 2), 0.001) AS String_kwh4,
			      IFNULL(ROUND(AVG(String_kwh5), 2), 0.001) AS String_kwh5,
			      IFNULL(ROUND(AVG(String_kwh6), 2), 0.001) AS String_kwh6,
			      IFNULL(ROUND(AVG(String_kwh7), 2), 0.001) AS String_kwh7,
			      IFNULL(ROUND(AVG(String_kwh8), 2), 0.001) AS String_kwh8,
			      IFNULL(ROUND(AVG(String_kwh9), 2), 0.001) AS String_kwh9,
			      IFNULL(ROUND(AVG(String_kwh10), 2), 0.001) AS String_kwh10,
			      IFNULL(ROUND(AVG(String_kwh11), 2), 0.001) AS String_kwh11,
			      IFNULL(ROUND(AVG(String_kwh12), 2), 0.001) AS String_kwh12,
			      IFNULL(ROUND(AVG(String_kwh13), 2), 0.001) AS String_kwh13,
			      IFNULL(ROUND(AVG(String_kwh14), 2), 0.001) AS String_kwh14,
			      IFNULL(ROUND(AVG(String_kwh15), 2), 0.001) AS String_kwh15,
			      IFNULL(ROUND(AVG(String_kwh16), 2), 0.001) AS String_kwh16,
			      IFNULL(ROUND(AVG(String_kwh17), 2), 0.001) AS String_kwh17,
			      IFNULL(ROUND(AVG(String_kwh18), 2), 0.001) AS String_kwh18,
			      IFNULL(ROUND(AVG(String_kwh19), 2), 0.001) AS String_kwh19,
			      IFNULL(ROUND(AVG(String_kwh20), 2), 0.001) AS String_kwh20,
			      IFNULL(ROUND(AVG(String_kwh21), 2), 0.001) AS String_kwh21,
			      IFNULL(ROUND(AVG(String_kwh22), 2), 0.001) AS String_kwh22,
			      IFNULL(ROUND(AVG(String_kwh23), 2), 0.001) AS String_kwh23,
			      IFNULL(ROUND(AVG(String_kwh24), 2), 0.001) AS String_kwh24,
			      IFNULL(ROUND(AVG(String_kwh25), 2), 0.001) AS String_kwh25,
			      IFNULL(ROUND(AVG(String_kwh26), 2), 0.001) AS String_kwh26,
			      IFNULL(ROUND(AVG(String_kwh27), 2), 0.001) AS String_kwh27,
			      IFNULL(ROUND(AVG(String_kwh28), 2), 0.001) AS String_kwh28,
			      IFNULL(ROUND(AVG(String_kwh29), 2), 0.001) AS String_kwh29,
			      IFNULL(ROUND(AVG(String_kwh30), 2), 0.001) AS String_kwh30,
			      IFNULL(ROUND(AVG(String_kwh31), 2), 0.001) AS String_kwh31,
			      IFNULL(ROUND(AVG(String_kwh32), 2), 0.001) AS String_kwh32,
			      
			      IFNULL(ROUND(AVG(String_kwh_Average), 2), 0.001) AS String_kwh_Average,
			      IFNULL(ROUND(AVG(Total_kwh), 2), 0.001) AS Total_kwh,
			      IFNULL(ROUND(AVG(Total_mwh), 2), 0.001) AS Total_mwh,
			      IFNULL(ROUND(AVG(kwh_Today), 2), 0.001) AS kwh_Today,
			      IFNULL(ROUND(AVG(kwh_Yesterday), 2), 0.001) AS kwh_Yesterday,
			      IFNULL(ROUND(AVG(Total_kwh7_days), 2), 0.001) AS Total_kwh7_days,
			      IFNULL(ROUND(AVG(Total_kwh30_days), 2), 0.001) AS Total_kwh30_days,
			      IFNULL(ROUND(AVG(Average_kwh7_days), 2), 0.001) AS Average_kwh7_days,
			      IFNULL(ROUND(AVG(Average_kwh30_Days), 2), 0.001) AS Average_kwh30_Days,
			      IFNULL(ROUND(AVG(Average_Line_Frequency), 2), 0.001) AS Average_Line_Frequency,
			      IFNULL(ROUND(AVG(Average_Line_Frequency_Error), 2), 0.001) AS Average_Line_Frequency_Error,
			      IFNULL(ROUND(AVG(FPGA_Identification_Number), 2), 0.001) AS FPGA_Identification_Number,
			      IFNULL(ROUND(AVG(DC_Input_Voltage_Timer), 2), 0.001) AS DC_Input_Voltage_Timer,
			      IFNULL(ROUND(AVG(AC_Line_Voltage_Timer), 2), 0.001) AS AC_Line_Voltage_Timer,
			      IFNULL(ROUND(AVG(Operating_State), 2), 0.001) AS Operating_State,
			      IFNULL(ROUND(AVG(Internal_Air_Temperature), 2), 0.001) AS Internal_Air_Temperature,
			      IFNULL(ROUND(AVG(Inverter_Air_Temperature), 2), 0.001) AS Inverter_Air_Temperature,
			      IFNULL(ROUND(AVG(Heatsink_Temperature1), 2), 0.001) AS Heatsink_Temperature1,
			      IFNULL(ROUND(AVG(Heatsink_Temperature2), 2), 0.001) AS Heatsink_Temperature2,
			      IFNULL(ROUND(AVG(Heatsink_Temperature3), 2), 0.001) AS Heatsink_Temperature3,
			      IFNULL(ROUND(AVG(Heatsink_Temperature4), 2), 0.001) AS Heatsink_Temperature4,
			      IFNULL(ROUND(AVG(Heatsink_Temperature5), 2), 0.001) AS Heatsink_Temperature5,
			      IFNULL(ROUND(AVG(Heatsink_Temperature6), 2), 0.001) AS Heatsink_Temperature6,
			      IFNULL(ROUND(AVG(Heatsink_Maximum_Temparature1), 2), 0.001) AS Heatsink_Maximum_Temparature1,
			      IFNULL(ROUND(AVG(Fan_Speed_Command1), 2), 0.001) AS Fan_Speed_Command1,
			      IFNULL(ROUND(AVG(Heatsink_Maximum_Temperature2), 2), 0.001) AS Heatsink_Maximum_Temperature2,
			      IFNULL(ROUND(AVG(Fan_Speed_Command2), 2), 0.001) AS Fan_Speed_Command2,
			      IFNULL(ROUND(AVG(Number_of_Temperature_Feedbacks), 2), 0.001) AS Number_of_Temperature_Feedbacks,
			      IFNULL(ROUND(AVG(Serial_number_word1), 2), 0.001) AS Serial_number_word1,
			      IFNULL(ROUND(AVG(Serial_number_word2), 2), 0.001) AS Serial_number_word2,
			      IFNULL(ROUND(AVG(Serial_number_word3), 2), 0.001) AS Serial_number_word3,
			      IFNULL(ROUND(AVG(Serial_number_word4), 2), 0.001) AS Serial_number_word4,
			      IFNULL(ROUND(AVG(Number_of_Strings), 2), 0.001) AS Number_of_Strings
			</if>
			<if test="table_name == 'model_elkor_wattson_pv_meter'">
				  IFNULL(ROUND(AVG(TotalEnergyConsumption), 2), 0.001) AS TotalEnergyConsumption,
			      
			      IFNULL(ROUND(IF(AVG(TotalRealPower) <![CDATA[<]]> 0, 0, AVG(TotalRealPower)), 2), 0.001) AS TotalRealPower,
			      
			      IFNULL(ROUND(AVG(TotalReactivePower), 2), 0.001) AS TotalReactivePower,
			      IFNULL(ROUND(AVG(TotalApparentPower), 2), 0.001) AS TotalApparentPower,
			      IFNULL(ROUND(AVG(AverageVoltageLN), 2), 0.001) AS AverageVoltageLN,
			      IFNULL(ROUND(AVG(AverageVoltageLL), 2), 0.001) AS AverageVoltageLL,
			      IFNULL(ROUND(AVG(AverageCurrent), 2), 0.001) AS AverageCurrent,
			      IFNULL(ROUND(AVG(TotalSystemPowerFactor), 2), 0.001) AS TotalSystemPowerFactor,
			      IFNULL(ROUND(AVG(Frequency), 2), 0.001) AS Frequency,
			      IFNULL(ROUND(AVG(SlidingWindowRealPowerDemand), 2), 0.001) AS SlidingWindowRealPowerDemand,
			      IFNULL(ROUND(AVG(VoltageAN), 2), 0.001) AS VoltageAN,
			      IFNULL(ROUND(AVG(VoltageBN), 2), 0.001) AS VoltageBN,
			      IFNULL(ROUND(AVG(VoltageCN), 2), 0.001) AS VoltageCN,
			      IFNULL(ROUND(AVG(VoltageAB), 2), 0.001) AS VoltageAB,
			      IFNULL(ROUND(AVG(VoltageBC), 2), 0.001) AS VoltageBC,
			      IFNULL(ROUND(AVG(VoltageAC), 2), 0.001) AS VoltageAC,
			      IFNULL(ROUND(AVG(CurrentA), 2), 0.001) AS CurrentA,
			      IFNULL(ROUND(AVG(CurrentB), 2), 0.001) AS CurrentB,
			      IFNULL(ROUND(AVG(CurrentC), 2), 0.001) AS CurrentC,
			      IFNULL(ROUND(AVG(RealPowerA), 2), 0.001) AS RealPowerA,
			      IFNULL(ROUND(AVG(RealPowerB), 2), 0.001) AS RealPowerB,
			      IFNULL(ROUND(AVG(RealPowerC), 2), 0.001) AS RealPowerC,
			      IFNULL(ROUND(AVG(ReactivePowerA), 2), 0.001) AS ReactivePowerA,
			      
			      IFNULL(ROUND(AVG(ReactivePowerB), 2), 0.001) AS ReactivePowerB,
			      IFNULL(ROUND(AVG(ReactivePowerC), 2), 0.001) AS ReactivePowerC,
			      IFNULL(ROUND(AVG(ApparentPowerA), 2), 0.001) AS ApparentPowerA,
			      IFNULL(ROUND(AVG(ApparentPowerB), 2), 0.001) AS ApparentPowerB,
			      IFNULL(ROUND(AVG(ApparentPowerC), 2), 0.001) AS ApparentPowerC,
			      IFNULL(ROUND(AVG(PowerFactorA), 2), 0.001) AS PowerFactorA,
			      IFNULL(ROUND(AVG(PowerFactorB), 2), 0.001) AS PowerFactorB,
			      IFNULL(ROUND(AVG(PowerFactorC), 2), 0.001) AS PowerFactorC
			</if>
			<if test="table_name == 'model_w_kipp_zonen_rt1'">
				IFNULL(ROUND(AVG(DeviceType), 2), 0.001) AS DeviceType,
		    	IFNULL(ROUND(AVG(DataModelVersion), 2), 0.001) AS DataModelVersion,
		    	IFNULL(ROUND(AVG(OperationalMode), 2), 0.001) AS OperationalMode,
		    	IFNULL(ROUND(AVG(StatusFlags), 2), 0.001) AS StatusFlags,
		    	
		    	IFNULL(ROUND(IF(AVG(SunPOATempComp) <![CDATA[<]]> 0, 0, AVG(SunPOATempComp  )), 2), 0.001) AS SunPOATempComp,
		    	
		    	IFNULL(ROUND(AVG(PanelTemperature), 2), 0.001) AS PanelTemperature,
		    	IFNULL(ROUND(AVG(ExtPowerSensor), 2), 0.001) AS ExtPowerSensor,
		    	IFNULL(ROUND(AVG(BatchNumber), 2), 0.001) AS BatchNumber,
		    	IFNULL(ROUND(AVG(SerialNumber), 2), 0.001) AS SerialNumber,
		    	IFNULL(ROUND(AVG(CalibrationDateYYMMDD), 2), 0.001) AS CalibrationDateYYMMDD
			</if>
			<if test="table_name == 'model_elkor_production_meter'">
				
				IFNULL(ROUND(IF(AVG(ActivePowerTotal) <![CDATA[<]]> 0, 0, AVG(ActivePowerTotal)), 2), 0.001) AS ActivePowerTotal,
				
		    	IFNULL(ROUND(AVG(ReactivePowerTotal), 2), 0.001) AS ReactivePowerTotal,
		    	IFNULL(ROUND(AVG(ApparentPowerTotal), 2), 0.001) AS ApparentPowerTotal,
		    	IFNULL(ROUND(AVG(VoltageAverage), 2), 0.001) AS VoltageAverage,
		    	IFNULL(ROUND(AVG(VoltageLLAverage), 2), 0.001) AS VoltageLLAverage,
		    	IFNULL(ROUND(AVG(CurrentAverage), 2), 0.001) AS CurrentAverage,
		    	IFNULL(ROUND(AVG(SystemPowerFactor), 2), 0.001) AS SystemPowerFactor,
		    	IFNULL(ROUND(AVG(SystemFrequency), 2), 0.001) AS SystemFrequency,
		    	IFNULL(ROUND(AVG(VoltageAverageAngle), 2), 0.001) AS VoltageAverageAngle,
		    	IFNULL(ROUND(AVG(SystemQuadrant), 2), 0.001) AS SystemQuadrant,
		    	IFNULL(ROUND(AVG(VoltageA), 2), 0.001) AS VoltageA,
		    	IFNULL(ROUND(AVG(VoltageB), 2), 0.001) AS VoltageB,
		    	IFNULL(ROUND(AVG(VoltageC), 2), 0.001) AS VoltageC,
		    	IFNULL(ROUND(AVG(VoltageAB), 2), 0.001) AS VoltageAB,
		    	IFNULL(ROUND(AVG(VoltageBC), 2), 0.001) AS VoltageBC,
		    	IFNULL(ROUND(AVG(VoltageAC), 2), 0.001) AS VoltageAC,
		    	IFNULL(ROUND(AVG(CurrentA), 2), 0.001) AS CurrentA,
		    	IFNULL(ROUND(AVG(CurrentB), 2), 0.001) AS CurrentB,
		    	IFNULL(ROUND(AVG(CurrentC), 2), 0.001) AS CurrentC,
		    	IFNULL(ROUND(AVG(ActivePowerA), 2), 0.001) AS ActivePowerA,
		    	IFNULL(ROUND(AVG(ActivePowerB), 2), 0.001) AS ActivePowerB,
		    	IFNULL(ROUND(AVG(ActivePowerC), 2), 0.001) AS ActivePowerC,
		    	IFNULL(ROUND(AVG(ReactivePowerA), 2), 0.001) AS ReactivePowerA,
		    	IFNULL(ROUND(AVG(ReactivePowerB), 2), 0.001) AS ReactivePowerB,
		    	IFNULL(ROUND(AVG(ReactivePowerC), 2), 0.001) AS ReactivePowerC,
		    	IFNULL(ROUND(AVG(ApparentPowerA), 2), 0.001) AS ApparentPowerA,
		    	IFNULL(ROUND(AVG(ApparentPowerB), 2), 0.001) AS ApparentPowerB,
		    	IFNULL(ROUND(AVG(ApparentPowerC), 2), 0.001) AS ApparentPowerC,
		    	IFNULL(ROUND(AVG(PowerFactorA), 2), 0.001) AS PowerFactorA,
		    	IFNULL(ROUND(AVG(PowerFactorB), 2), 0.001) AS PowerFactorB,
		    	IFNULL(ROUND(AVG(PowerFactorC), 2), 0.001) AS PowerFactorC,
		    	IFNULL(ROUND(AVG(VoltageAngleAB), 2), 0.001) AS VoltageAngleAB,
		    	IFNULL(ROUND(AVG(VoltageAngleBC), 2), 0.001) AS VoltageAngleBC,
		    	IFNULL(ROUND(AVG(VoltageAngleCA), 2), 0.001) AS VoltageAngleCA,
		    	IFNULL(ROUND(AVG(QuadrantA), 2), 0.001) AS QuadrantA,
		    	IFNULL(ROUND(AVG(QuadrantB), 2), 0.001) AS QuadrantB,
		    	IFNULL(ROUND(AVG(QuadrantC), 2), 0.001) AS QuadrantC,
		    	IFNULL(ROUND(AVG(SlidingWindowPower), 2), 0.001) AS SlidingWindowPower,
		    	IFNULL(ROUND(AVG(NetTotalEnergy), 2), 0.001) AS NetTotalEnergy,
		    	IFNULL(ROUND(AVG(TotalNetApparentEnergy), 2), 0.001) AS TotalNetApparentEnergy,
		    	IFNULL(ROUND(AVG(TotalImportEnergy), 2), 0.001) AS TotalImportEnergy,
		    	IFNULL(ROUND(AVG(TotalExportEnergy), 2), 0.001) AS TotalExportEnergy,
		    	IFNULL(ROUND(AVG(TotalImportApparentEnergy), 2), 0.001) AS TotalImportApparentEnergy,
		    	IFNULL(ROUND(AVG(TotalExportApparentEnergy), 2), 0.001) AS TotalExportApparentEnergy,
		    	IFNULL(ROUND(AVG(Q1TotalReactiveEnergy), 2), 0.001) AS Q1TotalReactiveEnergy,
		    	IFNULL(ROUND(AVG(Q2TotalReactiveEnergy), 2), 0.001) AS Q2TotalReactiveEnergy,
		    	IFNULL(ROUND(AVG(Q3TotalReactiveEnergy), 2), 0.001) AS Q3TotalReactiveEnergy,
		    	IFNULL(ROUND(AVG(Q4TotalReactiveEnergy), 2), 0.001) AS Q4TotalReactiveEnergy,
		    	IFNULL(ROUND(AVG(Q1Q2TotalInductiveReactiveEnergy), 2), 0.001) AS Q1Q2TotalInductiveReactiveEnergy,
		    	IFNULL(ROUND(AVG(Q3Q4TotalCapacitiveReactiveEnergy), 2), 0.001) AS Q3Q4TotalCapacitiveReactiveEnergy,
		    	IFNULL(ROUND(AVG(NetEnergyA), 2), 0.001) AS NetEnergyA,
		    	IFNULL(ROUND(AVG(NetEnergyB), 2), 0.001) AS NetEnergyB,
		    	IFNULL(ROUND(AVG(NetEnergyC), 2), 0.001) AS NetEnergyC,
		    	IFNULL(ROUND(AVG(NetApparentEnergyA), 2), 0.001) AS NetApparentEnergyA,
		    	IFNULL(ROUND(AVG(NetApparentEnergyB), 2), 0.001) AS NetApparentEnergyB,
		    	IFNULL(ROUND(AVG(NetApparentEnergyC), 2), 0.001) AS NetApparentEnergyC,
		    	IFNULL(ROUND(AVG(ImportEnergyA), 2), 0.001) AS ImportEnergyA,
		    	IFNULL(ROUND(AVG(ImportEnergyB), 2), 0.001) AS ImportEnergyB,
		    	IFNULL(ROUND(AVG(ImportEnergyC), 2), 0.001) AS ImportEnergyC,
		    	IFNULL(ROUND(AVG(ExportEnergyA), 2), 0.001) AS ExportEnergyA,
		    	IFNULL(ROUND(AVG(ExportEnergyB), 2), 0.001) AS ExportEnergyB,
		    	IFNULL(ROUND(AVG(ExportEnergyC), 2), 0.001) AS ExportEnergyC,
		    	IFNULL(ROUND(AVG(ImportApparentEnergyA), 2), 0.001) AS ImportApparentEnergyA,
		    	IFNULL(ROUND(AVG(ImportApparentEnergyB), 2), 0.001) AS ImportApparentEnergyB,
		    	IFNULL(ROUND(AVG(ImportApparentEnergyC), 2), 0.001) AS ImportApparentEnergyC,
		    	IFNULL(ROUND(AVG(ExportApparentEnergyA), 2), 0.001) AS ExportApparentEnergyA,
		    	IFNULL(ROUND(AVG(ExportApparentEnergyB), 2), 0.001) AS ExportApparentEnergyB,
		    	IFNULL(ROUND(AVG(ExportApparentEnergyC), 2), 0.001) AS ExportApparentEnergyC,
		    	IFNULL(ROUND(AVG(Q1ReactiveEnergyA), 2), 0.001) AS Q1ReactiveEnergyA,
		    	IFNULL(ROUND(AVG(Q1ReactiveEnergyB), 2), 0.001) AS Q1ReactiveEnergyB,
		    	IFNULL(ROUND(AVG(Q1ReactiveEnergyC), 2), 0.001) AS Q1ReactiveEnergyC,
		    	IFNULL(ROUND(AVG(Q2ReactiveEnergyA), 2), 0.001) AS Q2ReactiveEnergyA,
		    	IFNULL(ROUND(AVG(Q2ReactiveEnergyB), 2), 0.001) AS Q2ReactiveEnergyB,
		    	IFNULL(ROUND(AVG(Q2ReactiveEnergyC), 2), 0.001) AS Q2ReactiveEnergyC,
		    	IFNULL(ROUND(AVG(Q3ReactiveEnergyA), 2), 0.001) AS Q3ReactiveEnergyA,
		    	IFNULL(ROUND(AVG(Q3ReactiveEnergyB), 2), 0.001) AS Q3ReactiveEnergyB,
		    	IFNULL(ROUND(AVG(Q3ReactiveEnergyC), 2), 0.001) AS Q3ReactiveEnergyC,
		    	IFNULL(ROUND(AVG(Q4ReactiveEnergyA), 2), 0.001) AS Q4ReactiveEnergyA,
		    	IFNULL(ROUND(AVG(Q4ReactiveEnergyB), 2), 0.001) AS Q4ReactiveEnergyB,
		    	IFNULL(ROUND(AVG(Q4ReactiveEnergyC), 2), 0.001) AS Q4ReactiveEnergyC
			</if>
			<if test="table_name == 'model_abb_trio_class6210'">
				  IFNULL(ROUND(AVG(AuroraType), 2), 0.001) AS AuroraType,
			      IFNULL(ROUND(AVG(GridType), 2), 0.001) AS GridType,
			      IFNULL(ROUND(AVG(TransformerType), 2), 0.001) AS TransformerType,
			      IFNULL(ROUND(AVG(StatesByte0), 2), 0.001) AS StatesByte0,
			      IFNULL(ROUND(AVG(StatesByte1), 2), 0.001) AS StatesByte1,
			      IFNULL(ROUND(AVG(StatesByte2), 2), 0.001) AS StatesByte2,
			      IFNULL(ROUND(AVG(StatesByte3), 2), 0.001) AS StatesByte3,
			      IFNULL(ROUND(AVG(StatesByte4), 2), 0.001) AS StatesByte4,
			      IFNULL(ROUND(AVG(TotalEnergy), 2), 0.001) AS TotalEnergy,
			      IFNULL(ROUND(AVG(GridVoltage), 2), 0.001) AS GridVoltage,
			      IFNULL(ROUND(AVG(GridCurrent), 2), 0.001) AS GridCurrent,
			      
			      IFNULL(ROUND(IF(AVG(GridPower) <![CDATA[<]]> 0, 0, AVG(GridPower)), 2), 0.001) AS GridPower,
			      
			      IFNULL(ROUND(AVG(Frequency), 2), 0.001) AS Frequency,
			      IFNULL(ROUND(AVG(Input1Power), 2), 0.001) AS Input1Power,
			      IFNULL(ROUND(AVG(Input1Voltage), 2), 0.001) AS Input1Voltage,
			      IFNULL(ROUND(AVG(Input1Current), 2), 0.001) AS Input1Current,
			      IFNULL(ROUND(AVG(Input2Power), 2), 0.001) AS Input2Power,
			      IFNULL(ROUND(AVG(Input2Voltage), 2), 0.001) AS Input2Voltage,
			      IFNULL(ROUND(AVG(Input2Current), 2), 0.001) AS Input2Current,
			      IFNULL(ROUND(AVG(InverterTemperature), 2), 0.001) AS InverterTemperature,
			      IFNULL(ROUND(AVG(BooseterTemperature), 2), 0.001) AS BooseterTemperature,
			      IFNULL(ROUND(AVG(IslolationResistance), 2), 0.001) AS IslolationResistance
			</if>
			<if test="table_name == 'model_lufft_class8020'">
				  IFNULL(ROUND(AVG(RelativeHumidityActual), 2), 0.001) AS RelativeHumidityActual,
			      IFNULL(ROUND(AVG(RelativeHumidityMin), 2), 0.001) AS RelativeHumidityMin,
			      IFNULL(ROUND(AVG(RelativeHumidityMax), 2), 0.001) AS RelativeHumidityMax,
			      IFNULL(ROUND(AVG(RelativeHumidityAvg), 2), 0.001) AS RelativeHumidityAvg,
			      IFNULL(ROUND(AVG(RelativeAirPressureActual), 2), 0.001) AS RelativeAirPressureActual,
			      IFNULL(ROUND(AVG(RelativeAirPressureMin), 2), 0.001) AS RelativeAirPressureMin,
			      IFNULL(ROUND(AVG(RelativeAirPressureMax), 2), 0.001) AS RelativeAirPressureMax,
			      IFNULL(ROUND(AVG(RelativeAirPressureAvg), 2), 0.001) AS RelativeAirPressureAvg,
			      IFNULL(ROUND(AVG(WindDirectionActual), 2), 0.001) AS WindDirectionActual,
			      IFNULL(ROUND(AVG(WindDirectionMin), 2), 0.001) AS WindDirectionMin,
			      IFNULL(ROUND(AVG(WindDirectionMax), 2), 0.001) AS WindDirectionMax,
			      IFNULL(ROUND(AVG(WindDirectionVct), 2), 0.001) AS WindDirectionVct,
			      IFNULL(ROUND(AVG(WindDirectionFast), 2), 0.001) AS WindDirectionFast,
			      IFNULL(ROUND(AVG(WindDirectionCompassCorrected), 2), 0.001) AS WindDirectionCompassCorrected,
			      IFNULL(ROUND(AVG(Compass), 2), 0.001) AS Compass,
			      IFNULL(ROUND(AVG(PrecipitationType), 2), 0.001) AS PrecipitationType,
			      IFNULL(ROUND(AVG(WindMeasurementQuality), 2), 0.001) AS WindMeasurementQuality,
			      
			      IFNULL(ROUND(IF(AVG(IrradianceActual) <![CDATA[<]]> 0, 0, AVG(IrradianceActual * 0.1 )), 2), 0.001) AS IrradianceActual,
			      
			      IFNULL(ROUND(AVG(IrradianceMin), 2), 0.001) AS IrradianceMin,
			      IFNULL(ROUND(AVG(IrradianceMax), 2), 0.001) AS IrradianceMax,
			      IFNULL(ROUND(AVG(IrradianceAvg), 2), 0.001) AS IrradianceAvg,
			      IFNULL(ROUND(AVG(AirTemperatureActual), 2), 0.001) AS AirTemperatureActual,
			      IFNULL(ROUND(AVG(AirTemperatureMin), 2), 0.001) AS AirTemperatureMin,
			      IFNULL(ROUND(AVG(AirTemperatureMax), 2), 0.001) AS AirTemperatureMax,
			      IFNULL(ROUND(AVG(AirTemperatureAvg), 2), 0.001) AS AirTemperatureAvg,
			      IFNULL(ROUND(AVG(DewPointActual), 2), 0.001) AS DewPointActual,
			      IFNULL(ROUND(AVG(DewPointMin), 2), 0.001) AS DewPointMin,
			      IFNULL(ROUND(AVG(DewPointMax), 2), 0.001) AS DewPointMax,
			      IFNULL(ROUND(AVG(DewPointAvg), 2), 0.001) AS DewPointAvg,
			      IFNULL(ROUND(AVG(WindChillTemperature), 2), 0.001) AS WindChillTemperature,
			      IFNULL(ROUND(AVG(HeatingTemperatureWind), 2), 0.001) AS HeatingTemperatureWind,
			      IFNULL(ROUND(AVG(HeatingTemperatureR2S), 2), 0.001) AS HeatingTemperatureR2S,
			      IFNULL(ROUND(AVG(WindSpeedActual), 2), 0.001) AS WindSpeedActual,
			      IFNULL(ROUND(AVG(WindSpeedMin), 2), 0.001) AS WindSpeedMin,
			      IFNULL(ROUND(AVG(WindSpeedMax), 2), 0.001) AS WindSpeedMax,
			      IFNULL(ROUND(AVG(WindSpeedAvg), 2), 0.001) AS WindSpeedAvg,
			      IFNULL(ROUND(AVG(WindSpeedVct), 2), 0.001) AS WindSpeedVct,
			      IFNULL(ROUND(AVG(WindSpeedFast), 2), 0.001) AS WindSpeedFast,
			      IFNULL(ROUND(AVG(PrecipitationQuantityAbsolute), 2), 0.001) AS PrecipitationQuantityAbsolute,
			      IFNULL(ROUND(AVG(PrecipitationQuantityDifferential), 2), 0.001) AS PrecipitationQuantityDifferential,
			      IFNULL(ROUND(AVG(PrecipitationIntensity), 2), 0.001) AS PrecipitationIntensity,
			      IFNULL(ROUND(AVG(AbsoluteHumidityActual), 2), 0.001) AS AbsoluteHumidityActual,
			      IFNULL(ROUND(AVG(AbsoluteHumidityMin), 2), 0.001) AS AbsoluteHumidityMin,
			      IFNULL(ROUND(AVG(AbsoluteHumidityMax), 2), 0.001) AS AbsoluteHumidityMax,
			      IFNULL(ROUND(AVG(AbsoluteHumidityAvg), 2), 0.001) AS AbsoluteHumidityAvg,
			      IFNULL(ROUND(AVG(MixingRatioActual), 2), 0.001) AS MixingRatioActual,
			      IFNULL(ROUND(AVG(MixingRatioMin), 2), 0.001) AS MixingRatioMin,
			      IFNULL(ROUND(AVG(MixingRatioMax), 2), 0.001) AS MixingRatioMax,
			      IFNULL(ROUND(AVG(MixingRatioAvg), 2), 0.001) AS MixingRatioAvg,
			      IFNULL(ROUND(AVG(AbsoluteAirPressureActual), 2), 0.001) AS AbsoluteAirPressureActual,
			      IFNULL(ROUND(AVG(AbsoluteAirPressureMin), 2), 0.001) AS AbsoluteAirPressureMin,
			      IFNULL(ROUND(AVG(AbsoluteAirPressureMax), 2), 0.001) AS AbsoluteAirPressureMax,
			      IFNULL(ROUND(AVG(AbsoluteAirPressureAvg), 2), 0.001) AS AbsoluteAirPressureAvg,
			      IFNULL(ROUND(AVG(WindSpeedStandardDeviation), 2), 0.001) AS WindSpeedStandardDeviation,
			      IFNULL(ROUND(AVG(WindDirectionStandardDeviation), 2), 0.001) AS WindDirectionStandardDeviation,
			      IFNULL(ROUND(AVG(WetBulbTemperature), 2), 0.001) AS WetBulbTemperature,
			      IFNULL(ROUND(AVG(SpecificEnthalpy), 2), 0.001) AS SpecificEnthalpy,
			      IFNULL(ROUND(AVG(AirDensityActual), 2), 0.001) AS AirDensityActual,
			      IFNULL(ROUND(AVG(LeafWetnessActual), 2), 0.001) AS LeafWetnessActual,
			      IFNULL(ROUND(AVG(LeafWetnessMin), 2), 0.001) AS LeafWetnessMin,
			      IFNULL(ROUND(AVG(LeafWetnessMax), 2), 0.001) AS LeafWetnessMax,
			      IFNULL(ROUND(AVG(LeafWetnessAvg), 2), 0.001) AS LeafWetnessAvg,
			      IFNULL(ROUND(AVG(LeafWetnessState), 2), 0.001) AS LeafWetnessState,
			      IFNULL(ROUND(AVG(ExternalTemperature), 2), 0.001) AS ExternalTemperature,
			      IFNULL(ROUND(AVG(WindValueQualityFast), 2), 0.001) AS WindValueQualityFast
			</if>
			<if test="table_name == 'model_lufft_ws501_umb_weather'">
				  IFNULL(ROUND(AVG(RelativeHumidityActual), 2), 0.001) AS RelativeHumidityActual,
			      IFNULL(ROUND(AVG(RelativeHumidityMin), 2), 0.001) AS RelativeHumidityMin,
			      IFNULL(ROUND(AVG(RelativeHumidityMax), 2), 0.001) AS RelativeHumidityMax,
			      IFNULL(ROUND(AVG(RelativeHumidityAvg), 2), 0.001) AS RelativeHumidityAvg,
			      IFNULL(ROUND(AVG(RelativeAirPressureActual), 2), 0.001) AS RelativeAirPressureActual,
			      IFNULL(ROUND(AVG(RelativeAirPressureMin), 2), 0.001) AS RelativeAirPressureMin,
			      IFNULL(ROUND(AVG(RelativeAirPressureMax), 2), 0.001) AS RelativeAirPressureMax,
			      IFNULL(ROUND(AVG(RelativeAirPressureAvg), 2), 0.001) AS RelativeAirPressureAvg,
			      IFNULL(ROUND(AVG(WindDirectionActual), 2), 0.001) AS WindDirectionActual,
			      IFNULL(ROUND(AVG(WindDirectionMin), 2), 0.001) AS WindDirectionMin,
			      IFNULL(ROUND(AVG(WindDirectionMax), 2), 0.001) AS WindDirectionMax,
			      IFNULL(ROUND(AVG(WindDirectionVct), 2), 0.001) AS WindDirectionVct,
			      IFNULL(ROUND(AVG(WindDirectionFast), 2), 0.001) AS WindDirectionFast,
			      IFNULL(ROUND(AVG(WindDirectionCompassCorrected), 2), 0.001) AS WindDirectionCompassCorrected,
			      IFNULL(ROUND(AVG(Compass), 2), 0.001) AS Compass,
			      IFNULL(ROUND(AVG(WindMeasurementQuality), 2), 0.001) AS WindMeasurementQuality,
			      IFNULL(ROUND(AVG(PrecipitationType), 2), 0.001) AS PrecipitationType,
			      
			      IFNULL(ROUND(IF(AVG(GlobalRadiation) <![CDATA[<]]> 0, 0, AVG(GlobalRadiation)), 2), 0.001) AS GlobalRadiation,
			      
			      IFNULL(ROUND(AVG(GlobalRadiation2), 2), 0.001) AS GlobalRadiation2,
			      IFNULL(ROUND(AVG(GlobalRadiation3), 2), 0.001) AS GlobalRadiation3,
			      IFNULL(ROUND(AVG(GlobalRadiation4), 2), 0.001) AS GlobalRadiation4,
			      IFNULL(ROUND(AVG(AirTemperatureCActual), 2), 0.001) AS AirTemperatureCActual,
			      IFNULL(ROUND(AVG(AirTemperatureCMin), 2), 0.001) AS AirTemperatureCMin,
			      IFNULL(ROUND(AVG(AirTemperatureCMax), 2), 0.001) AS AirTemperatureCMax,
			      IFNULL(ROUND(AVG(AirTemperatureCAvg), 2), 0.001) AS AirTemperatureCAvg,
			      IFNULL(ROUND(AVG(DewPointActual), 2), 0.001) AS DewPointActual,
			      IFNULL(ROUND(AVG(DewPointMin), 2), 0.001) AS DewPointMin,
			      IFNULL(ROUND(AVG(DewPointMax), 2), 0.001) AS DewPointMax,
			      IFNULL(ROUND(AVG(DewPointAvg), 2), 0.001) AS DewPointAvg,
			      IFNULL(ROUND(AVG(WindChillTemperature), 2), 0.001) AS WindChillTemperature,
			      IFNULL(ROUND(AVG(HeatingTemperatureWind), 2), 0.001) AS HeatingTemperatureWind,
			      IFNULL(ROUND(AVG(HeatingTemperatureR2S), 2), 0.001) AS HeatingTemperatureR2S,
			      IFNULL(ROUND(AVG(WindSpeedActual), 2), 0.001) AS WindSpeedActual,
			      IFNULL(ROUND(AVG(WindSpeedMin), 2), 0.001) AS WindSpeedMin,
			      IFNULL(ROUND(AVG(WindSpeedMax), 2), 0.001) AS WindSpeedMax,
			      IFNULL(ROUND(AVG(WindSpeedAvg), 2), 0.001) AS WindSpeedAvg,
			      IFNULL(ROUND(AVG(WindSpeedVct), 2), 0.001) AS WindSpeedVct,
			      IFNULL(ROUND(AVG(WindSpeedFast), 2), 0.001) AS WindSpeedFast,
			      IFNULL(ROUND(AVG(PrecipitationAbsolute), 2), 0.001) AS PrecipitationAbsolute,
			      IFNULL(ROUND(AVG(PrecipitationDifferential), 2), 0.001) AS PrecipitationDifferential,
			      IFNULL(ROUND(AVG(PrecipitationIntensity), 2), 0.001) AS PrecipitationIntensity,
			      IFNULL(ROUND(AVG(AirTemperatureFActual), 2), 0.001) AS AirTemperatureFActual,
			      IFNULL(ROUND(AVG(AirTemperatureFMin), 2), 0.001) AS AirTemperatureFMin,
			      IFNULL(ROUND(AVG(AirTemperatureFMax), 2), 0.001) AS AirTemperatureFMax,
			      IFNULL(ROUND(AVG(AirTemperatureFAvg), 2), 0.001) AS AirTemperatureFAvg,
			      IFNULL(ROUND(AVG(ExternalTemperatureC), 2), 0.001) AS ExternalTemperatureC,
			      IFNULL(ROUND(AVG(ExternalTemperatureF), 2), 0.001) AS ExternalTemperatureF
			</if>
			<if test="table_name == 'model_solectria_sgi_226ivt'">
				  IFNULL(ROUND(AVG(DCVoltage), 2), 0.001) AS DCVoltage,
			      
			      IFNULL(ROUND(IF(AVG(ACPowerOutput) <![CDATA[<]]> 0, 0, AVG(ACPowerOutput)), 2), 0.001) AS ACPowerOutput,
			      
			      IFNULL(ROUND(AVG(ACGridFrequency), 2), 0.001) AS ACGridFrequency,
			      IFNULL(ROUND(AVG(ACPowerStageCurrent), 2), 0.001) AS ACPowerStageCurrent,
			      IFNULL(ROUND(AVG(L1toL2ACVoltage), 2), 0.001) AS L1toL2ACVoltage,
			      IFNULL(ROUND(AVG(L2toL3ACVoltage), 2), 0.001) AS L2toL3ACVoltage,
			      IFNULL(ROUND(AVG(L1toL3ACVoltage), 2), 0.001) AS L1toL3ACVoltage,
			      IFNULL(ROUND(AVG(PhaseSequence), 2), 0.001) AS PhaseSequence,
			      IFNULL(ROUND(AVG(CumulativeACEnergy), 2), 0.001) AS CumulativeACEnergy,
			      IFNULL(ROUND(AVG(CumulativeOngridHours), 2), 0.001) AS CumulativeOngridHours,
			      IFNULL(ROUND(AVG(FanOntimeHours), 2), 0.001) AS FanOntimeHours,
			      IFNULL(ROUND(AVG(ACContactorCycles), 2), 0.001) AS ACContactorCycles,
			      IFNULL(ROUND(AVG(SlaveID), 2), 0.001) AS SlaveID,
			      IFNULL(ROUND(AVG(CriticalAlarms), 2), 0.001) AS CriticalAlarms,
			      IFNULL(ROUND(AVG(InformativeAlarms), 2), 0.001) AS InformativeAlarms
			</if>
			
			<if test="table_name == 'model_xantrex_gt100_250_500'">
				  IFNULL(ROUND(AVG(VAB), 2), 0.001) AS VAB,
			      IFNULL(ROUND(AVG(VBC), 2), 0.001) AS VBC,
			      IFNULL(ROUND(AVG(VCA), 2), 0.001) AS VCA,
			      IFNULL(ROUND(AVG(CurrentA), 2), 0.001) AS CurrentA,
			      IFNULL(ROUND(AVG(CurrentB), 2), 0.001) AS CurrentB,
			      IFNULL(ROUND(AVG(CurrentC), 2), 0.001) AS CurrentC,
			      
			      IFNULL(ROUND(IF(AVG(ReadPower) <![CDATA[<]]> 0, 0, AVG(ReadPower)), 2), 0.001) AS ReadPower,
			      
			      IFNULL(ROUND(AVG(PVVoltage), 2), 0.001) AS PVVoltage,
			      IFNULL(ROUND(AVG(PVCurrent), 2), 0.001) AS PVCurrent,
			      IFNULL(ROUND(AVG(PVPower), 2), 0.001) AS PVPower,
			      IFNULL(ROUND(AVG(GridFrequency), 2), 0.001) AS GridFrequency,
			      IFNULL(ROUND(AVG(SystemState), 2), 0.001) AS SystemState,
			      IFNULL(ROUND(AVG(GoalState), 2), 0.001) AS GoalState,
			      IFNULL(ROUND(AVG(FaultCode), 2), 0.001) AS FaultCode,
			      IFNULL(ROUND(AVG(AccumulatedEnergy), 2), 0.001) AS AccumulatedEnergy,
			      IFNULL(ROUND(AVG(RMatrixTemp), 2), 0.001) AS RMatrixTemp,
			      IFNULL(ROUND(AVG(LMatrixTemp), 2), 0.001) AS LMatrixTemp,
			      IFNULL(ROUND(AVG(IntakeAirTemperature), 2), 0.001) AS IntakeAirTemperature
			</if>
			
			<if test="table_name == 'model_xantrex_inverter'">
				  IFNULL(ROUND(AVG(VAB), 2), 0.001) AS VAB,
			      IFNULL(ROUND(AVG(VBC), 2), 0.001) AS VBC,
			      IFNULL(ROUND(AVG(VCA), 2), 0.001) AS VCA,
			      IFNULL(ROUND(AVG(CurrentA), 2), 0.001) AS CurrentA,
			      IFNULL(ROUND(AVG(CurrentB), 2), 0.001) AS CurrentB,
			      IFNULL(ROUND(AVG(CurrentC), 2), 0.001) AS CurrentC,
			      
			      IFNULL(ROUND(IF(AVG(ReadPower) <![CDATA[<]]> 0, 0, AVG(ReadPower)), 2), 0.001) AS ReadPower,
			      
			      IFNULL(ROUND(AVG(PVVoltage), 2), 0.001) AS PVVoltage,
			      IFNULL(ROUND(AVG(PVCurrent), 2), 0.001) AS PVCurrent,
			      IFNULL(ROUND(AVG(PVPower), 2), 0.001) AS PVPower,
			      IFNULL(ROUND(AVG(GridFrequency), 2), 0.001) AS GridFrequency,
			      IFNULL(ROUND(AVG(SystemState), 2), 0.001) AS SystemState,
			      IFNULL(ROUND(AVG(GoalState), 2), 0.001) AS GoalState,
			      IFNULL(ROUND(AVG(FaultCode), 2), 0.001) AS FaultCode,
			      IFNULL(ROUND(AVG(kWh), 2), 0.001) AS kWh
			</if>
			
			<if test="table_name == 'model_ae1000nx_class9644'">
				  IFNULL(ROUND(AVG(LastRestart), 2), 0.001) AS LastRestart,
			      IFNULL(ROUND(AVG(Uptime), 2), 0.001) AS Uptime,
			      IFNULL(ROUND(AVG(Year), 2), 0.001) AS Year,
			      IFNULL(ROUND(AVG(Month), 2), 0.001) AS Month,
			      IFNULL(ROUND(AVG(Day), 2), 0.001) AS Day,
			      IFNULL(ROUND(AVG(Hour), 2), 0.001) AS Hour,
			      IFNULL(ROUND(AVG(Minutes), 2), 0.001) AS Minutes,
			      IFNULL(ROUND(AVG(Seconds), 2), 0.001) AS Seconds,
			      IFNULL(ROUND(AVG(CurrentTime), 2), 0.001) AS CurrentTime,
			      
			      IFNULL(ROUND(IF(AVG(ACPower) <![CDATA[<]]> 0, 0, AVG(ACPower)), 2), 0.001) AS ACPower,
			      
			      IFNULL(ROUND(AVG(ACFrequency), 2), 0.001) AS ACFrequency,
			      IFNULL(ROUND(AVG(PVVoltage), 2), 0.001) AS PVVoltage,
			      IFNULL(ROUND(AVG(PVCurrent), 2), 0.001) AS PVCurrent,
			      IFNULL(ROUND(AVG(CommonMode), 2), 0.001) AS CommonMode,
			      IFNULL(ROUND(AVG(AmbientTemperature), 2), 0.001) AS AmbientTemperature,
			      IFNULL(ROUND(AVG(CoolantTemperature), 2), 0.001) AS CoolantTemperature,
			      IFNULL(ROUND(AVG(ReactorTemperature), 2), 0.001) AS ReactorTemperature,
			      IFNULL(ROUND(AVG(CabinetTemperature), 2), 0.001) AS CabinetTemperature,
			      IFNULL(ROUND(AVG(BusVoltage), 2), 0.001) AS BusVoltage,
			      IFNULL(ROUND(AVG(GroundCurrent), 2), 0.001) AS GroundCurrent,
			      IFNULL(ROUND(AVG(ReactivePower), 2), 0.001) AS ReactivePower,
			      IFNULL(ROUND(AVG(ACCurrent), 2), 0.001) AS ACCurrent,
			      IFNULL(ROUND(AVG(TodaykWh), 2), 0.001) AS TodaykWh,
			      IFNULL(ROUND(AVG(YTDkWhTotal), 2), 0.001) AS YTDkWhTotal,
			      IFNULL(ROUND(AVG(LifekWhTotal), 2), 0.001) AS LifekWhTotal,
			      IFNULL(ROUND(AVG(YTDkWh), 2), 0.001) AS YTDkWh,
			      IFNULL(ROUND(AVG(LifekWh), 2), 0.001) AS LifekWh,
			      IFNULL(ROUND(AVG(Last15MinkWh), 2), 0.001) AS Last15MinkWh,
			      IFNULL(ROUND(AVG(TimeStamp15Minutes), 2), 0.001) AS TimeStamp15Minutes,
			      IFNULL(ROUND(AVG(State), 2), 0.001) AS State,
			      IFNULL(ROUND(AVG(Limits), 2), 0.001) AS Limits,
			      IFNULL(ROUND(AVG(MasterFault), 2), 0.001) AS MasterFault,
			      IFNULL(ROUND(AVG(MasterWarning), 2), 0.001) AS MasterWarning,
			      IFNULL(ROUND(AVG(ArrayFault), 2), 0.001) AS ArrayFault,
			      IFNULL(ROUND(AVG(ArrayWarning), 2), 0.001) AS ArrayWarning,
			      IFNULL(ROUND(AVG(GridFault), 2), 0.001) AS GridFault,
			      IFNULL(ROUND(AVG(GridWarning), 2), 0.001) AS GridWarning,
			      IFNULL(ROUND(AVG(SystemFault), 2), 0.001) AS SystemFault,
			      IFNULL(ROUND(AVG(SystemWarning), 2), 0.001) AS SystemWarning,
			      IFNULL(ROUND(AVG(DriveFault), 2), 0.001) AS DriveFault,
			      IFNULL(ROUND(AVG(DriveWarning), 2), 0.001) AS DriveWarning,
			      IFNULL(ROUND(AVG(TemperatureFault), 2), 0.001) AS TemperatureFault,
			      IFNULL(ROUND(AVG(TemperatureWarning), 2), 0.001) AS TemperatureWarning,
			      IFNULL(ROUND(AVG(CoolingSystemFault), 2), 0.001) AS CoolingSystemFault,
			      IFNULL(ROUND(AVG(CoolingSystemWarning), 2), 0.001) AS CoolingSystemWarning,
			      IFNULL(ROUND(AVG(ElectricInterlockFault), 2), 0.001) AS ElectricInterlockFault,
			      IFNULL(ROUND(AVG(ElectricInterlockWarning), 2), 0.001) AS ElectricInterlockWarning,
			      IFNULL(ROUND(AVG(PowerSupplyFault), 2), 0.001) AS PowerSupplyFault,
			      IFNULL(ROUND(AVG(PowerSupplyWarning), 2), 0.001) AS PowerSupplyWarning,
			      IFNULL(ROUND(AVG(RequestSetACPowerLimit), 2), 0.001) AS RequestSetACPowerLimit,
			      IFNULL(ROUND(AVG(LowerRangeOfACPowerLimit), 2), 0.001) AS LowerRangeOfACPowerLimit,
			      IFNULL(ROUND(AVG(UpperRangeOfACPowerLimit), 2), 0.001) AS UpperRangeOfACPowerLimit,
			      IFNULL(ROUND(AVG(RequestSetInstantaneousReactivePowerSetPoint), 2), 0.001) AS RequestSetInstantaneousReactivePowerSetPoint,
			      IFNULL(ROUND(AVG(LowerRangeOfInstantaneousReactivePowerSetPoint), 2), 0.001) AS LowerRangeOfInstantaneousReactivePowerSetPoint,
			      IFNULL(ROUND(AVG(UpperRangeOfInstantaneousReactivePowerSetPoint), 2), 0.001) AS UpperRangeOfInstantaneousReactivePowerSetPoint,
			      IFNULL(ROUND(AVG(EnableDisableTheUnit), 2), 0.001) AS EnableDisableTheUnit,
			      IFNULL(ROUND(AVG(SetReadReactivePowerMode), 2), 0.001) AS SetReadReactivePowerMode,
			      IFNULL(ROUND(AVG(SetReadPACLimit), 2), 0.001) AS SetReadPACLimit,
			      IFNULL(ROUND(AVG(SetReadInstantaneousReactivePowerSetPoint), 2), 0.001) AS SetReadInstantaneousReactivePowerSetPoint,
			      IFNULL(ROUND(AVG(SetReadPowerFactorSetPoint), 2), 0.001) AS SetReadPowerFactorSetPoint,
			      IFNULL(ROUND(AVG(ACPowerRampRate), 2), 0.001) AS ACPowerRampRate,
			      IFNULL(ROUND(AVG(ReactivePowerRampRate), 2), 0.001) AS ReactivePowerRampRate,
			      IFNULL(ROUND(AVG(PowerFactorRampRate), 2), 0.001) AS PowerFactorRampRate,
			      IFNULL(ROUND(AVG(ReactivePowerSignConvention), 2), 0.001) AS ReactivePowerSignConvention,
			      IFNULL(ROUND(AVG(DCS_N), 2), 0.001) AS DCS_N,
			      IFNULL(ROUND(AVG(DCS_StCtcr), 2), 0.001) AS DCS_StCtcr,
			      IFNULL(ROUND(AVG(DCS_StCpt), 2), 0.001) AS DCS_StCpt,
			      IFNULL(ROUND(AVG(DCS_EvtFlt), 2), 0.001) AS DCS_EvtFlt,
			      IFNULL(ROUND(AVG(DCS_EvtWrn), 2), 0.001) AS DCS_EvtWrn,
			      IFNULL(ROUND(AVG(DCS_StVnd), 2), 0.001) AS DCS_StVnd,
			      IFNULL(ROUND(AVG(DCS_DCA), 2), 0.001) AS DCS_DCA,
			      IFNULL(ROUND(AVG(DCS_DCADif), 2), 0.001) AS DCS_DCADif,
			      IFNULL(ROUND(AVG(DCS_DCV), 2), 0.001) AS DCS_DCV,
			      IFNULL(ROUND(AVG(DCS_Tmp), 2), 0.001) AS DCS_Tmp,
			      IFNULL(ROUND(AVG(DCS_InId01), 2), 0.001) AS DCS_InId01,
			      IFNULL(ROUND(AVG(DCS_InFlt01), 2), 0.001) AS DCS_InFlt01,
			      IFNULL(ROUND(AVG(DCS_InWrn01), 2), 0.001) AS DCS_InWrn01,
			      IFNULL(ROUND(AVG(DCS_InPDCA01), 2), 0.001) AS DCS_InPDCA01,
			      IFNULL(ROUND(AVG(DCS_InNDCA01), 2), 0.001) AS DCS_InNDCA01,
			      IFNULL(ROUND(AVG(DCS_InId02), 2), 0.001) AS DCS_InId02,
			      IFNULL(ROUND(AVG(DCS_InFlt02), 2), 0.001) AS DCS_InFlt02,
			      IFNULL(ROUND(AVG(DCS_InWrn02), 2), 0.001) AS DCS_InWrn02,
			      IFNULL(ROUND(AVG(DCS_InPDCA02), 2), 0.001) AS DCS_InPDCA02,
			      IFNULL(ROUND(AVG(DCS_InNDCA02), 2), 0.001) AS DCS_InNDCA02,
			      IFNULL(ROUND(AVG(DCS_InId03), 2), 0.001) AS DCS_InId03,
			      IFNULL(ROUND(AVG(DCS_InFlt03), 2), 0.001) AS DCS_InFlt03,
			      IFNULL(ROUND(AVG(DCS_InWrn03), 2), 0.001) AS DCS_InWrn03,
			      IFNULL(ROUND(AVG(DCS_InPDCA03), 2), 0.001) AS DCS_InPDCA03,
			      IFNULL(ROUND(AVG(DCS_InNDCA03), 2), 0.001) AS DCS_InNDCA03,
			      IFNULL(ROUND(AVG(DCS_InId04), 2), 0.001) AS DCS_InId04,
			      IFNULL(ROUND(AVG(DCS_InFlt04), 2), 0.001) AS DCS_InFlt04,
			      IFNULL(ROUND(AVG(DCS_InWrn04), 2), 0.001) AS DCS_InWrn04,
			      IFNULL(ROUND(AVG(DCS_InPDCA04), 2), 0.001) AS DCS_InPDCA04,
			      IFNULL(ROUND(AVG(DCS_InNDCA04), 2), 0.001) AS DCS_InNDCA04,
			      IFNULL(ROUND(AVG(DCS_InId05), 2), 0.001) AS DCS_InId05,
			      IFNULL(ROUND(AVG(DCS_InFlt05), 2), 0.001) AS DCS_InFlt05,
			      IFNULL(ROUND(AVG(DCS_InWrn05), 2), 0.001) AS DCS_InWrn05,
			      IFNULL(ROUND(AVG(DCS_InPDCA05), 2), 0.001) AS DCS_InPDCA05,
			      IFNULL(ROUND(AVG(DCS_InNDCA05), 2), 0.001) AS DCS_InNDCA05,
			      IFNULL(ROUND(AVG(DCS_InId06), 2), 0.001) AS DCS_InId06,
			      IFNULL(ROUND(AVG(DCS_InFlt06), 2), 0.001) AS DCS_InFlt06,
			      IFNULL(ROUND(AVG(DCS_InWrn06), 2), 0.001) AS DCS_InWrn06,
			      IFNULL(ROUND(AVG(DCS_InPDCA06), 2), 0.001) AS DCS_InPDCA06,
			      IFNULL(ROUND(AVG(DCS_InNDCA06), 2), 0.001) AS DCS_InNDCA06,
			      IFNULL(ROUND(AVG(DCS_InId07), 2), 0.001) AS DCS_InId07,
			      IFNULL(ROUND(AVG(DCS_InFlt07), 2), 0.001) AS DCS_InFlt07,
			      IFNULL(ROUND(AVG(DCS_InWrn07), 2), 0.001) AS DCS_InWrn07,
			      IFNULL(ROUND(AVG(DCS_InPDCA07), 2), 0.001) AS DCS_InPDCA07,
			      IFNULL(ROUND(AVG(DCS_InNDCA07), 2), 0.001) AS DCS_InNDCA07,
			      IFNULL(ROUND(AVG(DCS_InId08), 2), 0.001) AS DCS_InId08,
			      IFNULL(ROUND(AVG(DCS_InFlt08), 2), 0.001) AS DCS_InFlt08,
			      IFNULL(ROUND(AVG(DCS_InWrn08), 2), 0.001) AS DCS_InWrn08,
			      IFNULL(ROUND(AVG(DCS_InPDCA08), 2), 0.001) AS DCS_InPDCA08,
			      IFNULL(ROUND(AVG(DCS_InNDCA08), 2), 0.001) AS DCS_InNDCA08,  
			      IFNULL(ROUND(AVG(DCS_InId09), 2), 0.001) AS DCS_InId09,
			      IFNULL(ROUND(AVG(DCS_InFlt09), 2), 0.001) AS DCS_InFlt09,
			      IFNULL(ROUND(AVG(DCS_InWrn09), 2), 0.001) AS DCS_InWrn09,
			      IFNULL(ROUND(AVG(DCS_InPDCA09), 2), 0.001) AS DCS_InPDCA09,
			      IFNULL(ROUND(AVG(DCS_InNDCA09), 2), 0.001) AS DCS_InNDCA09,
			      IFNULL(ROUND(AVG(DCS_InId10), 2), 0.001) AS DCS_InId10,
			      IFNULL(ROUND(AVG(DCS_InFlt10), 2), 0.001) AS DCS_InFlt10,
			      IFNULL(ROUND(AVG(DCS_InWrn10), 2), 0.001) AS DCS_InWrn10,
			      IFNULL(ROUND(AVG(DCS_InPDCA10), 2), 0.001) AS DCS_InPDCA10,
			      IFNULL(ROUND(AVG(DCS_InNDCA10), 2), 0.001) AS DCS_InNDCA10

			</if>
			
			<if test="table_name == 'model_poa_temp'">
				  IFNULL(ROUND(AVG(T_AMB), 2), 0.001) AS T_AMB,
			      IFNULL(ROUND(AVG(T_MOD), 2), 0.001) AS T_MOD
			</if>
			
			<if test="table_name == 'model_eri_weather_icp_class8050'">
				  IFNULL(ROUND(AVG(panel_temp), 2), 0.001) AS panel_temp,
			      IFNULL(ROUND(AVG(ambient_temp), 2), 0.001) AS ambient_temp,
			      IFNULL(ROUND(AVG(wind_speed), 2), 0.001) AS wind_speed,
						IFNULL(ROUND(IF(AVG(solar_irradiation) <![CDATA[<]]> 0, 0, AVG(solar_irradiation)), 2), 0.001) AS solar_irradiation,
			      IFNULL(ROUND(AVG(wind_direction), 2), 0.001) AS wind_direction
			</if>
			
			<if test="table_name == 'model_dts_measurelogic_demand_meter'">
				  IFNULL(ROUND(AVG(Voltage_LN_1), 2), 0.001) AS Voltage_LN_1,
			      IFNULL(ROUND(AVG(Voltage_LN_2), 2), 0.001) AS Voltage_LN_2,
			      IFNULL(ROUND(AVG(Voltage_LN_3), 2), 0.001) AS Voltage_LN_3,
			      IFNULL(ROUND(AVG(Voltage_LL_Average), 2), 0.001) AS Voltage_LL_Average,
			      IFNULL(ROUND(AVG(Current_1), 2), 0.001) AS Current_1,
			      IFNULL(ROUND(AVG(Current_2), 2), 0.001) AS Current_2,
			      IFNULL(ROUND(AVG(Current_3), 2), 0.001) AS Current_3,
			      IFNULL(ROUND(AVG(Current_Total), 2), 0.001) AS Current_Total,
			      IFNULL(ROUND(AVG(Current_Neutral), 2), 0.001) AS Current_Neutral,
			      IFNULL(ROUND(AVG(Frequency_Average), 2), 0.001) AS Frequency_Average,
			      IFNULL(ROUND(AVG(PowerP_Total), 2), 0.001) AS PowerP_Total,
			      IFNULL(ROUND(AVG(PowerS_Total), 2), 0.001) AS PowerS_Total,
			      IFNULL(ROUND(AVG(PowerQ_Total), 2), 0.001) AS PowerQ_Total,
			      IFNULL(ROUND(AVG(PowerFactor_DTS_Overall), 2), 0.001) AS PowerFactor_DTS_Overall,
			      IFNULL(ROUND(AVG(EnergyP_Total), 2), 0.001) AS EnergyP_Total,
			      IFNULL(ROUND(AVG(EnergyS_Total), 2), 0.001) AS EnergyS_Total,
			      IFNULL(ROUND(AVG(EnergyQ_Total), 2), 0.001) AS EnergyQ_Total,
			      IFNULL(ROUND(AVG(EnergyP_Total_Imp), 2), 0.001) AS EnergyP_Total_Imp,
			      IFNULL(ROUND(AVG(EnergyP_Total_Exp), 2), 0.001) AS EnergyP_Total_Exp,
			      IFNULL(ROUND(AVG(EnergyQ_Total_Imp), 2), 0.001) AS EnergyQ_Total_Imp,
			      IFNULL(ROUND(AVG(EnergyQ_Total_Exp), 2), 0.001) AS EnergyQ_Total_Exp
			</if>
			
			<if test="table_name == 'model_virtual_meter_or_inverter'">
				IFNULL(ROUND(AVG(nvmActivePower), 2), 0.001) AS nvmActivePower,
				IFNULL(ROUND(SUM(nvmActiveEnergy), 2), 0.001) AS nvmActiveEnergy,
				IFNULL(ROUND(AVG(nvm_temperature), 2), 0.001) AS nvm_temperature,
				IFNULL(ROUND(AVG(nvm_irradiance), 2), 0.001) AS nvm_irradiance,
				IFNULL(ROUND(AVG(expected_power_ac), 2), 0.001) AS expected_power_ac,
				IFNULL(ROUND(IF(AVG(nvmActivePower) <![CDATA[<]]> 0, 0, AVG(nvmActivePower)), 2), 0.001) AS Power,
		    	IFNULL(ROUND(SUM(nvmActiveEnergy), 2), 0.001) AS Energy,
		    	IFNULL(ROUND(AVG(expected_power_ac), 2), 0.001) AS expected_power,
		    	IFNULL(ROUND(SUM(expected_energy), 2), 0.001) AS expected_energy,
				<choose>
					<when test="filterBy == 'today' or filterBy == '3_day' or (filterBy == 'custom' and diff5Days)">
						IFNULL(ROUND(AVG(nvmActivePower), 2), 0.001)
					</when>
					<otherwise>
						IFNULL(ROUND(SUM(nvmActiveEnergy), 2), 0.001)
					</otherwise>
				</choose> AS MeasuredProduction
			</if>
			
		FROM (
			SELECT
				dv.time,
				dv.id_device,
				0 AS is_checked,
				d.datatablename,
				d.view_tablename,
				d.job_tablename,
				d.id_device_group,
				
				<if test="table_name == 'model_ae_refusol'">
					AVG(dv.ACPower) AS ACPower,
					AVG(dv.ACVoltageAverageRMS) AS ACVoltageAverageRMS,
					AVG(dv.ACVoltage1RMS) AS ACVoltage1RMS,
					AVG(dv.ACVoltage2RMS) AS ACVoltage2RMS,
					AVG(dv.ACVoltage3RMS) AS ACVoltage3RMS,
					AVG(dv.ACCurrentSum) AS ACCurrentSum,
					AVG(dv.ACCurrent1) AS ACCurrent1,
					AVG(dv.ACCurrent2) AS ACCurrent2,
					AVG(dv.ACCurrent3) AS ACCurrent3,
					AVG(dv.ACFrequency1) AS ACFrequency1,
					AVG(dv.ACFrequency2) AS ACFrequency2,
					AVG(dv.ACFrequency3) AS ACFrequency3,
					AVG(dv.DCPower) AS DCPower,
					AVG(dv.DCVoltage) AS DCVoltage,
					AVG(dv.DCCurrent) AS DCCurrent,
					AVG(dv.HeatSink) AS HeatSink,
					AVG(dv.Interior) AS Interior,
					AVG(dv.Irradiation) AS Irradiation,
					AVG(dv.Panel) AS Panel,
					AVG(dv.DailyYield) AS DailyYield,
					AVG(dv.TotalYield) AS TotalYield,
					AVG(dv.OperatingHours) AS OperatingHours,
					AVG(dv.Status) AS Status,
					AVG(dv.ErrorMessageCode) AS ErrorMessageCode,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				
				<if test="table_name == 'model_elster_a1700'">
					AVG(dv.PhaseAVoltage) AS PhaseAVoltage,
					AVG(dv.PhaseBVoltage) AS PhaseBVoltage,
					AVG(dv.PhaseCVoltage) AS PhaseCVoltage,
					AVG(dv.ABLineVoltage) AS ABLineVoltage,
					AVG(dv.BCLineVoltage) AS BCLineVoltage,
					AVG(dv.CALineVoltage) AS CALineVoltage,
					AVG(dv.PhaseACurrent) AS PhaseACurrent,
					AVG(dv.PhaseBCurrent) AS PhaseBCurrent,
					AVG(dv.PhaseCCurrent) AS PhaseCCurrent,
					AVG(dv.PhaseAActivePower) AS PhaseAActivePower,
					AVG(dv.PhaseBActivePower) AS PhaseBActivePower,
					AVG(dv.PhaseCActivePower) AS PhaseCActivePower,
					AVG(dv.TotalActivePower) AS TotalActivePower,
					AVG(dv.TotalReactivePower) AS TotalReactivePower,
					AVG(dv.TotalApparentPower) AS TotalApparentPower,
					AVG(dv.TotalPowerFactor) AS TotalPowerFactor,
					AVG(dv.GridFrequency) AS GridFrequency,
					AVG(dv.TotalForwardActiveEnergy) AS TotalForwardActiveEnergy,
					AVG(dv.TotalReverseActiveEnergy) AS TotalReverseActiveEnergy,
					AVG(dv.TotalForwardReactiveEnergy) AS TotalForwardReactiveEnergy,
					AVG(dv.TotalReverseReactiveEnergy) AS TotalReverseReactiveEnergy,
					AVG(dv.PhaseAForwardActivePower) AS PhaseAForwardActivePower,
					AVG(dv.PhaseBForwardActivePower) AS PhaseBForwardActivePower,
					AVG(dv.PhaseCForwardActivePower) AS PhaseCForwardActivePower,
					AVG(dv.PhaseAReverseActivePower) AS PhaseAReverseActivePower,
					AVG(dv.PhaseBReverseActivePower) AS PhaseBReverseActivePower,
					AVG(dv.PhaseCReverseActivePower) AS PhaseCReverseActivePower,
					AVG(dv.PhaseAForwardReactivePower) AS PhaseAForwardReactivePower,
					AVG(dv.PhaseBForwardReactivePower) AS PhaseBForwardReactivePower,
					AVG(dv.PhaseCForwardReactivePower) AS PhaseCForwardReactivePower,
					AVG(dv.PhaseAReverseReactivePower) AS PhaseAReverseReactivePower,
					AVG(dv.PhaseBReverseReactivePower) AS PhaseBReverseReactivePower,
					AVG(dv.PhaseCReverseReactivePower) AS PhaseCReverseReactivePower,
					AVG(dv.FlatForwardActiveEnergy) AS FlatForwardActiveEnergy,
					AVG(dv.PeakForwardActiveEnergy) AS PeakForwardActiveEnergy,
					AVG(dv.ValleyForwardActiveEnergy) AS ValleyForwardActiveEnergy,
					AVG(dv.FlatReverseActiveEnergy) AS FlatReverseActiveEnergy,
					AVG(dv.PeakReverseActiveEnergy) AS PeakReverseActiveEnergy,
					AVG(dv.ValleyReverseActiveEnergy) AS ValleyReverseActiveEnergy,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_sev_sg110cx'">
					AVG(dv.TotalYield) AS TotalYield,
					AVG(dv.DailyYield) AS DailyYield,
					AVG(dv.ArrayInsulationResistance) AS ArrayInsulationResistance,
					AVG(dv.InteriorTemperature) AS InteriorTemperature,
					AVG(dv.TotalDCPower) AS TotalDCPower,
					AVG(dv.TotalApparentPower) AS TotalApparentPower,
					AVG(dv.TotalActivePower) AS TotalActivePower,
					AVG(dv.TotalReactivePower) AS TotalReactivePower,
					AVG(dv.TotalPowerFactor) AS TotalPowerFactor,
					AVG(dv.GridFrequency) AS GridFrequency,
					AVG(dv.PhaseAVoltage) AS PhaseAVoltage,
					AVG(dv.PhaseBVoltage) AS PhaseBVoltage,
					AVG(dv.PhaseCVoltage) AS PhaseCVoltage,
					AVG(dv.PhaseACurrent) AS PhaseACurrent,
					AVG(dv.PhaseBCurrent) AS PhaseBCurrent,
					AVG(dv.PhaseCCurrent) AS PhaseCCurrent,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_wattsun_tracker'">
					AVG(dv.MODE) AS MODE,
					AVG(dv.ST_CLEAR_ACCUMULATOR) AS ST_CLEAR_ACCUMULATOR,
					AVG(dv.ND_CLEAR_ACCUMULATOR) AS ND_CLEAR_ACCUMULATOR,
					AVG(dv.TRACKER_ANGLE_SETPOINT) AS TRACKER_ANGLE_SETPOINT,
					AVG(dv.TRACKER_ANGLE) AS TRACKER_ANGLE,
					AVG(dv.NIGHT_STOW_POSITION) AS NIGHT_STOW_POSITION,
					AVG(dv.WIND_STOW_POSITION) AS WIND_STOW_POSITION,
				</if>
				
				<if test="table_name == 'model_wattsun_tcu'">
					AVG(dv.TRACKER_ADDRESS) AS TRACKER_ADDRESS,
					AVG(dv.HOUR) AS HOUR,
					AVG(dv.MINUTE) AS MINUTE,
					AVG(dv.DAY) AS DAY,
					AVG(dv.DIGITAL_INPUTS) AS DIGITAL_INPUTS,
					AVG(dv.DIGITAL_OUTPUTS) AS DIGITAL_OUTPUTS,
					AVG(dv.WATCHDOG_COUNTER) AS WATCHDOG_COUNTER,
					AVG(dv.ANGLE_CALC) AS ANGLE_CALC,
					AVG(dv.LATITUDE) AS LATITUDE,
					AVG(dv.LONGITUDE) AS LONGITUDE,
				</if>
				
				<if test="table_name == 'model_xantrex_gt500e'">
					AVG(dv.AC_CURRENT_A) AS AC_CURRENT_A,
					AVG(dv.AC_CURRENT_B) AS AC_CURRENT_B,
					AVG(dv.AC_CURRENT_C) AS AC_CURRENT_C,
					AVG(dv.AC_POWER) AS AC_POWER,
					AVG(dv.AC_VOLTAGE_AB) AS AC_VOLTAGE_AB,
					AVG(dv.AC_VOLTAGE_BC) AS AC_VOLTAGE_BC,
					AVG(dv.AC_VOLTAGE_CA) AS AC_VOLTAGE_CA,
					AVG(dv.DC_CURRENT) AS DC_CURRENT,
					AVG(dv.DC_POWER) AS DC_POWER,
					AVG(dv.DC_VOLTAGE) AS DC_VOLTAGE,
					AVG(dv.ENERGY_DELIVERED) AS ENERGY_DELIVERED,
					AVG(dv.FREQUENCY) AS FREQUENCY,
					AVG(dv.STATUS_FAULT) AS STATUS_FAULT,
					AVG(dv.STATUS_GOAL) AS STATUS_GOAL,
					AVG(dv.STATUS_INVERTER) AS STATUS_INVERTER,
					AVG(dv.STATUS_OPERATING) AS STATUS_OPERATING,
					AVG(dv.STATUS_PV) AS STATUS_PV,
					AVG(dv.T_LEFT_MATRIX) AS T_LEFT_MATRIX,
					AVG(dv.T_RIGHT_MATRIX) AS T_RIGHT_MATRIX,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_power_measurement_ion_7650'">
					AVG(dv.Ia) AS Ia,
					AVG(dv.Ib) AS Ib,
					AVG(dv.Ic) AS Ic,
					AVG(dv.I4) AS I4,
					AVG(dv.I5) AS I5,
					AVG(dv.IAvg) AS IAvg,
					AVG(dv.IAvgMn) AS IAvgMn,
					AVG(dv.IAvgMx) AS IAvgMx,
					AVG(dv.IAvgMean) AS IAvgMean,
					AVG(dv.Freq) AS Freq,
					AVG(dv.FreqMn) AS FreqMn,
					AVG(dv.FreqMx) AS FreqMx,
					AVG(dv.FreqMean) AS FreqMean,
					AVG(dv.VUnbal) AS VUnbal,
					AVG(dv.IUnbal) AS IUnbal,
					AVG(dv.PhaseRev) AS PhaseRev,
					AVG(dv.VInA) AS VInA,
					AVG(dv.VInB) AS VInB,
					AVG(dv.VInC) AS VInC,
					AVG(dv.VInAvg) AS VInAvg,
					AVG(dv.VInAvgMx) AS VInAvgMx,
					AVG(dv.VIIAb) AS VIIAb,
					AVG(dv.VIIBc) AS VIIBc,
					AVG(dv.VIICa) AS VIICa,
					AVG(dv.VIIAvg) AS VIIAvg,
					AVG(dv.VIIAvgMx) AS VIIAvgMx,
					AVG(dv.VIIAvgMean) AS VIIAvgMean,
					AVG(dv.kWA) AS kWA,
					AVG(dv.kWB) AS kWB,
					AVG(dv.kWC) AS kWC,
					AVG(dv.kWTot) AS kWTot,
					AVG(dv.kWTotMax) AS kWTotMax,
					AVG(dv.kVARA) AS kVARA,
					AVG(dv.kVARB) AS kVARB,
					AVG(dv.kVARC) AS kVARC,
					AVG(dv.kVARTot) AS kVARTot,
					AVG(dv.kVARTotMax) AS kVARTotMax,
					AVG(dv.kVAA) AS kVAA,
					AVG(dv.kVAB) AS kVAB,
					AVG(dv.kVAC) AS kVAC,
					AVG(dv.kVATot) AS kVATot,
					AVG(dv.kVATotMax) AS kVATotMax,
					AVG(dv.kWhDel) AS kWhDel,
					AVG(dv.kWhRec) AS kWhRec,
					AVG(dv.kVARhDel) AS kVARhDel,
					AVG(dv.kVARhRec) AS kVARhRec,
					AVG(dv.kVARhDelRec) AS kVARhDelRec,
					
					AVG(dv.PFSignA) AS PFSignA,
					AVG(dv.PFSignB) AS PFSignB,
					AVG(dv.PFSignC) AS PFSignC,
					AVG(dv.PFSignTot) AS PFSignTot,
					AVG(dv.V1THDMx) AS V1THDMx,
					AVG(dv.V2THDMx) AS V2THDMx,
					AVG(dv.V3THDMx) AS V3THDMx,
					AVG(dv.I1THDMx) AS I1THDMx,
					AVG(dv.I2THDMx) AS I2THDMx,
					AVG(dv.I3THDMx) AS I3THDMx,
					AVG(dv.I1KFactor) AS I1KFactor,
					AVG(dv.I2KFactor) AS I2KFactor,
					AVG(dv.I3KFactor) AS I3KFactor,
					AVG(dv.I1CrestFactor) AS I1CrestFactor,
					AVG(dv.I2CrestFactor) AS I2CrestFactor,
					AVG(dv.I3CrestFactor) AS I3CrestFactor,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_pyranometer_poa'">
					AVG(dv.poa) AS poa,
					SUM(dv.point1) AS point1,
					AVG(dv.point2) AS point2,
					AVG(dv.point3) AS point3,
				</if>
				
				<if test="table_name == 'model_janitza_umg604pro'">
			        AVG(dv.PhaseAVoltage) AS PhaseAVoltage,
			        AVG(dv.PhaseBVoltage) AS PhaseBVoltage,
			        AVG(dv.PhaseCVoltage) AS PhaseCVoltage,
			        AVG(dv.ABVoltage) AS ABVoltage,
			        AVG(dv.BCVoltage) AS BCVoltage,
			        AVG(dv.CAVoltage) AS CAVoltage,
			        AVG(dv.PhaseACurrent) AS PhaseACurrent,
			        AVG(dv.PhaseBCurrent) AS PhaseBCurrent,
			        AVG(dv.PhaseCCurrent) AS PhaseCCurrent,
			        AVG(dv.TotalCurrent) AS TotalCurrent,
			        AVG(dv.PhaseAPower) AS PhaseAPower,
			        
			        AVG(dv.PhaseBPower) AS PhaseBPower,
			        AVG(dv.PhaseCPower) AS PhaseCPower,
			        AVG(dv.TotalPower) AS TotalPower,
			        AVG(dv.PhaseAApparentPower) AS PhaseAApparentPower,
			        AVG(dv.PhaseBApparentPower) AS PhaseBApparentPower,
			        AVG(dv.PhaseCApparentPower) AS PhaseCApparentPower,
			        AVG(dv.TotalApparentPower) AS TotalApparentPower,
			        AVG(dv.PhaseAReactivePower) AS PhaseAReactivePower,
			        AVG(dv.PhaseBReactivePower) AS PhaseBReactivePower,
			        AVG(dv.PhaseCReactivePower) AS PhaseCReactivePower,
			        
			        AVG(dv.TotalReactivePower) AS TotalReactivePower,
			        AVG(dv.PhaseAPowerFactor) AS PhaseAPowerFactor,
			        AVG(dv.PhaseBPowerFactor) AS PhaseBPowerFactor,
			        AVG(dv.PhaseCPowerFactor) AS PhaseCPowerFactor,
			        AVG(dv.PowerFactor) AS PowerFactor,
			        AVG(dv.Frequency) AS Frequency,
			        AVG(dv.TotalForwardActiveEnergy) AS TotalForwardActiveEnergy,
			        AVG(dv.TotalReverseActiveEnergy) AS TotalReverseActiveEnergy,
			        AVG(dv.TotalForwardReactiveEnergy) AS TotalForwardReactiveEnergy,
			        AVG(dv.TotalReverseReactiveEnergy) AS TotalReverseReactiveEnergy,
			        
			        AVG(dv.PhaseAForwardActiveEnergy) AS PhaseAForwardActiveEnergy,
			        AVG(dv.PhaseBForwardActiveEnergy) AS PhaseBForwardActiveEnergy,
			        AVG(dv.PhaseCForwardActiveEnergy) AS PhaseCForwardActiveEnergy,
			        AVG(dv.PhaseAReverseActiveEnergy) AS PhaseAReverseActiveEnergy,
			        AVG(dv.PhaseBReverseActiveEnergy) AS PhaseBReverseActiveEnergy,
			        AVG(dv.PhaseCReverseActiveEnergy) AS PhaseCReverseActiveEnergy,
			        AVG(dv.PhaseAForwardReactiveEnergy) AS PhaseAForwardReactiveEnergy,
			        AVG(dv.PhaseBForwardReactiveEnergy) AS PhaseBForwardReactiveEnergy,
			        AVG(dv.PhaseCForwardReactiveEnergy) AS PhaseCForwardReactiveEnergy,
			        AVG(dv.PhaseAReverseReactiveEnergy) AS PhaseAReverseReactiveEnergy,
			        
			        AVG(dv.PhaseBReverseReactiveEnergy) AS PhaseBReverseReactiveEnergy,
			        AVG(dv.PhaseCReverseReactiveEnergy) AS PhaseCReverseReactiveEnergy,
			        AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
			      </if>
				
				<if test="table_name == 'model_meter_ion_8600'">
					AVG(dv.VlnA) AS VlnA,
					AVG(dv.VlnB) AS VlnB,
					AVG(dv.VlnC) AS VlnC,
					AVG(dv.VlnAve) AS VlnAve,
					AVG(dv.VllAb) AS VllAb,
					AVG(dv.VllAc) AS VllAc,
					AVG(dv.VllCa) AS VllCa,
					AVG(dv.IA) AS IA,
					AVG(dv.IB) AS IB,
					AVG(dv.IC) AS IC,
					AVG(dv.IAve) AS IAve,
					
					AVG(dv.VUnbal) AS VUnbal,
					AVG(dv.IUnbal) AS IUnbal,
					AVG(dv.Freq) AS Freq,
					AVG(dv.I4) AS I4,
					AVG(dv.kWA) AS kWA,
					AVG(dv.kWB) AS kWB,
					AVG(dv.kWC) AS kWC,
					AVG(dv.kWTot) AS kWTot,
					AVG(dv.kVARA) AS kVARA,
					AVG(dv.kVARB) AS kVARB,
					
					AVG(dv.kVARC) AS kVARC,
					AVG(dv.kVARTot) AS kVARTot,
					AVG(dv.KVAA) AS KVAA,
					AVG(dv.KVAB) AS KVAB,
					AVG(dv.KVAC) AS KVAC,
					AVG(dv.KVATot) AS KVATot,
					AVG(dv.PFSignA) AS PFSignA,
					AVG(dv.PFSignB) AS PFSignB,
					AVG(dv.PFSignC) AS PFSignC,
					AVG(dv.PFSignTot) AS PFSignTot,
					
					AVG(dv.VIIAveMx) AS VIIAveMx,
					AVG(dv.IAveMx) AS IAveMx,
					AVG(dv.kWTotMx) AS kWTotMx,
					AVG(dv.kVARTotMx) AS kVARTotMx,
					AVG(dv.kVATotMx) AS kVATotMx,
					AVG(dv.FreqMx) AS FreqMx,
					AVG(dv.VIIAveMn) AS VIIAveMn,
					AVG(dv.IAveMn) AS IAveMn,
					AVG(dv.FreqMn) AS FreqMn,
					AVG(dv.kWSdDelRec) AS kWSdDelRec,
					
					AVG(dv.kVASdDelRec) AS kVASdDelRec,
					AVG(dv.kVARSdDelRec) AS kVARSdDelRec,
					AVG(dv.kWSdMxDR) AS kWSdMxDR,
					AVG(dv.kVASdMxDR) AS kVASdMxDR,
					AVG(dv.kVARSdMxDR) AS kVARSdMxDR,
					AVG(dv.PhaseRev) AS PhaseRev,
					AVG(dv.kWhDel) AS kWhDel,
					AVG(dv.kWhRec) AS kWhRec,
					AVG(dv.kWhDelRec) AS kWhDelRec,
					AVG(dv.kWhDel_Rec) AS kWhDel_Rec,
					AVG(dv.kVARhDel) AS kVARhDel,
					AVG(dv.kVARhRec) AS kVARhRec,
					AVG(dv.kVARhDelRec) AS kVARhDelRec,
					AVG(dv.kVARhDel_Rec) AS kVARhDel_Rec,
					AVG(dv.kVAhDelRec) AS kVAhDelRec,
					AVG(dv.V1THDMx) AS V1THDMx,
					AVG(dv.V2THDMx) AS V2THDMx,
					AVG(dv.V3THDMx) AS  V3THDMx,
					AVG(dv.I1THDMx) AS I1THDMx,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>

				<if test="table_name == 'model_meter_ion_8600v1'">
					AVG(dv.Frequency) AS Frequency,
					AVG(dv.VAN) AS VAN,
					AVG(dv.VlnC) AS VlnC,
					AVG(dv.VlnAve) AS VlnAve,
					AVG(dv.VllAb) AS VllAb,
					AVG(dv.VllAc) AS VllAc,
					AVG(dv.VllCa) AS VllCa,
					AVG(dv.IA) AS IA,
					AVG(dv.IB) AS IB,
					AVG(dv.IC) AS IC,
					AVG(dv.IAve) AS IAve,
					
					AVG(dv.VUnbal) AS VUnbal,
					AVG(dv.IUnbal) AS IUnbal,
					AVG(dv.Freq) AS Freq,
					AVG(dv.I4) AS I4,
					AVG(dv.kWA) AS kWA,
					AVG(dv.kWB) AS kWB,
					AVG(dv.kWC) AS kWC,
					AVG(dv.kWTot) AS kWTot,
					AVG(dv.kVARA) AS kVARA,
					AVG(dv.kVARB) AS kVARB,
					
					AVG(dv.kVARC) AS kVARC,
					AVG(dv.kVARTot) AS kVARTot,
					AVG(dv.KVAA) AS KVAA,
					AVG(dv.KVAB) AS KVAB,
					AVG(dv.KVAC) AS KVAC,
					AVG(dv.KVATot) AS KVATot,
					AVG(dv.PFSignA) AS PFSignA,
					AVG(dv.PFSignB) AS PFSignB,
					AVG(dv.PFSignC) AS PFSignC,
					AVG(dv.PFSignTot) AS PFSignTot,
					
					AVG(dv.VIIAveMx) AS VIIAveMx,
					AVG(dv.IAveMx) AS IAveMx,
					AVG(dv.kWTotMx) AS kWTotMx,
					AVG(dv.kVARTotMx) AS kVARTotMx,
					AVG(dv.kVATotMx) AS kVATotMx,
					AVG(dv.FreqMx) AS FreqMx,
					AVG(dv.VIIAveMn) AS VIIAveMn,
					AVG(dv.IAveMn) AS IAveMn,
					AVG(dv.FreqMn) AS FreqMn,
					AVG(dv.kWSdDelRec) AS kWSdDelRec,
					
					AVG(dv.kVASdDelRec) AS kVASdDelRec,
					AVG(dv.kVARSdDelRec) AS kVARSdDelRec,
					AVG(dv.kWSdMxDR) AS kWSdMxDR,
					AVG(dv.kVASdMxDR) AS kVASdMxDR,
					AVG(dv.kVARSdMxDR) AS kVARSdMxDR,
					AVG(dv.PhaseRev) AS PhaseRev,
					AVG(dv.kWhDel) AS kWhDel,
					AVG(dv.kWhRec) AS kWhRec,
					AVG(dv.kWhDelRec) AS kWhDelRec,
					AVG(dv.kWhDel_Rec) AS kWhDel_Rec,
					AVG(dv.kVARhDel) AS kVARhDel,
					AVG(dv.kVARhRec) AS kVARhRec,
					AVG(dv.kVARhDelRec) AS kVARhDelRec,
					AVG(dv.kVARhDel_Rec) AS kVARhDel_Rec,
					AVG(dv.kVAhDelRec) AS kVAhDelRec,
					AVG(dv.V1THDMx) AS V1THDMx,
					AVG(dv.V2THDMx) AS V2THDMx,
					AVG(dv.V3THDMx) AS  V3THDMx,
					AVG(dv.I1THDMx) AS I1THDMx,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				
				<if test="table_name == 'model_aes_tx_inverter'">
					AVG(dv.pt0) AS pt0,
					AVG(dv.pt1) AS pt1,
					AVG(dv.pt2) AS pt2,
					AVG(dv.pt3) AS pt3,
					AVG(dv.pt4) AS pt4,
					AVG(dv.pt5) AS pt5,
					AVG(dv.pt6) AS pt6,
					AVG(dv.pt7) AS pt7,
					AVG(dv.pt8) AS pt8,
					AVG(dv.pt9) AS pt9,
					AVG(dv.pt10) AS pt10,
					
					AVG(dv.pt11) AS pt11,
					AVG(dv.pt12) AS pt12,
					AVG(dv.pt13) AS pt13,
					AVG(dv.pt14) AS pt14,
					AVG(dv.pt15) AS pt15,
					AVG(dv.pt16) AS pt16,
					AVG(dv.pt17) AS pt17,
					AVG(dv.pt18) AS pt18,
					AVG(dv.pt19) AS pt19,
					AVG(dv.pt20) AS pt20,
					
					AVG(dv.pt21) AS pt21,
					AVG(dv.pt22) AS pt22,
					AVG(dv.pt23) AS pt23,
					AVG(dv.pt24) AS pt24,
					AVG(dv.pt25) AS pt25,
					AVG(dv.pt26) AS pt26,
					AVG(dv.pt27) AS pt27,
					AVG(dv.pt28) AS pt28,
					AVG(dv.pt29) AS pt29,
					AVG(dv.pt30) AS pt30,
					
					AVG(dv.pt31) AS pt31,
					AVG(dv.pt32) AS pt32,
					AVG(dv.pt33) AS pt33,
					AVG(dv.pt34) AS pt34,
					AVG(dv.pt35) AS pt35,
					AVG(dv.pt36) AS pt36,
					AVG(dv.pt37) AS pt37,
					AVG(dv.pt38) AS pt38,
					AVG(dv.pt39) AS pt39,
					AVG(dv.pt40) AS pt40,
					
					AVG(dv.pt41) AS pt41,
					AVG(dv.pt42) AS pt42,
					AVG(dv.pt43) AS pt43,
					AVG(dv.pt44) AS pt44,
					AVG(dv.pt45) AS pt45,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_sma_inverter_stp62us41'">
					AVG(dv.VA_phsA) AS VA_phsA,
					AVG(dv.VA_phsB) AS VA_phsB,
					AVG(dv.DcMs_Vol0) AS DcMs_Vol0,
					AVG(dv.DcMs_Vol1) AS DcMs_Vol1,
					AVG(dv.DcMs_Vol2) AS DcMs_Vol2,
					AVG(dv.DcMs_Vol3) AS DcMs_Vol3,
					AVG(dv.DcMs_Vol4) AS DcMs_Vol4,
					AVG(dv.DcMs_Vol5) AS DcMs_Vol5,
					AVG(dv.TotW_Pv) AS TotW_Pv,
					AVG(dv.Isolation_LeakRis) AS Isolation_LeakRis,
					AVG(dv.PhV_phsC) AS PhV_phsC,
					AVG(dv.GridMs_Hz) AS GridMs_Hz,
					AVG(dv.W_phsB) AS W_phsB,
					AVG(dv.GridMs_TotW) AS GridMs_TotW,
					AVG(dv.W_phsC) AS W_phsC,
					AVG(dv.VAr_phsC) AS VAr_phsC,
					AVG(dv.DcMs_Watt0) AS DcMs_Watt0,
					AVG(dv.DcMs_Watt1) AS DcMs_Watt1,
					AVG(dv.DcMs_Watt2) AS DcMs_Watt2,
					AVG(dv.DcMs_Watt3) AS DcMs_Watt3,
					AVG(dv.DcMs_Watt4) AS DcMs_Watt4,
					AVG(dv.DcMs_Watt5) AS DcMs_Watt5,
					AVG(dv.W_phsA) AS W_phsA,
					AVG(dv.VAr_phsB) AS VAr_phsB,
					AVG(dv.TotVAr_Pv) AS TotVAr_Pv,
					AVG(dv.PhV_phsA2B) AS PhV_phsA2B,
					AVG(dv.VAr_phsA) AS VAr_phsA,
					AVG(dv.GridMs_TotVA) AS GridMs_TotVA,
					AVG(dv.GridMs_TotVAr) AS GridMs_TotVAr,
					AVG(dv.DcMs_Amp0) AS DcMs_Amp0,
					AVG(dv.DcMs_Amp1) AS DcMs_Amp1,
					AVG(dv.DcMs_Amp2) AS DcMs_Amp2,
					AVG(dv.DcMs_Amp3) AS DcMs_Amp3,
					AVG(dv.DcMs_Amp4) AS DcMs_Amp4,
					AVG(dv.DcMs_Amp5) AS DcMs_Amp5,
					AVG(dv.PhV_phsB2C) AS PhV_phsB2C,
					AVG(dv.PhV_phsB) AS PhV_phsB,
					AVG(dv.A_phsA) AS A_phsA,
					
					AVG(dv.PhV_phsC2A) AS PhV_phsC2A,
					AVG(dv.A_phsB) AS A_phsB,
					AVG(dv.PhV_phsA) AS PhV_phsA,
					AVG(dv.VA_phsC) AS VA_phsC,
					AVG(dv.A_phsC) AS A_phsC,
					AVG(dv.Metering_TotWhOut) AS Metering_TotWhOut,
					AVG(dv.Operation_GriSwCnt) AS Operation_GriSwCnt,
					AVG(dv.TotWhOut_Pv) AS TotWhOut_Pv,
					AVG(dv.Metering_TotFeedTms) AS Metering_TotFeedTms,
					AVG(dv.Metering_TotOpTms) AS Metering_TotOpTms,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				
				<if test="table_name == 'model_sma_inverter_stp30000tlus10'">
					AVG(dv.GridMs_TotVAr) AS GridMs_TotVAr,
					AVG(dv.DcMs_Watt0) AS DcMs_Watt0,
					AVG(dv.DcMs_Watt1) AS DcMs_Watt1,
					AVG(dv.W_phsA) AS W_phsA,
					AVG(dv.W_phsB) AS W_phsB,
					AVG(dv.W_phsC) AS W_phsC,
					AVG(dv.GridMs_TotW) AS GridMs_TotW,
					AVG(dv.GridMs_TotVA) AS GridMs_TotVA,
					AVG(dv.A_phsA) AS A_phsA,
					AVG(dv.A_phsB) AS A_phsB,
					AVG(dv.A_phsC) AS A_phsC,
					AVG(dv.GridMs_Hz) AS GridMs_Hz,
					AVG(dv.Isolation_LeakRis) AS Isolation_LeakRis,
					AVG(dv.DcMs_Vol0) AS DcMs_Vol0,
					AVG(dv.DcMs_Vol1) AS DcMs_Vol1,
					AVG(dv.PhV_phsA) AS PhV_phsA,
					AVG(dv.PhV_phsB) AS PhV_phsB,
					AVG(dv.PhV_phsC) AS PhV_phsC,
					AVG(dv.DcMs_Amp0) AS DcMs_Amp0,
					AVG(dv.DcMs_Amp1) AS DcMs_Amp1,
					
					AVG(dv.TotVAr_Pv) AS TotVAr_Pv,
					AVG(dv. VAr_phsA) AS VAr_phsA,
					AVG(dv.VAr_phsB) AS VAr_phsB,
					AVG(dv.VAr_phsC) AS VAr_phsC,
					AVG(dv.VA_phsA) AS VA_phsA,
					AVG(dv.VA_phsB) AS VA_phsB,
					AVG(dv.VA_phsC) AS VA_phsC,
					AVG(dv.TotW_Pv) AS TotW_Pv,
					
					
					AVG(dv.Metering_TotFeedTms) AS Metering_TotFeedTms,
					AVG(dv.Operation_GriSwCnt) AS Operation_GriSwCnt,
					AVG(dv.Metering_TotOpTms) AS Metering_TotOpTms,
					AVG(dv. Metering_TotWhOut) AS Metering_TotWhOut,
					AVG(dv.TotWhOut_Pv) AS TotWhOut_Pv,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				
				<if test="table_name == 'model_campell_scientific_meter1'">
					IF(AVG(dv.Meter1_ACPower) <![CDATA[<]]> 0, 0, AVG(dv.Meter1_ACPower)) AS Meter1_ACPower,
					AVG(dv.Total_Energy) AS Total_Energy,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_campell_scientific_meter2'">
					IF(AVG(dv.Meter2_ACPower) <![CDATA[<]]> 0, 0, AVG(dv.Meter2_ACPower)) AS Meter2_ACPower,
					AVG(dv.Total_Energy) AS Total_Energy,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_campell_scientific_meter3'">
					IF(AVG(dv.Meter3_ACPower) <![CDATA[<]]> 0, 0, AVG(dv.Meter3_ACPower)) AS Meter3_ACPower,
					AVG(dv.Total_Energy) AS Total_Energy,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_campell_scientific_meter4'">
					IF(AVG(dv.Meter4_ACPower) <![CDATA[<]]> 0, 0, AVG(dv.Meter4_ACPower)) AS Meter4_ACPower,
					AVG(dv.Total_Energy) AS Total_Energy,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				
				<if test="table_name == 'model_adam4017ws_class8110_nelis190'">
					AVG(dv.AmbientTemp) AS AmbientTemp,
					AVG(dv.PVPanelTemp) AS PVPanelTemp,
					AVG(dv.PVPanelTemp1) AS PVPanelTemp1,
					AVG(dv.WindSpeed) AS WindSpeed,
					
					IF(AVG(dv.POACMP11) <![CDATA[<]]> 0, 0, AVG(dv.POACMP11)) AS POACMP11,
					
					IF(AVG(dv.IrradiancePOA) <![CDATA[<]]> 0, 0, AVG(dv.IrradiancePOA)) AS IrradiancePOA,
					AVG(dv.IMTInternalTemp) AS IMTInternalTemp,
					AVG(dv.PVPanelTemp2) AS PVPanelTemp2,
					AVG(dv.code_ch0) AS code_ch0,
					AVG(dv.code_ch1) AS code_ch1,
					AVG(dv.code_ch2) AS code_ch2,
					AVG(dv.code_ch3) AS code_ch3,
					AVG(dv.code_ch4) AS code_ch4,
					AVG(dv.code_ch5) AS code_ch5,
					AVG(dv.code_ch6) AS code_ch6,
					AVG(dv.code_ch7) AS code_ch7,
				</if>
				
				<if test="table_name == 'model_sma_inverter_stp1200tlus10'">
					AVG(dv.Metering_TotWhOut) AS Metering_TotWhOut,
					AVG(dv.Operation_GriSwCnt) AS Operation_GriSwCnt,
					AVG(dv.Metering_TotOpTms) AS Metering_TotOpTms,
					AVG(dv.Metering_TotFeedTms) AS Metering_TotFeedTms,
					AVG(dv.Metering_GridMs_TotWhOut) AS Metering_GridMs_TotWhOut,
					
					IF(AVG(dv.GridMs_TotW) <![CDATA[<]]> 0, 0, AVG(dv.GridMs_TotW)) AS GridMs_TotW,
					
					AVG(dv.GridMs_Hz) AS GridMs_Hz,
					AVG(dv.Isolation_FltA) AS Isolation_FltA,
					AVG(dv.Isolation_LeakRis) AS Isolation_LeakRis,
					AVG(dv.DcMs_VolA) AS DcMs_VolA,
					AVG(dv.DcMs_VolB) AS DcMs_VolB,
					AVG(dv.DcMs_AmpA) AS DcMs_AmpA,
					AVG(dv.DcMs_AmpB) AS DcMs_AmpB,
					AVG(dv.GridMs_PhV_phsA) AS GridMs_PhV_phsA,
					AVG(dv.GridMs_PhV_phsB) AS GridMs_PhV_phsB,
					AVG(dv.GridMs_PhV_phsC) AS GridMs_PhV_phsC,
					AVG(dv.GridMs_A_phsA) AS GridMs_A_phsA,
					AVG(dv.GridMs_A_phsB) AS GridMs_A_phsB,
					AVG(dv.GridMs_A_phsC) AS GridMs_A_phsC,
					AVG(dv.DcMs_WattA) AS DcMs_WattA,
					AVG(dv.DcMs_WattB) AS DcMs_WattB,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_satcon_powergate_225_inverter'">
					AVG(dv.Fault1) AS Fault1,
					AVG(dv.Fault2) AS Fault2,
					AVG(dv.Fault3) AS Fault3,
					AVG(dv.Fault4) AS Fault4,
					AVG(dv.GridStatus) AS GridStatus,
					AVG(dv.Status6) AS Status6,
					AVG(dv.Status7) AS Status7,
					AVG(dv.PCSState) AS PCSState,
					AVG(dv.DCInputPower) AS DCInputPower,
					AVG(dv.DC_Link_Volts) AS DC_Link_Volts,
					AVG(dv.DCInputVoltage) AS DCInputVoltage,
					AVG(dv.DCInputCurrent) AS DCInputCurrent,
					AVG(dv.OutputKVAR) AS OutputKVAR,
					AVG(dv.OutputKW) AS OutputKW,
					AVG(dv.OutputKVA) AS OutputKVA,
					AVG(dv.Line_Volts_A_TEST) AS Line_Volts_A_TEST,
					AVG(dv.Line_Volts_B_TEST) AS Line_Volts_B_TEST,
					AVG(dv.Line_Volts_C_TEST) AS Line_Volts_C_TEST,
					AVG(dv.Line_Amps_A_TEST) AS Line_Amps_A_TEST,
					AVG(dv.Line_Amps_B_TEST) AS Line_Amps_B_TEST,
					
					AVG(dv.Line_Amps_C_TEST) AS Line_Amps_C_TEST,
					AVG(dv. NeutralCurrent) AS NeutralCurrent,
					AVG(dv.StopCode) AS StopCode,
					AVG(dv.KWHlow) AS KWHlow,
					AVG(dv.KWH) AS KWH,
					AVG(dv.PowerFactor) AS PowerFactor,
					AVG(dv.LineFreq) AS LineFreq,
					AVG(dv.OutputPowerLimit) AS OutputPowerLimit,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				
				<if test="table_name == 'model_sma_inverter_stp24ktlus10'">
					AVG(dv.Metering_TotWhOut) AS Metering_TotWhOut,
					AVG(dv.Operation_GriSwCnt) AS Operation_GriSwCnt,
					AVG(dv.Metering_TotOpTms) AS Metering_TotOpTms,
					AVG(dv.Metering_TotFeedTms) AS Metering_TotFeedTms,
					AVG(dv.Metering_GridMs_TotWhOut) AS Metering_GridMs_TotWhOut,
					
					IF(AVG(dv.GridMs_TotW) <![CDATA[<]]> 0, 0, AVG(dv.GridMs_TotW)) AS GridMs_TotW,
					
					AVG(dv.GridMs_Hz) AS GridMs_Hz,
					AVG(dv.Isolation_FltA) AS Isolation_FltA,
					AVG(dv.Isolation_LeakRis) AS Isolation_LeakRis,
					AVG(dv.DcMs_VolA) AS DcMs_VolA,
					AVG(dv.DcMs_VolB) AS DcMs_VolB,
					AVG(dv.DcMs_AmpA) AS DcMs_AmpA,
					AVG(dv.DcMs_AmpB) AS DcMs_AmpB,
					AVG(dv.DcMs_AmpA1) AS DcMs_AmpA1,
					AVG(dv.GridMs_PhV_phsA) AS GridMs_PhV_phsA,
					AVG(dv.GridMs_PhV_phsB) AS GridMs_PhV_phsB,
					AVG(dv.GridMs_PhV_phsC) AS GridMs_PhV_phsC,
					AVG(dv.GridMs_A_phsA) AS GridMs_A_phsA,
					AVG(dv.GridMs_A_phsB) AS GridMs_A_phsB,
					AVG(dv.GridMs_A_phsC) AS GridMs_A_phsC,
					AVG(dv.DcMs_WattA) AS DcMs_WattA,
					AVG(dv.DcMs_WattB) AS DcMs_WattB,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_sma_cluster_controller'">
					AVG(dv.Metering_TotWhOut) AS Metering_TotWhOut,
					AVG(dv.Operation_GriSwCnt) AS Operation_GriSwCnt,
					AVG(dv.Metering_TotOpTms) AS Metering_TotOpTms,
					AVG(dv.Metering_TotFeedTms) AS Metering_TotFeedTms,
					
					IF(AVG(dv.GridMs_TotW) <![CDATA[<]]> 0, 0, AVG(dv.GridMs_TotW)) AS GridMs_TotW,
					
					AVG(dv.GridMs_Hz) AS GridMs_Hz,
					AVG(dv.Isolation_FltA) AS Isolation_FltA,
					AVG(dv.Isolation_LeakRis) AS Isolation_LeakRis,
					AVG(dv.DcMs_VolA) AS DcMs_VolA,
					AVG(dv.DcMs_VolB) AS DcMs_VolB,
					AVG(dv.DcMs_AmpA) AS DcMs_AmpA,
					AVG(dv.DcMs_AmpB) AS DcMs_AmpB,
					AVG(dv.GridMs_PhV_phsA) AS GridMs_PhV_phsA,
					AVG(dv.GridMs_PhV_phsB) AS GridMs_PhV_phsB,
					AVG(dv.GridMs_PhV_phsC) AS GridMs_PhV_phsC,
					AVG(dv.GridMs_A_phsA) AS GridMs_A_phsA,
					AVG(dv.GridMs_A_phsB) AS GridMs_A_phsB,
					AVG(dv.GridMs_A_phsC) AS GridMs_A_phsC,
					AVG(dv.DcMs_WattA) AS DcMs_WattA,
					AVG(dv.DcMs_WattB) AS DcMs_WattB,
					AVG(dv.InOut_AnInA1) AS InOut_AnInA1,
					AVG(dv.InOut_AnInA2) AS InOut_AnInA2,
					AVG(dv.InOut_AnInA3) AS InOut_AnInA3,
					AVG(dv.InOut_AnInVol4) AS InOut_AnInVol4,
					AVG(dv.Env_ExInsol) AS Env_ExInsol,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_solaredge_inverter'">
					AVG(dv.C_DeviceAddress) AS C_DeviceAddress,
					AVG(dv.C_SunSpec_DID) AS C_SunSpec_DID,
					AVG(dv.C_SunSpec_Length) AS C_SunSpec_Length,
					AVG(dv.I_AC_Current) AS I_AC_Current,
					AVG(dv.I_AC_CurrentA) AS I_AC_CurrentA,
					AVG(dv.I_AC_CurrentB) AS I_AC_CurrentB,
					AVG(dv.I_AC_CurrentC) AS I_AC_CurrentC,
					AVG(dv.I_AC_Current_SF) AS I_AC_Current_SF,
					AVG(dv.I_AC_VoltageAB) AS I_AC_VoltageAB,
					AVG(dv.I_AC_VoltageBC) AS I_AC_VoltageBC,
					AVG(dv.I_AC_VoltageCA) AS I_AC_VoltageCA,
					AVG(dv.I_AC_VoltageAN) AS I_AC_VoltageAN,
					AVG(dv.I_AC_VoltageBN) AS I_AC_VoltageBN,
					AVG(dv.I_AC_VoltageCN) AS I_AC_VoltageCN,
					AVG(dv.I_AC_Voltage_SF) AS I_AC_Voltage_SF,
	
					IF(AVG(dv.I_AC_Power) <![CDATA[<]]> 0, 0, AVG(dv.I_AC_Power)) AS I_AC_Power,
					
					AVG(dv.I_AC_Power_SF) AS I_AC_Power_SF,
					AVG(dv.I_AC_Frequency) AS I_AC_Frequency,
					AVG(dv.I_AC_Frequency_SF) AS I_AC_Frequency_SF,
					AVG(dv.I_AC_VA) AS I_AC_VA,
					AVG(dv.I_AC_VA_SF) AS I_AC_VA_SF,
					AVG(dv.I_AC_VAR) AS I_AC_VAR,
					AVG(dv.I_AC_VAR_SF) AS I_AC_VAR_SF,
					AVG(dv.I_AC_PF) AS I_AC_PF,
					AVG(dv.I_AC_PF_SF) AS I_AC_PF_SF,
					AVG(dv.I_AC_Energy_WH) AS I_AC_Energy_WH,
					AVG(dv.I_AC_Energy_WH_SF) AS I_AC_Energy_WH_SF,
					AVG(dv.I_DC_Current) AS I_DC_Current,
					AVG(dv.I_DC_Current_SF) AS I_DC_Current_SF,
					AVG(dv.I_DC_Voltage) AS I_DC_Voltage,
					AVG(dv.I_DC_Voltage_SF) AS I_DC_Voltage_SF,
					AVG(dv.I_DC_Power) AS I_DC_Power,
					AVG(dv.I_DC_Power_SF) AS I_DC_Power_SF,
					AVG(dv.I_Temp_Sink) AS I_Temp_Sink,
					AVG(dv.I_Temp_SF) AS I_Temp_SF,
					AVG(dv.I_Status) AS I_Status,
					AVG(dv.I_Status_Vendor) AS I_Status_Vendor,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_sungrow_umg604'">
					AVG(dv.M_AC_U1) AS M_AC_U1,
					AVG(dv.M_AC_U2) AS M_AC_U2,
					AVG(dv.M_AC_U3) AS M_AC_U3,
					AVG(dv.M_AC_U_L1L2) AS M_AC_U_L1L2,
					AVG(dv.M_AC_U_L2L3) AS M_AC_U_L2L3,
					AVG(dv.M_AC_U_L3L1) AS M_AC_U_L3L1,
					AVG(dv.M_AC_I1) AS M_AC_I1,
					AVG(dv.M_AC_I2) AS M_AC_I2,
					AVG(dv.M_AC_I3) AS M_AC_I3,
					AVG(dv.M_AC_P1) AS M_AC_P1,
					AVG(dv.M_AC_P2) AS M_AC_P2,
					AVG(dv.M_AC_P3) AS M_AC_P3,
					
					IF(AVG(dv.M_AC_P) <![CDATA[<]]> 0, 0, AVG(dv.M_AC_P)) AS M_AC_P,
					
					AVG(dv.M_AC_E_M1) AS M_AC_E_M1,
					AVG(dv.M_AC_Q1) AS M_AC_Q1,
					AVG(dv.M_AC_Q2) AS M_AC_Q2,
					AVG(dv.M_AC_Q3) AS M_AC_Q3,
					AVG(dv.M_AC_Q) AS M_AC_Q,
					AVG(dv.M_AC_S1) AS M_AC_S1,
					AVG(dv.M_AC_S2) AS M_AC_S2,
					AVG(dv.M_AC_S3) AS M_AC_S3,
					AVG(dv.M_AC_S) AS M_AC_S,
					AVG(dv.M_AC_PF) AS M_AC_PF,
					AVG(dv.M_AC_F) AS M_AC_F,
					AVG(dv.M_AC_E_EXP) AS M_AC_E_EXP,
					AVG(dv.M_AC_E_IMP) AS M_AC_E_IMP,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_sungrow_sg110cx'">
					AVG(E_DAY) AS E_DAY,
					AVG(E_TOTAL) AS E_TOTAL,
					AVG(E_YEAR) AS E_YEAR,
					AVG(OT_AC_TOTAL) AS OT_AC_TOTAL,
					AVG(T_WR) AS T_WR,
					AVG(U_DC1) AS U_DC1,
					AVG(I_DC1) AS I_DC1,
					AVG(U_DC2) AS U_DC2,
					AVG(I_DC2) AS I_DC2,
					AVG(U_DC3) AS U_DC3,
					AVG(I_DC3) AS I_DC3,
					AVG(U_DC4) AS U_DC4,
					AVG(I_DC4) AS I_DC4,
					AVG(U_DC5) AS U_DC5,
					AVG(I_DC5) AS I_DC5,
					AVG(U_DC6) AS U_DC6,
					AVG(I_DC6) AS I_DC6,
					AVG(U_DC7) AS U_DC7,
					AVG(I_DC7) AS I_DC7,
					AVG(U_DC8) AS U_DC8,
					AVG(I_DC8) AS I_DC8,
					AVG(U_DC9) AS U_DC9,
					AVG(I_DC9) AS I_DC9,
					AVG(U_STR1) AS U_STR1,
					AVG(I_STR1) AS I_STR1,
					AVG(U_STR2) AS U_STR2,
					AVG(I_STR2) AS I_STR2,
					AVG(U_STR3) AS U_STR3,
					AVG(I_STR3) AS I_STR3,
					AVG(U_STR4) AS U_STR4,
					AVG(I_STR4) AS I_STR4,
					AVG(U_STR5) AS U_STR5,
					AVG(I_STR5) AS I_STR5,
					AVG(U_STR6) AS U_STR6,
					AVG(I_STR6) AS I_STR6,
					AVG(U_STR7) AS U_STR7,
					AVG(I_STR7) AS I_STR7,
					AVG(U_STR8) AS U_STR8,
					AVG(I_STR8) AS I_STR8,
					AVG(U_STR9) AS U_STR9,
					AVG(I_STR9) AS I_STR9,
					AVG(U_STR10) AS U_STR10,
					AVG(I_STR10) AS I_STR10,
					AVG(U_STR11) AS U_STR11,
					AVG(I_STR11) AS I_STR11,
					AVG(U_STR12) AS U_STR12,
					AVG(I_STR12) AS I_STR12,
					AVG(U_STR13) AS U_STR13,
					AVG(I_STR13) AS I_STR13,
					AVG(U_STR14) AS U_STR14,
					AVG(I_STR14) AS I_STR14,
					AVG(U_STR15) AS U_STR15,
					AVG(I_STR15) AS I_STR15,
					AVG(U_STR16) AS U_STR16,
					AVG(I_STR16) AS I_STR16,
					AVG(U_STR17) AS U_STR17,
					AVG(I_STR17) AS I_STR17,
					AVG(U_STR18) AS U_STR18,
					AVG(I_STR18) AS I_STR18,
					
					IF(AVG(dv.P_DC) <![CDATA[<]]> 0, 0, AVG(dv.P_DC)) AS P_DC,
					
					AVG(U_AC1) AS U_AC1,
					AVG(U_AC2) AS U_AC2,
					AVG(U_AC3) AS U_AC3,
					AVG(I_AC1) AS I_AC1,
					AVG(I_AC2) AS I_AC2,
					AVG(I_AC3) AS I_AC3,
					AVG(S_AC) AS S_AC,
					AVG(P_AC) AS P_AC,
					AVG(Q_AC) AS Q_AC,
					AVG(COS_PHI) AS COS_PHI,
					AVG(F_AC) AS F_AC,
					AVG(FT_AC_DAY) AS FT_AC_DAY,
					AVG(R_ISO) AS R_ISO,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_sungrow_sg50cx'">
					AVG(E_DAY) AS E_DAY,
					AVG(E_TOTAL) AS E_TOTAL,
					AVG(E_YEAR) AS E_YEAR,
					AVG(OT_AC_TOTAL) AS OT_AC_TOTAL,
					AVG(T_WR) AS T_WR,
					AVG(U_DC1) AS U_DC1,
					AVG(I_DC1) AS I_DC1,
					AVG(U_DC2) AS U_DC2,
					AVG(I_DC2) AS I_DC2,
					AVG(U_DC3) AS U_DC3,
					AVG(I_DC3) AS I_DC3,
					AVG(U_DC4) AS U_DC4,
					AVG(I_DC4) AS I_DC4,
					AVG(U_DC5) AS U_DC5,
					AVG(I_DC5) AS I_DC5,
					AVG(U_DC6) AS U_DC6,
					AVG(I_DC6) AS I_DC6,
					AVG(U_DC7) AS U_DC7,
					AVG(I_DC7) AS I_DC7,
					AVG(U_DC8) AS U_DC8,
					AVG(I_DC8) AS I_DC8,
					AVG(U_DC9) AS U_DC9,
					AVG(I_DC9) AS I_DC9,
					AVG(U_DC10) AS U_DC10,
					AVG(I_DC10) AS I_DC10,
					AVG(U_DC11) AS U_DC11,
					AVG(I_DC11) AS I_DC11,
					AVG(U_DC12) AS U_DC12,
					AVG(I_DC12) AS I_DC12,
					AVG(U_DC13) AS U_DC13,
					AVG(I_DC13) AS I_DC13,
					AVG(U_DC14) AS U_DC14,
					AVG(I_DC14) AS I_DC14,
					AVG(U_DC15) AS U_DC15,
					AVG(I_DC15) AS I_DC15,
					AVG(U_DC16) AS U_DC16,
					AVG(I_DC16) AS I_DC16,
					AVG(U_DC17) AS U_DC17,
					AVG(I_DC17) AS I_DC17,
					AVG(U_DC18) AS U_DC18,
					AVG(I_DC18) AS I_DC18,
					AVG(U_DC19) AS U_DC19,
					AVG(I_DC19) AS I_DC19,
					AVG(U_DC20) AS U_DC20,
					AVG(I_DC20) AS I_DC20,
				
					AVG(U_STR1) AS U_STR1,
					AVG(I_STR1) AS I_STR1,
					AVG(U_STR2) AS U_STR2,
					AVG(I_STR2) AS I_STR2,
					AVG(U_STR3) AS U_STR3,
					AVG(I_STR3) AS I_STR3,
					AVG(U_STR4) AS U_STR4,
					AVG(I_STR4) AS I_STR4,
					AVG(U_STR5) AS U_STR5,
					AVG(I_STR5) AS I_STR5,
					AVG(U_STR6) AS U_STR6,
					AVG(I_STR6) AS I_STR6,
					AVG(U_STR7) AS U_STR7,
					AVG(I_STR7) AS I_STR7,
					AVG(U_STR8) AS U_STR8,
					AVG(I_STR8) AS I_STR8,
					AVG(U_STR9) AS U_STR9,
					AVG(I_STR9) AS I_STR9,
					AVG(U_STR10) AS U_STR10,
					AVG(I_STR10) AS I_STR10,
					AVG(I_STR11) AS I_STR11,
					AVG(I_STR12) AS I_STR12,
					AVG(I_STR13) AS I_STR13,
					AVG(I_STR14) AS I_STR14,
					AVG(I_STR15) AS I_STR15,
					AVG(I_STR16) AS I_STR16,
					AVG(I_STR17) AS I_STR17,
					AVG(I_STR18) AS I_STR18,
					AVG(I_STR19) AS I_STR19,
					AVG(I_STR20) AS I_STR20,
					AVG(I_STR21) AS I_STR21,
					AVG(I_STR22) AS I_STR22,
					
					IF(AVG(dv.P_DC) <![CDATA[<]]> 0, 0, AVG(dv.P_DC)) AS P_DC,
					
					AVG(U_AC1) AS U_AC1,
					AVG(U_AC2) AS U_AC2,
					AVG(U_AC3) AS U_AC3,
					AVG(I_AC1) AS I_AC1,
					AVG(I_AC2) AS I_AC2,
					AVG(I_AC3) AS I_AC3,
					AVG(S_AC) AS S_AC,
					AVG(P_AC) AS P_AC,
					AVG(Q_AC) AS Q_AC,
					AVG(COS_PHI) AS COS_PHI,
					AVG(F_AC) AS F_AC,
					AVG(FT_AC_DAY) AS FT_AC_DAY,
					AVG(R_ISO) AS R_ISO,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_sungrow_weather_pvmet75200'">
					  AVG(dv.SRAD_D_H) AS SRAD_D_H,
				</if>
				
				<if test="table_name == 'model_sungrow_logger1000'">
			        AVG(TotalNumberOfConnectedDevices) AS TotalNumberOfConnectedDevices,
			        AVG(TotalFaultDeviceNumber) AS TotalFaultDeviceNumber,
			        IF(AVG(dv.TotalActivePower) <![CDATA[<]]> 0, 0, AVG(dv.TotalActivePower)) AS TotalActivePower,
			        AVG(DailyYield) AS DailyYield,
			        AVG(TotalReactivePower) AS TotalReactivePower,
			        AVG(TotalYield) AS TotalYield,
			        AVG(DigitalInputState) AS DigitalInputState,
			        AVG(PT1001) AS PT1001,
			        AVG(PT1002) AS PT1002,
			        AVG(ADC1Voltage) AS ADC1Voltage,
			        AVG(ADC1Current) AS ADC1Current,
			        AVG(ADC2Voltage) AS ADC2Voltage,
			        AVG(ADC2Current) AS ADC2Current,
			        AVG(ADC3Voltage) AS ADC3Voltage,
			        AVG(ADC3Current) AS ADC3Current,
			        AVG(ADC4Voltage) AS ADC4Voltage,
			        AVG(ADC4Current) AS ADC4Current,
			        AVG(Longitude) AS Longitude,
			        AVG(Latitude) AS Latitude,
			        AVG(MaxTotalRatedActivePower) AS MaxTotalRatedActivePower,
			        AVG(MinTotalRatedActivePower) AS MinTotalRatedActivePower,
			        AVG(MaxTotalRatedReactivePower) AS MaxTotalRatedReactivePower,
			        AVG(MinTotalRatedReactivePower) AS MinTotalRatedReactivePower,
			        AVG(ActualTotalInverterActivePower) AS ActualTotalInverterActivePower,
			        AVG(ActualTotalInverterReactivePower) AS ActualTotalInverterReactivePower,
			        AVG(OnOffStateOfDataLogger) AS OnOffStateOfDataLogger,
			        AVG(LockingStateOfDataLogger) AS LockingStateOfDataLogger,
			        AVG(MinAdjustableActivePower) AS MinAdjustableActivePower,
			        AVG(MaxAdjustableActivePower) AS MaxAdjustableActivePower,
			        AVG(MinAdjustableReactivePower) AS MinAdjustableReactivePower,
			        AVG(MaxAdjustableReactivePower) AS MaxAdjustableReactivePower,
			        AVG(RatedActivePower) AS RatedActivePower,
			        AVG(RatedReactivePower) AS RatedReactivePower,
			        AVG(NumberOfOnGridDevices) AS NumberOfOnGridDevices,
			        AVG(NumberOfOffGridDevices) AS NumberOfOffGridDevices,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
		      </if>
				
				<if test="table_name == 'model_imtsolar_tmodul_class8006'">
					  AVG(dv.ModuleTemperature) AS ModuleTemperature,
				</if>
				
				<if test="table_name == 'model_hukseflux_sr30d1_deviceclass_v0'">
					  
					  IF(AVG(dv.IrradianceTcs) <![CDATA[<]]> 0, 0, AVG(dv.IrradianceTcs)) AS IrradianceTcs,
					  
				      AVG(dv.IrradianceUs) AS IrradianceUs,
				      AVG(dv.SensorBodyTemperature) AS SensorBodyTemperature,
				      AVG(dv.SensorElectricalResistance) AS SensorElectricalResistance,
				      AVG(dv.ScalingFactorIrradiance) AS ScalingFactorIrradiance,
				      AVG(dv.ScalingFactorTemperature) AS ScalingFactorTemperature,
				      AVG(dv.SensorSerialNumber) AS SensorSerialNumber,
				      AVG(dv.SensorSensitivity) AS SensorSensitivity,
				      AVG(dv.SensorCalibrationDate) AS SensorCalibrationDate,
				      AVG(dv.InternalHumidity) AS InternalHumidity,
				      AVG(dv.TiltAngle) AS TiltAngle,
				      AVG(dv.TiltAngleaverage) AS TiltAngleaverage,
				      AVG(dv.FanSpeedRPM) AS FanSpeedRPM,
				      AVG(dv.HeaterCurrent) AS HeaterCurrent,
				      AVG(dv.FanCurrent) AS FanCurrent,
				</if>
				
				
				<if test="table_name == 'model_sunny_central_class9775_inverter'">
					  AVG(dv.Fault) AS Fault,
				      AVG(dv.OperatingState) AS OperatingState,
				      AVG(dv.Status) AS Status,
				      AVG(dv.EventNumber) AS EventNumber,
				      AVG(dv.LifekWhTotal) AS LifekWhTotal,
				      AVG(dv.PVCurrent) AS PVCurrent,
				      AVG(dv.PVVoltage) AS PVVoltage,
				      AVG(dv.PVPower) AS PVPower,
				      AVG(dv.ACPower) AS ACPower,
				      AVG(dv.ACVoltageAB) AS ACVoltageAB,
				      AVG(dv.ACVoltageBC) AS ACVoltageBC,
				      AVG(dv.ACVoltageCA) AS ACVoltageCA,
				      AVG(dv.ACCurrent) AS ACCurrent,
				      AVG(dv.ACCurrentL1) AS ACCurrentL1,
				      AVG(dv.ACCurrentL2) AS ACCurrentL2,
				      AVG(dv.ACCurrentL3) AS ACCurrentL3,
				      AVG(dv.ACFrequency) AS ACFrequency,
				      AVG(dv.ReactivePower) AS ReactivePower,
				      AVG(dv.ApparentPower) AS ApparentPower,
				      AVG(dv.PowerFactor) AS PowerFactor,
				      AVG(dv.ReactivePowerMode) AS ReactivePowerMode,
				      AVG(dv.PowerFactorFeedback) AS PowerFactorFeedback,
				      AVG(dv.OperatingMode) AS OperatingMode,
				      AVG(dv.ACPowerLimit) AS ACPowerLimit,
				      AVG(dv.ACVoltage) AS ACVoltage,
				      AVG(dv.HeatSinkTemp) AS HeatSinkTemp,
				      AVG(dv.InteriorTemperature) AS InteriorTemperature,
				      AVG(dv.ExternalTemperature) AS ExternalTemperature,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				
				<if test="table_name == 'model_tti_tracker'">
					  AVG(dv.Mode) AS Mode,
				      AVG(dv.SubMode) AS SubMode,
				      AVG(dv.MotorStatus) AS MotorStatus,
				      AVG(dv.ReadAngle) AS ReadAngle,
				      AVG(dv.SetAngle) AS SetAngle,
				      AVG(dv.OptimalAngle) AS OptimalAngle,
				      AVG(dv.WindSpeed) AS WindSpeed,
				      AVG(dv.TTiTime) AS TTiTime,
				      AVG(dv.MotorFault) AS MotorFault,
				      AVG(dv.RemoteInterfaceFault) AS RemoteInterfaceFault,
				      AVG(dv.InclinometerFault) AS InclinometerFault,
				      AVG(dv.ModbusAddress) AS ModbusAddress,
				      AVG(dv.FirmwareVersion) AS FirmwareVersion,
				      AVG(dv.Units) AS Units,
				      AVG(dv.InclinometerOffset) AS InclinometerOffset,
				      AVG(dv.MotorStopDelay) AS MotorStopDelay,
				      AVG(dv.CoastAngle) AS CoastAngle,
				      AVG(dv.MaxRotationWest) AS MaxRotationWest,
				      AVG(dv.MaxRotationEast) AS MaxRotationEast,
				      AVG(dv.SoftAngleLimitsEnabled) AS SoftAngleLimitsEnabled,
				      AVG(dv.MotorMonitorSampleTime) AS MotorMonitorSampleTime,
				      AVG(dv.MotorMonitorMinAngle) AS MotorMonitorMinAngle,
				      AVG(dv.EnableMotorMonitor) AS EnableMotorMonitor,
				      AVG(dv.DeadBand) AS DeadBand,
				      AVG(dv.NightTimeStowAltitude) AS NightTimeStowAltitude,
				      AVG(dv.NightTimeStowAngle) AS NightTimeStowAngle,
				      AVG(dv.PoleSpacing) AS PoleSpacing,
				      AVG(dv.ModuleWidth) AS ModuleWidth,
				      AVG(dv.MotorPolarity) AS MotorPolarity,
				      AVG(dv.InclinometerPolarity) AS InclinometerPolarity,
				      AVG(dv.Latitude) AS Latitude,
				      AVG(dv.Longitude) AS Longitude,
				      AVG(dv.LoggingInterval) AS LoggingInterval,
				      AVG(dv.HelicalVarationAngle) AS HelicalVarationAngle,
				      AVG(dv.DriveArmSlope) AS DriveArmSlope,
				      AVG(dv.WindConstant) AS WindConstant,
				      AVG(dv.WindStowSpeed) AS WindStowSpeed,
				      AVG(dv.WindStowTime) AS WindStowTime,
				</if>
				
				<if test="table_name == 'model_chint_solectria_inverter_class9725'">
					  AVG(dv.PowerOnOff) AS PowerOnOff,
				      AVG(dv.PActiveSet) AS PActiveSet,
				      AVG(dv.PFactorSet) AS PFactorSet,
				      AVG(dv.PReactiveSet) AS PReactiveSet,
				      AVG(dv.GridVMax) AS GridVMax,
				      AVG(dv.GridVmaxTripT) AS GridVmaxTripT,
				      AVG(dv.GridVMin) AS GridVMin,
				      AVG(dv.GridVminTripT) AS GridVminTripT,
				      AVG(dv.GridFMax) AS GridFMax,
				      AVG(dv.GridFMin) AS GridFMin,
				      AVG(dv.GridFTripT) AS GridFTripT,
				      AVG(dv.ActivePower) AS ActivePower,
				      AVG(dv.PowerFactor) AS PowerFactor,
				      AVG(dv.Risomin) AS Risomin,
				      AVG(dv.PVStartVol) AS PVStartVol,
				      AVG(dv.DCIMax) AS DCIMax,
				      AVG(dv.TambientMax) AS TambientMax,
				      AVG(dv.TmoduleMax) AS TmoduleMax,
				      AVG(dv.OffsetDiffMax) AS OffsetDiffMax,
				      AVG(dv.GridVolUnbalance) AS GridVolUnbalance,
				      AVG(dv.SoftPowerStep) AS SoftPowerStep,
				      AVG(dv.TotalEnergyToEnergy) AS TotalEnergyToEnergy,
				      AVG(dv.TotalEnergyToday) AS TotalEnergyToday,
				      AVG(dv.InverterEfficiency) AS InverterEfficiency,
				      AVG(dv.PowerFactor1) AS PowerFactor1,
				      AVG(dv.MaxActivePowerToday) AS MaxActivePowerToday,
				      AVG(dv.RunTimeToGrid) AS RunTimeToGrid,
				      
				      IF(AVG(dv.AC_ActivePower) <![CDATA[<]]> 0, 0, AVG(dv.AC_ActivePower)) AS AC_ActivePower,
				      
				      AVG(dv.AC_ApparentPower) AS AC_ApparentPower,
				      AVG(dv.GridVoltageUab) AS GridVoltageUab,
				      AVG(dv.GridVoltageUbc) AS GridVoltageUbc,
				      AVG(dv.GridVoltageUca) AS GridVoltageUca,
				      AVG(dv.GridA_PhaseCurrent) AS GridA_PhaseCurrent,
				      AVG(dv.GridB_PhaseCurrent) AS GridB_PhaseCurrent,
				      AVG(dv.GridC_PhaseCurrent) AS GridC_PhaseCurrent,
				      AVG(dv.PV1_Voltage) AS PV1_Voltage,
				      AVG(dv.PV1_Current) AS PV1_Current,
				      AVG(dv.PV2_Voltage) AS PV2_Voltage,
				      AVG(dv.PV2_Current) AS PV2_Current,
				      AVG(dv.PV3_Voltage) AS PV3_Voltage,
				      AVG(dv.PV3_Current) AS PV3_Current,
				      AVG(dv.Grid_Frequency) AS Grid_Frequency,
				      AVG(dv.ModuleTemp) AS ModuleTemp,
				      AVG(dv.InternalTemp) AS InternalTemp,
				      AVG(dv.TransformerTemp) AS TransformerTemp,
				      AVG(dv.PermanentFaultCode) AS PermanentFaultCode,
				      AVG(dv.WarnCode) AS WarnCode,
				      AVG(dv.FaultCode0) AS FaultCode0,
				      AVG(dv.FaultCode1) AS FaultCode1,
				      AVG(dv.FaultCode2) AS FaultCode2,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_pv_powered_35_50_260_500kw_inverter'">
					AVG(dv.VoltageAN) AS VoltageAN,
					AVG(dv.VoltageBN) AS VoltageBN,
					AVG(dv.VoltageCN) AS VoltageCN,
					AVG(dv.CurrentA) AS CurrentA,
					AVG(dv.CurrentB) AS CurrentB,
					AVG(dv.CurrentC) AS CurrentC,
					AVG(dv.DCInputVoltage) AS DCInputVoltage,
					AVG(dv.DCInputCurrent) AS DCInputCurrent,
					AVG(dv.LineFrequency) AS LineFrequency,
					
					IF(AVG(dv.OutputGeneration) <![CDATA[<]]> 0, 0, AVG(dv.OutputGeneration)) AS OutputGeneration,
					
					AVG(dv.TotalEnergyGeneration) AS TotalEnergyGeneration,
					AVG(dv.PVInputVoltage) AS PVInputVoltage,
					AVG(dv.InputGenerationCalculated) AS InputGenerationCalculated,
					AVG(dv.InverterOperatingStatus) AS InverterOperatingStatus,
					AVG(dv.MainFault) AS MainFault,
					AVG(dv.DriveFault) AS DriveFault,
					AVG(dv.VoltageFault) AS VoltageFault,
					AVG(dv.GridFault) AS GridFault,
					AVG(dv.TemperatureFault) AS TemperatureFault,
					AVG(dv.SystemFault) AS SystemFault,
					AVG(dv.SystemWarnings) AS SystemWarnings,
					AVG(dv.PVMStatusCodes) AS PVMStatusCodes,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_shark100'">
					  AVG(dv.volts_a_n) AS volts_a_n,
				      AVG(dv.volts_b_n) AS volts_b_n,
				      AVG(dv.volts_c_n) AS volts_c_n,
				      AVG(dv.volts_a_b) AS volts_a_b,
				      AVG(dv.volts_c_a) AS volts_c_a,
				      AVG(dv.amps_a) AS amps_a,
				      AVG(dv.amps_b) AS amps_b,
				      AVG(dv.amps_c) AS amps_c,
				      
				      IF(AVG(dv.watts_3ph_total) <![CDATA[<]]> 0, 0, AVG(dv.watts_3ph_total)) AS watts_3ph_total,
				      
				      AVG(dv.vars_3ph_total) AS vars_3ph_total,
				      AVG(dv.vas_3ph_total) AS vas_3ph_total,
				      AVG(dv.power_factor_3ph_total) AS power_factor_3ph_total,
				      AVG(dv.frequency) AS frequency,
				      AVG(dv.neutral_current) AS neutral_current,
				      AVG(dv.w_hours_received) AS w_hours_received,
				      AVG(dv.w_hours_delivered) AS w_hours_delivered,
				      AVG(dv.w_hours_net) AS w_hours_net,
				      AVG(dv.w_hours_total) AS w_hours_total,
				      AVG(dv.var_hours_positive) AS var_hours_positive,
				      AVG(dv.var_hours_negative) AS var_hours_negative,
				      AVG(dv.var_hours_net) AS var_hours_net,
				      AVG(dv.var_hours_total) AS var_hours_total,
				      AVG(dv.va_hours_total) AS va_hours_total,
				      AVG(dv.amps_a_average) AS amps_a_average,
				      AVG(dv.amps_b_average) AS amps_b_average,
				      AVG(dv.amps_c_average) AS amps_c_average,
				      AVG(dv.positive_watts_3ph_average) AS positive_watts_3ph_average,
				      AVG(dv.positive_vars_3ph_average) AS positive_vars_3ph_average,
				      AVG(dv.negative_watts_3ph_average) AS negative_watts_3ph_average,
				      AVG(dv.negative_vars_3ph_average) AS negative_vars_3ph_average,
				      AVG(dv.vas_3ph_average) AS vas_3ph_average,
				      AVG(dv.positive_pf_3ph_average) AS positive_pf_3ph_average,
				      AVG(dv.negative_pf_3ph_average) AS negative_pf_3ph_average,
				      AVG(dv.volts_a_n_min) AS volts_a_n_min,
				      AVG(dv.volts_b_n_min) AS volts_b_n_min,
				      AVG(dv.volts_c_n_min) AS volts_c_n_min,
				      AVG(dv.volts_a_b_min) AS volts_a_b_min,
				      AVG(dv.volts_b_c_min) AS volts_b_c_min,
				      AVG(dv.volts_c_a_min) AS volts_c_a_min,
				      AVG(dv.amps_a_min_avg_demand) AS amps_a_min_avg_demand,
				      AVG(dv.amps_b_min_avg_demand) AS amps_b_min_avg_demand,
				      AVG(dv.amps_c_min_avg_demand) AS amps_c_min_avg_demand,
				      AVG(dv.positive_watts_3ph_min_avg_demand) AS positive_watts_3ph_min_avg_demand,
				      AVG(dv.positive_vars_3ph_min_avg_demand) AS positive_vars_3ph_min_avg_demand,
				      AVG(dv.negative_watts_3ph_min_avg_demand) AS negative_watts_3ph_min_avg_demand,
				      AVG(dv.negative_vars_3ph_min_avg_demand) AS negative_vars_3ph_min_avg_demand,
				      AVG(dv.vas_3ph_min_avg_demand) AS vas_3ph_min_avg_demand,
				      AVG(dv.positive_pf_3ph_min_avg_demand) AS positive_pf_3ph_min_avg_demand,
				      AVG(dv.negative_pf_3ph_min_avg_demand) AS negative_pf_3ph_min_avg_demand,
				      AVG(dv.frequency_min) AS frequency_min,
				      AVG(dv.volts_a_n_max) AS volts_a_n_max,
				      AVG(dv.volts_b_n_max) AS volts_b_n_max,
				      AVG(dv.volts_c_n_max) AS volts_c_n_max,
				      AVG(dv.volts_a_b_max) AS volts_a_b_max,
				      AVG(dv.volts_b_c_max) AS volts_b_c_max,
				      AVG(dv.volts_c_a_max) AS volts_c_a_max,
				      AVG(dv.amps_a_max_avg_demand) AS amps_a_max_avg_demand,
				      AVG(dv.amps_b_max_avg_demand) AS amps_b_max_avg_demand,
				      AVG(dv.amps_c_max_avg_demand) AS amps_c_max_avg_demand,
				      AVG(dv.positive_watts_3ph_max_avg_demand) AS positive_watts_3ph_max_avg_demand,
				      AVG(dv.positive_vars_3ph_max_avg_demand) AS positive_vars_3ph_max_avg_demand,
				      AVG(dv.negative_watts_3ph_max_avg_demand) AS negative_watts_3ph_max_avg_demand,
				      AVG(dv.negative_vars_3ph_max_avg_demand) AS negative_vars_3ph_max_avg_demand,
				      AVG(dv.vas_3ph_max_avg_demand) AS vas_3ph_max_avg_demand,
				      AVG(dv.positive_pf_3ph_max_avg_demand) AS positive_pf_3ph_max_avg_demand,
				      AVG(dv.negative_pf_3ph_max_avg_demand) AS negative_pf_3ph_max_avg_demand,
				      AVG(dv.frequency_max) AS frequency_max,
				      AVG(dv.volts_a_n_thd) AS volts_a_n_thd,
				      AVG(dv.volts_b_n_thd) AS volts_b_n_thd,
				      AVG(dv.volts_c_n_thd) AS volts_c_n_thd,
				      AVG(dv.amps_a_thd) AS amps_a_thd,
				      AVG(dv.amps_b_thd) AS amps_b_thd,
				      AVG(dv.amps_c_thd) AS amps_c_thd,
				      AVG(dv.phase_a_current_0th) AS phase_a_current_0th,
				      AVG(dv.phase_a_current_1st) AS phase_a_current_1st,
				      AVG(dv.phase_a_current_2nd) AS phase_a_current_2nd,
				      AVG(dv.phase_a_current_3rd) AS phase_a_current_3rd,
				      AVG(dv.phase_a_current_4th) AS phase_a_current_4th,
				      AVG(dv.phase_a_current_5th) AS phase_a_current_5th,
				      AVG(dv.phase_a_current_6th) AS phase_a_current_6th,
				      AVG(dv.phase_a_current_7th) AS phase_a_current_7th,
				      AVG(dv.phase_a_voltage_0th) AS phase_a_voltage_0th,
				      AVG(dv.phase_a_voltage_1st) AS phase_a_voltage_1st,
				      AVG(dv.phase_a_voltage_2nd) AS phase_a_voltage_2nd,
				      AVG(dv.phase_a_voltage_3rd) AS phase_a_voltage_3rd,
				      AVG(dv.phase_b_current_0th) AS phase_b_current_0th,
				      AVG(dv.phase_b_current_1st) AS phase_b_current_1st,
				      AVG(dv.phase_b_current_2nd) AS phase_b_current_2nd,
				      AVG(dv.phase_b_current_3rd) AS phase_b_current_3rd,
				      AVG(dv.phase_b_current_4th) AS phase_b_current_4th,
				      AVG(dv.phase_b_current_5th) AS phase_b_current_5th,
				      AVG(dv.phase_b_current_6th) AS phase_b_current_6th,
				      AVG(dv.phase_b_current_7th) AS phase_b_current_7th,
				      AVG(dv.phase_b_voltage_0th) AS phase_b_voltage_0th,
				      AVG(dv.phase_b_voltage_1st) AS phase_b_voltage_1st,
				      AVG(dv.phase_b_voltage_2nd) AS phase_b_voltage_2nd,
				      AVG(dv.phase_b_voltage_3rd) AS phase_b_voltage_3rd,
				      AVG(dv.phase_c_current_0th) AS phase_c_current_0th,
				      AVG(dv.phase_c_current_1st) AS phase_c_current_1st,
				      AVG(dv.phase_c_current_2nd) AS phase_c_current_2nd,
				      AVG(dv.phase_c_current_3rd) AS phase_c_current_3rd,
				      AVG(dv.phase_c_current_4th) AS phase_c_current_4th,
				      AVG(dv.phase_c_current_5th) AS phase_c_current_5th,
				      AVG(dv.phase_c_current_6th) AS phase_c_current_6th,
				      AVG(dv.phase_c_current_7th) AS phase_c_current_7th,
				      AVG(dv.phase_c_voltage_0th) AS phase_c_voltage_0th,
				      AVG(dv.phase_c_voltage_1st) AS phase_c_voltage_1st,
				      AVG(dv.phase_c_voltage_2nd) AS phase_c_voltage_2nd,
				      AVG(dv.phase_c_voltage_3rd) AS phase_c_voltage_3rd,
				      AVG(dv.angle_phase_a_current) AS angle_phase_a_current,
				      AVG(dv.angle_phase_b_current) AS angle_phase_b_current,
				      AVG(dv.angle_phase_c_current) AS angle_phase_c_current,
				      AVG(dv.angle_volts_a_b) AS angle_volts_a_b,
				      AVG(dv.angle_volts_b_c) AS angle_volts_b_c,
				      AVG(dv.angle_volts_c_a) AS angle_volts_c_a,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_kippzonen_rt1_class8009'">
					  
					  IF(AVG(dv.sensor1_data) <![CDATA[<]]> 0, 0, AVG(dv.sensor1_data)) AS sensor1_data,
					  
				      AVG(dv.panel_temperature) AS panel_temperature,
				      AVG(dv.external_power_sensor) AS external_power_sensor,
				      COUNT(dv.error_code) AS error_code,
				</if>
				<if test="table_name == 'model_ivt_solaron_ext'">
					  AVG(dv.today_kwh) AS today_kwh,
				      AVG(dv.ytd_kwh_total) AS ytd_kwh_total,
				      AVG(dv.life_kwh_total) AS life_kwh_total,
				      AVG(dv.ytd_kwh) AS ytd_kwh,
				      AVG(dv.life_kwh) AS life_kwh,
				      AVG(dv.last_15min_kwh) AS last_15min_kwh,
	
				      IF(AVG(dv.ac_power) <![CDATA[<]]> 0, 0, AVG(dv.ac_power)) AS ac_power,
				      
				      AVG(dv.ac_frequency) AS ac_frequency,
				      AVG(dv.pv_voltage) AS pv_voltage,
				      AVG(dv.pv_current) AS pv_current,
				      AVG(dv.common_mode) AS common_mode,
				      AVG(dv.coolant_temperature) AS coolant_temperature,
				      AVG(dv.reactor_temperature) AS reactor_temperature,
				      AVG(dv.cabinet_temperature) AS cabinet_temperature,
				      AVG(dv.bus_voltage) AS bus_voltage,
				      AVG(dv.ground_current) AS ground_current,
				      AVG(dv.reactive_power) AS reactive_power,
				      COUNT(dv.active_faults1) AS active_faults1,
				      COUNT(dv.active_faults2) AS active_faults2,
				      COUNT(dv.active_faults3) AS active_faults3,
				      COUNT(dv.warnings1) AS warnings1,
				      COUNT(dv.warnings2_reserved) AS warnings2_reserved,
				      COUNT(dv.warnings3_reserved) AS warnings3_reserved,
				      AVG(dv.ac_current) AS ac_current,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_pvmet_100'">
					  
					  IF(AVG(dv.TransientHorizontalIrradiance) <![CDATA[<]]> 0, 0, AVG(dv.TransientHorizontalIrradiance)) AS TransientHorizontalIrradiance,
					  IF(AVG(dv.DailyHorizontalIrradiance) <![CDATA[<]]> 0, 0, AVG(dv.DailyHorizontalIrradiance)) AS DailyHorizontalIrradiance,
					  
				      AVG(dv.AmbientTemperature) AS AmbientTemperature,
				      AVG(dv.Temperature) AS Temperature_PV_Module,
				      AVG(dv.WindAngle) AS WindAngle,
				      AVG(dv.WindSpeed) AS WindSpeed,
				</if>
				<if test="table_name == 'model_pvp_inverter'">
					  AVG(dv.total_kwh_delivered) AS total_kwh_delivered,
				      AVG(dv.volts_a_l_n) AS volts_a_l_n,
				      AVG(dv.volts_b_l_n) AS volts_b_l_n,
				      AVG(dv.volts_c_l_n) AS volts_c_l_n,
				      AVG(dv.current_a) AS current_a,
				      AVG(dv.current_b) AS current_b,
				      AVG(dv.current_c) AS current_c,
				      AVG(dv.dc_output_voltage) AS dc_output_voltage,
				      AVG(dv.dc_output_current) AS dc_output_current,
				      AVG(dv.line_frenquency) AS line_frenquency,
				      
				      IF(AVG(dv.line_kw) <![CDATA[<]]> 0, 0, AVG(dv.line_kw)) AS line_kw,
				      
				      COUNT(dv.inverter_fault_word0) AS inverter_fault_word0,
				      COUNT(dv.inverter_fault_word1) AS inverter_fault_word1,
				      COUNT(dv.inverter_fault_word2) AS inverter_fault_word2,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_imtsolar_class8000'">
					
					IF(AVG(dv.irradiance) <![CDATA[<]]> 0, 0, AVG(dv.irradiance)) AS irradiance,
					
			      	AVG(dv.tcell) AS tcell,
				</if>
				<if test="table_name == 'model_advanced_energy_solaron'">
					  AVG(dv.today_kwh) AS today_kwh,
				      AVG(dv.ytd_kwh_total) AS ytd_kwh_total,
				      AVG(dv.life_kwh_total) AS life_kwh_total,
				      AVG(dv.ytd_kwh) AS ytd_kwh,
				      AVG(dv.life_kwh) AS life_kwh,
				      AVG(dv.last_15min_kwh) AS last_15min_kwh,
				      
				      IF(AVG(dv.ac_power) <![CDATA[<]]> 0, 0, AVG(dv.ac_power)) AS ac_power,
				      
				      AVG(dv.ac_frequency) AS ac_frequency,
				      AVG(dv.pv_voltage) AS pv_voltage,
				      AVG(dv.pv_current) AS pv_current,
				      AVG(dv.ambient_temperature) AS ambient_temperature,
				      AVG(dv.coolant_temperature) AS coolant_temperature,
				      AVG(dv.reactor_temperature) AS reactor_temperature,
				      AVG(dv.cabinet_temperature) AS cabinet_temperature,
				      AVG(dv.bus_voltage) AS bus_voltage,
				      AVG(dv.ground_current) AS ground_current,
				      AVG(dv.reactive_power) AS reactive_power,
				      COUNT(dv.active_faults1) AS active_faults1,
				      COUNT(dv.active_faults2) AS active_faults2,
				      COUNT(dv.active_faults3) AS active_faults3,
				      COUNT(dv.warnings1) AS warnings1,
				      COUNT(dv.warnings2_reserved) AS warnings2_reserved,
				      COUNT(dv.warnings3_reserved) AS warnings3_reserved,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_rt1_class30000'">
					  IF(AVG(dv.sensor1_data) <![CDATA[<]]> 0, 0, AVG(dv.sensor1_data  )) AS sensor1_data,
					  
				      AVG(dv.panel_temperature) AS panel_temperature,
				      AVG(dv.external_power_sensor) AS external_power_sensor,
				      COUNT(dv.error_code) AS error_code,
				</if>
				
				
				<if test="table_name == 'model_veris_industries_e51c2_power_meter'">
					  AVG(dv.AccumulatedRealEnergyNet) AS AccumulatedRealEnergyNet,
				      AVG(dv.RealEnergyQuadrants14Import) AS RealEnergyQuadrants14Import,
				      AVG(dv.RealEnergyQuadrants23Export) AS RealEnergyQuadrants23Export,
				      AVG(dv.ReactiveEnergyQuadrant1) AS ReactiveEnergyQuadrant1,
				      AVG(dv.ReactiveEnergyQuadrant2) AS ReactiveEnergyQuadrant2,
				      AVG(dv.ReactiveEnergyQuadrant3) AS ReactiveEnergyQuadrant3,
				      AVG(dv.ReactiveEnergyQuadrant4) AS ReactiveEnergyQuadrant4,
				      AVG(dv.ApparentEnergyNet) AS ApparentEnergyNet,
				      AVG(dv.ApparentEnergyQuadrants14) AS ApparentEnergyQuadrants14,
				      AVG(dv.ApparentEnergyQuadrants23) AS ApparentEnergyQuadrants23,
				      AVG(dv.TotalNetInstantaneousRealPower) AS TotalNetInstantaneousRealPower,
				      AVG(dv.TotalNetInstantaneousReactivePower) AS TotalNetInstantaneousReactivePower,
				      AVG(dv.TotalNetInstantaneousApparentPower) AS TotalNetInstantaneousApparentPower,
				      AVG(dv.TotalPowerFactor) AS TotalPowerFactor,
				      AVG(dv.VoltageLL3pAve) AS VoltageLL3pAve,
				      AVG(dv.VoltageLN3pAve) AS VoltageLN3pAve,
				      AVG(dv.Current3pAve) AS Current3pAve,
				      AVG(dv.Frequency) AS Frequency,
				      IF(AVG(dv.TotalRealPowerPresentDemand) <![CDATA[<]]> 0, 0, AVG(dv.TotalRealPowerPresentDemand)) AS TotalRealPowerPresentDemand,
				      AVG(dv.TotalReactivePowerPresentDemand) AS TotalReactivePowerPresentDemand,
				      AVG(dv.TotalApparentPowerPresentDemand) AS TotalApparentPowerPresentDemand,
				      AVG(dv.TotalRealPowerMaxDemandImport) AS TotalRealPowerMaxDemandImport,
				      AVG(dv.TotalReactivePowerMaxDemandImport) AS TotalReactivePowerMaxDemandImport,
				      AVG(dv.TotalApparentPowerMaxDemandImport) AS TotalApparentPowerMaxDemandImport,
				      AVG(dv.TotalRealPowerMaxDemandExport) AS TotalRealPowerMaxDemandExport,
				      AVG(dv.TotalReactivePowerMaxDemandExport) AS TotalReactivePowerMaxDemandExport,
				      AVG(dv.TotalApparentPowerMaxDemandExport) AS TotalApparentPowerMaxDemandExport,
				      AVG(dv.AccumulatedRealEnergyPhaseAImport) AS AccumulatedRealEnergyPhaseAImport,
				      AVG(dv.AccumulatedRealEnergyPhaseBImport) AS AccumulatedRealEnergyPhaseBImport,
				      AVG(dv.AccumulatedRealEnergyPhaseCImport) AS AccumulatedRealEnergyPhaseCImport,
				      AVG(dv.AccumulatedRealEnergyPhaseAExport) AS AccumulatedRealEnergyPhaseAExport,
				      AVG(dv.AccumulatedRealEnergyPhaseBExport) AS AccumulatedRealEnergyPhaseBExport,
				      AVG(dv.AccumulatedRealEnergyPhaseCExport) AS AccumulatedRealEnergyPhaseCExport,
				      AVG(dv.AccumulatedQ1ReactiveEnergyPhaseAImport) AS AccumulatedQ1ReactiveEnergyPhaseAImport,
				      AVG(dv.AccumulatedQ1ReactiveEnergyPhaseBImport) AS AccumulatedQ1ReactiveEnergyPhaseBImport,
				      AVG(dv.AccumulatedQ1ReactiveEnergyPhaseCImport) AS AccumulatedQ1ReactiveEnergyPhaseCImport,
				      AVG(dv.AccumulatedQ2ReactiveEnergyPhaseAImport) AS AccumulatedQ2ReactiveEnergyPhaseAImport,
				      AVG(dv.AccumulatedQ2ReactiveEnergyPhaseBImport) AS AccumulatedQ2ReactiveEnergyPhaseBImport,
				      AVG(dv.AccumulatedQ2ReactiveEnergyPhaseCImport) AS AccumulatedQ2ReactiveEnergyPhaseCImport,
				      AVG(dv.AccumulatedQ3ReactiveEnergyPhaseAExport) AS AccumulatedQ3ReactiveEnergyPhaseAExport,
				      AVG(dv.AccumulatedQ3ReactiveEnergyPhaseBExport) AS AccumulatedQ3ReactiveEnergyPhaseBExport,
				      AVG(dv.AccumulatedQ3ReactiveEnergyPhaseCExport) AS AccumulatedQ3ReactiveEnergyPhaseCExport,
				      AVG(dv.AccumulatedQ4ReactiveEnergyPhaseAExport) AS AccumulatedQ4ReactiveEnergyPhaseAExport,
				      AVG(dv.AccumulatedQ4ReactiveEnergyPhaseBExport) AS AccumulatedQ4ReactiveEnergyPhaseBExport,
				      AVG(dv.AccumulatedQ4ReactiveEnergyPhaseCExport) AS AccumulatedQ4ReactiveEnergyPhaseCExport,
				      AVG(dv.AccumulatedApparentEnergyPhaseAImport) AS AccumulatedApparentEnergyPhaseAImport,
				      AVG(dv.AccumulatedApparentEnergyPhaseBImport) AS AccumulatedApparentEnergyPhaseBImport,
				      AVG(dv.AccumulatedApparentEnergyPhaseCImport) AS AccumulatedApparentEnergyPhaseCImport,
				      AVG(dv.AccumulatedApparentEnergyPhaseAExport) AS AccumulatedApparentEnergyPhaseAExport,
				      AVG(dv.AccumulatedApparentEnergyPhaseBExport) AS AccumulatedApparentEnergyPhaseBExport,
				      AVG(dv.AccumulatedApparentEnergyPhaseCExport) AS AccumulatedApparentEnergyPhaseCExport,
				      AVG(dv.RealPowerPhaseA) AS RealPowerPhaseA,
				      AVG(dv.RealPowerPhaseB) AS RealPowerPhaseB,
				      AVG(dv.RealPowerPhaseC) AS RealPowerPhaseC,
				      AVG(dv.ReactivePowerPhaseA) AS ReactivePowerPhaseA,
				      AVG(dv.ReactivePowerPhaseB) AS ReactivePowerPhaseB,
				      AVG(dv.ReactivePowerPhaseC) AS ReactivePowerPhaseC,
				      AVG(dv.ApparentPowerPhaseA) AS ApparentPowerPhaseA,
				      AVG(dv.ApparentPowerPhaseB) AS ApparentPowerPhaseB,
				      AVG(dv.ApparentPowerPhaseC) AS ApparentPowerPhaseC,
				      AVG(dv.PowerFactorPhaseA) AS PowerFactorPhaseA,
				      AVG(dv.PowerFactorPhaseB) AS PowerFactorPhaseB,
				      AVG(dv.PowerFactorPhaseC) AS PowerFactorPhaseC,
				      AVG(dv.VoltagePhaseAB) AS VoltagePhaseAB,
				      AVG(dv.VoltagePhaseBC) AS VoltagePhaseBC,
				      AVG(dv.VoltagePhaseAC) AS VoltagePhaseAC,
				      AVG(dv.VoltagePhaseAN) AS VoltagePhaseAN,
				      AVG(dv.VoltagePhaseBN) AS VoltagePhaseBN,
				      AVG(dv.VoltagePhaseCN) AS VoltagePhaseCN,
				      AVG(dv.CurrentPhaseA) AS CurrentPhaseA,
				      AVG(dv.CurrentPhaseB) AS CurrentPhaseB,
				      AVG(dv.CurrentPhaseC) AS CurrentPhaseC,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_veris_industries_e50c2a'">
					  AVG(dv.RealEnergyConsumption) AS RealEnergyConsumption,
				      AVG(dv.TotalInstantaneousRealPower) AS TotalInstantaneousRealPower,
				      AVG(dv.TotalInstantaneousReactivePower) AS TotalInstantaneousReactivePower,
				      AVG(dv.TotalInstantaneousApparentPower) AS TotalInstantaneousApparentPower,
				      AVG(dv.TotalPowerFactor) AS TotalPowerFactor,
				      AVG(dv.VoltageLL3pAve) AS VoltageLL3pAve,
				      AVG(dv.VoltageLN3pAve) AS VoltageLN3pAve,
				      AVG(dv.Current3pAve) AS Current3pAve,
				      AVG(dv.RealPowerPhaseA) AS RealPowerPhaseA,
				      AVG(dv.RealPowerPhaseB) AS RealPowerPhaseB,
				      AVG(dv.RealPowerPhaseC) AS RealPowerPhaseC,
				      AVG(dv.PowerFactorPhaseA) AS PowerFactorPhaseA,
				      AVG(dv.PowerFactorPhaseB) AS PowerFactorPhaseB,
				      AVG(dv.PowerFactorPhaseC) AS PowerFactorPhaseC,
				      AVG(dv.VoltagePhaseAB) AS VoltagePhaseAB,
				      AVG(dv.VoltagePhaseBC) AS VoltagePhaseBC,
				      AVG(dv.VoltagePhaseAC) AS VoltagePhaseAC,
				      AVG(dv.VoltagePhaseAN) AS VoltagePhaseAN,
				      AVG(dv.VoltagePhaseBN) AS VoltagePhaseBN,
				      AVG(dv.VoltagePhaseCN) AS VoltagePhaseCN,
				      AVG(dv.CurrentInstantaneousPhaseA) AS CurrentInstantaneousPhaseA,
				      AVG(dv.CurrentInstantaneousPhaseB) AS CurrentInstantaneousPhaseB,
				      AVG(dv.CurrentInstantaneousPhaseC) AS CurrentInstantaneousPhaseC,
				      AVG(dv.Frequency) AS Frequency,
				      AVG(dv.ApparentEnergyConsumption) AS ApparentEnergyConsumption,
				      AVG(dv.ReactiveEnergyConsumption) AS ReactiveEnergyConsumption,
				      AVG(dv.ApparentPowerPhaseA) AS ApparentPowerPhaseA,
				      AVG(dv.ApparentPowerPhaseB) AS ApparentPowerPhaseB,
				      AVG(dv.ApparentPowerPhaseC) AS ApparentPowerPhaseC,
				      AVG(dv.ReactivePowerPhaseA) AS ReactivePowerPhaseA,
				      AVG(dv.ReactivePowerPhaseB) AS ReactivePowerPhaseB,
				      AVG(dv.ReactivePowerPhaseC) AS ReactivePowerPhaseC,
				      IF(AVG(dv.TotalRealPowerPresentDemand) <![CDATA[<]]> 0, 0, AVG(dv.TotalRealPowerPresentDemand)) AS TotalRealPowerPresentDemand,
				      AVG(dv.TotalReactivePowerPresentDemand) AS TotalReactivePowerPresentDemand,
				      AVG(dv.TotalApparentPowerPresentDemand) AS TotalApparentPowerPresentDemand,
				      AVG(dv.TotalRealPowerMaxDemand) AS TotalRealPowerMaxDemand,
				      AVG(dv.TotalReactivePowerMaxDemand) AS TotalReactivePowerMaxDemand,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_satcon_pvs357_inverter'">
					  AVG(dv.Software_Identification_Number) AS Software_Identification_Number,
				      AVG(dv.Fault_Word1) AS Fault_Word1,
				      AVG(dv.Fault_Word2) AS Fault_Word2,
				      AVG(dv.Fault_Word3) AS Fault_Word3,
				      AVG(dv.Fault_Word4) AS Fault_Word4,
				      AVG(dv.Fault_Word5) AS Fault_Word5,
				      AVG(dv.Fault_Word6) AS Fault_Word6,
				      AVG(dv.Fault_Word7) AS Fault_Word7,
				      AVG(dv.Number_of_Faults) AS Number_of_Faults,
				      AVG(dv.Program_Checksum) AS Program_Checksum,
				      AVG(dv.DC_Input_Volts) AS DC_Input_Volts,
				      AVG(dv.DC_Link_Volts) AS DC_Link_Volts,
				      AVG(dv.DC_Link_Amps) AS DC_Link_Amps,
				      AVG(dv.DC_Ground_Current) AS DC_Ground_Current,
				      AVG(dv.Line_Amps_A) AS Line_Amps_A,
				      AVG(dv.Line_Amps_B) AS Line_Amps_B,
				      AVG(dv.Line_Amps_C) AS Line_Amps_C,
				      AVG(dv.Line_Amps_Average) AS Line_Amps_Average,
				      AVG(dv.Neutral_Current) AS Neutral_Current,
				      AVG(dv.Line_Volts_A) AS Line_Volts_A,
				      AVG(dv.Line_Volts_B) AS Line_Volts_B,
				      AVG(dv.Line_Volts_C) AS Line_Volts_C,
				      AVG(dv.Line_Volts_Average) AS Line_Volts_Average,
				      AVG(dv.Line_Voltage_Unbalance) AS Line_Voltage_Unbalance,
				      AVG(dv.Line_Current_Unbalance) AS Line_Current_Unbalance,
				      AVG(dv.Input_kW) AS Input_kW,
				      
				      IF(AVG(dv.Output_kw) <![CDATA[<]]> 0, 0, AVG(dv.Output_kw)) AS Output_kw,
				      
				      AVG(dv.Output_kvar) AS Output_kvar,
				      AVG(dv.Output_kva) AS Output_kva,
				      AVG(dv.Power_Factor) AS Power_Factor,
				      AVG(dv.Ground_Impedance) AS Ground_Impedance,
				      AVG(dv.String_Amps1) AS String_Amps1,
				      AVG(dv.String_Amps2) AS String_Amps2,
				      AVG(dv.String_Amps3) AS String_Amps3,
				      AVG(dv.String_Amps4) AS String_Amps4,
				      AVG(dv.String_Amps5) AS String_Amps5,
				      AVG(dv.String_Amps6) AS String_Amps6,
				      AVG(dv.String_Amps7) AS String_Amps7,
				      AVG(dv.String_Amps8) AS String_Amps8,
				      AVG(dv.String_Amps9) AS String_Amps9,
				      AVG(dv.String_Amps10) AS String_Amps10,
				      AVG(dv.String_Amps11) AS String_Amps11,
				      AVG(dv.String_Amps12) AS String_Amps12,
				      AVG(dv.String_Amps13) AS String_Amps13,
				      AVG(dv.String_Amps14) AS String_Amps14,
				      AVG(dv.String_Amps15) AS String_Amps15,
				      AVG(dv.String_Amps16) AS String_Amps16,
				      AVG(dv.String_Amps17) AS String_Amps17,
				      AVG(dv.String_Amps18) AS String_Amps18,
				      AVG(dv.String_Amps19) AS String_Amps19,
				      AVG(dv.String_Amps20) AS String_Amps20,
				      AVG(dv.String_Amps21) AS String_Amps21,
				      AVG(dv.String_Amps22) AS String_Amps22,
				      AVG(dv.String_Amps23) AS String_Amps23,
				      AVG(dv.String_Amps24) AS String_Amps24,
				      AVG(dv.String_Amps25) AS String_Amps25,
				      AVG(dv.String_Amps26) AS String_Amps26,
				      AVG(dv.String_Amps27) AS String_Amps27,
				      AVG(dv.String_Amps28) AS String_Amps28,
				      AVG(dv.String_Amps29) AS String_Amps29,
				      AVG(dv.String_Amps30) AS String_Amps30,
				      AVG(dv.String_Amps31) AS String_Amps31,
				      AVG(dv.String_Amps32) AS String_Amps32,
				      
				      
				      AVG(dv.String_Amps_Average) AS String_Amps_Average,
				      AVG(dv.String_kwh1) AS String_kwh1,
				      AVG(dv.String_kwh2) AS String_kwh2,
				      AVG(dv.String_kwh3) AS String_kwh3,
				      AVG(dv.String_kwh4) AS String_kwh4,
				      AVG(dv.String_kwh5) AS String_kwh5,
				      AVG(dv.String_kwh6) AS String_kwh6,
				      AVG(dv.String_kwh7) AS String_kwh7,
				      AVG(dv.String_kwh8) AS String_kwh8,
				      AVG(dv.String_kwh9) AS String_kwh9,
				      AVG(dv.String_kwh10) AS String_kwh10,
				      AVG(dv.String_kwh11) AS String_kwh11,
				      AVG(dv.String_kwh12) AS String_kwh12,
				      AVG(dv.String_kwh13) AS String_kwh13,
				      AVG(dv.String_kwh14) AS String_kwh14,
				      AVG(dv.String_kwh15) AS String_kwh15,
				      AVG(dv.String_kwh16) AS String_kwh16,
				      AVG(dv.String_kwh17) AS String_kwh17,
				      AVG(dv.String_kwh18) AS String_kwh18,
				      AVG(dv.String_kwh19) AS String_kwh19,
				      AVG(dv.String_kwh20) AS String_kwh20,
				      AVG(dv.String_kwh21) AS String_kwh21,
				      AVG(dv.String_kwh22) AS String_kwh22,
				      AVG(dv.String_kwh23) AS String_kwh23,
				      AVG(dv.String_kwh24) AS String_kwh24,
				      AVG(dv.String_kwh25) AS String_kwh25,
				      AVG(dv.String_kwh26) AS String_kwh26,
				      AVG(dv.String_kwh27) AS String_kwh27,
				      AVG(dv.String_kwh28) AS String_kwh28,
				      AVG(dv.String_kwh29) AS String_kwh29,
				      AVG(dv.String_kwh30) AS String_kwh30,
				      AVG(dv.String_kwh31) AS String_kwh31,
				      AVG(dv.String_kwh32) AS String_kwh32,
				      
				      AVG(dv.String_kwh_Average) AS String_kwh_Average,
				      AVG(dv.Total_kwh) AS Total_kwh,
				      AVG(dv.Total_mwh) AS Total_mwh,
				      AVG(dv.kwh_Today) AS kwh_Today,
				      AVG(dv.kwh_Yesterday) AS kwh_Yesterday,
				      AVG(dv.Total_kwh7_days) AS Total_kwh7_days,
				      AVG(dv.Total_kwh30_days) AS Total_kwh30_days,
				      AVG(dv.Average_kwh7_days) AS Average_kwh7_days,
				      AVG(dv.Average_kwh30_Days) AS Average_kwh30_Days,
				      AVG(dv.Average_Line_Frequency) AS Average_Line_Frequency,
				      AVG(dv.Average_Line_Frequency_Error) AS Average_Line_Frequency_Error,
				      AVG(dv.FPGA_Identification_Number) AS FPGA_Identification_Number,
				      AVG(dv.DC_Input_Voltage_Timer) AS DC_Input_Voltage_Timer,
				      AVG(dv.AC_Line_Voltage_Timer) AS AC_Line_Voltage_Timer,
				      AVG(dv.Operating_State) AS Operating_State,
				      AVG(dv.Internal_Air_Temperature) AS Internal_Air_Temperature,
				      AVG(dv.Inverter_Air_Temperature) AS Inverter_Air_Temperature,
				      AVG(dv.Heatsink_Temperature1) AS Heatsink_Temperature1,
				      AVG(dv.Heatsink_Temperature2) AS Heatsink_Temperature2,
				      AVG(dv.Heatsink_Temperature3) AS Heatsink_Temperature3,
				      AVG(dv.Heatsink_Temperature4) AS Heatsink_Temperature4,
				      AVG(dv.Heatsink_Temperature5) AS Heatsink_Temperature5,
				      AVG(dv.Heatsink_Temperature6) AS Heatsink_Temperature6,
				      AVG(dv.Heatsink_Maximum_Temparature1) AS Heatsink_Maximum_Temparature1,
				      AVG(dv.Fan_Speed_Command1) AS Fan_Speed_Command1,
				      AVG(dv.Heatsink_Maximum_Temperature2) AS Heatsink_Maximum_Temperature2,
				      AVG(dv.Fan_Speed_Command2) AS Fan_Speed_Command2,
				      AVG(dv.Number_of_Temperature_Feedbacks) AS Number_of_Temperature_Feedbacks,
				      AVG(dv.Serial_number_word1) AS Serial_number_word1,
				      AVG(dv.Serial_number_word2) AS Serial_number_word2,
				      AVG(dv.Serial_number_word3) AS Serial_number_word3,
				      AVG(dv.Serial_number_word4) AS Serial_number_word4,
				      AVG(dv.Number_of_Strings) AS Number_of_Strings,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_elkor_wattson_pv_meter'">
					  AVG(dv.TotalEnergyConsumption) AS TotalEnergyConsumption,
				      
				      IF(AVG(dv.TotalRealPower) <![CDATA[<]]> 0, 0, AVG(dv.TotalRealPower)) AS TotalRealPower,
				      
				      AVG(dv.TotalReactivePower) AS TotalReactivePower,
				      AVG(dv.TotalApparentPower) AS TotalApparentPower,
				      AVG(dv.AverageVoltageLN) AS AverageVoltageLN,
				      AVG(dv.AverageVoltageLL) AS AverageVoltageLL,
				      AVG(dv.AverageCurrent) AS AverageCurrent,
				      AVG(dv.TotalSystemPowerFactor) AS TotalSystemPowerFactor,
				      AVG(dv.Frequency) AS Frequency,
				      AVG(dv.SlidingWindowRealPowerDemand) AS SlidingWindowRealPowerDemand,
				      AVG(dv.VoltageAN) AS VoltageAN,
				      AVG(dv.VoltageBN) AS VoltageBN,
				      AVG(dv.VoltageCN) AS VoltageCN,
				      AVG(dv.VoltageAB) AS VoltageAB,
				      AVG(dv.VoltageBC) AS VoltageBC,
				      AVG(dv.VoltageAC) AS VoltageAC,
				      AVG(dv.CurrentA) AS CurrentA,
				      AVG(dv.CurrentB) AS CurrentB,
				      AVG(dv.CurrentC) AS CurrentC,
				      AVG(dv.RealPowerA) AS RealPowerA,
				      AVG(dv.RealPowerB) AS RealPowerB,
				      AVG(dv.RealPowerC) AS RealPowerC,
				      AVG(dv.ReactivePowerA) AS ReactivePowerA,
				      
				      AVG(dv.ReactivePowerB) AS ReactivePowerB,
				      AVG(dv.ReactivePowerC) AS ReactivePowerC,
				      AVG(dv.ApparentPowerA) AS ApparentPowerA,
				      AVG(dv.ApparentPowerB) AS ApparentPowerB,
				      AVG(dv.ApparentPowerC) AS ApparentPowerC,
				      AVG(dv.PowerFactorA) AS PowerFactorA,
				      AVG(dv.PowerFactorB) AS PowerFactorB,
				      AVG(dv.PowerFactorC) AS PowerFactorC,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_w_kipp_zonen_rt1'">
					AVG(dv.DeviceType) AS DeviceType,
			    	AVG(dv.DataModelVersion) AS DataModelVersion,
			    	AVG(dv.OperationalMode) AS OperationalMode,
			    	AVG(dv.StatusFlags) AS StatusFlags,
			    	
			    	IF(AVG(dv.SunPOATempComp) <![CDATA[<]]> 0, 0, AVG(dv.SunPOATempComp  )) AS SunPOATempComp,
			    	
			    	AVG(dv.PanelTemperature) AS PanelTemperature,
			    	AVG(dv.ExtPowerSensor) AS ExtPowerSensor,
			    	AVG(dv.BatchNumber) AS BatchNumber,
			    	AVG(dv.SerialNumber) AS SerialNumber,
			    	AVG(dv.CalibrationDateYYMMDD) AS CalibrationDateYYMMDD,
				</if>
				<if test="table_name == 'model_elkor_production_meter'">
					
					IF(AVG(dv.ActivePowerTotal) <![CDATA[<]]> 0, 0, AVG(dv.ActivePowerTotal)) AS ActivePowerTotal,
					
			    	AVG(dv.ReactivePowerTotal) AS ReactivePowerTotal,
			    	AVG(dv.ApparentPowerTotal) AS ApparentPowerTotal,
			    	AVG(dv.VoltageAverage) AS VoltageAverage,
			    	AVG(dv.VoltageLLAverage) AS VoltageLLAverage,
			    	AVG(dv.CurrentAverage) AS CurrentAverage,
			    	AVG(dv.SystemPowerFactor) AS SystemPowerFactor,
			    	AVG(dv.SystemFrequency) AS SystemFrequency,
			    	AVG(dv.VoltageAverageAngle) AS VoltageAverageAngle,
			    	AVG(dv.SystemQuadrant) AS SystemQuadrant,
			    	AVG(dv.VoltageA) AS VoltageA,
			    	AVG(dv.VoltageB) AS VoltageB,
			    	AVG(dv.VoltageC) AS VoltageC,
			    	AVG(dv.VoltageAB) AS VoltageAB,
			    	AVG(dv.VoltageBC) AS VoltageBC,
			    	AVG(dv.VoltageAC) AS VoltageAC,
			    	AVG(dv.CurrentA) AS CurrentA,
			    	AVG(dv.CurrentB) AS CurrentB,
			    	AVG(dv.CurrentC) AS CurrentC,
			    	AVG(dv.ActivePowerA) AS ActivePowerA,
			    	AVG(dv.ActivePowerB) AS ActivePowerB,
			    	AVG(dv.ActivePowerC) AS ActivePowerC,
			    	AVG(dv.ReactivePowerA) AS ReactivePowerA,
			    	AVG(dv.ReactivePowerB) AS ReactivePowerB,
			    	AVG(dv.ReactivePowerC) AS ReactivePowerC,
			    	AVG(dv.ApparentPowerA) AS ApparentPowerA,
			    	AVG(dv.ApparentPowerB) AS ApparentPowerB,
			    	AVG(dv.ApparentPowerC) AS ApparentPowerC,
			    	AVG(dv.PowerFactorA) AS PowerFactorA,
			    	AVG(dv.PowerFactorB) AS PowerFactorB,
			    	AVG(dv.PowerFactorC) AS PowerFactorC,
			    	AVG(dv.VoltageAngleAB) AS VoltageAngleAB,
			    	AVG(dv.VoltageAngleBC) AS VoltageAngleBC,
			    	AVG(dv.VoltageAngleCA) AS VoltageAngleCA,
			    	AVG(dv.QuadrantA) AS QuadrantA,
			    	AVG(dv.QuadrantB) AS QuadrantB,
			    	AVG(dv.QuadrantC) AS QuadrantC,
			    	AVG(dv.SlidingWindowPower) AS SlidingWindowPower,
			    	AVG(dv.NetTotalEnergy) AS NetTotalEnergy,
			    	AVG(dv.TotalNetApparentEnergy) AS TotalNetApparentEnergy,
			    	AVG(dv.TotalImportEnergy) AS TotalImportEnergy,
			    	AVG(dv.TotalExportEnergy) AS TotalExportEnergy,
			    	AVG(dv.TotalImportApparentEnergy) AS TotalImportApparentEnergy,
			    	AVG(dv.TotalExportApparentEnergy) AS TotalExportApparentEnergy,
			    	AVG(dv.Q1TotalReactiveEnergy) AS Q1TotalReactiveEnergy,
			    	AVG(dv.Q2TotalReactiveEnergy) AS Q2TotalReactiveEnergy,
			    	AVG(dv.Q3TotalReactiveEnergy) AS Q3TotalReactiveEnergy,
			    	AVG(dv.Q4TotalReactiveEnergy) AS Q4TotalReactiveEnergy,
			    	AVG(dv.Q1Q2TotalInductiveReactiveEnergy) AS Q1Q2TotalInductiveReactiveEnergy,
			    	AVG(dv.Q3Q4TotalCapacitiveReactiveEnergy) AS Q3Q4TotalCapacitiveReactiveEnergy,
			    	AVG(dv.NetEnergyA) AS NetEnergyA,
			    	AVG(dv.NetEnergyB) AS NetEnergyB,
			    	AVG(dv.NetEnergyC) AS NetEnergyC,
			    	AVG(dv.NetApparentEnergyA) AS NetApparentEnergyA,
			    	AVG(dv.NetApparentEnergyB) AS NetApparentEnergyB,
			    	AVG(dv.NetApparentEnergyC) AS NetApparentEnergyC,
			    	AVG(dv.ImportEnergyA) AS ImportEnergyA,
			    	AVG(dv.ImportEnergyB) AS ImportEnergyB,
			    	AVG(dv.ImportEnergyC) AS ImportEnergyC,
			    	AVG(dv.ExportEnergyA) AS ExportEnergyA,
			    	AVG(dv.ExportEnergyB) AS ExportEnergyB,
			    	AVG(dv.ExportEnergyC) AS ExportEnergyC,
			    	AVG(dv.ImportApparentEnergyA) AS ImportApparentEnergyA,
			    	AVG(dv.ImportApparentEnergyB) AS ImportApparentEnergyB,
			    	AVG(dv.ImportApparentEnergyC) AS ImportApparentEnergyC,
			    	AVG(dv.ExportApparentEnergyA) AS ExportApparentEnergyA,
			    	AVG(dv.ExportApparentEnergyB) AS ExportApparentEnergyB,
			    	AVG(dv.ExportApparentEnergyC) AS ExportApparentEnergyC,
			    	AVG(dv.Q1ReactiveEnergyA) AS Q1ReactiveEnergyA,
			    	AVG(dv.Q1ReactiveEnergyB) AS Q1ReactiveEnergyB,
			    	AVG(dv.Q1ReactiveEnergyC) AS Q1ReactiveEnergyC,
			    	AVG(dv.Q2ReactiveEnergyA) AS Q2ReactiveEnergyA,
			    	AVG(dv.Q2ReactiveEnergyB) AS Q2ReactiveEnergyB,
			    	AVG(dv.Q2ReactiveEnergyC) AS Q2ReactiveEnergyC,
			    	AVG(dv.Q3ReactiveEnergyA) AS Q3ReactiveEnergyA,
			    	AVG(dv.Q3ReactiveEnergyB) AS Q3ReactiveEnergyB,
			    	AVG(dv.Q3ReactiveEnergyC) AS Q3ReactiveEnergyC,
			    	AVG(dv.Q4ReactiveEnergyA) AS Q4ReactiveEnergyA,
			    	AVG(dv.Q4ReactiveEnergyB) AS Q4ReactiveEnergyB,
			    	AVG(dv.Q4ReactiveEnergyC) AS Q4ReactiveEnergyC,
					
					AVG(dv.nvmActivePower) AS nvmActivePower,
					AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_abb_trio_class6210'">
					  AVG(dv.AuroraType) AS AuroraType,
				      AVG(dv.GridType) AS GridType,
				      AVG(dv.TransformerType) AS TransformerType,
				      AVG(dv.StatesByte0) AS StatesByte0,
				      AVG(dv.StatesByte1) AS StatesByte1,
				      AVG(dv.StatesByte2) AS StatesByte2,
				      AVG(dv.StatesByte3) AS StatesByte3,
				      AVG(dv.StatesByte4) AS StatesByte4,
				      AVG(dv.TotalEnergy) AS TotalEnergy,
				      AVG(dv.GridVoltage) AS GridVoltage,
				      AVG(dv.GridCurrent) AS GridCurrent,
				      
				      IF(AVG(dv.GridPower) <![CDATA[<]]> 0, 0, AVG(dv.GridPower)) AS GridPower,
				      
				      AVG(dv.Frequency) AS Frequency,
				      AVG(dv.Input1Power) AS Input1Power,
				      AVG(dv.Input1Voltage) AS Input1Voltage,
				      AVG(dv.Input1Current) AS Input1Current,
				      AVG(dv.Input2Power) AS Input2Power,
				      AVG(dv.Input2Voltage) AS Input2Voltage,
				      AVG(dv.Input2Current) AS Input2Current,
				      AVG(dv.InverterTemperature) AS InverterTemperature,
				      AVG(dv.BooseterTemperature) AS BooseterTemperature,
				      AVG(dv.IslolationResistance) AS IslolationResistance,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				<if test="table_name == 'model_lufft_class8020'">
					  AVG(dv.RelativeHumidityActual) AS RelativeHumidityActual,
				      AVG(dv.RelativeHumidityMin) AS RelativeHumidityMin,
				      AVG(dv.RelativeHumidityMax) AS RelativeHumidityMax,
				      AVG(dv.RelativeHumidityAvg) AS RelativeHumidityAvg,
				      AVG(dv.RelativeAirPressureActual) AS RelativeAirPressureActual,
				      AVG(dv.RelativeAirPressureMin) AS RelativeAirPressureMin,
				      AVG(dv.RelativeAirPressureMax) AS RelativeAirPressureMax,
				      AVG(dv.RelativeAirPressureAvg) AS RelativeAirPressureAvg,
				      AVG(dv.WindDirectionActual) AS WindDirectionActual,
				      AVG(dv.WindDirectionMin) AS WindDirectionMin,
				      AVG(dv.WindDirectionMax) AS WindDirectionMax,
				      AVG(dv.WindDirectionVct) AS WindDirectionVct,
				      AVG(dv.WindDirectionFast) AS WindDirectionFast,
				      AVG(dv.WindDirectionCompassCorrected) AS WindDirectionCompassCorrected,
				      AVG(dv.Compass) AS Compass,
				      AVG(dv.PrecipitationType) AS PrecipitationType,
				      AVG(dv.WindMeasurementQuality) AS WindMeasurementQuality,
				      
				      IF(AVG(dv.IrradianceActual) <![CDATA[<]]> 0, 0, AVG(dv.IrradianceActual * 0.1 )) AS IrradianceActual,
				      
				      AVG(dv.IrradianceMin) AS IrradianceMin,
				      AVG(dv.IrradianceMax) AS IrradianceMax,
				      AVG(dv.IrradianceAvg) AS IrradianceAvg,
				      AVG(dv.AirTemperatureActual) AS AirTemperatureActual,
				      AVG(dv.AirTemperatureMin) AS AirTemperatureMin,
				      AVG(dv.AirTemperatureMax) AS AirTemperatureMax,
				      AVG(dv.AirTemperatureAvg) AS AirTemperatureAvg,
				      AVG(dv.DewPointActual) AS DewPointActual,
				      AVG(dv.DewPointMin) AS DewPointMin,
				      AVG(dv.DewPointMax) AS DewPointMax,
				      AVG(dv.DewPointAvg) AS DewPointAvg,
				      AVG(dv.WindChillTemperature) AS WindChillTemperature,
				      AVG(dv.HeatingTemperatureWind) AS HeatingTemperatureWind,
				      AVG(dv.HeatingTemperatureR2S) AS HeatingTemperatureR2S,
				      AVG(dv.WindSpeedActual) AS WindSpeedActual,
				      AVG(dv.WindSpeedMin) AS WindSpeedMin,
				      AVG(dv.WindSpeedMax) AS WindSpeedMax,
				      AVG(dv.WindSpeedAvg) AS WindSpeedAvg,
				      AVG(dv.WindSpeedVct) AS WindSpeedVct,
				      AVG(dv.WindSpeedFast) AS WindSpeedFast,
				      AVG(dv.PrecipitationQuantityAbsolute) AS PrecipitationQuantityAbsolute,
				      AVG(dv.PrecipitationQuantityDifferential) AS PrecipitationQuantityDifferential,
				      AVG(dv.PrecipitationIntensity) AS PrecipitationIntensity,
				      AVG(dv.AbsoluteHumidityActual) AS AbsoluteHumidityActual,
				      AVG(dv.AbsoluteHumidityMin) AS AbsoluteHumidityMin,
				      AVG(dv.AbsoluteHumidityMax) AS AbsoluteHumidityMax,
				      AVG(dv.AbsoluteHumidityAvg) AS AbsoluteHumidityAvg,
				      AVG(dv.MixingRatioActual) AS MixingRatioActual,
				      AVG(dv.MixingRatioMin) AS MixingRatioMin,
				      AVG(dv.MixingRatioMax) AS MixingRatioMax,
				      AVG(dv.MixingRatioAvg) AS MixingRatioAvg,
				      AVG(dv.AbsoluteAirPressureActual) AS AbsoluteAirPressureActual,
				      AVG(dv.AbsoluteAirPressureMin) AS AbsoluteAirPressureMin,
				      AVG(dv.AbsoluteAirPressureMax) AS AbsoluteAirPressureMax,
				      AVG(dv.AbsoluteAirPressureAvg) AS AbsoluteAirPressureAvg,
				      AVG(dv.WindSpeedStandardDeviation) AS WindSpeedStandardDeviation,
				      AVG(dv.WindDirectionStandardDeviation) AS WindDirectionStandardDeviation,
				      AVG(dv.WetBulbTemperature) AS WetBulbTemperature,
				      AVG(dv.SpecificEnthalpy) AS SpecificEnthalpy,
				      AVG(dv.AirDensityActual) AS AirDensityActual,
				      AVG(dv.LeafWetnessActual) AS LeafWetnessActual,
				      AVG(dv.LeafWetnessMin) AS LeafWetnessMin,
				      AVG(dv.LeafWetnessMax) AS LeafWetnessMax,
				      AVG(dv.LeafWetnessAvg) AS LeafWetnessAvg,
				      AVG(dv.LeafWetnessState) AS LeafWetnessState,
				      AVG(dv.ExternalTemperature) AS ExternalTemperature,
				      AVG(dv.WindValueQualityFast) AS WindValueQualityFast,
				</if>
				<if test="table_name == 'model_lufft_ws501_umb_weather'">
					  AVG(dv.RelativeHumidityActual) AS RelativeHumidityActual,
				      AVG(dv.RelativeHumidityMin) AS RelativeHumidityMin,
				      AVG(dv.RelativeHumidityMax) AS RelativeHumidityMax,
				      AVG(dv.RelativeHumidityAvg) AS RelativeHumidityAvg,
				      AVG(dv.RelativeAirPressureActual) AS RelativeAirPressureActual,
				      AVG(dv.RelativeAirPressureMin) AS RelativeAirPressureMin,
				      AVG(dv.RelativeAirPressureMax) AS RelativeAirPressureMax,
				      AVG(dv.RelativeAirPressureAvg) AS RelativeAirPressureAvg,
				      AVG(dv.WindDirectionActual) AS WindDirectionActual,
				      AVG(dv.WindDirectionMin) AS WindDirectionMin,
				      AVG(dv.WindDirectionMax) AS WindDirectionMax,
				      AVG(dv.WindDirectionVct) AS WindDirectionVct,
				      AVG(dv.WindDirectionFast) AS WindDirectionFast,
				      AVG(dv.WindDirectionCompassCorrected) AS WindDirectionCompassCorrected,
				      AVG(dv.Compass) AS Compass,
				      AVG(dv.WindMeasurementQuality) AS WindMeasurementQuality,
				      AVG(dv.PrecipitationType) AS PrecipitationType,
				      
				      IF(AVG(dv.GlobalRadiation) <![CDATA[<]]> 0, 0, AVG(dv.GlobalRadiation)) AS GlobalRadiation,
				      
				      AVG(dv.GlobalRadiation2) AS GlobalRadiation2,
				      AVG(dv.GlobalRadiation3) AS GlobalRadiation3,
				      AVG(dv.GlobalRadiation4) AS GlobalRadiation4,
				      AVG(dv.AirTemperatureCActual) AS AirTemperatureCActual,
				      AVG(dv.AirTemperatureCMin) AS AirTemperatureCMin,
				      AVG(dv.AirTemperatureCMax) AS AirTemperatureCMax,
				      AVG(dv.AirTemperatureCAvg) AS AirTemperatureCAvg,
				      AVG(dv.DewPointActual) AS DewPointActual,
				      AVG(dv.DewPointMin) AS DewPointMin,
				      AVG(dv.DewPointMax) AS DewPointMax,
				      AVG(dv.DewPointAvg) AS DewPointAvg,
				      AVG(dv.WindChillTemperature) AS WindChillTemperature,
				      AVG(dv.HeatingTemperatureWind) AS HeatingTemperatureWind,
				      AVG(dv.HeatingTemperatureR2S) AS HeatingTemperatureR2S,
				      AVG(dv.WindSpeedActual) AS WindSpeedActual,
				      AVG(dv.WindSpeedMin) AS WindSpeedMin,
				      AVG(dv.WindSpeedMax) AS WindSpeedMax,
				      AVG(dv.WindSpeedAvg) AS WindSpeedAvg,
				      AVG(dv.WindSpeedVct) AS WindSpeedVct,
				      AVG(dv.WindSpeedFast) AS WindSpeedFast,
				      AVG(dv.PrecipitationAbsolute) AS PrecipitationAbsolute,
				      AVG(dv.PrecipitationDifferential) AS PrecipitationDifferential,
				      AVG(dv.PrecipitationIntensity) AS PrecipitationIntensity,
				      AVG(dv.AirTemperatureFActual) AS AirTemperatureFActual,
				      AVG(dv.AirTemperatureFMin) AS AirTemperatureFMin,
				      AVG(dv.AirTemperatureFMax) AS AirTemperatureFMax,
				      AVG(dv.AirTemperatureFAvg) AS AirTemperatureFAvg,
				      AVG(dv.ExternalTemperatureC) AS ExternalTemperatureC,
				      AVG(dv.ExternalTemperatureF) AS ExternalTemperatureF,
				</if>
				<if test="table_name == 'model_solectria_sgi_226ivt'">
					  AVG(dv.DCVoltage) AS DCVoltage,
				      
				      IF(AVG(dv.ACPowerOutput) <![CDATA[<]]> 0, 0, AVG(dv.ACPowerOutput)) AS ACPowerOutput,
				      
				      AVG(dv.ACGridFrequency) AS ACGridFrequency,
				      AVG(dv.ACPowerStageCurrent) AS ACPowerStageCurrent,
				      AVG(dv.L1toL2ACVoltage) AS L1toL2ACVoltage,
				      AVG(dv.L2toL3ACVoltage) AS L2toL3ACVoltage,
				      AVG(dv.L1toL3ACVoltage) AS L1toL3ACVoltage,
				      AVG(dv.PhaseSequence) AS PhaseSequence,
				      AVG(dv.CumulativeACEnergy) AS CumulativeACEnergy,
				      AVG(dv.CumulativeOngridHours) AS CumulativeOngridHours,
				      AVG(dv.FanOntimeHours) AS FanOntimeHours,
				      AVG(dv.ACContactorCycles) AS ACContactorCycles,
				      AVG(dv.SlaveID) AS SlaveID,
				      AVG(dv.CriticalAlarms) AS CriticalAlarms,
				      AVG(dv.InformativeAlarms) AS InformativeAlarms,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_xantrex_gt100_250_500'">
					  AVG(dv.VAB) AS VAB,
				      AVG(dv.VBC) AS VBC,
				      AVG(dv.VCA) AS VCA,
				      AVG(dv.CurrentA) AS CurrentA,
				      AVG(dv.CurrentB) AS CurrentB,
				      AVG(dv.CurrentC) AS CurrentC,
				      
				      IF(AVG(dv.ReadPower) <![CDATA[<]]> 0, 0, AVG(dv.ReadPower)) AS ReadPower,
				      
				      AVG(dv.PVVoltage) AS PVVoltage,
				      AVG(dv.PVCurrent) AS PVCurrent,
				      AVG(dv.PVPower) AS PVPower,
				      AVG(dv.GridFrequency) AS GridFrequency,
				      AVG(dv.SystemState) AS SystemState,
				      AVG(dv.GoalState) AS GoalState,
				      AVG(dv.FaultCode) AS FaultCode,
				      AVG(dv.AccumulatedEnergy) AS AccumulatedEnergy,
				      AVG(dv.RMatrixTemp) AS RMatrixTemp,
				      AVG(dv.LMatrixTemp) AS LMatrixTemp,
				      AVG(dv.IntakeAirTemperature) AS IntakeAirTemperature,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_xantrex_inverter'">
					  AVG(dv.VAB) AS VAB,
				      AVG(dv.VBC) AS VBC,
				      AVG(dv.VCA) AS VCA,
				      AVG(dv.CurrentA) AS CurrentA,
				      AVG(dv.CurrentB) AS CurrentB,
				      AVG(dv.CurrentC) AS CurrentC,
				      
				      IF(AVG(dv.ReadPower) <![CDATA[<]]> 0, 0, AVG(dv.ReadPower)) AS ReadPower,
				      
				      AVG(dv.PVVoltage) AS PVVoltage,
				      AVG(dv.PVCurrent) AS PVCurrent,
				      AVG(dv.PVPower) AS PVPower,
				      AVG(dv.GridFrequency) AS GridFrequency,
				      AVG(dv.SystemState) AS SystemState,
				      AVG(dv.GoalState) AS GoalState,
				      AVG(dv.FaultCode) AS FaultCode,
				      AVG(dv.kWh) AS kWh,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_ae1000nx_class9644'">
					  AVG(dv.LastRestart) AS LastRestart,
				      AVG(dv.Uptime) AS Uptime,
				      AVG(dv.Year) AS Year,
				      AVG(dv.Month) AS Month,
				      AVG(dv.Day) AS Day,
				      AVG(dv.Hour) AS Hour,
				      AVG(dv.Minutes) AS Minutes,
				      AVG(dv.Seconds) AS Seconds,
				      AVG(dv.CurrentTime) AS CurrentTime,
				      
				      IF(AVG(dv.ACPower) <![CDATA[<]]> 0, 0, AVG(dv.ACPower)) AS ACPower,
				      
				      AVG(dv.ACFrequency) AS ACFrequency,
				      AVG(dv.PVVoltage) AS PVVoltage,
				      AVG(dv.PVCurrent) AS PVCurrent,
				      AVG(dv.CommonMode) AS CommonMode,
				      AVG(dv.AmbientTemperature) AS AmbientTemperature,
				      AVG(dv.CoolantTemperature) AS CoolantTemperature,
				      AVG(dv.ReactorTemperature) AS ReactorTemperature,
				      AVG(dv.CabinetTemperature) AS CabinetTemperature,
				      AVG(dv.BusVoltage) AS BusVoltage,
				      AVG(dv.GroundCurrent) AS GroundCurrent,
				      AVG(dv.ReactivePower) AS ReactivePower,
				      AVG(dv.ACCurrent) AS ACCurrent,
				      AVG(dv.TodaykWh) AS TodaykWh,
				      AVG(dv.YTDkWhTotal) AS YTDkWhTotal,
				      AVG(dv.LifekWhTotal) AS LifekWhTotal,
				      AVG(dv.YTDkWh) AS YTDkWh,
				      AVG(dv.LifekWh) AS LifekWh,
				      AVG(dv.Last15MinkWh) AS Last15MinkWh,
				      AVG(dv.TimeStamp15Minutes) AS TimeStamp15Minutes,
				      AVG(dv.State) AS State,
				      AVG(dv.Limits) AS Limits,
				      AVG(dv.MasterFault) AS MasterFault,
				      AVG(dv.MasterWarning) AS MasterWarning,
				      AVG(dv.ArrayFault) AS ArrayFault,
				      AVG(dv.ArrayWarning) AS ArrayWarning,
				      AVG(dv.GridFault) AS GridFault,
				      AVG(dv.GridWarning) AS GridWarning,
				      AVG(dv.SystemFault) AS SystemFault,
				      AVG(dv.SystemWarning) AS SystemWarning,
				      AVG(dv.DriveFault) AS DriveFault,
				      AVG(dv.DriveWarning) AS DriveWarning,
				      AVG(dv.TemperatureFault) AS TemperatureFault,
				      AVG(dv.TemperatureWarning) AS TemperatureWarning,
				      AVG(dv.CoolingSystemFault) AS CoolingSystemFault,
				      AVG(dv.CoolingSystemWarning) AS CoolingSystemWarning,
				      AVG(dv.ElectricInterlockFault) AS ElectricInterlockFault,
				      AVG(dv.ElectricInterlockWarning) AS ElectricInterlockWarning,
				      AVG(dv.PowerSupplyFault) AS PowerSupplyFault,
				      AVG(dv.PowerSupplyWarning) AS PowerSupplyWarning,
				      AVG(dv.RequestSetACPowerLimit) AS RequestSetACPowerLimit,
				      AVG(dv.LowerRangeOfACPowerLimit) AS LowerRangeOfACPowerLimit,
				      AVG(dv.UpperRangeOfACPowerLimit) AS UpperRangeOfACPowerLimit,
				      AVG(dv.RequestSetInstantaneousReactivePowerSetPoint) AS RequestSetInstantaneousReactivePowerSetPoint,
				      AVG(dv.LowerRangeOfInstantaneousReactivePowerSetPoint) AS LowerRangeOfInstantaneousReactivePowerSetPoint,
				      AVG(dv.UpperRangeOfInstantaneousReactivePowerSetPoint) AS UpperRangeOfInstantaneousReactivePowerSetPoint,
				      AVG(dv.EnableDisableTheUnit) AS EnableDisableTheUnit,
				      AVG(dv.SetReadReactivePowerMode) AS SetReadReactivePowerMode,
				      AVG(dv.SetReadPACLimit) AS SetReadPACLimit,
				      AVG(dv.SetReadInstantaneousReactivePowerSetPoint) AS SetReadInstantaneousReactivePowerSetPoint,
				      AVG(dv.SetReadPowerFactorSetPoint) AS SetReadPowerFactorSetPoint,
				      AVG(dv.ACPowerRampRate) AS ACPowerRampRate,
				      AVG(dv.ReactivePowerRampRate) AS ReactivePowerRampRate,
				      AVG(dv.PowerFactorRampRate) AS PowerFactorRampRate,
				      AVG(dv.ReactivePowerSignConvention) AS ReactivePowerSignConvention,
				      AVG(dv.DCS_N) AS DCS_N,
				      AVG(dv.DCS_StCtcr) AS DCS_StCtcr,
				      AVG(dv.DCS_StCpt) AS DCS_StCpt,
				      AVG(dv.DCS_EvtFlt) AS DCS_EvtFlt,
				      AVG(dv.DCS_EvtWrn) AS DCS_EvtWrn,
				      AVG(dv.DCS_StVnd) AS DCS_StVnd,
				      AVG(dv.DCS_DCA) AS DCS_DCA,
				      AVG(dv.DCS_DCADif) AS DCS_DCADif,
				      AVG(dv.DCS_DCV) AS DCS_DCV,
				      AVG(dv.DCS_Tmp) AS DCS_Tmp,
				      AVG(dv.DCS_InId01) AS DCS_InId01,
				      AVG(dv.DCS_InFlt01) AS DCS_InFlt01,
				      AVG(dv.DCS_InWrn01) AS DCS_InWrn01,
				      AVG(dv.DCS_InPDCA01) AS DCS_InPDCA01,
				      AVG(dv.DCS_InNDCA01) AS DCS_InNDCA01,
				      AVG(dv.DCS_InId02) AS DCS_InId02,
				      AVG(dv.DCS_InFlt02) AS DCS_InFlt02,
				      AVG(dv.DCS_InWrn02) AS DCS_InWrn02,
				      AVG(dv.DCS_InPDCA02) AS DCS_InPDCA02,
				      AVG(dv.DCS_InNDCA02) AS DCS_InNDCA02,
				      AVG(dv.DCS_InId03) AS DCS_InId03,
				      AVG(dv.DCS_InFlt03) AS DCS_InFlt03,
				      AVG(dv.DCS_InWrn03) AS DCS_InWrn03,
				      AVG(dv.DCS_InPDCA03) AS DCS_InPDCA03,
				      AVG(dv.DCS_InNDCA03) AS DCS_InNDCA03,
				      AVG(dv.DCS_InId04) AS DCS_InId04,
				      AVG(dv.DCS_InFlt04) AS DCS_InFlt04,
				      AVG(dv.DCS_InWrn04) AS DCS_InWrn04,
				      AVG(dv.DCS_InPDCA04) AS DCS_InPDCA04,
				      AVG(dv.DCS_InNDCA04) AS DCS_InNDCA04,
				      AVG(dv.DCS_InId05) AS DCS_InId05,
				      AVG(dv.DCS_InFlt05) AS DCS_InFlt05,
				      AVG(dv.DCS_InWrn05) AS DCS_InWrn05,
				      AVG(dv.DCS_InPDCA05) AS DCS_InPDCA05,
				      AVG(dv.DCS_InNDCA05) AS DCS_InNDCA05,
				      AVG(dv.DCS_InId06) AS DCS_InId06,
				      AVG(dv.DCS_InFlt06) AS DCS_InFlt06,
				      AVG(dv.DCS_InWrn06) AS DCS_InWrn06,
				      AVG(dv.DCS_InPDCA06) AS DCS_InPDCA06,
				      AVG(dv.DCS_InNDCA06) AS DCS_InNDCA06,
				      AVG(dv.DCS_InId07) AS DCS_InId07,
				      AVG(dv.DCS_InFlt07) AS DCS_InFlt07,
				      AVG(dv.DCS_InWrn07) AS DCS_InWrn07,
				      AVG(dv.DCS_InPDCA07) AS DCS_InPDCA07,
				      AVG(dv.DCS_InNDCA07) AS DCS_InNDCA07,
				      AVG(dv.DCS_InId08) AS DCS_InId08,
				      AVG(dv.DCS_InFlt08) AS DCS_InFlt08,
				      AVG(dv.DCS_InWrn08) AS DCS_InWrn08,
				      AVG(dv.DCS_InPDCA08) AS DCS_InPDCA08,
				      AVG(dv.DCS_InNDCA08) AS DCS_InNDCA08,  
				      AVG(dv.DCS_InId09) AS DCS_InId09,
				      AVG(dv.DCS_InFlt09) AS DCS_InFlt09,
				      AVG(dv.DCS_InWrn09) AS DCS_InWrn09,
				      AVG(dv.DCS_InPDCA09) AS DCS_InPDCA09,
				      AVG(dv.DCS_InNDCA09) AS DCS_InNDCA09,
				      AVG(dv.DCS_InId10) AS DCS_InId10,
				      AVG(dv.DCS_InFlt10) AS DCS_InFlt10,
				      AVG(dv.DCS_InWrn10) AS DCS_InWrn10,
				      AVG(dv.DCS_InPDCA10) AS DCS_InPDCA10,
				      AVG(dv.DCS_InNDCA10) AS DCS_InNDCA10,
					
					  AVG(dv.nvmActivePower) AS nvmActivePower,
					  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
				</if>
				
				<if test="table_name == 'model_poa_temp'">
					  AVG(dv.T_AMB) AS T_AMB,
				      AVG(dv.T_MOD) AS T_MOD,
				</if>
				
				<if test="table_name == 'model_eri_weather_icp_class8050'">
					  AVG(dv.panel_temp) AS panel_temp,
				      AVG(dv.ambient_temp) AS ambient_temp,
				      AVG(dv.wind_speed) AS wind_speed,
							IF(AVG(dv.solar_irradiation) <![CDATA[<]]> 0, 0, AVG(dv.solar_irradiation  )) AS solar_irradiation,
				      AVG(dv.wind_direction) AS wind_direction,
				</if>
				
				<if test="table_name == 'model_dts_measurelogic_demand_meter'">
				  AVG(dv.Voltage_LN_1) AS Voltage_LN_1,
			      AVG(dv.Voltage_LN_2) AS Voltage_LN_2,
			      AVG(dv.Voltage_LN_3) AS Voltage_LN_3,
			      AVG(dv.Voltage_LL_Average) AS Voltage_LL_Average,
			      AVG(dv.Current_1) AS Current_1,
			      AVG(dv.Current_2) AS Current_2,
			      AVG(dv.Current_3) AS Current_3,
			      AVG(dv.Current_Total) AS Current_Total,
			      AVG(dv.Current_Neutral) AS Current_Neutral,
			      AVG(dv.Frequency_Average) AS Frequency_Average,
			      AVG(dv.PowerP_Total) AS PowerP_Total,
			      AVG(dv.PowerS_Total) AS PowerS_Total,
			      AVG(dv.PowerQ_Total) AS PowerQ_Total,
			      AVG(dv.PowerFactor_DTS_Overall) AS PowerFactor_DTS_Overall,
			      AVG(dv.EnergyP_Total) AS EnergyP_Total,
			      AVG(dv.EnergyS_Total) AS EnergyS_Total,
			      AVG(dv.EnergyQ_Total) AS EnergyQ_Total,
			      AVG(dv.EnergyP_Total_Imp) AS EnergyP_Total_Imp,
			      AVG(dv.EnergyP_Total_Exp) AS EnergyP_Total_Exp,
			      AVG(dv.EnergyQ_Total_Imp) AS EnergyQ_Total_Imp,
			      AVG(dv.EnergyQ_Total_Exp) AS EnergyQ_Total_Exp,
			      
				  AVG(dv.nvmActivePower) AS nvmActivePower,
				  AVG(dv.nvmActiveEnergy) AS nvmActiveEnergy,
			</if>
				
				<if test="table_name == 'model_virtual_meter_or_inverter'">
					AVG(dv.nvmActivePower) AS nvmActivePower,
					SUM(dv.nvmActiveEnergy) AS nvmActiveEnergy,
					AVG(dv.nvm_temperature) AS nvm_temperature,
					AVG(dv.nvm_irradiance) AS nvm_irradiance,
					AVG(dv.expected_power_ac) AS expected_power_ac,
					IF(AVG(dv.nvmActivePower) <![CDATA[<]]> 0, 0, AVG(dv.nvmActivePower)) AS Power,
			    	SUM(dv.nvmActiveEnergy) AS Energy,
			    	AVG(dv.expected_power_ac) AS expected_power,
			    	SUM(dv.expected_energy) AS expected_energy,
					<choose>
						<when test="filterBy == 'today' or filterBy == '3_day' or (filterBy == 'custom' and diff5Days)">
							AVG(dv.nvmActivePower)
						</when>
						<otherwise>
							SUM(dv.nvmActiveEnergy)
						</otherwise>
					</choose> AS MeasuredProduction,
				</if>
				
				<!-- Energy & Measured Production calculation field -->
				<if test="id_device_type == 1 or id_device_type == 3 or id_device_type == 7 or id_device_type == 8 or id_device_type == 9">
					SUM(dv.MeasuredProduction) AS Energy,
					<choose>
						<when test="filterBy == 'today' or filterBy == '3_day' or (filterBy == 'custom' and diff5Days)">
							AVG(dv.nvmActivePower)
						</when>
						<otherwise>
							SUM(dv.MeasuredProduction)
						</otherwise>
					</choose> AS MeasuredProduction,
				</if>
				
				<if test="(filterBy == 'today') and data_send_time == 1">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%H:%i' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == 'today') and data_send_time == 2">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%H:%i' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == 'today') and data_send_time == 3">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
					FROM_UNIXTIME(dv.time, '%d. %b') AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%H:00' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
				</if>
				
				<if test="(filterBy == 'today') and data_send_time == 4">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%H:%i' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == 'today') and data_send_time == 5">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
	
				<if test="(filterBy == '3_day') and data_send_time == 1">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%e. %b %H:%i' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == '3_day') and data_send_time == 2">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%e. %b %H:%i' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
	
				<if test="(filterBy == '3_day') and data_send_time == 3">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%e. %b' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%e. %b %H:00' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
				</if>
				
				<if test="(filterBy == '3_day') and data_send_time == 4">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%e. %b %H:%i' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == '3_day') and data_send_time == 5">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
	
				<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 1">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%e. %b %H:%i' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 2">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%e. %b %H:%i' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
	
				<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 3">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%e. %b' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%e. %b %H:%i' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
				</if>
				
				<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 4">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_full,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%e. %b %H:%i' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
				
				<if test="(filterBy == 'this_week' or filterBy == 'last_week') and data_send_time == 5">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
	
				<if test="(filterBy == 'this_month' or filterBy == 'last_month') and data_send_time == 2">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_first_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%m/%d' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="(filterBy == 'this_month' or filterBy == 'last_month') and data_send_time == 3">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
				</if>
	
				<if test="(filterBy == 'this_month' or filterBy == 'last_month') and data_send_time == 5">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
	
				<if test="(filterBy == 'this_month' or filterBy == 'last_month') and data_send_time == 6">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
	
				<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime') and data_send_time == 2">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b' ) AS categories_first_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%b. %Y' ) AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
				
				<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime') and data_send_time == 3">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
				</if>
				
				<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime') and data_send_time == 5">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_group_by
				</if>
				
				<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime' or filterBy == 'custom') and data_send_time == 6">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
				
				<if test="(filterBy == '12_month' or filterBy == 'year' or filterBy == 'lifetime' or filterBy == 'custom') and data_send_time == 7">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%Y' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
	
				<if test="(filterBy == 'lifetime' or filterBy == 'custom') and data_send_time == 8">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y' ) AS categories_first_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y' ) AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d') AS time_group_by
				</if>
				
				<if test="filterBy == 'custom' and data_send_time == 1">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_first_time,
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
						ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
					END AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 300  )* 300, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="filterBy == 'custom' and data_send_time == 2">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_first_time,
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
						ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
					END AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 900  )* 900, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
	
				<if test="filterBy == 'custom' and data_send_time == 3">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_first_time,
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
						ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
					END AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d %H:00' ) AS time_group_by
				</if>
				
				<if test="filterBy == 'custom' and data_send_time == 4">
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_first_time,
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
						ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
					END AS categories_time,
					FROM_UNIXTIME(( UNIX_TIMESTAMP( CONVERT_TZ( dv.time, '+00:00', t.`offset` ) ) DIV 60  )* 60, '%Y-%m-%d %H:%i' ) AS time_group_by
				</if>
				
				<if test="filterBy == 'custom' and data_send_time == 5">
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_full,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS categories_first_time,
					CASE
						WHEN DATEDIFF(#{end_date}, #{start_date}) <![CDATA[<=]]> 44 THEN DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' )
						ELSE DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%b. %Y' )
					END AS categories_time,
					DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_group_by
				</if>
			
			FROM
				${datatablename} dv 
				LEFT JOIN device d ON d.id = dv.id_device
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE
				dv.id_device = #{id}
				AND (CAST(CONVERT_TZ( dv.time, '+00:00', t.`offset` ) AS DATETIME) BETWEEN CAST(#{start_date} AS DATETIME) AND CAST(#{end_date} AS DATETIME))
			    <foreach item="item" index="index" collection="hidden_data_list">
					AND CONVERT_TZ( dv.time, '+00:00', t.`offset` ) NOT BETWEEN #{item.date_from} AND #{item.date_to}
			    </foreach>
			GROUP BY time_group_by
			ORDER BY time_group_by ASC
		) t
		GROUP BY
			<choose>
				<when test="data_send_time == 6">
	                FLOOR(DATEDIFF(time_group_by, #{start_date}) / 7 )
				</when>
				
				<when test="data_send_time == 7">
					DATE_FORMAT(time_group_by, '%m/%Y')
				</when>
				
				<when test="data_send_time == 8">
					DATE_FORMAT(time_group_by, '%Y')
				</when>
				
				<otherwise>
					time_group_by
				</otherwise>
			</choose>
	</select>
</mapper>
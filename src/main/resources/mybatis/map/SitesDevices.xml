<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SitesDevices">
	<select id="getListDeviceByIdSite" resultType="Map" parameterType="com.nwm.api.entities.SitesDevicesEntity">
		SELECT
			d.serial_number AS datalogger_serial_number,
			d.id,
			SHA1(d.id) AS hash_id,
			d.id_site,
			SHA1(d.id_site) AS hash_site_id,
			d.id_device_group,
			d.devicename,
			d.devicename AS text,
			d.datatablename,
			d.ssh_host,
			d.ssh_user,
			d.ssh_pass,
			d.ssh_port,
			dt.`name` AS device_type_name,
			dt.image,
			d.id_device_type,
			d.order_id,
			d.serialnumber AS serial_number,
			IF(d.rating_ac_power IS NULL, "-", CONCAT(d.rating_ac_power, " kW")) AS rating_ac_power,
			s.datalogger_ip,
			s.unit_type_temp,
			s.unit_wind_speed,
			dt.alias AS device_type_alias,
			dt.color AS color,
			dt.is_color AS is_color,
			d.ip_address,
			d.hidden,
			d.modbusdevicenumber,
			d.disable_alert,
			d.advance_tech_field_restart,
			d.advance_tech_field_stop,
			d.advance_tech_field_start,
			d.advance_tech_value_restart,
			d.advance_tech_value_stop,
			d.advance_tech_value_start,
			d.advance_tech_control_tag,
			d.device_ftp_server,
		    d.device_ftp_user,
		    d.device_ftp_pass,
		    d.device_ftp_folder,
		    d.device_ftp_port,
			IFNULL(dg.title_trans, "N/A") AS device_group_title_trans,
			IFNULL(dt.title_trans, "N/A") AS device_type_title_trans,
			tag.tags,
			DATE_FORMAT( CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) , '%m/%d/%Y %h:%i %p') AS last_updated,
			<include refid="com.nwm.common.keyIndicatorField"/>,
			IFNULL(p.totalError, 0 ) AS totalError,
			CASE
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( d.last_updated, 'UTC', t.`value` ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( d.last_updated, 'UTC', t.`value` ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( d.last_updated, 'UTC', t.`value` ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit,
			d.field_value_default
			
		FROM
			device d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON d.id_site = s.id
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN(
				SELECT
					a.id_device,
					COUNT(a.id) AS totalError
				FROM
					alert a
					LEFT JOIN device d ON d.id = a.id_device
					LEFT JOIN error e ON e.id = a.id_error
				WHERE
					a.`status` = 1
					AND a.is_delete = 0
					AND e.`status` = 1
					AND e.is_delete = 0
					AND d.`status` = 1
					AND d.is_delete = 0
					AND d.id_site = #{id_site}
					<include refid="com.nwm.common.deviceByDomainCondition"/>
			        
			        <if test="!isUserNW.booleanValue()">
						AND e.id_error_level != 14
					</if>
				GROUP BY d.id
			) p ON p.id_device = d.id
			
			LEFT JOIN (
				SELECT
					t.id_device,
					JSON_ARRAYAGG(obj_tag) AS tags
				FROM (
					SELECT
						d.id AS id_device,
						JSON_OBJECT('id', t.id, 'name', t.`name`) AS obj_tag
					FROM
						tag_device_map tdm 
						LEFT JOIN device d ON d.id = tdm.id_device
						LEFT JOIN tag t On t.id = tdm.id_tag
					WHERE d.`status` = 1 AND d.`is_delete` = 0 AND d.id_site = #{id_site}
						) t
				GROUP BY t.id_device
			) tag ON tag.id_device = d.id
			
			<if test="keyword != null and keyword != '' and sort_column == 'tag_device'">			        
		      LEFT JOIN (
		        SELECT
		          d.id_site,
		          d.id,
		          t.`name`
		        FROM tag t
		          LEFT JOIN tag_device_map td ON td.id_tag = t.id
		          LEFT JOIN device d ON d.id = td.id_device
		        WHERE
				 	t.`name` = #{keyword}	         
		          GROUP BY id_site
		      ) td ON td.id= d.id
 			</if>
			
		WHERE
			d.id_site = #{id_site} AND d.`status` = 1 AND d.is_delete = 0
			AND (CONVERT_TZ(NOW(), 'UTC', t.`value`) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			
			<if test="keyword != null and keyword != '' and sort_column == 'tag_device'">
				AND td.name = #{keyword}
			</if>
			
			<include refid="com.nwm.common.deviceByDomainCondition"/>
			
			order by
	        <choose> 
	        	<when test="sort_column == 'id'">
	                d.id ${order_by}
	            </when> 
	            
	        	<when test="sort_column == 'order_id'">
	                d.order_id ${order_by}
	            </when> 
	            
	            <when test="sort_column == 'devicename'">
	                d.devicename ${order_by}
	            </when>         
	            <when test="sort_column == 'id_device_type'">
	                d.id_device_type ${order_by}
	            </when>
	            <when test="sort_column == 'last_value'">
	                d.last_value ${order_by}
	            </when>
	            
	            <when test="sort_column == 'last_updated'">
	                d.last_updated ${order_by}
	            </when>
	            
	            <when test="sort_column == 'modbusdevicenumber'">
	                CAST(d.modbusdevicenumber as SIGNED) ${order_by}
	            </when>
	            
	            <when test="sort_column == 'rating_ac_power'">
	                d.rating_ac_power ${order_by}
	            </when>
	            
	            <when test="sort_column == 'datalogger_serial_number'">
	                d.serial_number ${order_by}
	            </when>
	            
	            <when test="sort_column == 'serial_number'">
	                d.serialnumber ${order_by}
	            </when>
	            
	            <when test="sort_column == 'datatablename'">
	                d.datatablename ${order_by}
	            </when>
	            
	            <otherwise>
			      d.order_id ASC
			    </otherwise>                                                  
	        </choose>  

		<if test="limit > 0">
			LIMIT ${limit} OFFSET ${offset};
		</if>	     
		 
	</select>
	
	<select id="getDeviceStatus" resultType="com.nwm.api.entities.DeviceYieldEntity">
		SELECT
			d.id,
			SHA1(d.id) AS hash_id,
			d.id_device_type,
			d.rating_ac_power,
			d.devicename,
			d.ip_address,
			dt.image,
			e.totalError,
			IF(e.noComm > 0, NULL, u.upTime) AS upTime,
			<choose>
				<when test="id_device_type == 1 or id_device_type == 3 or id_device_type == 7 or id_device_type == 9">
					IFNULL(ROUND(d.last_value, 1), 0) AS currentPower
				</when>
				<otherwise>
					NULL AS currentPower
				</otherwise>
			</choose>
		FROM
			device d
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone tz ON tz.id = s.id_time_zone
			LEFT JOIN (
				SELECT
					a.id_device,
					COUNT(a.id) AS totalError,
					SUM(IF(e.error_code = '1001', 1, 0)) AS noComm
				FROM
					alert a
					LEFT JOIN error e ON e.id = a.id_error
				WHERE
					a.`status` = 1
					AND a.is_delete = 0
					AND e.`status` = 1
					AND e.is_delete = 0
					AND a.id_device = #{id}
					<if test="!isUserNW.booleanValue()">
						AND e.id_error_level != 14
					</if>
				GROUP BY
					a.id_device
			) e ON e.id_device = d.id
			LEFT JOIN (
				SELECT
					dv.id_device,
					DATEDIFF(UTC_TIMESTAMP(), IF(a.upTime IS NOT NULL, a.upTime, dv.time)) AS upTime
				FROM
					(
						<choose>
							<when test="id_device_type == 5">
								SELECT
									d.id AS id_device,
									s.commissioning AS time
								FROM
									site s
									LEFT JOIN device d ON d.id_site = s.id
								WHERE
									d.id = #{id}
							</when>
							<otherwise>
								SELECT
									id_device,
									time
								FROM
									${datatablename} dv
								WHERE
									id_device = #{id}
								ORDER BY time ASC
								LIMIT 1
							</otherwise>
						</choose>
					) dv
					LEFT JOIN (
						SELECT
							a.id_device,
							MAX(a.end_date) AS upTime
						FROM
							alert a
							LEFT JOIN error e ON e.id = a.id_error
						WHERE
							a.`status` = 0
							AND a.is_delete = 0
							AND e.`status` = 1
							AND e.is_delete = 0
							AND a.id_device = #{id}
							AND e.error_code = '1001'
						GROUP BY
							a.id_device
					) a ON a.id_device = dv.id_device
			) u ON u.id_device = d.id
		WHERE
			d.id = #{id}
			<include refid="com.nwm.common.deviceByDomainCondition"/>
	</select>
	
	<select id="getYieldByDevice" resultType="com.nwm.api.entities.DeviceYieldEntity">
		SELECT
			ROUND(MAX(yieldToday), 1) AS yieldToday,
			ROUND(MAX(yieldYesterday), 1) AS yieldYesterday,
			ROUND(MAX(yieldLast7Days), 1) AS yieldLast7Days,
			ROUND(MAX(yieldYTD), 1) AS yieldYTD
		FROM (
			SELECT
				id,
				time_full,
				CASE time_full
					WHEN todayFormat THEN energy
					ELSE NULL
				END AS yieldToday,
				CASE time_full
					WHEN yesterdayFormat THEN energy
					ELSE NULL
				END AS yieldYesterday,
				CASE time_full
					WHEN last7DaysFormat THEN cummulativeEnergy
					ELSE NULL
				END AS yieldLast7Days,
				CASE time_full
					WHEN ytdFormat THEN cummulativeEnergy
					ELSE NULL
				END AS yieldYTD
			FROM (
				SELECT
					id,
					time_full,
					DATE_FORMAT(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', `value`), '%Y-%m-%d') AS todayFormat,
					DATE_FORMAT(DATE_SUB(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', `value`), INTERVAL 1 DAY), '%Y-%m-%d') AS yesterdayFormat,
					DATE_FORMAT(IF(time_full > DATE_SUB(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', `value`), INTERVAL 6 DAY), time_full, DATE_SUB(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', `value`), INTERVAL 6 DAY)), '%Y-%m-%d') AS last7DaysFormat,
					DATE_FORMAT(MIN(time_full) OVER (ORDER BY time_full ASC), '%Y-%m-%d') AS ytdFormat,
					MeasuredProduction AS energy,
					SUM(MeasuredProduction) OVER (ORDER BY time_full DESC) AS cummulativeEnergy
				FROM (
					SELECT
						d.id,
						tz.`value`,
						DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC', tz.`value`), '%Y-%m-%d') AS time_full,
						<choose>
							<when test="id_device_type == 1 or id_device_type == 3 or id_device_type == 7 or id_device_type == 9">
								SUM(dv.MeasuredProduction) AS MeasuredProduction
							</when>
							<otherwise>
								NULL AS MeasuredProduction
							</otherwise>
						</choose>
					FROM
						device d
						LEFT JOIN ${datatablename} dv ON dv.id_device = d.id
						LEFT JOIN site s ON s.id = d.id_site
						LEFT JOIN time_zone tz ON tz.id = s.id_time_zone
					WHERE
						dv.id_device = #{id}
						AND dv.time BETWEEN CONVERT_TZ(DATE_FORMAT(CONVERT_TZ(UTC_TIMESTAMP(), 'UTC', tz.`value`), '%Y-01-01 00:00:00'), tz.`value`, 'UTC') AND UTC_TIMESTAMP()
						<include refid="com.nwm.common.deviceByDomainCondition"/>
					GROUP BY
						DAYOFYEAR(time_full)
				) t
			) t
			WHERE
				time_full = todayFormat
				OR time_full = yesterdayFormat
				OR time_full = last7DaysFormat
				OR time_full = ytdFormat
		) t
		GROUP BY
			id
	</select>
	
	<select id="getDeviceDetail" resultType="com.nwm.api.entities.DeviceEntity" parameterType="com.nwm.api.entities.DeviceEntity">
		SELECT
			d.id,
			SHA1(d.id) AS hash_id,
			d.id_site,
			SHA1(d.id_site) AS hash_site_id,
			d.id_vendor,
			d.modbusdevicenumber,
			d.devicename,
			d.devicetype,
			d.deviceclass,
			d.configuration,
			d.configurationchecksum,
			d.configurationchangetime,
			d.datatablename,
			d.ssh_host,
			d.ssh_user,
			d.ssh_pass,
			d.id_device_type,
			d.id_device_group,
			d.ssh_port,
			dt.`name` AS device_type_name,
			dt.image,
			dg.group_name,
			<choose> 
	            <when test="domain =='demo.nextwavemonitoring.com' || domain_role == '1ff1de774005f8da13f42943881c655f'">
	                CONCAT_WS("", s.city, " #",s.id) AS `site_name`,
	            </when>
	            <otherwise>
			      s.`name` AS site_name,
			    </otherwise>                                                  
	        </choose>
	        
			d.ip_address,
			d.serialnumber AS serial_number,
			s.ac_capacity,
			s.dc_capacity,
			CONCAT_WS(" ", DATE_FORMAT( CONVERT_TZ( d.last_updated, 'UTC', t.`value` ), '%m/%d/%Y %H:%i:%s %p' ), t.abbreviation_std) AS last_communication,
			t.abbreviation_std,
			t.`value` AS timezone,
			g.total_error,
			s.kiosk_view,
			s.unit_type_temp,
			s.unit_wind_speed,
			IF(noComm > 0, 'Offline', 'Online') AS device_status,
			d.mfa_control
			
			
		FROM
			device AS d
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN site_employee_map sem ON sem.id_site = s.id
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN(
				SELECT
					COUNT( a.id ) AS total_error,
					d.id_site 
				FROM
					device d
					LEFT JOIN alert a ON a.id_device = d.id 
					LEFT JOIN error e ON e.id = a.id_error
					LEFT JOIN site s ON s.id = d.id_site
				WHERE
					SHA1(d.id_site) = #{hash_id_site}
					AND d.`status` = 1 
					AND d.is_delete = 0
					AND a.`status` = 1
					AND e.`status` = 1 
					AND e.is_delete = 0
					AND s.enable_alert = 1
					<include refid="com.nwm.common.deviceByDomainCondition"/>
			        <if test="!isUserNW.booleanValue()">
						AND e.id_error_level != 14
					</if>
			)g ON g.id_site = d.id_site
			LEFT JOIN (
				SELECT
					a.id_device,
					COUNT(a.id) AS noComm
				FROM
					alert a
					LEFT JOIN error e ON e.id = a.id_error
				WHERE
					SHA1(a.id_device) = #{hash_id}
					AND a.status = 1
					AND a.is_delete = 0
					AND e.status = 1
					AND e.is_delete = 0
					AND e.error_code = '1001'
			) a ON a.id_device = d.id
		WHERE
			SHA1(d.id) = #{hash_id}
			
			<if test="is_supper_admin != 1">
    			AND sem.id_employee = #{id_employee}
    		</if>
    		
			GROUP BY d.id
	</select>
	
	<select id="getModelLastRowItem" resultType="Map" parameterType="com.nwm.api.entities.DeviceEntity">
		SELECT
			u.*,
			CONCAT_WS(" ", DATE_FORMAT( CONVERT_TZ( u.time, 'UTC', t.`value` ), '%m/%d/%Y %H:%i:%s %p' ), t.abbreviation_std) AS last_communication
		FROM
			${datatablename} u 
			LEFT JOIN device d ON u.id_device = d.id
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		
		WHERE
			SHA1(u.id_device) = #{hash_id} 
			
		ORDER BY
			`time` DESC 
			LIMIT 1;
	
  	</select>
  	
  	<select id="getListDeviceParameter" resultType="com.nwm.api.entities.DeviceParameterEntity" parameterType="com.nwm.api.entities.DeviceEntity">
		SELECT
			dp.id,
			dg.id AS id_device_group,
			dp.`name`,
			dp.slug,
			dp.unit,
			dp.chart_type,
			dp.description,
			dp.register,
			dp.hide,
			IFNULL(dp.standard_name, dp.`name`) AS standard_name,
			dp.writable,
			ct.id AS id_categorize_data,
			dps.scale,
			dp.rounding_decimals,
			IFNULL(dp.title_trans, "N/A") AS title_trans
		FROM
			device d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group 
			LEFT JOIN device_parameters dp ON dp.id_device_group = dg.id
			LEFT JOIN categorize_data ct ON ct.id = dp.id_categorize_data AND ct.status = 1 AND ct.is_delete = 0
			LEFT JOIN device_parameter_scale dps ON dps.id_device_parameter = dp.id AND dps.id_device = d.id
		WHERE
			SHA1(d.id) = #{hash_id}
			AND d.`status` = 1
			AND dp.`status` = 1
			AND (dp.is_user_defined = 0 OR dg.id_device_type = 12)
	</select>
	
	
	<select id="getListSummaryDevice" resultType="Map">
		SELECT 
			t.id_device_type,
			t.device_group_name,
			COUNT(IF(t.id_device_type = 1, 1, NULL)) AS totalInverter,
			COUNT(IF(t.id_device_type = 1 AND t.totalNoCom > 0, 1, NULL)) AS noComInverter,
			COUNT(IF(t.id_device_type = 1 AND t.totalNoProuduction > 0, 1, NULL)) AS noProductionInverter,
			COUNT(IF(t.id_device_type = 1, 1, NULL)) - (COUNT(IF(t.id_device_type = 1 AND t.totalNoCom > 0 , 1, NULL)) + COUNT(IF(t.id_device_type = 1 AND t.totalNoProuduction > 0, 1, NULL)) + COUNT(IF(t.id_device_type = 1 AND t.totalLowProduction > 0, 1, NULL )) ) AS healthyInverter,
			COUNT(IF(t.id_device_type = 1 AND t.totalLowProduction > 0, 1, NULL)) AS lowInverter,
			JSON_ARRAYAGG(IF(t.id_device_type = 1 AND t.totalNoCom > 0, JSON_OBJECT("device", t.devicename, "dateChanged", t.dateChangedNoCom), NULL)) AS noComInverterList,
			JSON_ARRAYAGG(IF(t.id_device_type = 1 AND t.totalNoProuduction > 0, JSON_OBJECT("device", t.devicename, "dateChanged", t.dateChangedNoProuduction), NULL)) AS noProductionInverterList,
			JSON_ARRAYAGG(IF(t.id_device_type = 1 AND t.totalNoCom = 0 AND t.totalNoProuduction = 0 AND t.totalLowProduction = 0, JSON_OBJECT("device", t.devicename, "dateChanged", t.dateChangedHealthy), NULL )) AS healthyInverterList,
			JSON_ARRAYAGG(IF(t.id_device_type = 1 AND t.totalLowProduction > 0, JSON_OBJECT("device", t.devicename, "dateChanged", t.dateChangedLowProduction), NULL )) AS lowInverterList,

			COUNT(IF(t.id_device_type = 2, 1, NULL)) AS totalTracker,
			COUNT(IF(t.id_device_type = 2, 1, NULL)) - COUNT(IF(t.id_device_type = 2 AND t.totalNoCom > 0, 1, NULL)) AS healthyTracker,
			COUNT(IF(t.id_device_type = 2 AND t.totalNoCom > 0, 1, NULL)) AS noComTracker,
			JSON_ARRAYAGG(IF(t.id_device_type = 2 AND t.totalNoCom = 0, JSON_OBJECT("device", t.devicename, "dateChanged", "-"), NULL )) AS healthyTrackerList,
			JSON_ARRAYAGG(IF(t.id_device_type = 2 AND t.totalNoCom > 0, JSON_OBJECT("device", t.devicename, "dateChanged", "-"), NULL )) AS noComTrackerList,
			
			
			COUNT(IF(t.id_device_type IN (3,7,9) AND t.is_excluded_meter = 0, 1, NULL)) AS totalMeter,
			COUNT(IF(t.id_device_type IN (3,7,9) AND t.is_excluded_meter = 0 AND t.totalNoCom > 0, 1, NULL)) AS noComMeter,
			COUNT(IF(t.id_device_type IN (3,7,9) AND t.is_excluded_meter = 0 AND t.totalNoProuduction > 0, 1, NULL)) AS noProductionMeter,
			COUNT(IF(t.id_device_type IN (3,7,9) AND t.is_excluded_meter = 0, 1, NULL)) - (COUNT(IF(t.id_device_type = 3 AND t.totalNoCom > 0 , 1, NULL)) + COUNT(IF(t.id_device_type = 3 AND t.totalNoProuduction > 0, 1, NULL)) + COUNT(IF(t.id_device_type = 3 AND t.totalLowProduction > 0, 1, NULL )) ) AS healthyMeter,
			COUNT(IF(t.id_device_type IN (3,7,9) AND t.is_excluded_meter = 0 AND t.totalLowProduction > 0, 1, NULL)) AS lowMeter,
			JSON_ARRAYAGG(IF(t.id_device_type IN (3,7,9) AND t.is_excluded_meter = 0 AND t.totalNoCom > 0, JSON_OBJECT("device", t.devicename, "dateChanged", t.dateChangedNoCom), NULL)) AS noComMeterList,
			JSON_ARRAYAGG(IF(t.id_device_type IN (3,7,9) AND t.is_excluded_meter = 0 AND t.totalNoProuduction > 0, JSON_OBJECT("device", t.devicename, "dateChanged", t.dateChangedNoProuduction), NULL)) AS noProductionMeterList,
			JSON_ARRAYAGG(IF(t.id_device_type IN (3,7,9) AND t.is_excluded_meter = 0 AND t.totalNoCom = 0 AND t.totalNoProuduction = 0 AND t.totalLowProduction = 0, JSON_OBJECT("device", t.devicename, "dateChanged", t.dateChangedHealthy), NULL )) AS healthyMeterList,
			JSON_ARRAYAGG(IF(t.id_device_type IN (3,7,9) AND t.is_excluded_meter = 0 AND t.totalLowProduction > 0, JSON_OBJECT("device", t.devicename, "dateChanged", t.dateChangedLowProduction), NULL )) AS lowMeterList,
		
			COUNT(IF(t.id_device_type = 4, 1, NULL)) AS totalWeatherStation,
			COUNT(IF(t.id_device_type = 4 AND t.totalNoCom > 0, 1, NULL)) AS noComWeatherStation,
			COUNT(IF(t.id_device_type = 4, 1, NULL)) - COUNT(IF(t.id_device_type = 4 AND t.totalNoCom > 0, 1, NULL)) AS healthyWeatherStation,
			JSON_ARRAYAGG(IF(t.id_device_type = 4 AND t.totalNoCom > 0, JSON_OBJECT("device", t.devicename, "dateChanged", t.dateChangedNoCom), NULL )) AS noComWeatherStationList,
			JSON_ARRAYAGG(IF(t.id_device_type = 4 AND t.totalNoCom = 0, JSON_OBJECT("device", t.devicename, "dateChanged", t.dateChangedHealthy), NULL )) AS healthyWeatherStationList
			
			
			
		FROM (
			SELECT
			d.id,
			d.id_device_group,
			dt.`name` AS device_group_name,
			d.devicename,
			IFNULL(noc.totalNoProuduction, 0) AS totalNoProuduction,
			IFNULL(IF(noc.id_device = com.id_device, com.totalNoCom - 1, com.totalNoCom), 0) AS totalNoCom,
			IFNULL(IF(noc.totalNoProuduction > 0 OR com.totalNoCom > 0, 0, low.totalLowProduction), 0) AS totalLowProduction,
			dt.id as id_device_type,
			d.is_excluded_meter,
			DATE_FORMAT(CONVERT_TZ( noc.dateChanged, 'UTC', tz.`value` ), '%m/%d/%Y') AS dateChangedNoProuduction,
			DATE_FORMAT(CONVERT_TZ( com.dateChanged, 'UTC', tz.`value` ), '%m/%d/%Y') AS dateChangedNoCom,
			DATE_FORMAT(CONVERT_TZ( low.dateChanged, 'UTC', tz.`value` ), '%m/%d/%Y') AS dateChangedLowProduction,
			DATE_FORMAT(CONVERT_TZ( hth.dateChanged, 'UTC', tz.`value` ), '%m/%d/%Y') AS dateChangedHealthy
		
			FROM
				device d 
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN time_zone tz ON tz.id = s.id_time_zone
				LEFT JOIN device_type dt ON dt.id = d.id_device_type
				LEFT JOIN (
					SELECT a.id_device, COUNT(a.id) AS totalNoProuduction, MAX(a.start_date) AS dateChanged
					FROM alert a 
					LEFT JOIN device d ON d.id = a.id_device
					LEFT JOIN error e ON e.id = a.id_error AND e.id_error_level = 32
					WHERE a.end_date IS NULL AND e.`status` = 1 AND a.`status` = 1 AND e.is_delete = 0 AND a.is_delete = 0
					AND d.`status` = 1 AND d.id_site = #{id_site}
					AND (d.id_device_type = 1 OR (d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0))
					GROUP BY a.id_device
				)noc ON d.id = noc.id_device
				
				LEFT JOIN (
					SELECT a.id_device, COUNT(a.id) AS totalNoCom, MAX(a.start_date) AS dateChanged
					FROM alert a 
					LEFT JOIN device d ON d.id = a.id_device
					LEFT JOIN error e ON e.id = a.id_error AND e.id_error_level = 33
					WHERE a.end_date IS NULL AND e.`status` = 1 AND a.`status` = 1 AND e.is_delete = 0 AND a.is_delete = 0
					AND d.`status` = 1 AND d.id_site = #{id_site}
					AND (d.id_device_type IN (1,2,4) OR (d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0))
					GROUP BY a.id_device
				)com ON d.id = com.id_device
				
				LEFT JOIN (
					SELECT a.id_device, COUNT(a.id) AS totalLowProduction, MAX(a.start_date) AS dateChanged
					FROM alert a
					LEFT JOIN device d ON d.id = a.id_device
					LEFT JOIN error e ON e.id = a.id_error AND e.error_code = 1002
					WHERE a.end_date IS NULL AND e.`status` = 1 AND a.`status` = 1 AND e.is_delete = 0 AND a.is_delete = 0
					AND d.`status` = 1 AND d.id_site = #{id_site}
					AND (d.id_device_type = 1 OR (d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0))
					GROUP BY a.id_device
				)low ON d.id = low.id_device
				
				LEFT JOIN (
					SELECT a.id_device, MAX(a.end_date) AS dateChanged
					FROM alert a
					LEFT JOIN device d ON d.id = a.id_device
					LEFT JOIN error e ON e.id = a.id_error AND (e.id_error_level = 32 OR e.id_error_level = 33 OR e.error_code = 1002)
					WHERE a.end_date IS NOT NULL AND e.`status` = 1 AND a.`status` = 0 AND e.is_delete = 0 AND a.is_delete = 0
					AND d.`status` = 1 AND d.id_site = #{id_site}
					AND (d.id_device_type IN (1,2,4) OR (d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0))
					GROUP BY a.id_device
				)hth ON d.id = hth.id_device
				
			WHERE
				d.id_site = #{id_site} AND d.`status` = 1 AND d.is_delete = 0 AND d.hidden = 0
				AND (d.id_device_type IN (1,2,4) OR (d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0))
				AND (CONVERT_TZ(NOW(), 'UTC', tz.`value`) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
		)t
		 GROUP BY t.id_device_group ORDER BY t.id_device_type ASC;
 
	</select>
	
	<select id="getListCameraImage" resultType="com.nwm.api.entities.CameraImageEntity" >
	    SELECT
			c.id_device,
			DATE_FORMAT( CONVERT_TZ( c.time, 'UTC', t.value  ) , '%m/%d/%Y %h:%i %p') as time,
			c.image_url  
	    FROM
	      	${datatablename} c
	      	LEFT JOIN device d ON d.id = c.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
	    WHERE
 			c.id_device = #{id_device}
 			AND (CONVERT_TZ( c.time, 'UTC', t.value ) BETWEEN #{start_date} AND #{end_date})
	    ORDER BY c.time DESC
	  </select>
  	
  	<select id="getFirstTimeImageCamera" resultType="com.nwm.api.entities.CameraImageEntity" >
	    SELECT
			c.id_device,
			DATE_FORMAT( CONVERT_TZ( c.time, 'UTC', t.`value`  ) , '%m/%d/%Y %h:%i %p') as time,
			DATE_FORMAT( CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) , '%m/%d/%Y %h:%i %p') AS last_updated,
			CASE
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( d.last_updated, 'UTC', t.`value` ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( d.last_updated, 'UTC', t.`value` ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( d.last_updated, 'UTC', t.`value` ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit,
			c.image_url  
	    FROM
	      	${datatablename} c
	      	LEFT JOIN device d ON d.id = c.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
	    WHERE
 			c.id_device = #{id_device}
	    ORDER BY c.time ASC
	    LIMIT 1
	  </select>
	  
	  <select id="getListCameraDevices" resultType="Map" parameterType="com.nwm.api.entities.SitesDevicesEntity">
		SELECT
			d.serial_number AS datalogger_serial_number,
			d.id,
			SHA1(d.id) AS hash_id,
			d.id_site,
			SHA1(d.id_site) AS hash_site_id,
			d.id_device_group,
			d.devicename,
			d.devicename AS text,
			d.datatablename,
			d.ssh_host,
			d.ssh_user,
			d.ssh_pass,
			d.ssh_port,
			dt.`name` AS device_type_name,
			dt.image,
			d.id_device_type,
			d.order_id,
			d.serialnumber AS serial_number,
			IF(d.rating_ac_power IS NULL, "-", CONCAT(d.rating_ac_power, " kW")) AS rating_ac_power,
			s.datalogger_ip,
			s.unit_type_temp,
			s.unit_wind_speed,
			dt.alias AS device_type_alias,
			dt.color AS color,
			dt.is_color AS is_color,
			d.ip_address,
			d.hidden,
			d.modbusdevicenumber,
			d.disable_alert,
			d.advance_tech_field_restart,
			d.advance_tech_field_stop,
			d.advance_tech_field_start,
			d.advance_tech_value_restart,
			d.advance_tech_value_stop,
			d.advance_tech_value_start,
			d.advance_tech_control_tag,
			d.device_ftp_server,
		    d.device_ftp_user,
		    d.device_ftp_pass,
		    d.device_ftp_folder,
		    d.device_ftp_port,
		    t.value AS timezone_value,
			DATE_FORMAT( CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) , '%m/%d/%Y %h:%i %p') AS last_updated,
			CASE
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( d.last_updated, 'UTC', t.`value` ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( d.last_updated, 'UTC', t.`value` ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( d.last_updated, 'UTC', t.`value` ), DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( d.last_updated, 'UTC', t.`value` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit,
			d.field_value_default
			
		FROM
			device d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON d.id_site = s.id
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			
			
		WHERE
			SHA1(d.id_site) = #{hash_id_site} AND d.`status` = 1 AND d.is_delete = 0 AND d.id_device_type = 19	
					     
		</select>
		
		<select id="getListParameterByDevice" resultType="Map">
			SELECT 
				dp.*
			FROM device_parameters dp
			LEFT JOIN device_group dg ON dg.id = dp.id_device_group
			LEFT JOIN device d ON d.id_device_group = dg.id
			WHERE d.id = #{id} AND dp.control_show_metrics = 1

		</select>
		
		
		<select id="getLastRowData" resultType="Map">
			SELECT
				dv.*,
				DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.`value` ) , '%m-%d-%Y %h:%i %p') AS last_updated
			FROM
				${datatablename} dv 
				LEFT JOIN device d ON d.id = dv.id_device
				LEFT JOIN site s ON d.id_site = s.id
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE dv.time <![CDATA[>]]> DATE_ADD(NOW(),INTERVAL -1 HOUR)
			ORDER BY
				dv.time DESC 
				LIMIT 1
	</select>
		
		
	
	
	
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Portfolio">
	<resultMap id="PortfolioMap"
		type="com.nwm.api.entities.PortfolioEntity">
		<result property="id" column="id" />
		<result property="id_customer" column="id_customer" />
		<result property="id_country" column="id_country" />
		<result property="id_time_zone" column="id_time_zone" />
		<result property="name" column="name" />
		<result property="street" column="street" />
		<result property="lat" column="lat" />
		<result property="lng" column="lng" />
		<result property="built_since" column="built_since" />
		<result property="old_data" column="old_data" />
		<result property="number" column="number" />
		<result property="postal_code" column="postal_code" />
		<result property="city" column="city" />
		<result property="state" column="state" />
		<result property="commissioning" column="commissioning" />
		<result property="emergency_contact" column="emergency_contact" />
		<result property="ac_capacity" column="ac_capacity" />
		<result property="dc_capacity" column="dc_capacity" />
		<result property="status" column="status" />
		<result property="is_delete" column="is_delete" />
		<result property="created_date" column="created_date" />
		<result property="created_by" column="created_by" />
		<result property="updated_date" column="updated_date" />
		<result property="updated_by" column="updated_by" />
		<result property="address_short" column="address_short" />
		<result property="watts_3ph_total" column="watts_3ph_total" />
		<result property="sensor1_data" column="sensor1_data" />
		<result property="w_hours_total" column="w_hours_total" />
		<result property="today_kwh" column="today_kwh" />
		<result property="total_energy_this_month" column="total_energy_this_month" />
		<result property="eer_this_month" column="eer_this_month" />
		<result property="eer_last_month" column="eer_last_month" />
		<result property="w_hours_received" column="w_hours_received" />
		<result property="total_error" column="total_error" />
		<result property="alert_list" column="alert_list" />
		<result property="gallery" column="gallery" />
		<result property="street_ws" column="street_ws" />
		<result property="localization_format" column="localization_format" />
		<result property="format_sql_short" column="format_sql_short" />
		<result property="format_sql_long" column="format_sql_long" />
		<result property="format_sql_string_short" column="format_sql_string_short" />
		<result property="format_sql_string_long" column="format_sql_string_long" />
		<result property="format_sql_string_mdy" column="format_sql_string_mdy" />
		<result property="offset_from" column="offset_from" />
		<result property="current_time" column="current_time" />
		<result property="energy_now" column="energy_now" />
		<result property="value_filter" column="value_filter" />
		<result property="column" column="column" />
		<result property="weather_icon" column="weather_icon" />
		<result property="weather_description" column="weather_description" />
		<result property="is_rec_report" column="is_rec_report" />
		<result property="kiosk_view" column="kiosk_view" />
		<result property="is_supper_admin" column="is_supper_admin" />
		
	</resultMap>
	
	
	<select id="getList" resultType="Map" >
		SELECT
			s.id,
			SHA1(s.id) AS hash_id,
			IF(eer.total_error, eer.total_error, 0) AS total_error,
			IFNULL(er.alerts, JSON_ARRAY()) AS alerts,
			s.`name`,
			DATE_FORMAT(s.expiration, '%m/%d/%Y') AS expiration,
			s.kiosk_view,
			IFNULL(s.ac_capacity, 0) as ac_capacity,
			IFNULL(s.dc_capacity, 0) as dc_capacity,
			DATE_FORMAT(s.built_since,'%m/%d/%Y') AS built_since,
			c.name AS company_name,
			s.weather_icon,
			s.weather_description,
			s.id_company,
			s.is_rec_report,
			p.last_updated,
			p.times_ago_unit,
			IFNULL(p.unix_time, 0) AS unix_time,
			s.note,
			h.is_hiding,
			tag.tags,
			IF(CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL, p.times_ago, NULL) AS times_ago,
			IF(CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL, IFNULL(ROUND(t.irradiance, 2), IF(t.id_device_type = 4, 0, NULL)), NULL) AS irradiance,
			IF(CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL, IFNULL(s.eer_last_month, 0), NULL) AS EERLastMonth,
			IF(CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL, IFNULL(s.eer_this_month, 0), NULL) AS EERThisMonth,
			IF(CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL, ROUND(s.PerformanceRatioYesterday, 1), NULL) AS PerformanceRatioYesterday,
			IF(CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL, IF(v.activePower IS NULL, IF( ivt.activePower IS NULL, ROUND(m.activePower,1), ROUND(ivt.activePower,1)), ROUND(v.activePower, 1)), NULL) AS activePower,
			IF(CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL, IFNULL(ROUND(v.expected_power_virtual,1), ROUND(t.expected_power,1)), NULL) AS expected_power,
			IF(CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL, im.devices_list, NULL) AS devices_list
			
				
		FROM
			site s
			LEFT JOIN company c ON c.id = s.id_company
			LEFT JOIN site_employee_map sem ON sem.id_site = s.id
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			
			LEFT JOIN (
				SELECT
					id_site,
					MAX(is_hiding) AS is_hiding
				FROM site_employee_map
				GROUP BY id_site
			) h ON h.id_site = s.id
			
			LEFT JOIN (
				SELECT 
					d.id_site,
					IF(d.field_value2 > 0, d.field_value2, NULL) AS expected_power_virtual,
					IF(d.last_value > 0, d.last_value, NULL) AS activePower
				FROM
					device d
				WHERE
					d.id_device_type = 12
			)v ON v.id_site = s.id
			
			
			LEFT JOIN (
				SELECT
					s.id AS id_site,
					d.id_device_type,
					CASE
						WHEN d.datatablename LIKE '%model_adam4017ws_class8110_nelis190'  THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_lufft_class8020' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_lufft_ws501_umb_weather' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_imtsolar_class8000' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_hukseflux_sr30d1_deviceclass_v0' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_imtsolar_tmodul_class8006' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_w_kipp_zonen_rt1' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_kippzonen_rt1_class8009' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_rt1_class30000' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_tti_tracker' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_poa_temp' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_eri_weather_icp_class8050' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_pyranometer_poa' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_pvmet_100' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_pvmet_200' THEN ROUND( SUM(d.last_value), 2)
						WHEN d.datatablename LIKE '%model_sungrow_weather_pvmet75200' THEN ROUND( SUM(d.last_value), 2)					
						ELSE "N/A"
				 	END AS irradiance,
				 	
				 	CASE
				 		WHEN s.pv_model = 1 THEN
							IF(
								IFNULL(s.dc_capacity * (AVG(d.last_value) / s.global_solar_irradiance_at_stc) * (1 - (IFNULL(s.pv_module_temperature_coeff, -0.43)/100) * (s.stc_temperature - AVG(d.field_value2))) * (1 - IFNULL(s.system_loss, 9)/100) * IFNULL(s.inverter_efficiency, 96)/100, 0) <![CDATA[<]]> s.ac_capacity,
								s.dc_capacity * (AVG(d.last_value) / s.global_solar_irradiance_at_stc) * (1 - (IFNULL(s.pv_module_temperature_coeff, -0.43)/100) * (s.stc_temperature - AVG(d.field_value2))) * (1 - IFNULL(s.system_loss, 9)/100) * IFNULL(s.inverter_efficiency, 96)/100,
								s.ac_capacity
							)
						WHEN s.pv_model = 2 THEN
							
							IF(
								IFNULL( s.dc_capacity * (AVG(d.last_value) / s.global_solar_irradiance_at_stc) * (1 - (1 + (IFNULL(s.pv_module_temperature_coeff, -0.43)/100)) * ((AVG(d.field_value2) - s.stc_temperature)/100)) * (POW(1 - (IFNULL(s.annual_pv_module_degradation, 0.5)/100), YEAR(CURRENT_TIMESTAMP) - IFNULL(YEAR(s.commissioning), YEAR(s.built_since))) * 100 / 100) * (1 - (IFNULL(s.soiling, 5)/100)) * (1 - (IFNULL(s.cable_losses, 1)/100)) * (1 - (IFNULL(s.transformer_losses, 1.5)/100)) * (1 - (IFNULL(s.other_losses, 1.5)/100)) * (IFNULL(s.inverter_efficiency, 98.5)/100), 0) <![CDATA[<]]> s.ac_capacity,
								IFNULL( s.dc_capacity * (AVG(d.last_value) / s.global_solar_irradiance_at_stc) * (1 - (1 + (IFNULL(s.pv_module_temperature_coeff, -0.43)/100)) * ((AVG(d.field_value2) - s.stc_temperature)/100)) * (POW(1 - (IFNULL(s.annual_pv_module_degradation, 0.5)/100), YEAR(CURRENT_TIMESTAMP) - IFNULL(YEAR(s.commissioning), YEAR(s.built_since))) * 100 / 100) * (1 - (IFNULL(s.soiling, 5)/100)) * (1 - (IFNULL(s.cable_losses, 1)/100)) * (1 - (IFNULL(s.transformer_losses, 1.5)/100)) * (1 - (IFNULL(s.other_losses, 1.5)/100)) * (IFNULL(s.inverter_efficiency, 98.5)/100), 0),
								s.ac_capacity
							)
						ELSE
							IF(
								s.t_avg IS NULL OR NOT (AVG(d.last_value) >= s.min_irradiance_limit),
								NULL,
								s.dc_capacity * (AVG(d.last_value) / s.global_solar_irradiance_at_stc) * (1 - IFNULL(s.pv_module_temperature_coeff, -0.37)/100 * (s.t_avg - (AVG(d.field_value2) + AVG(d.last_value)/s.global_solar_irradiance_at_stc * 3))) * IFNULL(s.inverter_efficiency, 100)/100
							)
					END AS expected_power
				FROM
					site s
					LEFT JOIN device d ON d.id_site = s.id
				WHERE
					d.id_device_type = 4 
					AND s.`status` = 1 
					AND d.`status` = 1 
				GROUP BY
					s.id
			)t ON t.id_site = s.id
			
			LEFT JOIN(
				SELECT
					s.id AS id_site,
					SUM( d.last_value ) AS activePower 
				FROM
					site s
					LEFT JOIN device d ON d.id_site = s.id 
				WHERE
					d.id_device_type = 1
					AND s.`status` = 1
					AND s.is_delete = 0
					AND d.is_delete = 0 
					AND d.`status` = 1 
				GROUP BY
					s.id
			)m ON m.id_site = s.id 
			
			LEFT JOIN(
				SELECT
					s.id AS id_site,
					SUM( d.last_value ) AS activePower 
				FROM
					site s
					LEFT JOIN device d ON d.id_site = s.id 
				WHERE
					d.id_device_type = 3
					AND d.consumption_meter = 0
					AND d.is_delete = 0
					AND s.`status` = 1 
					AND s.is_delete = 0
					AND d.`status` = 1 
				GROUP BY
					s.id
			)ivt ON ivt.id_site = s.id
			
			
			LEFT JOIN (
				SELECT
					t.id_site,
					JSON_ARRAYAGG(obj_alert) AS alerts
				FROM (
					SELECT
						s.id AS id_site,
						JSON_OBJECT('id_site', s.id, 'total_error', COUNT( a.id ), 'icon_alert', i.icon) AS obj_alert
					FROM
						site_employee_map sem 
						LEFT JOIN site s ON s.id = sem.id_site
						LEFT JOIN device d ON d.id_site = s.id
						RIGHT JOIN alert a ON a.id_device = d.id AND a.`status` = 1
						LEFT JOIN error er ON a.id_error = er.id 
						LEFT JOIN error_level el ON el.id = er.id_error_level
						LEFT JOIN icon i ON i.id = el.id_icon
					WHERE sem.id_employee = #{id_employee} AND a.`status` = 1 AND er.`status` = 1 AND s.`status` = 1 AND el.`status` = 1
						GROUP BY s.id, el.id
						) t
						GROUP BY t.id_site
				) er ON er.id_site = s.id
				
			LEFT JOIN (
				SELECT
					s.id AS id_site,
					COUNT( a.id ) AS total_error 
				FROM
					site s
					LEFT JOIN device d ON d.id_site = s.id
					RIGHT JOIN alert a ON a.id_device = d.id 
					LEFT JOIN error e ON e.id = a.id_error
				WHERE
					s.`status` = 1 
					AND s.is_delete = 0 
					AND a.`status` = 1
					AND a.`is_delete` = 0
					AND e.`status` = 1
					AND e.`is_delete` = 0
					AND d.`status` = 1
					AND d.`is_delete` = 0
				GROUP BY s.id 
				) eer ON eer.id_site = s.id
				
			LEFT JOIN (
				SELECT
					gg.id_site,
					JSON_ARRAYAGG(obj_device) AS devices_list 
				FROM
					(
						SELECT
							d.id_site,
							JSON_OBJECT(
								'id',
								d.id,
								'device_name',
								d.devicename,
								'id_site',
								d.id_site,
								'id_device_type',
								d.id_device_type,
								'active_power',
								d.last_value,
								'comparison_ratio',
								IF(
									ws.device_count > 0,
									IF(
										ws.last_value > 200,
										ROUND(d.last_value / ( d.rating_ac_power * IF(ws.last_value > 1000, 1, ws.last_value / 1000) ) * 100, 1),
										NULL
									),
									IF(
										dmax.device_count > 1,
										ROUND(d.last_value / (dmax.last_value ) * 100, 1),
										NULL
									)
								)
							) AS obj_device
						FROM
							device d
							LEFT JOIN site_employee_map sem ON sem.id_site = d.id_site
							LEFT JOIN site s ON s.id = d.id_site
							LEFT JOIN (
								SELECT
									id_site,
									AVG(`last_value`) AS `last_value`,
									COUNT(id) AS device_count
								FROM
									device
								WHERE
									id_device_type = 4
									AND status = 1
									AND is_delete = 0
								GROUP BY
									id_site,
									id_device_type
							) ws ON ws.id_site = s.id
							LEFT JOIN (
								SELECT
									id_site,
									MAX(`last_value`) AS `last_value`,
									COUNT(id) AS device_count,
									rating_ac_power,
									id_device_type
								FROM
									device
								WHERE
									id_device_type IN (1, 3)
									AND status = 1
									AND is_delete = 0
								GROUP BY
									id_site,
									id_device_type,
									rating_ac_power
							) dmax ON dmax.id_site = s.id AND dmax.id_device_type = d.id_device_type AND dmax.rating_ac_power = d.rating_ac_power
						WHERE
							sem.id_employee = 1
							AND s.status = 1 
							AND s.is_delete = 0 
							AND d.id_device_type IN (1, 3)
							AND d.status = 1 
							AND d.is_delete = 0
					) gg
				GROUP BY
					gg.id_site
			) im ON im.id_site = s.id
			
			LEFT JOIN (
			 SELECT
					d.id_site,
					DATE_FORMAT(CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), '%m/%d/%Y %h:%i:%s %p' ) AS last_updated,
					UNIX_TIMESTAMP(d.last_updated)  AS unix_time,
					
					CASE
								WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') )
								WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
								WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
								ELSE 0
							END AS times_ago,

							CASE
								WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
								WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
								WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
							END AS times_ago_unit
							
				FROM
					device d
					LEFT JOIN site s ON s.id = d.id_site
					LEFT JOIN time_zone t ON t.id = s.id_time_zone 
					LEFT JOIN site_employee_map sem ON sem.id_site = s.id
				WHERE
					d.id_device_group = 19 
					
					<if test="is_supper_admin != 1">	
			 			AND sem.id_employee = #{id_employee} 
					</if>
					
					AND s.`status` = 1 AND s.is_delete = 0 AND d.`status` = 1 AND d.is_delete = 0
					GROUP BY s.id
					ORDER BY unix_time ASC
			)p ON p.id_site = s.id
			
			LEFT JOIN (
				SELECT
					t.id_site,
					JSON_ARRAYAGG(obj_tag) AS tags
				FROM (
					SELECT
						s.id AS id_site,
						JSON_OBJECT('id', t.id, 'name', t.`name`) AS obj_tag
					FROM
						tag_site_map tsm 
						LEFT JOIN site s ON s.id = tsm.id_site
						LEFT JOIN tag t On t.id = tsm.id_tag
					WHERE s.`status` = 1 AND s.`is_delete` = 0
						) t
				GROUP BY t.id_site
			) tag ON tag.id_site = s.id
			
		WHERE s.status = 1 and s.is_delete = 0

		<if test="is_supper_admin != 1">	
 			AND sem.id_employee = #{id_employee} AND sem.is_hiding = 0
		</if>

		<if test="hash_id_site_group != null">	
 			AND SHA2(s.id_site_group, 256) = #{hash_id_site_group}
		</if>
		
		<if test="hash_id_site_sub_group != null">	
 			AND SHA2(s.id_site_sub_group, 512) = #{hash_id_site_sub_group}
		</if>
		
		<if test="column == 1 and value_filter != null">
			AND s.name LIKE CONCAT("%",#{value_filter}, "%")
		</if>
		
		<if test="column == 2 and value_filter != null">
			AND s.id = #{value_filter}
		</if>
		
		<if test="column == 3 and value_filter != null">
			AND s.dc_capacity = #{value_filter}
		</if>
		
		<if test="column == 4 and value_filter != null">
			AND s.built_since = #{value_filter}
		</if>
		
		<if test="column == 5 and value_filter != null">
			AND c.name LIKE CONCAT("%",#{value_filter}, "%")
		</if>
		
		
		<if test="name != null">
			AND s.name LIKE CONCAT("%",#{name}, "%")
		</if>
		
		
		<if test="id_company != null and id_company != 0">
			AND s.id_company = #{id_company}
		</if>
		
		<if test="id_sites != null and is_supper_admin != 1">
			AND s.id IN  (
				<foreach item="item" index="index" collection="id_sites" separator=" , ">
					#{item.id}
				</foreach>
			)
		</if>
		
		GROUP BY  s.id
				
		order by
	        <choose> 
	       		<when test="sort_column == 'is_rec_report'">
	                s.is_rec_report ${order_by}
	            </when>
	             
	            <when test="sort_column == 'name'">
	                s.name ${order_by}
	            </when>     
	                
	            <when test="sort_column == 'dc_capacity'">
	                s.dc_capacity ${order_by}
	            </when>
	            
	            <when test="sort_column == 'EERThisMonth'">
	                EERThisMonth ${order_by}
	            </when>
	            
	            <when test="sort_column == 'EERLastMonth'">
	                EERLastMonth ${order_by}
	            </when>
	            
	            <when test="sort_column == 'PerformanceRatioYesterday'">
	                s.PerformanceRatioYesterday ${order_by}
	            </when>
	            
	            <when test="sort_column == 'PerformanceIndexNow'">           
	               IF(v.activePower IS NULL, IF( ivt.activePower IS NULL, ROUND(m.activePower,1), ROUND(ivt.activePower,1)), ROUND(v.activePower, 1)) / IFNULL(ROUND(v.expected_power_virtual,1), ROUND(t.expected_power,1)) ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'total_error'">
	                total_error ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'kiosk_view'">
	                s.kiosk_view ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'id_company'">
	                s.id_company ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'id'">
	                s.id ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'energy_now'">
	                activePower ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'weather'">
	                s.weather_icon ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'irradiance'">
	                irradiance ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'built_since'">
	                s.built_since ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'last_updated'">
	                p.unix_time ${order_by}
	            </when>
	            
	       		<when test="sort_column == 'expiration'">
	                s.expiration ${order_by}
	            </when>
	            
	            <otherwise>
			      s.`name`, s.id_company ASC
			    </otherwise>                                                  
	        </choose>  
       LIMIT ${limit} OFFSET ${offset};
	</select>
	
	<select id="getListAlertBySite" resultType="Map" >
		SELECT
			s.id AS id_site,
			COUNT( a.id ) AS total_error,
			i.icon AS icon_alert
		FROM
			site s
			LEFT JOIN device d ON d.id_site = s.id
			RIGHT JOIN alert a ON a.id_device = d.id AND a.`status` = 1
			LEFT JOIN error er ON a.id_error = er.id 
			LEFT JOIN error_level el ON el.id = er.id_error_level
			LEFT JOIN icon i ON i.id = el.id_icon
			WHERE s.id = #{id} AND a.`status` = 1 AND er.`status` = 1 AND s.`status` = 1 AND el.`status` = 1
		GROUP BY s.id, el.id
	</select>
	
	
	<select id="getListCount"  resultType="int" parameterType="com.nwm.api.entities.PortfolioEntity">
    	SELECT count(*) as totalRow
		FROM site s
		WHERE s.status = 1
		
		<if test="name != null">
			AND s.name LIKE CONCAT("%",#{name}, "%")
		</if>
		
		<if test="id_sites != null and is_supper_admin != 1">
			AND s.id IN  (
				<foreach item="item" index="index" collection="id_sites" separator=" , ">
					#{item.id}
				</foreach>
			)
		</if>
		
		GROUP BY s.id
		
  	</select>
  	
  	
  	<select id="getAlertSummary" resultType="com.nwm.api.entities.PortfolioEntity" parameterType="com.nwm.api.entities.PortfolioEntity">
		SELECT (
			SELECT
				COUNT( s.id ) AS totalSite 
			FROM
				site s
			WHERE
				 s.`status` = 1 
				<if test="id_sites != null and !id_sites.isEmpty()">
					AND s.id IN  (
						<foreach item="item" index="index" collection="id_sites" separator=" , ">
							#{item.id}
						</foreach>
					)
				</if>
		) AS totalSite,
		(
			SELECT
				COUNT(*) AS totalAlert 
			FROM
				alert a
				LEFT JOIN error e ON a.id_error = e.id 
				LEFT JOIN device d ON d.id = a.id_device
			WHERE
				a.`status` = 1 
				AND e.`status` = 1 
				AND a.`is_delete` = 0
				AND e.`is_delete` = 0
				AND d.`status` = 1
				AND d.`is_delete` = 0
				<if test="id_sites != null and !id_sites.isEmpty()">
					AND d.id_site IN  (
						<foreach item="item" index="index" collection="id_sites" separator=" , ">
							#{item.id}
						</foreach>
					)
				</if>
		) AS totalAlert,
		
		(
			SELECT
				SUM( d.last_value ) AS totalPower 
			FROM
				site s
				LEFT JOIN device d ON d.id_site = s.id
			WHERE
				d.id_device_type = 1
				AND s.`status` = 1 
				AND d.`status` = 1 
				<if test="id_sites != null and !id_sites.isEmpty()">
					AND s.id IN  (
						<foreach item="item" index="index" collection="id_sites" separator=" , ">
							#{item.id}
						</foreach>
					)
				</if>
		) AS totalPower
			
  	</select>
	
	<select id="getInverterDeviceStatus" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			IFNULL(d.last_value, 0) as active_power,
			(
				SELECT 
					IFNULL(MAX(d.last_value / d.rating_ac_power * 100), 0)
				FROM
					device d
				WHERE
					d.id_site = #{id}
					AND d.id_device_type = 1
			) AS optimal_ratio,
			(
				SELECT 
					d.last_value / d.rating_ac_power * 100
				FROM
					device d
				WHERE
					d.id_site = #{id}
					AND d.is_default = 1
				GROUP BY d.is_default
			) AS default_optimal_ratio,
			IF ((d.last_value IS NULL) OR (d.rating_ac_power IS NULL) OR (d.rating_ac_power = 0), 0, d.last_value / d.rating_ac_power * 100) AS percent_power_status
		FROM
			device d
		WHERE
			d.id_site = #{id}
			AND d.id_device_type = 1
	</select>
	
	<select id="getMeterDeviceStatus" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			IFNULL(d.last_value, 0) as active_power,
			(
				SELECT 
					IFNULL(MAX(d.last_value / d.rating_ac_power * 100), 0)
				FROM
					device d
				WHERE
					d.id_site = #{id}
					AND d.id_device_type = 3
			) AS optimal_ratio,
			(
				SELECT 
					d.last_value / d.rating_ac_power * 100
				FROM
					device d
				WHERE
					d.id_site = #{id}
					AND d.is_default = 1
				GROUP BY d.is_default
			) AS default_optimal_ratio,
			IF ((d.last_value IS NULL) OR (d.rating_ac_power IS NULL) OR (d.rating_ac_power = 0), 0, d.last_value / d.rating_ac_power * 100) AS percent_power_status
		FROM
			device d
		WHERE
			d.id_site = #{id}
			AND d.id_device_type = 3
	</select>
	
	<select id="getExpectedPowerByVirtualDevice" resultType="double">
		SELECT v.expected_power_ac
		FROM
			model_virtual_meter_or_inverter v
			LEFT JOIN device d ON d.id = v.id_device
		WHERE
			d.id_site = #{id}
			AND d.id_device_type = 12
			AND d.status = 1
			AND d.is_delete = 0
		ORDER BY v.time DESC
		LIMIT 1
	</select>
	
	<update id="updateNote">
		UPDATE `site`
		SET
			`note` = #{note}
		WHERE
			`id` = #{id}
	</update>
	
	<select id="getListDeviceBySite" resultType="Map" >
		SELECT
			s.devicename,
			dt.name AS device_type_name,
			s.is_default,
			s.id,
			s.devicename as text
		FROM
			device s
			LEFT JOIN device_type dt ON dt.id = s.id_device_type
		WHERE s.id_site = #{id}
		AND s.id_device_type IN (1,3)
		    order by s.id DESC
		 	 
	</select>
	
	<update id="updateAllDevicesBySite">
		UPDATE `device`
		SET
			`is_default` = 0
		WHERE
			`id_site` = #{id}
	</update>
	
	<update id="updateDefaultDevice">
		UPDATE `device`
		SET
			`is_default` = 1
		WHERE
			`id` = #{id_device}
	</update>
	
</mapper>
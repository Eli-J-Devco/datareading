<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SitesDashboard">
	<select id="getDetail" resultType="com.nwm.api.entities.SitesDevicesEntity" parameterType="com.nwm.api.entities.SitesDevicesEntity">
		SELECT
			CONCAT_WS( ", ", s.city, s.postal_code ) AS address_short,
			CONCAT_WS( ", ", s.number, s.street ) AS street_ws,
			s.id,
			SHA1(s.id) AS hash_id,
			s.id_country,
			s.id_company,
			s.id_time_zone,
			<include refid="com.nwm.common.siteName"/> AS `name`,
			s.lat,
			s.lng,
			s.old_data,
			s.number,
			s.street,
			s.postal_code,
			s.city,
			s.state,
			DATE_FORMAT( s.commissioning, '%m/%d/%Y' ) AS commissioning,
			s.emergency_contact,
			s.ac_capacity,
			s.dc_capacity,
			s.`status`,
			s.is_delete,
			s.created_date,
			s.created_by,
			s.updated_date,
			s.updated_by,
			s.data_send_time,
			s.kiosk_view,
			DATE_FORMAT( s.built_since, '%m/%d/%Y' ) AS built_since,
			c.`name` AS country_name,
			s.gallery,
			c.localization_format,
			c.format_sql_short,
			c.format_sql_long,
			c.format_sql_string_short,
			c.format_sql_string_long,
			c.format_sql_string_mdy,
			s.data_send_time,
			t.value AS timezone_value,
			t.offset AS timezone_offset,
			s.is_rec_report,
			s.datalogger_ip,
			s.cf_start_time,
			s.cf_end_time,
			s.cf_alert_threshold,
			s.unit_type_temp,
			s.unit_wind_speed,
			g.total_error,
			s.display_time_format,
			s.display_date_format,
			d.name AS date_format,
			d.java_format AS java_date_format,
			s.pv_model,
			s.pv_module_temperature_coeff,
			s.global_solar_irradiance_at_stc,
			s.stc_temperature,
			s.inverter_efficiency,
			s.t_avg,
			s.system_loss,
			s.min_irradiance_limit,
			s.clip,
			s.bifaciality_factor,
			s.ids_device_poa,
			s.ids_device_rpoa,
			s.ids_device_panel_temp,
			s.ids_device_ambient_temp,
			IF(v.enable_virtual_device > 0 ,1,0) AS enable_virtual_device,
			s.modules_per_string,
			s.number_of_strings,
			s.kwp_dc_for_each_solar_module,
			s.data_interval_factor,
			s.annual_pv_module_degradation,
			s.cable_losses,
			s.transformer_losses,
			s.soiling,
			s.other_losses,
			TIME_FORMAT(CONVERT_TZ(s.sunrise, '+00:00', t.offset), '%H:%i:%s') AS sunrise,
			TIME_FORMAT(CONVERT_TZ(s.sunset, '+00:00', t.offset), '%H:%i:%s') AS sunset,

			IF(smm.alert_mail_cc IS NULL || smm.alert_mail_cc = '', '', smm.alert_mail_cc) AS alert_mail_cc,
			IF(smm.alert_mail_bcc IS NULL || smm.alert_mail_bcc = '', '', smm.alert_mail_bcc) AS alert_mail_bcc,
			IF(smm.cf_email_subscribers IS NULL || smm.cf_email_subscribers = '', '', smm.cf_email_subscribers) AS cf_email_subscribers,
			
			h.is_hiding,
			s.table_data_report,
			s.table_data_virtual,
			s.is_show_each_meter,		
			s.expiration,
			s.cost,
			s.cost_unit,
			s.site_domain_type,
			s.threshold_item_max,
			s.time_queue,
			s.advance_tech_pass,
			s.advance_tech_host,
			s.advance_tech_status,
			s.advance_tech_control_enable,
			s.serial_number,
			s.total_area,
			s.total_unit,
			s.weather_indoor_temp,
			s.weather_indoor_temp_unit,
			s.weather_outdoor_temp,
			s.weather_outdoor_temp_unit,
			DATE_FORMAT(CONVERT_TZ(s.weather_time,"UTC", t.`value`), '%H:%i %p') AS weather_time,
			
			
			
			s.weather_humidity,
			s.weather_humidity_unit,
			s.weather_snow,
			s.weather_snow_unit,
			s.weather_rain,
			s.weather_rain_unit,
			s.weather_wind,
			s.weather_wind_unit,
			
			s.weather_description,
			s.weather_icon,
			DATE_FORMAT(CONVERT_TZ(s.weather_time,"UTC", t.`value`), '%W, %d %M %Y') AS weather_time_string,
			hg.id_gateway AS hvac_gateway,
			hl.path AS hvac_layout,
			hl.id AS id_hvac_layout
		FROM
			site s 
			LEFT JOIN site_employee_map sem ON sem.id_site = s.id
			LEFT JOIN country c ON c.id = s.id_country
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN date_format d ON d.id = s.display_date_format
			LEFT JOIN site_mail_map smm ON smm.id_site = s.id AND smm.id_employee = #{id_employee}
			LEFT JOIN hvac_gateway hg ON hg.id_site = s.id
			LEFT JOIN hvac_layout hl ON hl.id = hg.id_hvac_layout
			
			LEFT JOIN (
				SELECT
					id_site,
					MAX(is_hiding) AS is_hiding
				FROM site_employee_map
				GROUP BY id_site
			) h ON h.id_site = s.id
			
			LEFT JOIN (
				SELECT sem.id_site, GROUP_CONCAT(e.email) AS alert_mail_bcc FROM site_employee_map sem
				LEFT JOIN employee e ON e.id = sem.id_employee
				WHERE 
				SHA1(sem.id_site) = #{hash_id}
				AND e.id = #{id_employee}
			)t ON t.id_site = s.id
			
			LEFT JOIN(
				SELECT
					COUNT( a.id ) AS total_error,
					d.id_site 
				FROM
					device d
					LEFT JOIN alert a ON a.id_device = d.id 
					LEFT JOIN error e ON e.id = a.id_error
					LEFT JOIN site s ON s.id = d.id_site
				WHERE
					SHA1(d.id_site) = #{hash_id}
					AND d.`status` = 1 
					AND a.`status` = 1
					AND e.`status` = 1 
					AND e.is_delete = 0
					AND d.is_delete = 0
					AND s.enable_alert = 1
					<include refid="com.nwm.common.deviceByDomainCondition"/>
			        <if test="!isUserNW.booleanValue()">
						AND e.id_error_level != 14
					</if>
					
			)g ON g.id_site = s.id
			
			LEFT JOIN (
				SELECT COUNT(*) AS enable_virtual_device, d.id_site FROM device d 
				WHERE d.`status` = 1 
				AND d.is_delete = 0 
				AND d.hidden = 0
				AND d.virtual_device_type IS NOT NULL
				AND d.virtual_device_type != ''
				AND SHA1(d.id_site) = #{hash_id}
				<include refid="com.nwm.common.deviceByDomainCondition"/>
			)v ON v.id_site = s.id
			
		WHERE
			SHA1(s.id) = #{hash_id}
			
			<if test="is_supper_admin != 1">
				AND sem.id_employee = #{id_employee} AND sem.is_hiding = 0
			</if>
			AND s.`status` = 1 
			AND s.is_delete = 0
		GROUP BY s.id
	</select>
	
	<select id="getListDeviceIsDisableAlert" resultType="Map">
		SELECT
			d.*
			
		FROM
			device d
		WHERE
			SHA1(d.id_site) = #{hash_id} AND d.disable_alert = 0
	</select>
	
	
	 
	
	<select id="getListErrorLevel" resultType="Map">
		SELECT
			m.*
			
		FROM
			error_level_site_map m
		WHERE
			SHA1(m.id_site) = #{hash_id} GROUP BY m.id_error_level
	</select>
	
	
	<select id="getListPanel" resultType="Map">
		SELECT
			m.*,
			m.name AS text,
			m.name AS label,
			d.BreakersPanel0L,
			d.BreakersPanel0R,
			d.BreakersPanel1L,
			d.BreakersPanel1R,
			d.BreakersPanel2L,
			d.BreakersPanel2R,
			d.BreakerPresentPanel0L,
			d.BreakerPresentPanel0R,
			d.BreakerPresentPanel1L,
			d.BreakerPresentPanel1R,
			d.BreakerPresentPanel2L,
			d.BreakerPresentPanel2R,
			d.NonRespondingBreakersPanel0L,
			d.NonRespondingBreakersPanel0R,
			d.NonRespondingBreakersPanel1L,
			d.NonRespondingBreakersPanel1R,
			d.NonRespondingBreakersPanel2L,
			d.NonRespondingBreakersPanel2R
		FROM
			device_panel m
			LEFT JOIN (
				SELECT * FROM ${datatablename} d WHERE d.id_device = #{id} ORDER BY d.time DESC LIMIT 1
			) d ON d.id_device = m.id_device
		WHERE
			m.id_device = #{id} GROUP BY m.id ORDER BY m.menu_order ASC
	</select>
	
	
	
	<select id="getListZones" resultType="Map">
		SELECT
			dz.id,
			dz.`name`,
			dm.id_zone_virtual,
			dm.bit_map,
			dm.bit_position,
			dm.monitor_status,
			dm.zone_position,
			JSON_ARRAYAGG(JSON_OBJECT(
				'id', dm.`id`,
				'name', dm.`name`,
				'bit_map', dm.bit_map,
				'bit_position', dm.bit_position,
				'zone_position', dm.zone_position,
				'monitor_status', dm.monitor_status,
				'field_0L', dv.field_0L,
				'field_0R', dv.field_0R,
				'field_0L_verify', dv.field_0L_verify,
				'field_0R_verify', dv.field_0R_verify,
				'BreakersPanel0L', t.BreakersPanel0L,
				'BreakersPanel0R', t.BreakersPanel0R,
				'BreakersPanel1L', t.BreakersPanel1L,
				'BreakersPanel1R', t.BreakersPanel1R,
				'BreakersPanel2L', t.BreakersPanel2L,
				'BreakersPanel2R', t.BreakersPanel2R,
				'BreakerPresentPanel0L', t.BreakerPresentPanel0L,
				'BreakerPresentPanel0R', t.BreakerPresentPanel0R,
				'BreakerPresentPanel1L', t.BreakerPresentPanel1L,
				'BreakerPresentPanel1R', t.BreakerPresentPanel1R,
				'BreakerPresentPanel2L', t.BreakerPresentPanel2L,
				'BreakerPresentPanel2R', t.BreakerPresentPanel2R
		)) AS virtual_map
		FROM device_zone_virtual_map dm 
		LEFT JOIN device_zone_virtual dv ON dv.id = dm.id_zone_virtual
		LEFT JOIN device_zone dz ON dz.id = dv.id_zone
		LEFT JOIN (
						SELECT * FROM ${datatablename} dv WHERE dv.id_device = #{id} AND dv.time >= DATE_ADD(NOW(),INTERVAL -1 HOUR) ORDER BY dv.time DESC LIMIT 1
					) t ON t.id_device = dz.id_device
		WHERE dz.id_device = #{id} AND dm.monitor_status IN(0,1) GROUP BY dz.id ORDER BY menu_order ASC;

		<!-- SELECT
			m.*,
			m.name AS text,
			m.name AS label,
			d.BreakersPanel0L,
			d.BreakersPanel0R,
			d.BreakersPanel1L,
			d.BreakersPanel1R,
			d.BreakersPanel2L,
			d.BreakersPanel2R,
			d.BreakerPresentPanel0L,
			d.BreakerPresentPanel0R,
			d.BreakerPresentPanel1L,
			d.BreakerPresentPanel1R,
			d.BreakerPresentPanel2L,
			d.BreakerPresentPanel2R,
			d.NonRespondingBreakersPanel0L,
			d.NonRespondingBreakersPanel0R,
			d.NonRespondingBreakersPanel1L,
			d.NonRespondingBreakersPanel1R,
			d.NonRespondingBreakersPanel2L,
			d.NonRespondingBreakersPanel2R,
			d.ZonesStatus132
		FROM
			device_zone m
			LEFT JOIN (
				SELECT * FROM ${datatablename} d WHERE d.id_device = #{id} ORDER BY d.time DESC LIMIT 1
			) d ON d.id_device = m.id_device
		WHERE
			m.id_device = #{id} GROUP BY m.id ORDER BY menu_order ASC; -->
	</select>
	
	
	
	<select id="getListDataBitMap" resultType="Map">
		SELECT * FROM device_panel_map dp WHERE dp.id_panel = #{id_panel} GROUP BY id;
	</select>
	
	
	<select id="getListDataZoneBitMap" resultType="Map">
		SELECT 
			dv.*,
			IFNULL(d.BreakerPresentPanel0L, 0) AS BreakerPresentPanel0L,
			IFNULL(d.BreakerPresentPanel0R, 0) AS BreakerPresentPanel0R,
			IFNULL(d.BreakerPresentPanel1L, 0) AS BreakerPresentPanel1L,
			IFNULL(d.BreakerPresentPanel1R, 0) AS BreakerPresentPanel1R,
			IFNULL(d.BreakerPresentPanel2L, 0) AS BreakerPresentPanel2L,
			IFNULL(d.BreakerPresentPanel2R, 0) AS BreakerPresentPanel2R,
			IFNULL(d.BreakersPanel0L, 0) AS BreakersPanel0L,
			IFNULL(d.BreakersPanel0R, 0) AS BreakersPanel0R,
			IFNULL(d.BreakersPanel1L, 0) AS BreakersPanel1L,
			IFNULL(d.BreakersPanel1R, 0) AS BreakersPanel1R,
			IFNULL(d.BreakersPanel2L, 0) AS BreakersPanel2L,
			IFNULL(d.BreakersPanel2R, 0) AS BreakersPanel2R,
			t.virtual_map
			FROM device_zone_virtual dv 
			LEFT JOIN device_zone dz ON dz.id = dv.id_zone
		
			LEFT JOIN (
				SELECT * FROM ${datatablename} d ORDER BY d.time DESC LIMIT 1
			) d ON d.id_device = dz.id_device 
		
			LEFT JOIN (
				SELECT 
					dv.id,
					dv.title0l,
					dv.title0r,
					dv.field_0L,
					dv.field_0R,
					dv.field_0L_verify,
					dv.field_0R_verify,
					JSON_ARRAYAGG(JSON_OBJECT(
						'id', dm.id,
						'id_zone_virtual', dm.id_zone_virtual,
						'name', dm.`name`,
						'bit_map', dm.bit_map,
						'bit_position', dm.bit_position,
						'monitor_status', dm.monitor_status,
						'zone_position', dm.zone_position
					)) AS virtual_map
									
		
					FROM device_zone_virtual dv 
						LEFT JOIN device_zone_virtual_map dm ON dm.id_zone_virtual = dv.id
						WHERE dv.id_zone = #{id_zone}
						GROUP BY dv.id
			)t ON t.id = dv.id
			WHERE dv.id_zone = #{id_zone}
	</select>
	
	
	<select id="getListDataLightingGraph" resultType="com.nwm.api.entities.ZoneGraphDateEntity">
		SELECT
		dv.ZonesStatus132 AS ZonesStatus132,
		IFNULL(dv.BreakersPanel0L,0) AS BreakersPanel0L,
		IFNULL(dv.BreakersPanel0R,0) AS BreakersPanel0R,
		IFNULL(dv.BreakersPanel1L,0) AS BreakersPanel1L,
		IFNULL(dv.BreakersPanel1R,0) AS BreakersPanel1R,
		IFNULL(dv.BreakersPanel2L,0) AS BreakersPanel2L,
		IFNULL(dv.BreakersPanel2R,0) AS BreakersPanel2R,
		IFNULL(dv.NonRespondingBreakersPanel0L,0) AS NonRespondingBreakersPanel0L,
		IFNULL(dv.NonRespondingBreakersPanel0R,0) AS NonRespondingBreakersPanel0R,
		IFNULL(dv.NonRespondingBreakersPanel1L,0) AS NonRespondingBreakersPanel1L,
		IFNULL(dv.NonRespondingBreakersPanel1R,0) AS NonRespondingBreakersPanel1R,
		IFNULL(dv.NonRespondingBreakersPanel2L,0) AS NonRespondingBreakersPanel2L,
		IFNULL(dv.NonRespondingBreakersPanel2R,0) AS NonRespondingBreakersPanel2R,
		IFNULL(dv.BreakerPresentPanel0L,0) AS BreakerPresentPanel0L,
		IFNULL(dv.BreakerPresentPanel0R,0) AS BreakerPresentPanel0R,
		IFNULL(dv.BreakerPresentPanel1L,0) AS BreakerPresentPanel1L,
		IFNULL(dv.BreakerPresentPanel1R,0) AS BreakerPresentPanel1R,
		IFNULL(dv.BreakerPresentPanel2L,0) AS BreakerPresentPanel2L,
		IFNULL(dv.BreakerPresentPanel2R,0) AS BreakerPresentPanel2R,
		
		1 AS on_time,
		<choose>
			<when test="data_send_time == 1">
				FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 300)*300), '%m-%d-%Y %H:%i') AS time_full,
				FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 300)*300), '%m-%d-%Y %h:%i %p') AS time_format,
				
				FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 300)*300), '%h:%i %p') AS categories_time
			</when>
			<when test="data_send_time == 2">
				FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 900)*900), '%m-%d-%Y %H:%i') AS time_full,
				FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 900)*900), '%m-%d-%Y %h:%i %p') AS time_format,
				FROM_UNIXTIME(((UNIX_TIMESTAMP(CONVERT_TZ( dv.time, 'UTC', t.value )) DIV 900)*900), '%h:%i %p') AS categories_time
			</when>
		</choose>
							
		FROM ${datatablename} dv 
		LEFT JOIN device d ON d.id = dv.id_device
		LEFT JOIN site s ON s.id = d.id_site
		LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE (CAST(CONVERT_TZ( dv.time, 'UTC', t.value ) AS DATETIME) BETWEEN CAST( #{start_date} AS DATETIME) AND CAST( #{end_date} AS DATETIME)) AND dv.error = 0
		ORDER BY dv.time ASC
	</select>
	
	
	<select id="getListBreakerAlerts" resultType="Map">
		<foreach collection="list_device" item="item" index="index" separator="union all" >
			(SELECT
				dv.time,
				dv.id_device,
				IFNULL(dv.BreakersPanel0L,0) AS BreakersPanel0L,
				IFNULL(dv.BreakersPanel0R,0) AS BreakersPanel0R,
				IFNULL(dv.BreakersPanel1L,0) AS BreakersPanel1L,
				IFNULL(dv.BreakersPanel1R,0) AS BreakersPanel1R,
				IFNULL(dv.BreakersPanel2L,0) AS BreakersPanel2L,
				IFNULL(dv.BreakersPanel2R,0) AS BreakersPanel2R,
				IFNULL(dv.NonRespondingBreakersPanel0L,0) AS NonRespondingBreakersPanel0L,
				IFNULL(dv.NonRespondingBreakersPanel0R,0) AS NonRespondingBreakersPanel0R,
				IFNULL(dv.NonRespondingBreakersPanel1L,0) AS NonRespondingBreakersPanel1L,
				IFNULL(dv.NonRespondingBreakersPanel1R,0) AS NonRespondingBreakersPanel1R,
				IFNULL(dv.NonRespondingBreakersPanel2L,0) AS NonRespondingBreakersPanel2L,
				IFNULL(dv.NonRespondingBreakersPanel2R,0) AS NonRespondingBreakersPanel2R,
				IFNULL(dv.BreakerPresentPanel0L,0) AS BreakerPresentPanel0L,
				IFNULL(dv.BreakerPresentPanel0R,0) AS BreakerPresentPanel0R,
				IFNULL(dv.BreakerPresentPanel1L,0) AS BreakerPresentPanel1L,
				IFNULL(dv.BreakerPresentPanel1R,0) AS BreakerPresentPanel1R,
				IFNULL(dv.BreakerPresentPanel2L,0) AS BreakerPresentPanel2L,
				IFNULL(dv.BreakerPresentPanel2R,0) AS BreakerPresentPanel2R,
				DATE_FORMAT(CONVERT_TZ( dv.time,'+00:00', t.`offset`), '%m/%d/%Y %h:%i %p') AS last_updated
			FROM
				${item.datatablename} dv 
				LEFT JOIN device d ON d.id = dv.id_device
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
			<!--WHERE
				(CAST(CONVERT_TZ( dv.time, '+00:00', t.`offset` ) AS DATETIME) BETWEEN CAST(#{start_date} AS DATETIME) AND CAST(#{end_date} AS DATETIME)) --> 
			ORDER BY dv.time DESC LIMIT 1)
		</foreach>
	</select>
	
	
	
	<select id="getListBreakerUnresponsive" resultType="Map">
		<foreach collection="list_devices" item="item" index="index" separator="union all" >
			(
			SELECT 
				pm.id,
				pm.id_panel,
				pm.`name`,
				pm.bit_map,
				pm.bit_position + 1 AS bit_position,
				pm.panel_position,
				pm.monitor_status,
				dp.`name` AS breaker_name,
				d.devicename 
			FROM device_panel_map pm 
			LEFT JOIN device_panel dp ON dp.id = pm.id_panel
			LEFT JOIN device d ON d.id = dp.id_device
				WHERE dp.id_device = #{item.id_device} 
				AND pm.panel_position = #{item.panel_position} 
				AND pm.bit_position = #{item.bit_position} 
				AND (dp.field_0L = #{item.field_0L} OR dp.field_0R = #{item.field_0L} ) 
				LIMIT 1
			)
		</foreach>
	</select>
	
	
	
	
	
	<select id="getListZonesAlerts" resultType="Map">
		<foreach collection="list_device" item="item" index="index" separator="union all" >
			(
				SELECT
					m.*,
					d.ZonesAlarmState132
				FROM
					device_zone m
					LEFT JOIN (
						SELECT * FROM ${item.datatablename} d ORDER BY d.time DESC LIMIT 1
					) d ON d.id_device = m.id_device
				WHERE
					m.id_device = #{item.id_device} GROUP BY m.id
			)
		</foreach>
	</select>
	
	
	
	
	
	<select id="getZoneDeviceLastRow" resultType="Map">
		SELECT * FROM ${datatablename} d ORDER BY d.time DESC LIMIT 1
	</select>
	
	
	
	<select id="getListAlertByIdDevice" resultType="Map">
		SELECT
			l.id,
			SHA1(l.id) AS hash_id,
			l.asset,
			el.name AS priority_name,
			l.capacity,
			l.`status`,
			l.alert_acknowledged,
			l.disable_notification,
			l.resolved,			
			IF(l.`status` = 1, 'Opened', 'Closed') AS status_name,
			el.`name` AS `level`,
			e.message,
			e.error_code,
			d.devicename,
			s.`name` AS site_name,
			s.id AS id_site,
			SHA1(s.id) AS hash_site_id,
			d.id as id_device,
			i.icon AS icon_alert,
			el.id AS id_error_level,
			DATE_FORMAT( CONVERT_TZ( l.start_date,'+00:00', t.`offset`) , '%m/%d/%Y %h:%i %p') AS start_date,
			DATE_FORMAT(CONVERT_TZ( l.end_date,'+00:00', t.`offset`), '%m/%d/%Y %h:%i %p') AS end_date,
			
			CASE
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit
			
			
		FROM
			`alert` l
			LEFT JOIN error e ON e.id = l.id_error
			LEFT JOIN error_level el ON el.id = e.id_error_level
			LEFT JOIN icon i ON i.id = el.id_icon
			LEFT JOIN device d ON d.id = l.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE e.`status` = 1 AND e.is_delete = 0 AND d.id = #{id_device}
			AND l.is_delete = 0 AND l.`status` = 1 AND s.enable_alert = 1
			GROUP BY l.id 
			LIMIT #{limit} OFFSET #{offset};
	</select>
	
	
	
	
	<select id="getListDeviceByIdSite" resultType="Map">
		SELECT
			d.serial_number,
			d.id,
			d.id AS id_device,
			SHA1(d.id) AS hash_id,
			d.id_site,
			SHA1(d.id_site) AS hash_site_id,
			d.id_device_group,
			d.devicename,
			d.devicename AS text,
			d.devicename AS label,
			d.datatablename,
			d.id_device_type,
			d.order_id,
			dt.`name` AS device_type_name,
			dt.image,
			s.datalogger_ip,
			d.ip_address,
			IFNULL(DATE_FORMAT( CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) , '%c/%e/%Y %h:%i %p'), "-") AS last_updated,
			t.offset,
			p.totalError,
			p.id_error_level,
			d.hidden,
			IFNULL(d.meter_type, 0 ) AS meter_type,
			<include refid="com.nwm.common.keyIndicatorField"/>,
			
			CASE
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN d.last_updated is null AND d.id_device_type != 12 THEN "-"
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( d.last_updated, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit,
			d.field_value_default,
			IF(pp.totalError > 0, 1, 0) AS is_datalogger_error,
			d.show_on_domain
			
		FROM
			device d
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON d.id_site = s.id
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN(
				SELECT 
					a.id_device,
					e.id_error_level,
					COUNT(a.id) AS totalError
				FROM
					alert a
					LEFT JOIN device d ON d.id = a.id_device
					LEFT JOIN error e ON e.id = a.id_error
					LEFT JOIN site s ON s.id = d.id_site
					
				WHERE
					a.`status` = 1
					AND a.is_delete = 0
					AND e.`status` = 1
					AND e.is_delete = 0
					AND d.`status` = 1
					AND s.enable_alert = 1
					AND d.is_delete = 0
					AND d.id_site = #{id_site}
				GROUP BY d.id
			) p ON p.id_device = d.id
			LEFT JOIN(
				SELECT 
					a.id_device,
					d.id_site,
					d.serial_number,
					e.id_error_level,
					COUNT(a.id) AS totalError
				FROM
					alert a
					LEFT JOIN device d ON d.id = a.id_device
					LEFT JOIN error e ON e.id = a.id_error
					LEFT JOIN site s ON s.id = d.id_site
					
				WHERE
					a.`status` = 1
					AND a.is_delete = 0
					AND e.`status` = 1
					AND e.is_delete = 0
					AND d.`status` = 1
					AND s.enable_alert = 1
					AND d.is_delete = 0
					AND e.id_error_level = 12 AND d.id_device_type = 5
					AND d.id_site = #{id_site}
				GROUP BY d.id
			) pp ON pp.id_site = d.id_site AND pp.serial_number = d.serial_number
			
		WHERE
			d.id_site = #{id_site} AND d.`status` = 1 AND d.is_delete = 0
			AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			<include refid="com.nwm.common.deviceByDomainCondition"/>
			
		ORDER BY
	        <choose> 
	       		<when test="sort_column == 'order_id'">
	                d.order_id ${order_by}
	            </when>
	             
	            <when test="sort_column == 'devicename'">
	                d.devicename ${order_by}
	            </when>     
	                
	            <when test="sort_column == 'key_indicator'">
	                key_indicator ${order_by}
	            </when>
	            
	            <when test="sort_column == 'times_ago'">
	                last_updated ${order_by}
	            </when>
	            
	            <otherwise>
			      d.order_id ASC
			    </otherwise>                                                  
	        </choose>
	</select>
	
  	
  	<select id="getListDeviceTypeMeter" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
		WHERE
			dt.id IN (3,7,9)
			AND d.is_excluded_meter = 0
			AND d.id_site = #{id_site}
			AND d.`status` = 1 
			AND d.is_delete = 0
		GROUP BY d.id_device_type
	</select>
	
	<select id="getListDeviceTypeInverter" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
		WHERE
			dt.id = 1
			AND d.id_site = #{id_site}
			AND d.`status` = 1 
			AND d.is_delete = 0
		GROUP BY d.id_device_type
	</select>
	
  	<select id="getGeneration" resultType="Map" >
		SELECT
			s.id,
			s.`name`,
			s.dc_capacity,
			s.ac_capacity,
			s.lat,
			s.lng,
			s.data_send_time,
			t.`offset`,
			IFNULL(this_month.nvmActiveEnergy, 0) AS energy_this_month,
			
			ROUND(today.power_today, 1) AS power_today,
			IFNULL(today.nvmActiveEnergy, 0) AS totalGeneration
		FROM
			site s
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
			LEFT JOIN(
				SELECT 
					d.id_site,
					IF( (SUM(IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, d.energy_today, 0))) > 0, (SUM(IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, d.energy_today, 0))), (SUM(IF(d.id_device_type = 1, d.energy_today, 0))) ) AS nvmActiveEnergy,
					IF( (SUM(IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, d.last_value, 0))) > 0, (SUM(IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, d.last_value, 0))), (SUM(IF(d.id_device_type = 1, d.last_value, 0))) ) AS power_today
					FROM device d 
					WHERE 
					d.`status` = 1 
					AND d.is_delete = 0
					AND d.id_site  = #{id_site}
			)today ON today.id_site = s.id
			
			LEFT JOIN(
				SELECT
					s.id,
					IF( (SUM(IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, sdr.ActualGeneration, 0))) > 0, (SUM(IF(d.id_device_type IN (3,7,9) AND d.is_excluded_meter = 0, sdr.ActualGeneration, 0))), (SUM(IF(d.id_device_type = 1, sdr.ActualGeneration, 0))) ) AS nvmActiveEnergy
				FROM
					${table_data_report} sdr
					LEFT JOIN device d ON d.id = sdr.id_device
					LEFT JOIN site s ON s.id = d.id_site
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
				WHERE
					s.`status` = 1
					AND d.`status` = 1
					AND d.id_site  = #{id_site}
					AND s.is_delete = 0
					AND d.is_delete = 0
					AND (sdr.time BETWEEN date_add(date_add(LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)),interval 1 DAY),interval -1 MONTH) AND LAST_DAY(CONVERT_TZ ( NOW(), '+00:00', t.`offset`)) )
					GROUP BY s.id
			)this_month ON this_month.id = s.id
			
						
		WHERE
					s.id = #{id_site}
					AND s.`status` = 1 
					AND s.is_delete = 0
					AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
	</select>
	
	<select id="getDeviceTableListBySite" resultType="com.nwm.api.entities.SitesDevicesEntity">
		SELECT
			d.id,
			d.id_site,
			d.view_tablename,
			d.job_tablename,
			d.id_device_type
		FROM device d
		WHERE
			d.id_site = #{id_site}
			AND d.`status` = 1
			AND d.is_delete = 0
	</select>

	<select id="getDeviceStatus" resultType="Map">
		SELECT
			d.id,
			d.id_site,
			d.devicename,
			d.id_device_type,
			d.lat,
			d.lng,
			d.rating_ac_power,
			dt.image,
			s.data_send_time,
			t.active_power,
			CASE
			 WHEN s.data_send_time = 1 THEN IF(TIMESTAMPDIFF(MINUTE, t.time, NOW()) <![CDATA[<]]> (5 + 2), "online", "offline")
			 WHEN s.data_send_time = 2 THEN IF(TIMESTAMPDIFF(MINUTE, t.time, NOW()) <![CDATA[<]]> (15 + 2), "online", "offline")
			 WHEN s.data_send_time = 3 THEN IF(TIMESTAMPDIFF(MINUTE, t.time, NOW()) <![CDATA[<]]> (1 + 2), "online", "offline")
			END AS comm_status,
			IF ((t.active_power IS NULL) OR (d.rating_ac_power IS NULL) OR (d.rating_ac_power = 0), NULL, t.active_power / d.rating_ac_power * 100) AS percent_power_status
		FROM
			device d
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN (
				SELECT
					id_device,
					<choose>
						<when test="id_device_type == 1 or id_device_type == 3 or id_device_type == 7 or id_device_type == 8 or id_device_type == 9">
							nvmActivePower
						</when>
						<otherwise>
							NULL
						</otherwise>
					</choose> AS active_power,
					time
				FROM
					${view_tablename}
				WHERE id_device = #{id}
				ORDER BY time DESC
				LIMIT 1
			) t ON t.id_device = d.id
		WHERE
			d.id_site = #{id_site}
			AND d.id = #{id}
			AND d.`status` = 1
			AND d.is_delete = 0
	</select>
	
	<select id="getLastUpdated" resultType="Map">
		SELECT
			<choose>
				<when test="id_device_type == 1">
					(IF(dv.nvmActivePower = -1 or dv.nvmActivePower IS NULL, "-", CONCAT_WS(" ", ROUND(dv.nvmActivePower, 2), "kW" )))
				</when>
				<when test="id_device_type == 3">
					(IF(dv.nvmActivePower = -1 or dv.nvmActivePower IS NULL, "-", CONCAT_WS(" ", ROUND(dv.nvmActivePower, 2), "kW" )))
				</when>
				<when test="id_device_type == 4">
					(IF(dv.nvm_irradiance = -1 or dv.nvm_irradiance IS NULL, "-", CONCAT_WS(" ", ROUND(dv.nvm_irradiance, 2), "W/m²" )))
				</when>
				<when test="id_device_type == 12">
					(IF(dv.nvm_irradiance = -1 or dv.nvmActivePower IS NULL, "-", CONCAT_WS(" ", ROUND(dv.nvmActivePower, 2), "kW" )))
				</when>
				<otherwise>
					"-"
				</otherwise>
			</choose> AS key_indicator,
			CASE
				WHEN CONVERT_TZ( dv.time, '+00:00', #{offset} ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', #{offset} ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( dv.time, '+00:00', #{offset} ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', #{offset} ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( dv.time, '+00:00', #{offset} ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', #{offset} ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( dv.time, '+00:00', #{offset} ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', #{offset} ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( dv.time, '+00:00', #{offset} ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', #{offset} ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( dv.time, '+00:00', #{offset} ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', #{offset} ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( dv.time, '+00:00', #{offset} ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', #{offset} ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( dv.time, '+00:00', #{offset} ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', #{offset} ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( dv.time, '+00:00', #{offset} ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', #{offset} ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit,
			
			IFNULL(DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', #{offset} ) , '%c/%e/%Y %h:%i %p'), "-") AS time
			
		FROM
			${datatablename} dv

		WHERE dv.id_device = #{id}
		<if test="id_device_type == 1 or id_device_type == 3">
				AND dv.error = 0 AND dv.nvmActivePower IS NOT NULL AND dv.nvmActiveEnergy
		</if>
		
		<if test="id_device_type == 4">
				AND dv.error = 0 AND dv.nvm_irradiance IS NOT NULL
		</if>
		
		
		ORDER BY dv.time DESC
		LIMIT 1
	</select>
	
	
	<select id="getListWidgetOverviewLeviton" resultType="Map">
		SELECT
			dw.id,
			dw.id_site,
			dw.`name`,
			dw.`status`,
			dw.icon,
			dw.is_consumption,
			dw.text_color,
			dw.unit,
			dw.menu_order,
			dw.energy_flow_enable,
			dw.energy_usage_enable,
			dw.widget_type,
			IFNULL(SUM(d.energy_today),0) AS today,
			IFNULL(SUM(d.field_value1),0) AS today_power,
			IFNULL(SUM(d.energy_last30_days),0) AS thirtydays
		FROM
			leviton_overview_widget dw
			LEFT JOIN leviton_overview_widget_map dm ON dm.id_leviton_overview_widget = dw.id
			LEFT JOIN device d ON d.id = dm.id_device
		WHERE
			dw.id_site = #{id_site}
			AND dw.`status` = 1 
			GROUP BY dw.id;
	</select>
	
	
	
	<select id="getListWidgetEnergyUsage" resultType="Map">
		SELECT
			d.id,
			d.id_site,
			d.`name`,
			d.`status`,
			d.icon,
			d.is_consumption,
			d.text_color,
			d.unit,
			d.menu_order,
			d.energy_flow_enable,
			d.energy_usage_enable,
			d.widget_type
		FROM
			leviton_overview_widget d
		WHERE
			d.id_site = #{id_site} AND energy_usage_enable = 1
			AND d.`status` = 1 
			GROUP BY d.id;
	</select>
	
	
	<select id="getListDeviceInWidget" resultType="Map">
		SELECT
			dm.id_device,
			dm.id_leviton_overview_widget,
			dt.datatablename
		FROM
			leviton_overview_widget_map dm
			LEFT JOIN device dt ON dt.id = dm.id_device
		WHERE
			dm.id_leviton_overview_widget = #{id}
			GROUP BY dt.id;
	</select>
	
	
	
	<!-- <select id="getDataToday" resultType="Map">
		SELECT 
			t.id_device,
			ROUND(IFNULL(SUM(t.energy), 0),2) AS energy,
			ROUND(IFNULL(SUM(t.today), 0), 2) AS today,
			ROUND(IFNULL(SUM(t.today_power), 0), 2) AS today_power
		FROM (
		<foreach collection="devices" item="item" index="index" separator="union all" >
		<![CDATA[
			SELECT
				dv.id_device,
				IFNULL(MAX(dv.nvmActiveEnergy) - MIN(dv.nvmActiveEnergy), 0) AS energy,
				(
					SELECT ROUND(IFNULL(MAX(dv.nvmActiveEnergy) - MIN(dv.nvmActiveEnergy), 0),1) AS today FROM ${item.datatablename} dv 
					LEFT JOIN device d ON d.id = dv.id_device
					LEFT JOIN site s ON s.id = d.id_site
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE 
					DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.`value` ), '%Y-%m-%d' ) = DATE_FORMAT( CONVERT_TZ( NOW(), 'UTC', t.`value` ), '%Y-%m-%d' )
				) AS today,
				
				(
					SELECT IFNULL(dv.nvmActivePower, 0) AS today_power FROM ${item.datatablename} dv 
					LEFT JOIN device d ON d.id = dv.id_device
					LEFT JOIN site s ON s.id = d.id_site
					LEFT JOIN time_zone t ON t.id = s.id_time_zone
					WHERE 
					DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.`value` ), '%Y-%m-%d %H:%i' ) >= DATE_FORMAT( CONVERT_TZ( DATE_ADD(NOW(),INTERVAL -1 HOUR), 'UTC', t.`value` ), '%Y-%m-%d %H:%i' )
					ORDER BY time DESC LIMIT 1
				) AS today_power
				
			FROM
				${item.datatablename} dv 
				LEFT JOIN device d ON d.id = dv.id_device
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE
				DATE_FORMAT( CONVERT_TZ( dv.time, 'UTC', t.`value` ), '%Y-%m-%d %H:%i:%s' ) >=  DATE_FORMAT( CONVERT_TZ( ADDDATE( NOW(), INTERVAL -29 DAY), 'UTC', t.`value` ), '%Y-%m-%d' )
		]]>
		</foreach>
		)t
	</select> --> 
	
	
	
	
	
	<select id="getDataChartingForLeviton" resultType="com.nwm.api.entities.ClientMonthlyDateEntity">
		SELECT
			time_full,
			time_format,
			categories_time,
			download_time,
			CAST(SUM(`nvmActiveEnergy`) AS DECIMAL) AS `energy`
		FROM (
			<foreach collection="devices" item="item" index="index" separator="union all">
				SELECT
					mi.time_format,
					mi.time_full,
					mi.categories_time,
					mi.download_time,
					IFNULL(LEAD(mi.nvmActiveEnergy) OVER (ORDER BY mi.time_format), ma.nvmActiveEnergy) - mi.nvmActiveEnergy AS nvmActiveEnergy
				FROM
					(
						SELECT
							t.time_format,
							t.time_full,
							t.download_time,
							t.categories_time,
							dv.nvmActiveEnergy
						FROM
							${item.datatablename} dv
							JOIN (
								SELECT
									<choose>
			 							<when test="id_filter == '12_month' or id_filter == 'lifetime'">
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%Y-%m') AS time_format,
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%m-%Y') AS time_full,
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%b, %Y') AS categories_time,
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%b, %Y') AS download_time,
				 						</when>
				 						<otherwise>
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%Y-%m-%d') AS time_format,
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%m-%d-%Y') AS time_full,
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%d') AS categories_time,
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%m-%d-%Y') AS download_time,
				 						</otherwise>
				 					</choose>	
	
									MIN(dv.time) AS time
								FROM
									${item.datatablename} dv
									LEFT JOIN device d ON d.id = dv.id_device
									LEFT JOIN site s ON s.id = d.id_site 
									LEFT JOIN time_zone t ON t.id = s.id_time_zone
								WHERE
				 					(CAST(CONVERT_TZ( dv.time, 'UTC', t.`value` ) AS DATETIME) BETWEEN CAST(#{start_date} AS DATETIME) AND CAST(DATE_FORMAT(DATE_ADD(#{end_date},INTERVAL 5 MINUTE) , '%Y-%m-%d 00:00:00')AS DATETIME))
								GROUP BY
									time_format
							) t ON t.time = dv.time
					) mi
					LEFT JOIN (
						SELECT
							t.time_format,
							t.time_full,
							t.categories_time,
							t.download_time,
							dv.nvmActiveEnergy
						FROM
							${item.datatablename} dv
							JOIN (
								SELECT
				 					<choose>
				 						<when test="id_filter == '12_month' or id_filter == 'lifetime'">
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%Y-%m') AS time_format,
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%m-%Y') AS time_full,
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%b, %Y') AS categories_time,
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%b, %Y') AS download_time,
				 						</when>
				 						<otherwise>
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%Y-%m-%d') AS time_format,
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%m-%d-%Y') AS time_full,
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%d') AS categories_time,
				 							DATE_FORMAT(CONVERT_TZ(dv.time, 'UTC',  t.`value`), '%m-%d-%Y') AS download_time,
				 						</otherwise>
				 					</choose>	
									MAX(dv.time) AS time
								FROM
									${item.datatablename} dv
									LEFT JOIN device d ON d.id = dv.id_device
									LEFT JOIN site s ON s.id = d.id_site 
									LEFT JOIN time_zone t ON t.id = s.id_time_zone
								WHERE
				 					(CAST(CONVERT_TZ( dv.time, 'UTC', t.`value` ) AS DATETIME) BETWEEN CAST(#{start_date} AS DATETIME) AND CAST(#{end_date} AS DATETIME))
								GROUP BY
									time_format
							) t ON t.time = dv.time
					) ma ON ma.time_full = mi.time_full

			</foreach>
		) t
		
		GROUP BY
			time_format
			
	</select>
	
	
</mapper>
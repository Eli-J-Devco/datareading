<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SitesReports">
	<resultMap id="SitesReportsMap" type="com.nwm.api.entities.SitesReportsEntity">
		<result property="id" column="id" />
		<result property="id_site" column="id_site" />
		<result property="id_employee" column="id_employee" />
		<result property="report_type" column="report_type" />
		<result property="cadence_range" column="cadence_range" />
		<result property="date_from" column="date_from" />
		<result property="date_to" column="date_to" />
		<result property="subscribers" column="subscribers" />
		<result property="data_intervals" column="data_intervals" />
		<result property="file_type" column="file_type" />
		<result property="status" column="status" />
		<result property="created_date" column="created_date" />
		<result property="created_by" column="created_by" />
		<result property="updated_date" column="updated_date" />
		<result property="updated_by" column="updated_by" />
	</resultMap>
	
	
	<select id="getListDeviceTypeMeter" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
		WHERE
			dt.id IN (3,7,9)
			AND d.is_excluded_meter = 0
			AND d.id_site = #{id_site}
			AND d.`status` = 1 
			AND d.is_delete = 0
		GROUP BY d.id_device_type
	</select>
	
	
	<select id="getListDeviceTypeInverter" resultType="Map">
		SELECT
			d.id,
			d.devicename,
			d.devicename AS export_devicename,
			d.datatablename,
			d.id_site
		FROM
			device d
			LEFT JOIN device_type dt ON d.id_device_type = dt.id 
		WHERE
			dt.id = 1
			AND d.id_site = #{id_site}
			AND d.`status` = 1 
			AND d.is_delete = 0
		GROUP BY d.id_device_type
	</select>
	
	
	<insert id="insertReports" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `report`(
			`id_site`,
			`id_employee`,
			`type_report`,
			`cadence_range`,
			`date_from`,
			`date_to`,
			`subscribers`,
			`data_intervals`,
			`file_type`,
			`status`,
			`created_date`,
			`updated_date`
		)VALUES(
			#{id_site},
			#{id_employee},
			#{type_report},
			#{cadence_range},
			#{date_from},
			#{date_to},
			#{subscribers},
			#{data_intervals},
			#{file_type},
			#{status},
			NOW(),
			NOW()
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	<update id="updateReports">
		UPDATE `report`
		SET
			`id_site` = #{id_site},
			`id_employee` = #{id_employee},
			`type_report` = #{type_report},
			`cadence_range` = #{cadence_range},
			`date_from` = #{date_from},
			`date_to` = #{date_to},
			`subscribers` = #{subscribers},
			`data_intervals` = #{data_intervals},
			`file_type` = #{file_type},
			`status` = #{status},
			`updated_date` = NOW()
		WHERE
			`id` = #{id}
	</update>
	
	
	<select id="getList" resultType="Map" >
		SELECT
			s.`name` AS site_name,
			CASE
		    	WHEN r.type_report = 1 THEN CONCAT_WS( " " , s.`name`, "Solar Production Report") 
		    	WHEN r.type_report = 2 THEN CONCAT_WS( " " , s.`name`, "Renewable Energy Credits") 
		    
		    ELSE s.`name`
			END	AS report_name,
			
			CASE
		    	WHEN r.cadence_range = 1 THEN "Daily"
				WHEN r.cadence_range = 2 THEN "Monthly"
				WHEN r.cadence_range = 3 THEN "Quarterly"
				WHEN r.cadence_range = 4 THEN "Annual"
		    ELSE "Custom"
			END	AS cadence_range_name,
			
			
			CASE
		    WHEN r.data_intervals = 1 THEN "5 Minutes"
				WHEN r.data_intervals = 2 THEN "15 Minutes"
				WHEN r.data_intervals = 3 THEN "1 Hour"
		    ELSE ""
			END	AS data_intervals_name,
			
			CASE
		    WHEN r.file_type = 1 THEN "PDF"
				WHEN r.file_type = 2 THEN "Excel"
				WHEN r.file_type = 3 THEN "CSV"
		    ELSE ""
			END	AS file_type_name,
		
			r.id,
			r.id_site,
			r.id_employee,
			r.cadence_range,
			r.type_report,
			r.data_intervals,
			r.subscribers,
			r.file_type,
			r.date_from,
			r.date_to,
			r.`status`,
			DATE_FORMAT(r.created_date, '%m/%d/%Y %H:%i %p') AS created_on,
			DATE_FORMAT(r.updated_date, '%m/%d/%Y %H:%i %p') AS last_modified
		FROM
			report r
			LEFT JOIN site s ON s.id = r.id_site
		WHERE r.status = 1 AND s.id = #{id_site} 
		GROUP BY r.id 
		    order by
	        <choose>  
	            <when test="sort_column == 'id'">
	                r.id ${order_by}
	            </when>         
	            <when test="sort_column == 'name'">
	                r.name ${order_by}
	            </when>
	            
	            <otherwise>
			      s.id DESC
			    </otherwise>                                                  
	        </choose>  
		 	 
		 LIMIT ${limit} OFFSET ${offset};
	</select>
	
  	
	
	<select id="getListCount"  resultType="int" parameterType="com.nwm.api.entities.SitesReportsEntity">
    	SELECT count(*) as totalRow
		FROM report r
		LEFT JOIN site s ON s.id = r.id_site
		WHERE r.status = 1 AND s.id = #{id_site}
  	</select>
  	
  	
  	
  	<delete id="deleteReports">
		DELETE FROM `report`
		WHERE id = #{id}
	</delete>
	
	
	
	<select id="getSiteDetail" resultType="com.nwm.api.entities.ViewReportEntity" parameterType="com.nwm.api.entities.ViewReportEntity" >
		SELECT
			s.id,
			s.id AS id_site,
			s.`name` AS site_name,
			DATE_FORMAT(NOW(), '%m/%d/%Y') AS report_date,
			s.ac_capacity,
			s.dc_capacity,
			"Normal" AS system_status
		FROM
			site s 
		WHERE
			s.id = #{id_site}
	</select>
	
	
	<select id="getDetailReport" resultType="com.nwm.api.entities.ViewReportEntity" parameterType="com.nwm.api.entities.ViewReportEntity" >
		SELECT
			r.id,
			s.id AS id_site,
			s.`name` AS site_name,
			DATE_FORMAT(NOW(), '%m/%d/%Y') AS report_date,
			s.ac_capacity,
			s.dc_capacity,
			"Normal" AS system_status,
			r.cadence_range,
			r.subscribers,
			CASE
		    	WHEN r.type_report = 1 THEN CONCAT_WS( " " , s.`name`, "Solar Production Report") 
		    	WHEN r.type_report = 2 THEN CONCAT_WS( " " , s.`name`, "Renewable Energy Credits") 
		    
		    ELSE s.`name`
			END	AS report_name
		FROM
			site s 
			LEFT JOIN report r ON r.id_site = s.id
		WHERE
			s.id = #{id_site} AND r.id = #{id}
	</select>
  	
  	
  	
  	<select id="getReportYearDataEnergy" resultType="Map" >
		SELECT 
			t.convert_time,
			SUM(t.tmp_energy) AS sumEergy,
			t.year,
			t.month
		FROM (
			SELECT
				iv.time,
				si.id,
				<if test="table_name = 'model_shark100'">
					MAX(iv.w_hours_received) - MIN(iv.w_hours_received) AS tmp_energy,
				</if>
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%Y-%m' ) AS local_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%b. %y' ) AS convert_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%Y' ) AS year,
				LOWER( DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%b' ) )  AS month
				
				
			FROM
				site si
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN ${table_name} iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id_site}
				AND si.`status` = 1
				AND si.is_delete = 0 
				AND iv.error = 0
				AND (CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} AND #{end_date})
				GROUP BY local_time, d.id
		)t GROUP BY t.convert_time ORDER BY t.time
	</select>
	
	
	<select id="getReportEnergyExpectations" resultType="Map" >
		SELECT
			* 
		FROM
			energy_expectations ee 
		WHERE
			ee.id_site = #{id_site}
	</select>
	
	
	<select id="getDataEnergyMeterMonth" resultType="Map" >
		SELECT
			t.time,
			t.time_format,
			t.categories_time,
			ROUND(( SUM( t.nvmActiveEnergy ) ), 1 ) AS chart_energy_kwh,
			t.time_full
			
		FROM
			(
				<foreach collection="groupDevices" item="item" index="index" separator="union all">
				<![CDATA[
					SELECT
						m.time,
						m.time_format,
						m.time_full,
						m.categories_time,
						SUM(m.nvmActiveEnergy) AS nvmActiveEnergy
					FROM
						(
						SELECT
							dv.time,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_format,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m-%d-%Y' ) AS time_full,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_time,
							ROUND(( MAX( dv.nvmActiveEnergy ) - MIN( dv.nvmActiveEnergy ) ), 1 ) AS nvmActiveEnergy
						FROM
							${item.datatablename} dv
							LEFT JOIN device d ON d.id = dv.id_device
							LEFT JOIN site s ON s.id = d.id_site 
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
						WHERE
							s.id = #{item.id_site}
							AND d.id_device_type IN (3,7,9)
							AND d.is_excluded_meter = 0
							AND dv.nvmActiveEnergy > 0
							AND DATE_FORMAT(CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m') = DATE_FORMAT( #{end_date}, '%Y-%m')
							AND s.`status` = 1 
							AND d.`status` = 1 
						GROUP BY
							d.id, time_format
						) m 
					GROUP BY
						m.time_format
					]]>
		      </foreach>
			) t 
		GROUP BY
			t.time_format
	</select>
	
	
	<select id="getDataEnergyInverterMonth" resultType="Map" >
		SELECT
			t.time,
			t.time_format,
			t.categories_time,
			ROUND(( SUM( t.nvmActiveEnergy ) ), 1 ) AS chart_energy_kwh,
			t.time_full
			
		FROM
			(
				<foreach collection="groupDevices" item="item" index="index" separator="union all">
				<![CDATA[
					SELECT
						m.time,
						m.time_format,
						m.time_full,
						m.categories_time,
						SUM(m.nvmActiveEnergy) AS nvmActiveEnergy
					FROM
						(
						SELECT
							dv.time,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m-%d' ) AS time_format,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m-%d-%Y' ) AS time_full,
							DATE_FORMAT( CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%m/%d' ) AS categories_time,
							ROUND(( MAX( dv.nvmActiveEnergy ) - MIN( dv.nvmActiveEnergy ) ), 1 ) AS nvmActiveEnergy
						FROM
							${item.datatablename} dv
							LEFT JOIN device d ON d.id = dv.id_device
							LEFT JOIN site s ON s.id = d.id_site 
							LEFT JOIN time_zone t ON t.id = s.id_time_zone
						WHERE
							s.id = #{item.id_site}
							AND d.id_device_type = 1
							AND dv.nvmActiveEnergy > 0
							AND DATE_FORMAT(CONVERT_TZ( dv.time, '+00:00', t.`offset` ), '%Y-%m') = DATE_FORMAT( #{end_date}, '%Y-%m')
							AND s.`status` = 1 
							AND d.`status` = 1 
						GROUP BY
							d.id, time_format
						) m 
					GROUP BY
						m.time_format
					]]>
		      </foreach>
			) t 
		GROUP BY
			t.time_format
	</select>
	
	
  	
	
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ChartTool">
	
	<select id="getChartData" resultType="Map">
		<if test="(filterBy == 'today' or filterBy == 'yesterday' or filterBy == 'last_3day' or filterBy == 'last_7day') and setup_send_time == 1 and data_send_time == 1">
			SELECT
				<choose>
					<when test="datatablename == 'model_lufft_class8020'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.IrradianceActual), 2) AS IrradianceActual,
				      ROUND(COUNT(iv.IrradianceMin), 2) AS IrradianceMin,
				      ROUND(COUNT(iv.IrradianceMax), 2) AS IrradianceMax,
				      ROUND(COUNT(iv.IrradianceAvg), 2) AS IrradianceAvg,
				      ROUND(COUNT(iv.AirTemperatureActual), 2) AS AirTemperatureActual,
				      ROUND(COUNT(iv.AirTemperatureMin), 2) AS AirTemperatureMin,
				      ROUND(COUNT(iv.AirTemperatureMax), 2) AS AirTemperatureMax,
				      ROUND(COUNT(iv.AirTemperatureAvg), 2) AS AirTemperatureAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationQuantityAbsolute), 2) AS PrecipitationQuantityAbsolute,
				      ROUND(COUNT(iv.PrecipitationQuantityDifferential), 2) AS PrecipitationQuantityDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AbsoluteHumidityActual), 2) AS AbsoluteHumidityActual,
				      ROUND(COUNT(iv.AbsoluteHumidityMin), 2) AS AbsoluteHumidityMin,
				      ROUND(COUNT(iv.AbsoluteHumidityMax), 2) AS AbsoluteHumidityMax,
				      ROUND(COUNT(iv.AbsoluteHumidityAvg), 2) AS AbsoluteHumidityAvg,
				      ROUND(COUNT(iv.MixingRatioActual), 2) AS MixingRatioActual,
				      ROUND(COUNT(iv.MixingRatioMin), 2) AS MixingRatioMin,
				      ROUND(COUNT(iv.MixingRatioMax), 2) AS MixingRatioMax,
				      ROUND(COUNT(iv.MixingRatioAvg), 2) AS MixingRatioAvg,
				      ROUND(COUNT(iv.AbsoluteAirPressureActual), 2) AS AbsoluteAirPressureActual,
				      ROUND(COUNT(iv.AbsoluteAirPressureMin), 2) AS AbsoluteAirPressureMin,
				      ROUND(COUNT(iv.AbsoluteAirPressureMax), 2) AS AbsoluteAirPressureMax,
				      ROUND(COUNT(iv.AbsoluteAirPressureAvg), 2) AS AbsoluteAirPressureAvg,
				      ROUND(COUNT(iv.WindSpeedStandardDeviation), 2) AS WindSpeedStandardDeviation,
				      ROUND(COUNT(iv.WindDirectionStandardDeviation), 2) AS WindDirectionStandardDeviation,
				      ROUND(COUNT(iv.WetBulbTemperature), 2) AS WetBulbTemperature,
				      ROUND(COUNT(iv.SpecificEnthalpy), 2) AS SpecificEnthalpy,
				      ROUND(COUNT(iv.AirDensityActual), 2) AS AirDensityActual,
				      ROUND(COUNT(iv.LeafWetnessActual), 2) AS LeafWetnessActual,
				      ROUND(COUNT(iv.LeafWetnessMin), 2) AS LeafWetnessMin,
				      ROUND(COUNT(iv.LeafWetnessMax), 2) AS LeafWetnessMax,
				      ROUND(COUNT(iv.LeafWetnessAvg), 2) AS LeafWetnessAvg,
				      ROUND(COUNT(iv.LeafWetnessState), 2) AS LeafWetnessState,
				      ROUND(COUNT(iv.ExternalTemperature), 2) AS ExternalTemperature,
				      ROUND(COUNT(iv.WindValueQualityFast), 2) AS WindValueQualityFast,
				    </when>
				    
					<when test="datatablename == 'model_lufft_ws501_umb_weather'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.GlobalRadiation), 2) AS GlobalRadiation,
				      ROUND(COUNT(iv.GlobalRadiation2), 2) AS GlobalRadiation2,
				      ROUND(COUNT(iv.GlobalRadiation3), 2) AS GlobalRadiation3,
				      ROUND(COUNT(iv.GlobalRadiation4), 2) AS GlobalRadiation4,
				      ROUND(COUNT(iv.AirTemperatureCActual), 2) AS AirTemperatureCActual,
				      ROUND(COUNT(iv.AirTemperatureCMin), 2) AS AirTemperatureCMin,
				      ROUND(COUNT(iv.AirTemperatureCMax), 2) AS AirTemperatureCMax,
				      ROUND(COUNT(iv.AirTemperatureCAvg), 2) AS AirTemperatureCAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationAbsolute), 2) AS PrecipitationAbsolute,
				      ROUND(COUNT(iv.PrecipitationDifferential), 2) AS PrecipitationDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AirTemperatureFActual), 2) AS AirTemperatureFActual,
				      ROUND(COUNT(iv.AirTemperatureFMin), 2) AS AirTemperatureFMin,
				      ROUND(COUNT(iv.AirTemperatureFMax), 2) AS AirTemperatureFMax,
				      ROUND(COUNT(iv.AirTemperatureFAvg), 2) AS AirTemperatureFAvg,
				      ROUND(COUNT(iv.ExternalTemperatureC), 2) AS ExternalTemperatureC,
				      ROUND(COUNT(iv.ExternalTemperatureF), 2) AS ExternalTemperatureF,
				    </when>
				    
					<when test="datatablename == 'model_abb_trio_class6210'">
				      ROUND(AVG(iv.AuroraType), 2) AS AuroraType,
				      ROUND(AVG(iv.GridType), 2) AS GridType,
				      ROUND(AVG(iv.TransformerType), 2) AS TransformerType,
				      ROUND(COUNT(iv.StatesByte0), 2) AS StatesByte0,
				      ROUND(COUNT(iv.StatesByte1), 2) AS StatesByte1,
				      ROUND(COUNT(iv.StatesByte2), 2) AS StatesByte2,
				      ROUND(COUNT(iv.StatesByte3), 2) AS StatesByte3,
				      ROUND(COUNT(iv.StatesByte4), 2) AS StatesByte4,
				      ROUND(COUNT(iv.TotalEnergy), 2) AS TotalEnergy,
				      ROUND(COUNT(iv.GridVoltage), 2) AS GridVoltage,
				      ROUND(COUNT(iv.GridCurrent), 2) AS GridCurrent,
				      ROUND(COUNT(iv.GridPower), 2) AS GridPower,
				      ROUND(COUNT(iv.Frequency), 2) AS Frequency,
				      ROUND(COUNT(iv.Input1Power), 2) AS Input1Power,
				      ROUND(COUNT(iv.Input1Voltage), 2) AS Input1Voltage,
				      ROUND(COUNT(iv.Input1Current), 2) AS Input1Current,
				      ROUND(COUNT(iv.Input2Power), 2) AS Input2Power,
				      ROUND(COUNT(iv.Input2Voltage), 2) AS Input2Voltage,
				      ROUND(COUNT(iv.Input2Current), 2) AS Input2Current,
				      ROUND(COUNT(iv.InverterTemperature), 2) AS InverterTemperature,
				      ROUND(COUNT(iv.BooseterTemperature), 2) AS BooseterTemperature,
				      ROUND(COUNT(iv.IslolationResistance), 2) AS IslolationResistance,
				    </when>
				    
				    <when test="datatablename == 'model_kippzonen_rt1_class8009'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    <when test="datatablename == 'model_rt1_class30000'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    
				    
				    <when test="datatablename == 'model_shark100'">
				      ROUND(AVG(iv.volts_a_n), 2) AS volts_a_n,
				      ROUND(AVG(iv.volts_b_n), 2) AS volts_b_n,
				      ROUND(AVG(iv.volts_c_n), 2) AS volts_c_n,
				      ROUND(AVG(iv.volts_a_b), 2) AS volts_a_b,
				      ROUND(AVG(iv.volts_c_a), 2) AS volts_c_a,
				      ROUND(AVG(iv.amps_a), 2) AS amps_a,
				      ROUND(AVG(iv.amps_b), 2) AS amps_b,
				      ROUND(AVG(iv.amps_c), 2) AS amps_c,
				      ROUND(AVG(iv.watts_3ph_total), 2) AS watts_3ph_total,
				      ROUND(AVG(iv.vars_3ph_total), 2) AS vars_3ph_total,
				      ROUND(AVG(iv.vas_3ph_total), 2) AS vas_3ph_total,
				      ROUND(AVG(iv.power_factor_3ph_total), 2) AS power_factor_3ph_total,
				      ROUND(AVG(iv.frequency), 2) AS frequency,
				      ROUND(AVG(iv.neutral_current), 2) AS neutral_current,
				      ROUND(AVG(iv.w_hours_received), 2) AS w_hours_received,
				      ROUND(AVG(iv.w_hours_delivered), 2) AS w_hours_delivered,
				      ROUND(AVG(iv.w_hours_net), 2) AS w_hours_net,
				      ROUND(AVG(iv.w_hours_total), 2) AS w_hours_total,
				      ROUND(AVG(iv.var_hours_positive), 2) AS var_hours_positive,
				      ROUND(AVG(iv.var_hours_negative), 2) AS var_hours_negative,
				      ROUND(AVG(iv.var_hours_net), 2) AS var_hours_net,
				      ROUND(AVG(iv.var_hours_total), 2) AS var_hours_total,
				      ROUND(AVG(iv.va_hours_total), 2) AS va_hours_total,
				      ROUND(AVG(iv.amps_a_average), 2) AS amps_a_average,
				      ROUND(AVG(iv.amps_b_average), 2) AS amps_b_average,
				      ROUND(AVG(iv.amps_c_average), 2) AS amps_c_average,
				      ROUND(AVG(iv.positive_watts_3ph_average), 2) AS positive_watts_3ph_average,
				      ROUND(AVG(iv.positive_vars_3ph_average), 2) AS positive_vars_3ph_average,
				      ROUND(AVG(iv.negative_watts_3ph_average), 2) AS negative_watts_3ph_average,
				      ROUND(AVG(iv.negative_vars_3ph_average), 2) AS negative_vars_3ph_average,
				      ROUND(AVG(iv.vas_3ph_average), 2) AS vas_3ph_average,
				      ROUND(AVG(iv.positive_pf_3ph_average), 2) AS positive_pf_3ph_average,
				      ROUND(AVG(iv.negative_pf_3ph_average), 2) AS negative_pf_3ph_average,
				      ROUND(AVG(iv.volts_a_n_min), 2) AS volts_a_n_min,
				      ROUND(AVG(iv.volts_b_n_min), 2) AS volts_b_n_min,
				      ROUND(AVG(iv.volts_c_n_min), 2) AS volts_c_n_min,
				      ROUND(AVG(iv.volts_a_b_min), 2) AS volts_a_b_min,
				      ROUND(AVG(iv.volts_b_c_min), 2) AS volts_b_c_min,
				      ROUND(AVG(iv.volts_c_a_min), 2) AS volts_c_a_min,
				      ROUND(AVG(iv.amps_a_min_avg_demand), 2) AS amps_a_min_avg_demand,
				      ROUND(AVG(iv.amps_b_min_avg_demand), 2) AS amps_b_min_avg_demand,
				      ROUND(AVG(iv.amps_c_min_avg_demand), 2) AS amps_c_min_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_min_avg_demand), 2) AS positive_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_min_avg_demand), 2) AS positive_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_min_avg_demand), 2) AS negative_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_min_avg_demand), 2) AS negative_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.vas_3ph_min_avg_demand), 2) AS vas_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_min_avg_demand), 2) AS positive_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_min_avg_demand), 2) AS negative_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.frequency_min), 2) AS frequency_min,
				      ROUND(AVG(iv.volts_a_n_max), 2) AS volts_a_n_max,
				      ROUND(AVG(iv.volts_b_n_max), 2) AS volts_b_n_max,
				      ROUND(AVG(iv.volts_c_n_max), 2) AS volts_c_n_max,
				      ROUND(AVG(iv.volts_a_b_max), 2) AS volts_a_b_max,
				      ROUND(AVG(iv.volts_b_c_max), 2) AS volts_b_c_max,
				      ROUND(AVG(iv.volts_c_a_max), 2) AS volts_c_a_max,
				      ROUND(AVG(iv.amps_a_max_avg_demand), 2) AS amps_a_max_avg_demand,
				      ROUND(AVG(iv.amps_b_max_avg_demand), 2) AS amps_b_max_avg_demand,
				      ROUND(AVG(iv.amps_c_max_avg_demand), 2) AS amps_c_max_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_max_avg_demand), 2) AS positive_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_max_avg_demand), 2) AS positive_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_max_avg_demand), 2) AS negative_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_max_avg_demand), 2) AS negative_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.vas_3ph_max_avg_demand), 2) AS vas_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_max_avg_demand), 2) AS positive_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_max_avg_demand), 2) AS negative_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.frequency_max), 2) AS frequency_max,
				      ROUND(AVG(iv.volts_a_n_thd), 2) AS volts_a_n_thd,
				      ROUND(AVG(iv.volts_b_n_thd), 2) AS volts_b_n_thd,
				      ROUND(AVG(iv.volts_c_n_thd), 2) AS volts_c_n_thd,
				      ROUND(AVG(iv.amps_a_thd), 2) AS amps_a_thd,
				      ROUND(AVG(iv.amps_b_thd), 2) AS amps_b_thd,
				      ROUND(AVG(iv.amps_c_thd), 2) AS amps_c_thd,
				      ROUND(AVG(iv.phase_a_current_0th), 2) AS phase_a_current_0th,
				      ROUND(AVG(iv.phase_a_current_1st), 2) AS phase_a_current_1st,
				      ROUND(AVG(iv.phase_a_current_2nd), 2) AS phase_a_current_2nd,
				      ROUND(AVG(iv.phase_a_current_3rd), 2) AS phase_a_current_3rd,
				      ROUND(AVG(iv.phase_a_current_4th), 2) AS phase_a_current_4th,
				      ROUND(AVG(iv.phase_a_current_5th), 2) AS phase_a_current_5th,
				      ROUND(AVG(iv.phase_a_current_6th), 2) AS phase_a_current_6th,
				      ROUND(AVG(iv.phase_a_current_7th), 2) AS phase_a_current_7th,
				      ROUND(AVG(iv.phase_a_voltage_0th), 2) AS phase_a_voltage_0th,
				      ROUND(AVG(iv.phase_a_voltage_1st), 2) AS phase_a_voltage_1st,
				      ROUND(AVG(iv.phase_a_voltage_2nd), 2) AS phase_a_voltage_2nd,
				      ROUND(AVG(iv.phase_a_voltage_3rd), 2) AS phase_a_voltage_3rd,
				      ROUND(AVG(iv.phase_b_current_0th), 2) AS phase_b_current_0th,
				      ROUND(AVG(iv.phase_b_current_1st), 2) AS phase_b_current_1st,
				      ROUND(AVG(iv.phase_b_current_2nd), 2) AS phase_b_current_2nd,
				      ROUND(AVG(iv.phase_b_current_3rd), 2) AS phase_b_current_3rd,
				      ROUND(AVG(iv.phase_b_current_4th), 2) AS phase_b_current_4th,
				      ROUND(AVG(iv.phase_b_current_5th), 2) AS phase_b_current_5th,
				      ROUND(AVG(iv.phase_b_current_6th), 2) AS phase_b_current_6th,
				      ROUND(AVG(iv.phase_b_current_7th), 2) AS phase_b_current_7th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_2nd), 2) AS phase_b_voltage_2nd,
				      ROUND(AVG(iv.phase_b_voltage_3rd), 2) AS phase_b_voltage_3rd,
				      ROUND(AVG(iv.phase_c_current_0th), 2) AS phase_c_current_0th,
				      ROUND(AVG(iv.phase_c_current_1st), 2) AS phase_c_current_1st,
				      ROUND(AVG(iv.phase_c_current_2nd), 2) AS phase_c_current_2nd,
				      ROUND(AVG(iv.phase_c_current_3rd), 2) AS phase_c_current_3rd,
				      ROUND(AVG(iv.phase_c_current_4th), 2) AS phase_c_current_4th,
				      ROUND(AVG(iv.phase_c_current_5th), 2) AS phase_c_current_5th,
				      ROUND(AVG(iv.phase_c_current_6th), 2) AS phase_c_current_6th,
				      ROUND(AVG(iv.phase_c_current_7th), 2) AS phase_c_current_7th,
				      ROUND(AVG(iv.phase_c_voltage_0th), 2) AS phase_c_voltage_0th,
				      ROUND(AVG(iv.phase_c_voltage_1st), 2) AS phase_c_voltage_1st,
				      ROUND(AVG(iv.phase_c_voltage_2nd), 2) AS phase_c_voltage_2nd,
				      ROUND(AVG(iv.phase_c_voltage_3rd), 2) AS phase_c_voltage_3rd,
				      ROUND(AVG(iv.angle_phase_a_current), 2) AS angle_phase_a_current,
				      ROUND(AVG(iv.angle_phase_b_current), 2) AS angle_phase_b_current,
				      ROUND(AVG(iv.angle_phase_c_current), 2) AS angle_phase_c_current,
				      ROUND(AVG(iv.angle_volts_a_b), 2) AS angle_volts_a_b,
				      ROUND(AVG(iv.angle_volts_b_c), 2) AS angle_volts_b_c,
				      ROUND(AVG(iv.angle_volts_c_a), 2) AS angle_volts_c_a,
				    </when>
				    
				    <when test="datatablename == 'model_ivt_solaron_ext'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.common_mode), 2) AS common_mode,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				      ROUND(AVG(iv.ac_current), 2) AS ac_current,
				    </when>
				    
				    <when test="datatablename == 'model_veris_industries_e51c2_power_meter'">
				      ROUND(AVG(iv.AccumulatedRealEnergyNet), 2) AS AccumulatedRealEnergyNet,
				      ROUND(AVG(iv.RealEnergyQuadrants14Import), 2) AS RealEnergyQuadrants14Import,
				      ROUND(AVG(iv.RealEnergyQuadrants23Export), 2) AS RealEnergyQuadrants23Export,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant1), 2) AS ReactiveEnergyQuadrant1,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant2), 2) AS ReactiveEnergyQuadrant2,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant3), 2) AS ReactiveEnergyQuadrant3,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant4), 2) AS ReactiveEnergyQuadrant4,
				      ROUND(AVG(iv.ApparentEnergyNet), 2) AS ApparentEnergyNet,
				      ROUND(AVG(iv.ApparentEnergyQuadrants14), 2) AS ApparentEnergyQuadrants14,
				      ROUND(AVG(iv.ApparentEnergyQuadrants23), 2) AS ApparentEnergyQuadrants23,
				      ROUND(AVG(iv.TotalNetInstantaneousRealPower), 2) AS TotalNetInstantaneousRealPower,
				      ROUND(AVG(iv.TotalNetInstantaneousReactivePower), 2) AS TotalNetInstantaneousReactivePower,
				      ROUND(AVG(iv.TotalNetInstantaneousApparentPower), 2) AS TotalNetInstantaneousApparentPower,
				      ROUND(AVG(iv.TotalPowerFactor), 2) AS TotalPowerFactor,
				      ROUND(AVG(iv.VoltageLL3pAve), 2) AS VoltageLL3pAve,
				      ROUND(AVG(iv.VoltageLN3pAve), 2) AS VoltageLN3pAve,
				      ROUND(AVG(iv.Current3pAve), 2) AS Current3pAve,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.TotalRealPowerPresentDemand), 2) AS TotalRealPowerPresentDemand,
				      ROUND(AVG(iv.TotalReactivePowerPresentDemand), 2) AS TotalReactivePowerPresentDemand,
				      ROUND(AVG(iv.TotalApparentPowerPresentDemand), 2) AS TotalApparentPowerPresentDemand,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandImport), 2) AS TotalRealPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandImport), 2) AS TotalReactivePowerMaxDemandImport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandImport), 2) AS TotalApparentPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandExport), 2) AS TotalRealPowerMaxDemandExport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandExport), 2) AS TotalReactivePowerMaxDemandExport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandExport), 2) AS TotalApparentPowerMaxDemandExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAImport), 2) AS AccumulatedRealEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBImport), 2) AS AccumulatedRealEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCImport), 2) AS AccumulatedRealEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAExport), 2) AS AccumulatedRealEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBExport), 2) AS AccumulatedRealEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCExport), 2) AS AccumulatedRealEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAImport), 2) AS AccumulatedApparentEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBImport), 2) AS AccumulatedApparentEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCImport), 2) AS AccumulatedApparentEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAExport), 2) AS AccumulatedApparentEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBExport), 2) AS AccumulatedApparentEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCExport), 2) AS AccumulatedApparentEnergyPhaseCExport,
				      ROUND(AVG(iv.RealPowerPhaseA), 2) AS RealPowerPhaseA,
				      ROUND(AVG(iv.RealPowerPhaseB), 2) AS RealPowerPhaseB,
				      ROUND(AVG(iv.RealPowerPhaseC), 2) AS RealPowerPhaseC,
				      ROUND(AVG(iv.ReactivePowerPhaseA), 2) AS ReactivePowerPhaseA,
				      ROUND(AVG(iv.ReactivePowerPhaseB), 2) AS ReactivePowerPhaseB,
				      ROUND(AVG(iv.ReactivePowerPhaseC), 2) AS ReactivePowerPhaseC,
				      ROUND(AVG(iv.ApparentPowerPhaseA), 2) AS ApparentPowerPhaseA,
				      ROUND(AVG(iv.ApparentPowerPhaseB), 2) AS ApparentPowerPhaseB,
				      ROUND(AVG(iv.ApparentPowerPhaseC), 2) AS ApparentPowerPhaseC,
				      ROUND(AVG(iv.PowerFactorPhaseA), 2) AS PowerFactorPhaseA,
				      ROUND(AVG(iv.PowerFactorPhaseB), 2) AS PowerFactorPhaseB,
				      ROUND(AVG(iv.PowerFactorPhaseC), 2) AS PowerFactorPhaseC,
				      ROUND(AVG(iv.VoltagePhaseAB), 2) AS VoltagePhaseAB,
				      ROUND(AVG(iv.VoltagePhaseBC), 2) AS VoltagePhaseBC,
				      ROUND(AVG(iv.VoltagePhaseAC), 2) AS VoltagePhaseAC,
				      ROUND(AVG(iv.VoltagePhaseAN), 2) AS VoltagePhaseAN,
				      ROUND(AVG(iv.VoltagePhaseBN), 2) AS VoltagePhaseBN,
				      ROUND(AVG(iv.VoltagePhaseCN), 2) AS VoltagePhaseCN,
				      ROUND(AVG(iv.CurrentPhaseA), 2) AS CurrentPhaseA,
				      ROUND(AVG(iv.CurrentPhaseB), 2) AS CurrentPhaseB,
				      ROUND(AVG(iv.CurrentPhaseC), 2) AS CurrentPhaseC,
				    </when>
				    
				    
				    <when test="datatablename == 'model_imtsolar_class8000'">
				      ROUND(AVG(iv.irradiance * 0.1), 2) AS irradiance,
				      ROUND(AVG(iv.tcell), 2) AS tcell,
				    </when>
				    
				    
				    <when test="datatablename == 'model_pvp_inverter'">
				      ROUND(AVG(iv.total_kwh_delivered), 2) AS total_kwh_delivered,
				      ROUND(AVG(iv.volts_a_l_n), 2) AS volts_a_l_n,
				      ROUND(AVG(iv.volts_b_l_n), 2) AS volts_b_l_n,
				      ROUND(AVG(iv.volts_c_l_n), 2) AS volts_c_l_n,
				      ROUND(AVG(iv.current_a), 2) AS current_a,
				      ROUND(AVG(iv.current_b), 2) AS current_b,
				      ROUND(AVG(iv.current_c), 2) AS current_c,
				      ROUND(AVG(iv.dc_output_voltage), 2) AS dc_output_voltage,
				      ROUND(AVG(iv.dc_output_current), 2) AS dc_output_current,
				      ROUND(AVG(iv.line_frenquency), 2) AS line_frenquency,
				      ROUND(AVG(iv.line_kw), 2) AS line_kw,
				      ROUND(COUNT(iv.inverter_fault_word0), 2) AS inverter_fault_word0,
				      ROUND(COUNT(iv.inverter_fault_word1), 2) AS inverter_fault_word1,
				      ROUND(COUNT(iv.inverter_fault_word2), 2) AS inverter_fault_word2,
				      
				    </when>
				    
				    <when test="datatablename == 'model_advanced_energy_solaron'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.ambient_temperature), 2) AS ambient_temperature,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				    </when>
				    
				    
				    <when test="datatablename == 'model_chint_solectria_inverter_class9725'">
				      ROUND(AVG(iv.PowerOnOff), 2) AS PowerOnOff,
				      ROUND(AVG(iv.PActiveSet), 2) AS PActiveSet,
				      ROUND(AVG(iv.PFactorSet), 2) AS PFactorSet,
				      ROUND(AVG(iv.PReactiveSet), 2) AS PReactiveSet,
				      ROUND(AVG(iv.GridVMax), 2) AS GridVMax,
				      ROUND(AVG(iv.GridVmaxTripT), 2) AS GridVmaxTripT,
				      ROUND(AVG(iv.GridVMin), 2) AS GridVMin,
				      ROUND(AVG(iv.GridVminTripT), 2) AS GridVminTripT,
				      ROUND(AVG(iv.GridFMax), 2) AS GridFMax,
				      ROUND(AVG(iv.GridFMin), 2) AS GridFMin,
				      ROUND(AVG(iv.GridFTripT), 2) AS GridFTripT,
				      ROUND(AVG(iv.ActivePower), 2) AS ActivePower,
				      ROUND(AVG(iv.PowerFactor), 2) AS PowerFactor,
				      ROUND(AVG(iv.Risomin), 2) AS Risomin,
				      ROUND(AVG(iv.PVStartVol), 2) AS PVStartVol,
				      ROUND(AVG(iv.DCIMax), 2) AS DCIMax,
				      ROUND(AVG(iv.TambientMax), 2) AS TambientMax,
				      ROUND(AVG(iv.TmoduleMax), 2) AS TmoduleMax,
				      ROUND(AVG(iv.OffsetDiffMax), 2) AS OffsetDiffMax,
				      ROUND(AVG(iv.GridVolUnbalance), 2) AS GridVolUnbalance,
				      ROUND(AVG(iv.SoftPowerStep), 2) AS SoftPowerStep,
				      ROUND(AVG(iv.TotalEnergyToEnergy), 2) AS TotalEnergyToEnergy,
				      ROUND(AVG(iv.TotalEnergyToday), 2) AS TotalEnergyToday,
				      ROUND(AVG(iv.InverterEfficiency), 2) AS InverterEfficiency,
				      ROUND(AVG(iv.PowerFactor1), 2) AS PowerFactor1,
				      ROUND(AVG(iv.MaxActivePowerToday), 2) AS MaxActivePowerToday,
				      ROUND(AVG(iv.RunTimeToGrid), 2) AS RunTimeToGrid,
				      ROUND(AVG(iv.AC_ActivePower), 2) AS AC_ActivePower,
				      ROUND(AVG(iv.AC_ApparentPower), 2) AS AC_ApparentPower,
				      ROUND(AVG(iv.GridVoltageUab), 2) AS GridVoltageUab,
				      ROUND(AVG(iv.GridVoltageUbc), 2) AS GridVoltageUbc,
				      ROUND(AVG(iv.GridVoltageUca), 2) AS GridVoltageUca,
				      ROUND(AVG(iv.GridA_PhaseCurrent), 2) AS GridA_PhaseCurrent,
				      ROUND(AVG(iv.GridB_PhaseCurrent), 2) AS GridB_PhaseCurrent,
				      ROUND(AVG(iv.GridC_PhaseCurrent), 2) AS GridC_PhaseCurrent,
				      ROUND(AVG(iv.PV1_Voltage), 2) AS PV1_Voltage,
				      ROUND(AVG(iv.PV1_Current), 2) AS PV1_Current,
				      ROUND(AVG(iv.PV2_Voltage), 2) AS PV2_Voltage,
				      ROUND(AVG(iv.PV2_Current), 2) AS PV2_Current,
				      ROUND(AVG(iv.PV3_Voltage), 2) AS PV3_Voltage,
				      ROUND(AVG(iv.PV3_Current), 2) AS PV3_Current,
				      ROUND(AVG(iv.Grid_Frequency), 2) AS Grid_Frequency,
				      ROUND(AVG(iv.ModuleTemp), 2) AS ModuleTemp,
				      ROUND(AVG(iv.InternalTemp), 2) AS InternalTemp,
				      ROUND(AVG(iv.TransformerTemp), 2) AS TransformerTemp,
				      ROUND(COUNT(iv.PermanentFaultCode), 2) AS PermanentFaultCode,
				      ROUND(COUNT(iv.WarnCode), 2) AS WarnCode,
				      ROUND(COUNT(iv.FaultCode0), 2) AS FaultCode0,
				      ROUND(COUNT(iv.FaultCode1), 2) AS FaultCode1,
				      ROUND(COUNT(iv.FaultCode2), 2) AS FaultCode2,
				    </when>
				    
				    
				    <when test="datatablename == 'model_elkor_wattson_pv_meter'">
				      ROUND(AVG(iv.TotalEnergyConsumption), 2) AS TotalEnergyConsumption,
				      ROUND(AVG(iv.TotalRealPower), 2) AS TotalRealPower,
				      ROUND(AVG(iv.TotalReactivePower), 2) AS TotalReactivePower,
				      ROUND(AVG(iv.TotalApparentPower), 2) AS TotalApparentPower,
				      ROUND(AVG(iv.AverageVoltageLN), 2) AS AverageVoltageLN,
				      ROUND(AVG(iv.AverageVoltageLL), 2) AS AverageVoltageLL,
				      ROUND(AVG(iv.AverageCurrent), 2) AS AverageCurrent,
				      ROUND(AVG(iv.TotalSystemPowerFactor), 2) AS TotalSystemPowerFactor,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.SlidingWindowRealPowerDemand), 2) AS SlidingWindowRealPowerDemand,
				      ROUND(AVG(iv.VoltageAN), 2) AS VoltageAN,
				      ROUND(AVG(iv.VoltageBN), 2) AS VoltageBN,
				      ROUND(AVG(iv.VoltageCN), 2) AS VoltageCN,
				      ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				      ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				      ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				      ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				      ROUND(COUNT(iv.CurrentB), 2) AS CurrentB,
				      ROUND(COUNT(iv.CurrentC), 2) AS CurrentC,
				      ROUND(COUNT(iv.RealPowerA), 2) AS RealPowerA,
				      ROUND(COUNT(iv.RealPowerB), 2) AS RealPowerB,
				      ROUND(COUNT(iv.RealPowerC), 2) AS RealPowerC,
				      ROUND(COUNT(iv.ReactivePowerA), 2) AS ReactivePowerA,
				      
				      ROUND(COUNT(iv.ReactivePowerB), 2) AS ReactivePowerB,
				      ROUND(COUNT(iv.ReactivePowerC), 2) AS ReactivePowerC,
				      ROUND(COUNT(iv.ApparentPowerA), 2) AS ApparentPowerA,
				      ROUND(COUNT(iv.ApparentPowerB), 2) AS ApparentPowerB,
				      ROUND(COUNT(iv.ApparentPowerC), 2) AS ApparentPowerC,
				      ROUND(COUNT(iv.PowerFactorA), 2) AS PowerFactorA,
				      ROUND(COUNT(iv.PowerFactorB), 2) AS PowerFactorB,
				      ROUND(COUNT(iv.PowerFactorC), 2) AS PowerFactorC,
				    </when>
				    
				    <when test="datatablename == 'model_satcon_pvs357_inverter'">
				      ROUND(AVG(iv.Software_Identification_Number), 2) AS Software_Identification_Number,
				      ROUND(AVG(iv.Fault_Word1), 2) AS Fault_Word1,
				      ROUND(AVG(iv.Fault_Word2), 2) AS Fault_Word2,
				      ROUND(AVG(iv.Fault_Word3), 2) AS Fault_Word3,
				      ROUND(AVG(iv.Fault_Word4), 2) AS Fault_Word4,
				      ROUND(AVG(iv.Fault_Word5), 2) AS Fault_Word5,
				      ROUND(AVG(iv.Fault_Word6), 2) AS Fault_Word6,
				      ROUND(COUNT(iv.Fault_Word7), 2) AS Fault_Word7,
				      ROUND(AVG(iv.Number_of_Faults), 2) AS Number_of_Faults,
				      ROUND(AVG(iv.Program_Checksum), 2) AS Program_Checksum,
				      ROUND(AVG(iv.DC_Input_Volts), 2) AS DC_Input_Volts,
				      ROUND(AVG(iv.DC_Link_Volts), 2) AS DC_Link_Volts,
				      ROUND(AVG(iv.DC_Link_Amps), 2) AS DC_Link_Amps,
				      ROUND(AVG(iv.DC_Ground_Current), 2) AS DC_Ground_Current,
				      ROUND(AVG(iv.Line_Amps_A), 2) AS Line_Amps_A,
				      ROUND(AVG(iv.Line_Amps_B), 2) AS Line_Amps_B,
				      ROUND(AVG(iv.Line_Amps_C), 2) AS Line_Amps_C,
				      ROUND(AVG(iv.Line_Amps_Average), 2) AS Line_Amps_Average,
				      ROUND(AVG(iv.Neutral_Current), 2) AS Neutral_Current,
				      ROUND(AVG(iv.Line_Volts_A), 2) AS Line_Volts_A,
				      ROUND(AVG(iv.Line_Volts_B), 2) AS Line_Volts_B,
				      ROUND(AVG(iv.Line_Volts_C), 2) AS Line_Volts_C,
				      ROUND(AVG(iv.Line_Volts_Average), 2) AS Line_Volts_Average,
				      ROUND(AVG(iv.Line_Voltage_Unbalance), 2) AS Line_Voltage_Unbalance,
				      ROUND(AVG(iv.Line_Current_Unbalance), 2) AS Line_Current_Unbalance,
				      ROUND(AVG(iv.Input_kW), 2) AS Input_kW,
				      ROUND(AVG(iv.Output_kw), 2) AS Output_kw,
				      ROUND(AVG(iv.Output_kvar), 2) AS Output_kvar,
				      ROUND(AVG(iv.Output_kva), 2) AS Output_kva,
				      ROUND(AVG(iv.Power_Factor), 2) AS Power_Factor,
				      ROUND(AVG(iv.Ground_Impedance), 2) AS Ground_Impedance,
				      ROUND(AVG(iv.String_Amps1), 2) AS String_Amps1,
				      ROUND(AVG(iv.String_Amps2), 2) AS String_Amps2,
				      ROUND(AVG(iv.String_Amps3), 2) AS String_Amps3,
				      ROUND(AVG(iv.String_Amps4), 2) AS String_Amps4,
				      ROUND(AVG(iv.String_Amps5), 2) AS String_Amps5,
				      ROUND(AVG(iv.String_Amps6), 2) AS String_Amps6,
				      ROUND(AVG(iv.String_Amps7), 2) AS String_Amps7,
				      ROUND(AVG(iv.String_Amps8), 2) AS String_Amps8,
				      ROUND(AVG(iv.String_Amps9), 2) AS String_Amps9,
				      ROUND(AVG(iv.String_Amps10), 2) AS String_Amps10,
				      ROUND(AVG(iv.String_Amps11), 2) AS String_Amps11,
				      ROUND(AVG(iv.String_Amps12), 2) AS String_Amps12,
				      ROUND(AVG(iv.String_Amps13), 2) AS String_Amps13,
				      ROUND(AVG(iv.String_Amps14), 2) AS String_Amps14,
				      ROUND(AVG(iv.String_Amps15), 2) AS String_Amps15,
				      ROUND(AVG(iv.String_Amps16), 2) AS String_Amps16,
				      ROUND(AVG(iv.String_Amps17), 2) AS String_Amps17,
				      ROUND(AVG(iv.String_Amps18), 2) AS String_Amps18,
				      ROUND(AVG(iv.String_Amps19), 2) AS String_Amps19,
				      ROUND(AVG(iv.String_Amps20), 2) AS String_Amps20,
				      ROUND(AVG(iv.String_Amps21), 2) AS String_Amps21,
				      ROUND(AVG(iv.String_Amps22), 2) AS String_Amps22,
				      ROUND(AVG(iv.String_Amps23), 2) AS String_Amps23,
				      ROUND(AVG(iv.String_Amps24), 2) AS String_Amps24,
				      ROUND(AVG(iv.String_Amps25), 2) AS String_Amps25,
				      ROUND(AVG(iv.String_Amps26), 2) AS String_Amps26,
				      ROUND(AVG(iv.String_Amps27), 2) AS String_Amps27,
				      ROUND(AVG(iv.String_Amps28), 2) AS String_Amps28,
				      ROUND(AVG(iv.String_Amps29), 2) AS String_Amps29,
				      ROUND(AVG(iv.String_Amps30), 2) AS String_Amps30,
				      ROUND(AVG(iv.String_Amps31), 2) AS String_Amps31,
				      ROUND(AVG(iv.String_Amps32), 2) AS String_Amps32,
				      
				      
				      ROUND(AVG(iv.String_Amps_Average), 2) AS String_Amps_Average,
				      ROUND(AVG(iv.String_kwh1), 2) AS String_kwh1,
				      ROUND(AVG(iv.String_kwh2), 2) AS String_kwh2,
				      ROUND(AVG(iv.String_kwh3), 2) AS String_kwh3,
				      ROUND(AVG(iv.String_kwh4), 2) AS String_kwh4,
				      ROUND(AVG(iv.String_kwh5), 2) AS String_kwh5,
				      ROUND(AVG(iv.String_kwh6), 2) AS String_kwh6,
				      ROUND(AVG(iv.String_kwh7), 2) AS String_kwh7,
				      ROUND(AVG(iv.String_kwh8), 2) AS String_kwh8,
				      ROUND(AVG(iv.String_kwh9), 2) AS String_kwh9,
				      ROUND(AVG(iv.String_kwh10), 2) AS String_kwh10,
				      ROUND(AVG(iv.String_kwh11), 2) AS String_kwh11,
				      ROUND(AVG(iv.String_kwh12), 2) AS String_kwh12,
				      ROUND(AVG(iv.String_kwh13), 2) AS String_kwh13,
				      ROUND(AVG(iv.String_kwh14), 2) AS String_kwh14,
				      ROUND(AVG(iv.String_kwh15), 2) AS String_kwh15,
				      ROUND(AVG(iv.String_kwh16), 2) AS String_kwh16,
				      ROUND(AVG(iv.String_kwh17), 2) AS String_kwh17,
				      ROUND(AVG(iv.String_kwh18), 2) AS String_kwh18,
				      ROUND(AVG(iv.String_kwh19), 2) AS String_kwh19,
				      ROUND(AVG(iv.String_kwh20), 2) AS String_kwh20,
				      ROUND(AVG(iv.String_kwh21), 2) AS String_kwh21,
				      ROUND(AVG(iv.String_kwh22), 2) AS String_kwh22,
				      ROUND(AVG(iv.String_kwh23), 2) AS String_kwh23,
				      ROUND(AVG(iv.String_kwh24), 2) AS String_kwh24,
				      ROUND(AVG(iv.String_kwh25), 2) AS String_kwh25,
				      ROUND(AVG(iv.String_kwh26), 2) AS String_kwh26,
				      ROUND(AVG(iv.String_kwh27), 2) AS String_kwh27,
				      ROUND(AVG(iv.String_kwh28), 2) AS String_kwh28,
				      ROUND(AVG(iv.String_kwh29), 2) AS String_kwh29,
				      ROUND(AVG(iv.String_kwh30), 2) AS String_kwh30,
				      ROUND(AVG(iv.String_kwh31), 2) AS String_kwh31,
				      ROUND(AVG(iv.String_kwh32), 2) AS String_kwh32,
				      
				      ROUND(AVG(iv.String_kwh_Average), 2) AS String_kwh_Average,
				      ROUND(AVG(iv.Total_kwh), 2) AS Total_kwh,
				      ROUND(AVG(iv.Total_mwh), 2) AS Total_mwh,
				      ROUND(AVG(iv.kwh_Today), 2) AS kwh_Today,
				      ROUND(AVG(iv.kwh_Yesterday), 2) AS kwh_Yesterday,
				      ROUND(AVG(iv.Total_kwh7_days), 2) AS Total_kwh7_days,
				      ROUND(AVG(iv.Total_kwh30_days), 2) AS Total_kwh30_days,
				      ROUND(AVG(iv.Average_kwh7_days), 2) AS Average_kwh7_days,
				      ROUND(AVG(iv.Average_kwh30_Days), 2) AS Average_kwh30_Days,
				      ROUND(AVG(iv.Average_Line_Frequency), 2) AS Average_Line_Frequency,
				      ROUND(AVG(iv.Average_Line_Frequency_Error), 2) AS Average_Line_Frequency_Error,
				      ROUND(AVG(iv.FPGA_Identification_Number), 2) AS FPGA_Identification_Number,
				      ROUND(AVG(iv.DC_Input_Voltage_Timer), 2) AS DC_Input_Voltage_Timer,
				      ROUND(AVG(iv.AC_Line_Voltage_Timer), 2) AS AC_Line_Voltage_Timer,
				      ROUND(AVG(iv.Operating_State), 2) AS Operating_State,
				      ROUND(AVG(iv.Internal_Air_Temperature), 2) AS Internal_Air_Temperature,
				      ROUND(AVG(iv.Inverter_Air_Temperature), 2) AS Inverter_Air_Temperature,
				      ROUND(AVG(iv.Heatsink_Temperature1), 2) AS Heatsink_Temperature1,
				      ROUND(AVG(iv.Heatsink_Temperature2), 2) AS Heatsink_Temperature2,
				      ROUND(AVG(iv.Heatsink_Temperature3), 2) AS Heatsink_Temperature3,
				      ROUND(AVG(iv.Heatsink_Temperature4), 2) AS Heatsink_Temperature4,
				      ROUND(AVG(iv.Heatsink_Temperature5), 2) AS Heatsink_Temperature5,
				      ROUND(AVG(iv.Heatsink_Temperature6), 2) AS Heatsink_Temperature6,
				      ROUND(AVG(iv.Heatsink_Maximum_Temparature1), 2) AS Heatsink_Maximum_Temparature1,
				      ROUND(AVG(iv.Fan_Speed_Command1), 2) AS Fan_Speed_Command1,
				      ROUND(AVG(iv.Heatsink_Maximum_Temperature2), 2) AS Heatsink_Maximum_Temperature2,
				      ROUND(AVG(iv.Fan_Speed_Command2), 2) AS Fan_Speed_Command2,
				      ROUND(AVG(iv.Number_of_Temperature_Feedbacks), 2) AS Number_of_Temperature_Feedbacks,
				      ROUND(AVG(iv.Serial_number_word1), 2) AS Serial_number_word1,
				      ROUND(AVG(iv.Serial_number_word2), 2) AS Serial_number_word2,
				      ROUND(AVG(iv.Serial_number_word3), 2) AS Serial_number_word3,
				      ROUND(AVG(iv.Serial_number_word4), 2) AS Serial_number_word4,
				      ROUND(AVG(iv.Number_of_Strings), 2) AS Number_of_Strings,
				      
				    </when>
				    
				    
				    <when test="datatablename == 'model_w_kipp_zonen_rt1'">
				    	ROUND(AVG(iv.DeviceType), 2) AS DeviceType,
				    	ROUND(AVG(iv.DataModelVersion), 2) AS DataModelVersion,
				    	ROUND(AVG(iv.OperationalMode), 2) AS OperationalMode,
				    	ROUND(AVG(iv.StatusFlags), 2) AS StatusFlags,
				    	ROUND(AVG(iv.SunPOATempComp), 2) AS SunPOATempComp,
				    	ROUND(AVG(iv.PanelTemperature), 2) AS PanelTemperature,
				    	ROUND(AVG(iv.ExtPowerSensor), 2) AS ExtPowerSensor,
				    	ROUND(AVG(iv.BatchNumber), 2) AS BatchNumber,
				    	ROUND(AVG(iv.SerialNumber), 2) AS SerialNumber,
				    	ROUND(AVG(iv.CalibrationDateYYMMDD), 2) AS CalibrationDateYYMMDD,
				    </when>
				    
				    <when test="datatablename == 'model_elkor_production_meter'">
				    	ROUND(AVG(iv.ActivePowerTotal), 2) AS ActivePowerTotal,
				    	ROUND(AVG(iv.ReactivePowerTotal), 2) AS ReactivePowerTotal,
				    	ROUND(AVG(iv.ApparentPowerTotal), 2) AS ApparentPowerTotal,
				    	ROUND(AVG(iv.VoltageAverage), 2) AS VoltageAverage,
				    	ROUND(AVG(iv.VoltageLLAverage), 2) AS VoltageLLAverage,
				    	ROUND(AVG(iv.CurrentAverage), 2) AS CurrentAverage,
				    	ROUND(AVG(iv.SystemPowerFactor), 2) AS SystemPowerFactor,
				    	ROUND(AVG(iv.SystemFrequency), 2) AS SystemFrequency,
				    	ROUND(AVG(iv.VoltageAverageAngle), 2) AS VoltageAverageAngle,
				    	ROUND(AVG(iv.SystemQuadrant), 2) AS SystemQuadrant,
				    	ROUND(AVG(iv.VoltageA), 2) AS VoltageA,
				    	ROUND(AVG(iv.VoltageB), 2) AS VoltageB,
				    	ROUND(AVG(iv.VoltageC), 2) AS VoltageC,
				    	ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				    	ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				    	ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				    	ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				    	ROUND(AVG(iv.CurrentB), 2) AS CurrentB,
				    	ROUND(AVG(iv.CurrentC), 2) AS CurrentC,
				    	ROUND(AVG(iv.ActivePowerA), 2) AS ActivePowerA,
				    	ROUND(AVG(iv.ActivePowerB), 2) AS ActivePowerB,
				    	ROUND(AVG(iv.ActivePowerC), 2) AS ActivePowerC,
				    	ROUND(AVG(iv.ReactivePowerA), 2) AS ReactivePowerA,
				    	ROUND(AVG(iv.ReactivePowerB), 2) AS ReactivePowerB,
				    	ROUND(AVG(iv.ReactivePowerC), 2) AS ReactivePowerC,
				    	ROUND(AVG(iv.ApparentPowerA), 2) AS ApparentPowerA,
				    	ROUND(AVG(iv.ApparentPowerB), 2) AS ApparentPowerB,
				    	ROUND(AVG(iv.ApparentPowerC), 2) AS ApparentPowerC,
				    	ROUND(AVG(iv.PowerFactorA), 2) AS PowerFactorA,
				    	ROUND(AVG(iv.PowerFactorB), 2) AS PowerFactorB,
				    	ROUND(AVG(iv.PowerFactorC), 2) AS PowerFactorC,
				    	ROUND(AVG(iv.VoltageAngleAB), 2) AS VoltageAngleAB,
				    	ROUND(AVG(iv.VoltageAngleBC), 2) AS VoltageAngleBC,
				    	ROUND(AVG(iv.VoltageAngleCA), 2) AS VoltageAngleCA,
				    	ROUND(AVG(iv.QuadrantA), 2) AS QuadrantA,
				    	ROUND(AVG(iv.QuadrantB), 2) AS QuadrantB,
				    	ROUND(AVG(iv.QuadrantC), 2) AS QuadrantC,
				    	ROUND(AVG(iv.SlidingWindowPower), 2) AS SlidingWindowPower,
				    	ROUND(AVG(iv.NetTotalEnergy), 2) AS NetTotalEnergy,
				    	ROUND(AVG(iv.TotalNetApparentEnergy), 2) AS TotalNetApparentEnergy,
				    	ROUND(AVG(iv.TotalImportEnergy), 2) AS TotalImportEnergy,
				    	ROUND(AVG(iv.TotalExportEnergy), 2) AS TotalExportEnergy,
				    	ROUND(AVG(iv.TotalImportApparentEnergy), 2) AS TotalImportApparentEnergy,
				    	ROUND(AVG(iv.TotalExportApparentEnergy), 2) AS TotalExportApparentEnergy,
				    	ROUND(AVG(iv.Q1TotalReactiveEnergy), 2) AS Q1TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q2TotalReactiveEnergy), 2) AS Q2TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q3TotalReactiveEnergy), 2) AS Q3TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q4TotalReactiveEnergy), 2) AS Q4TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q1Q2TotalInductiveReactiveEnergy), 2) AS Q1Q2TotalInductiveReactiveEnergy,
				    	ROUND(AVG(iv.Q3Q4TotalCapacitiveReactiveEnergy), 2) AS Q3Q4TotalCapacitiveReactiveEnergy,
				    	ROUND(AVG(iv.NetEnergyA), 2) AS NetEnergyA,
				    	ROUND(AVG(iv.NetEnergyB), 2) AS NetEnergyB,
				    	ROUND(AVG(iv.NetEnergyC), 2) AS NetEnergyC,
				    	ROUND(AVG(iv.NetApparentEnergyA), 2) AS NetApparentEnergyA,
				    	ROUND(AVG(iv.NetApparentEnergyB), 2) AS NetApparentEnergyB,
				    	ROUND(AVG(iv.NetApparentEnergyC), 2) AS NetApparentEnergyC,
				    	ROUND(AVG(iv.ImportEnergyA), 2) AS ImportEnergyA,
				    	ROUND(AVG(iv.ImportEnergyB), 2) AS ImportEnergyB,
				    	ROUND(AVG(iv.ImportEnergyC), 2) AS ImportEnergyC,
				    	ROUND(AVG(iv.ExportEnergyA), 2) AS ExportEnergyA,
				    	ROUND(AVG(iv.ExportEnergyB), 2) AS ExportEnergyB,
				    	ROUND(AVG(iv.ExportEnergyC), 2) AS ExportEnergyC,
				    	ROUND(AVG(iv.ImportApparentEnergyA), 2) AS ImportApparentEnergyA,
				    	ROUND(AVG(iv.ImportApparentEnergyB), 2) AS ImportApparentEnergyB,
				    	ROUND(AVG(iv.ImportApparentEnergyC), 2) AS ImportApparentEnergyC,
				    	ROUND(AVG(iv.ExportApparentEnergyA), 2) AS ExportApparentEnergyA,
				    	ROUND(AVG(iv.ExportApparentEnergyB), 2) AS ExportApparentEnergyB,
				    	ROUND(AVG(iv.ExportApparentEnergyC), 2) AS ExportApparentEnergyC,
				    	ROUND(AVG(iv.Q1ReactiveEnergyA), 2) AS Q1ReactiveEnergyA,
				    	ROUND(AVG(iv.Q1ReactiveEnergyB), 2) AS Q1ReactiveEnergyB,
				    	ROUND(AVG(iv.Q1ReactiveEnergyC), 2) AS Q1ReactiveEnergyC,
				    	ROUND(AVG(iv.Q2ReactiveEnergyA), 2) AS Q2ReactiveEnergyA,
				    	ROUND(AVG(iv.Q2ReactiveEnergyB), 2) AS Q2ReactiveEnergyB,
				    	ROUND(AVG(iv.Q2ReactiveEnergyC), 2) AS Q2ReactiveEnergyC,
				    	ROUND(AVG(iv.Q3ReactiveEnergyA), 2) AS Q3ReactiveEnergyA,
				    	ROUND(AVG(iv.Q3ReactiveEnergyB), 2) AS Q3ReactiveEnergyB,
				    	ROUND(AVG(iv.Q3ReactiveEnergyC), 2) AS Q3ReactiveEnergyC,
				    	ROUND(AVG(iv.Q4ReactiveEnergyA), 2) AS Q4ReactiveEnergyA,
				    	ROUND(AVG(iv.Q4ReactiveEnergyB), 2) AS Q4ReactiveEnergyB,
				    	ROUND(AVG(iv.Q4ReactiveEnergyC), 2) AS Q4ReactiveEnergyC,
				    </when>
				    
				    
				    
			    </choose>
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i' ) AS full_time,
				FLOOR(UNIX_TIMESTAMP(CONVERT_TZ( iv.time, '+00:00', t.`offset` ))/(5 * 60)) AS timekey
			FROM
				site si
				LEFT JOIN site_customer_map scm ON scm.id_site = si.id
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN ${datatablename} iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id_site}
				AND scm.id_customer = #{id_customer}
				AND d.id = #{id_device} 
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} 
				AND #{end_date}
				GROUP BY timekey
        </if>
        
        <if test="(filterBy == 'today' or filterBy == 'yesterday' or filterBy == 'last_3day' or filterBy == 'last_7day') and setup_send_time == 1 and data_send_time == 2">
			SELECT
				<choose>
					<when test="datatablename == 'model_lufft_class8020'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.IrradianceActual), 2) AS IrradianceActual,
				      ROUND(COUNT(iv.IrradianceMin), 2) AS IrradianceMin,
				      ROUND(COUNT(iv.IrradianceMax), 2) AS IrradianceMax,
				      ROUND(COUNT(iv.IrradianceAvg), 2) AS IrradianceAvg,
				      ROUND(COUNT(iv.AirTemperatureActual), 2) AS AirTemperatureActual,
				      ROUND(COUNT(iv.AirTemperatureMin), 2) AS AirTemperatureMin,
				      ROUND(COUNT(iv.AirTemperatureMax), 2) AS AirTemperatureMax,
				      ROUND(COUNT(iv.AirTemperatureAvg), 2) AS AirTemperatureAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationQuantityAbsolute), 2) AS PrecipitationQuantityAbsolute,
				      ROUND(COUNT(iv.PrecipitationQuantityDifferential), 2) AS PrecipitationQuantityDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AbsoluteHumidityActual), 2) AS AbsoluteHumidityActual,
				      ROUND(COUNT(iv.AbsoluteHumidityMin), 2) AS AbsoluteHumidityMin,
				      ROUND(COUNT(iv.AbsoluteHumidityMax), 2) AS AbsoluteHumidityMax,
				      ROUND(COUNT(iv.AbsoluteHumidityAvg), 2) AS AbsoluteHumidityAvg,
				      ROUND(COUNT(iv.MixingRatioActual), 2) AS MixingRatioActual,
				      ROUND(COUNT(iv.MixingRatioMin), 2) AS MixingRatioMin,
				      ROUND(COUNT(iv.MixingRatioMax), 2) AS MixingRatioMax,
				      ROUND(COUNT(iv.MixingRatioAvg), 2) AS MixingRatioAvg,
				      ROUND(COUNT(iv.AbsoluteAirPressureActual), 2) AS AbsoluteAirPressureActual,
				      ROUND(COUNT(iv.AbsoluteAirPressureMin), 2) AS AbsoluteAirPressureMin,
				      ROUND(COUNT(iv.AbsoluteAirPressureMax), 2) AS AbsoluteAirPressureMax,
				      ROUND(COUNT(iv.AbsoluteAirPressureAvg), 2) AS AbsoluteAirPressureAvg,
				      ROUND(COUNT(iv.WindSpeedStandardDeviation), 2) AS WindSpeedStandardDeviation,
				      ROUND(COUNT(iv.WindDirectionStandardDeviation), 2) AS WindDirectionStandardDeviation,
				      ROUND(COUNT(iv.WetBulbTemperature), 2) AS WetBulbTemperature,
				      ROUND(COUNT(iv.SpecificEnthalpy), 2) AS SpecificEnthalpy,
				      ROUND(COUNT(iv.AirDensityActual), 2) AS AirDensityActual,
				      ROUND(COUNT(iv.LeafWetnessActual), 2) AS LeafWetnessActual,
				      ROUND(COUNT(iv.LeafWetnessMin), 2) AS LeafWetnessMin,
				      ROUND(COUNT(iv.LeafWetnessMax), 2) AS LeafWetnessMax,
				      ROUND(COUNT(iv.LeafWetnessAvg), 2) AS LeafWetnessAvg,
				      ROUND(COUNT(iv.LeafWetnessState), 2) AS LeafWetnessState,
				      ROUND(COUNT(iv.ExternalTemperature), 2) AS ExternalTemperature,
				      ROUND(COUNT(iv.WindValueQualityFast), 2) AS WindValueQualityFast,
				    </when>
				    
				    <when test="datatablename == 'model_lufft_ws501_umb_weather'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.GlobalRadiation), 2) AS GlobalRadiation,
				      ROUND(COUNT(iv.GlobalRadiation2), 2) AS GlobalRadiation2,
				      ROUND(COUNT(iv.GlobalRadiation3), 2) AS GlobalRadiation3,
				      ROUND(COUNT(iv.GlobalRadiation4), 2) AS GlobalRadiation4,
				      ROUND(COUNT(iv.AirTemperatureCActual), 2) AS AirTemperatureCActual,
				      ROUND(COUNT(iv.AirTemperatureCMin), 2) AS AirTemperatureCMin,
				      ROUND(COUNT(iv.AirTemperatureCMax), 2) AS AirTemperatureCMax,
				      ROUND(COUNT(iv.AirTemperatureCAvg), 2) AS AirTemperatureCAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationAbsolute), 2) AS PrecipitationAbsolute,
				      ROUND(COUNT(iv.PrecipitationDifferential), 2) AS PrecipitationDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AirTemperatureFActual), 2) AS AirTemperatureFActual,
				      ROUND(COUNT(iv.AirTemperatureFMin), 2) AS AirTemperatureFMin,
				      ROUND(COUNT(iv.AirTemperatureFMax), 2) AS AirTemperatureFMax,
				      ROUND(COUNT(iv.AirTemperatureFAvg), 2) AS AirTemperatureFAvg,
				      ROUND(COUNT(iv.ExternalTemperatureC), 2) AS ExternalTemperatureC,
				      ROUND(COUNT(iv.ExternalTemperatureF), 2) AS ExternalTemperatureF,
				    </when>
				    
					<when test="datatablename == 'model_abb_trio_class6210'">
				      ROUND(AVG(iv.AuroraType), 2) AS AuroraType,
				      ROUND(AVG(iv.GridType), 2) AS GridType,
				      ROUND(AVG(iv.TransformerType), 2) AS TransformerType,
				      ROUND(COUNT(iv.StatesByte0), 2) AS StatesByte0,
				      ROUND(COUNT(iv.StatesByte1), 2) AS StatesByte1,
				      ROUND(COUNT(iv.StatesByte2), 2) AS StatesByte2,
				      ROUND(COUNT(iv.StatesByte3), 2) AS StatesByte3,
				      ROUND(COUNT(iv.StatesByte4), 2) AS StatesByte4,
				      ROUND(COUNT(iv.TotalEnergy), 2) AS TotalEnergy,
				      ROUND(COUNT(iv.GridVoltage), 2) AS GridVoltage,
				      ROUND(COUNT(iv.GridCurrent), 2) AS GridCurrent,
				      ROUND(COUNT(iv.GridPower), 2) AS GridPower,
				      ROUND(COUNT(iv.Frequency), 2) AS Frequency,
				      ROUND(COUNT(iv.Input1Power), 2) AS Input1Power,
				      ROUND(COUNT(iv.Input1Voltage), 2) AS Input1Voltage,
				      ROUND(COUNT(iv.Input1Current), 2) AS Input1Current,
				      ROUND(COUNT(iv.Input2Power), 2) AS Input2Power,
				      ROUND(COUNT(iv.Input2Voltage), 2) AS Input2Voltage,
				      ROUND(COUNT(iv.Input2Current), 2) AS Input2Current,
				      ROUND(COUNT(iv.InverterTemperature), 2) AS InverterTemperature,
				      ROUND(COUNT(iv.BooseterTemperature), 2) AS BooseterTemperature,
				      ROUND(COUNT(iv.IslolationResistance), 2) AS IslolationResistance,
				    </when>
				    
				    <when test="datatablename == 'model_kippzonen_rt1_class8009'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    <when test="datatablename == 'model_rt1_class30000'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    
				    
				    <when test="datatablename == 'model_shark100'">
				      ROUND(AVG(iv.volts_a_n), 2) AS volts_a_n,
				      ROUND(AVG(iv.volts_b_n), 2) AS volts_b_n,
				      ROUND(AVG(iv.volts_c_n), 2) AS volts_c_n,
				      ROUND(AVG(iv.volts_a_b), 2) AS volts_a_b,
				      ROUND(AVG(iv.volts_c_a), 2) AS volts_c_a,
				      ROUND(AVG(iv.amps_a), 2) AS amps_a,
				      ROUND(AVG(iv.amps_b), 2) AS amps_b,
				      ROUND(AVG(iv.amps_c), 2) AS amps_c,
				      ROUND(AVG(iv.watts_3ph_total), 2) AS watts_3ph_total,
				      ROUND(AVG(iv.vars_3ph_total), 2) AS vars_3ph_total,
				      ROUND(AVG(iv.vas_3ph_total), 2) AS vas_3ph_total,
				      ROUND(AVG(iv.power_factor_3ph_total), 2) AS power_factor_3ph_total,
				      ROUND(AVG(iv.frequency), 2) AS frequency,
				      ROUND(AVG(iv.neutral_current), 2) AS neutral_current,
				      ROUND(AVG(iv.w_hours_received), 2) AS w_hours_received,
				      ROUND(AVG(iv.w_hours_delivered), 2) AS w_hours_delivered,
				      ROUND(AVG(iv.w_hours_net), 2) AS w_hours_net,
				      ROUND(AVG(iv.w_hours_total), 2) AS w_hours_total,
				      ROUND(AVG(iv.var_hours_positive), 2) AS var_hours_positive,
				      ROUND(AVG(iv.var_hours_negative), 2) AS var_hours_negative,
				      ROUND(AVG(iv.var_hours_net), 2) AS var_hours_net,
				      ROUND(AVG(iv.var_hours_total), 2) AS var_hours_total,
				      ROUND(AVG(iv.va_hours_total), 2) AS va_hours_total,
				      ROUND(AVG(iv.amps_a_average), 2) AS amps_a_average,
				      ROUND(AVG(iv.amps_b_average), 2) AS amps_b_average,
				      ROUND(AVG(iv.amps_c_average), 2) AS amps_c_average,
				      ROUND(AVG(iv.positive_watts_3ph_average), 2) AS positive_watts_3ph_average,
				      ROUND(AVG(iv.positive_vars_3ph_average), 2) AS positive_vars_3ph_average,
				      ROUND(AVG(iv.negative_watts_3ph_average), 2) AS negative_watts_3ph_average,
				      ROUND(AVG(iv.negative_vars_3ph_average), 2) AS negative_vars_3ph_average,
				      ROUND(AVG(iv.vas_3ph_average), 2) AS vas_3ph_average,
				      ROUND(AVG(iv.positive_pf_3ph_average), 2) AS positive_pf_3ph_average,
				      ROUND(AVG(iv.negative_pf_3ph_average), 2) AS negative_pf_3ph_average,
				      ROUND(AVG(iv.volts_a_n_min), 2) AS volts_a_n_min,
				      ROUND(AVG(iv.volts_b_n_min), 2) AS volts_b_n_min,
				      ROUND(AVG(iv.volts_c_n_min), 2) AS volts_c_n_min,
				      ROUND(AVG(iv.volts_a_b_min), 2) AS volts_a_b_min,
				      ROUND(AVG(iv.volts_b_c_min), 2) AS volts_b_c_min,
				      ROUND(AVG(iv.volts_c_a_min), 2) AS volts_c_a_min,
				      ROUND(AVG(iv.amps_a_min_avg_demand), 2) AS amps_a_min_avg_demand,
				      ROUND(AVG(iv.amps_b_min_avg_demand), 2) AS amps_b_min_avg_demand,
				      ROUND(AVG(iv.amps_c_min_avg_demand), 2) AS amps_c_min_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_min_avg_demand), 2) AS positive_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_min_avg_demand), 2) AS positive_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_min_avg_demand), 2) AS negative_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_min_avg_demand), 2) AS negative_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.vas_3ph_min_avg_demand), 2) AS vas_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_min_avg_demand), 2) AS positive_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_min_avg_demand), 2) AS negative_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.frequency_min), 2) AS frequency_min,
				      ROUND(AVG(iv.volts_a_n_max), 2) AS volts_a_n_max,
				      ROUND(AVG(iv.volts_b_n_max), 2) AS volts_b_n_max,
				      ROUND(AVG(iv.volts_c_n_max), 2) AS volts_c_n_max,
				      ROUND(AVG(iv.volts_a_b_max), 2) AS volts_a_b_max,
				      ROUND(AVG(iv.volts_b_c_max), 2) AS volts_b_c_max,
				      ROUND(AVG(iv.volts_c_a_max), 2) AS volts_c_a_max,
				      ROUND(AVG(iv.amps_a_max_avg_demand), 2) AS amps_a_max_avg_demand,
				      ROUND(AVG(iv.amps_b_max_avg_demand), 2) AS amps_b_max_avg_demand,
				      ROUND(AVG(iv.amps_c_max_avg_demand), 2) AS amps_c_max_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_max_avg_demand), 2) AS positive_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_max_avg_demand), 2) AS positive_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_max_avg_demand), 2) AS negative_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_max_avg_demand), 2) AS negative_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.vas_3ph_max_avg_demand), 2) AS vas_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_max_avg_demand), 2) AS positive_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_max_avg_demand), 2) AS negative_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.frequency_max), 2) AS frequency_max,
				      ROUND(AVG(iv.volts_a_n_thd), 2) AS volts_a_n_thd,
				      ROUND(AVG(iv.volts_b_n_thd), 2) AS volts_b_n_thd,
				      ROUND(AVG(iv.volts_c_n_thd), 2) AS volts_c_n_thd,
				      ROUND(AVG(iv.amps_a_thd), 2) AS amps_a_thd,
				      ROUND(AVG(iv.amps_b_thd), 2) AS amps_b_thd,
				      ROUND(AVG(iv.amps_c_thd), 2) AS amps_c_thd,
				      ROUND(AVG(iv.phase_a_current_0th), 2) AS phase_a_current_0th,
				      ROUND(AVG(iv.phase_a_current_1st), 2) AS phase_a_current_1st,
				      ROUND(AVG(iv.phase_a_current_2nd), 2) AS phase_a_current_2nd,
				      ROUND(AVG(iv.phase_a_current_3rd), 2) AS phase_a_current_3rd,
				      ROUND(AVG(iv.phase_a_current_4th), 2) AS phase_a_current_4th,
				      ROUND(AVG(iv.phase_a_current_5th), 2) AS phase_a_current_5th,
				      ROUND(AVG(iv.phase_a_current_6th), 2) AS phase_a_current_6th,
				      ROUND(AVG(iv.phase_a_current_7th), 2) AS phase_a_current_7th,
				      ROUND(AVG(iv.phase_a_voltage_0th), 2) AS phase_a_voltage_0th,
				      ROUND(AVG(iv.phase_a_voltage_1st), 2) AS phase_a_voltage_1st,
				      ROUND(AVG(iv.phase_a_voltage_2nd), 2) AS phase_a_voltage_2nd,
				      ROUND(AVG(iv.phase_a_voltage_3rd), 2) AS phase_a_voltage_3rd,
				      ROUND(AVG(iv.phase_b_current_0th), 2) AS phase_b_current_0th,
				      ROUND(AVG(iv.phase_b_current_1st), 2) AS phase_b_current_1st,
				      ROUND(AVG(iv.phase_b_current_2nd), 2) AS phase_b_current_2nd,
				      ROUND(AVG(iv.phase_b_current_3rd), 2) AS phase_b_current_3rd,
				      ROUND(AVG(iv.phase_b_current_4th), 2) AS phase_b_current_4th,
				      ROUND(AVG(iv.phase_b_current_5th), 2) AS phase_b_current_5th,
				      ROUND(AVG(iv.phase_b_current_6th), 2) AS phase_b_current_6th,
				      ROUND(AVG(iv.phase_b_current_7th), 2) AS phase_b_current_7th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_2nd), 2) AS phase_b_voltage_2nd,
				      ROUND(AVG(iv.phase_b_voltage_3rd), 2) AS phase_b_voltage_3rd,
				      ROUND(AVG(iv.phase_c_current_0th), 2) AS phase_c_current_0th,
				      ROUND(AVG(iv.phase_c_current_1st), 2) AS phase_c_current_1st,
				      ROUND(AVG(iv.phase_c_current_2nd), 2) AS phase_c_current_2nd,
				      ROUND(AVG(iv.phase_c_current_3rd), 2) AS phase_c_current_3rd,
				      ROUND(AVG(iv.phase_c_current_4th), 2) AS phase_c_current_4th,
				      ROUND(AVG(iv.phase_c_current_5th), 2) AS phase_c_current_5th,
				      ROUND(AVG(iv.phase_c_current_6th), 2) AS phase_c_current_6th,
				      ROUND(AVG(iv.phase_c_current_7th), 2) AS phase_c_current_7th,
				      ROUND(AVG(iv.phase_c_voltage_0th), 2) AS phase_c_voltage_0th,
				      ROUND(AVG(iv.phase_c_voltage_1st), 2) AS phase_c_voltage_1st,
				      ROUND(AVG(iv.phase_c_voltage_2nd), 2) AS phase_c_voltage_2nd,
				      ROUND(AVG(iv.phase_c_voltage_3rd), 2) AS phase_c_voltage_3rd,
				      ROUND(AVG(iv.angle_phase_a_current), 2) AS angle_phase_a_current,
				      ROUND(AVG(iv.angle_phase_b_current), 2) AS angle_phase_b_current,
				      ROUND(AVG(iv.angle_phase_c_current), 2) AS angle_phase_c_current,
				      ROUND(AVG(iv.angle_volts_a_b), 2) AS angle_volts_a_b,
				      ROUND(AVG(iv.angle_volts_b_c), 2) AS angle_volts_b_c,
				      ROUND(AVG(iv.angle_volts_c_a), 2) AS angle_volts_c_a,
				    </when>
				    
				    <when test="datatablename == 'model_ivt_solaron_ext'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.common_mode), 2) AS common_mode,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				      ROUND(AVG(iv.ac_current), 2) AS ac_current,
				    </when>
				    
				    <when test="datatablename == 'model_veris_industries_e51c2_power_meter'">
				      ROUND(AVG(iv.AccumulatedRealEnergyNet), 2) AS AccumulatedRealEnergyNet,
				      ROUND(AVG(iv.RealEnergyQuadrants14Import), 2) AS RealEnergyQuadrants14Import,
				      ROUND(AVG(iv.RealEnergyQuadrants23Export), 2) AS RealEnergyQuadrants23Export,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant1), 2) AS ReactiveEnergyQuadrant1,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant2), 2) AS ReactiveEnergyQuadrant2,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant3), 2) AS ReactiveEnergyQuadrant3,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant4), 2) AS ReactiveEnergyQuadrant4,
				      ROUND(AVG(iv.ApparentEnergyNet), 2) AS ApparentEnergyNet,
				      ROUND(AVG(iv.ApparentEnergyQuadrants14), 2) AS ApparentEnergyQuadrants14,
				      ROUND(AVG(iv.ApparentEnergyQuadrants23), 2) AS ApparentEnergyQuadrants23,
				      ROUND(AVG(iv.TotalNetInstantaneousRealPower), 2) AS TotalNetInstantaneousRealPower,
				      ROUND(AVG(iv.TotalNetInstantaneousReactivePower), 2) AS TotalNetInstantaneousReactivePower,
				      ROUND(AVG(iv.TotalNetInstantaneousApparentPower), 2) AS TotalNetInstantaneousApparentPower,
				      ROUND(AVG(iv.TotalPowerFactor), 2) AS TotalPowerFactor,
				      ROUND(AVG(iv.VoltageLL3pAve), 2) AS VoltageLL3pAve,
				      ROUND(AVG(iv.VoltageLN3pAve), 2) AS VoltageLN3pAve,
				      ROUND(AVG(iv.Current3pAve), 2) AS Current3pAve,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.TotalRealPowerPresentDemand), 2) AS TotalRealPowerPresentDemand,
				      ROUND(AVG(iv.TotalReactivePowerPresentDemand), 2) AS TotalReactivePowerPresentDemand,
				      ROUND(AVG(iv.TotalApparentPowerPresentDemand), 2) AS TotalApparentPowerPresentDemand,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandImport), 2) AS TotalRealPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandImport), 2) AS TotalReactivePowerMaxDemandImport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandImport), 2) AS TotalApparentPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandExport), 2) AS TotalRealPowerMaxDemandExport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandExport), 2) AS TotalReactivePowerMaxDemandExport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandExport), 2) AS TotalApparentPowerMaxDemandExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAImport), 2) AS AccumulatedRealEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBImport), 2) AS AccumulatedRealEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCImport), 2) AS AccumulatedRealEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAExport), 2) AS AccumulatedRealEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBExport), 2) AS AccumulatedRealEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCExport), 2) AS AccumulatedRealEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAImport), 2) AS AccumulatedApparentEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBImport), 2) AS AccumulatedApparentEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCImport), 2) AS AccumulatedApparentEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAExport), 2) AS AccumulatedApparentEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBExport), 2) AS AccumulatedApparentEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCExport), 2) AS AccumulatedApparentEnergyPhaseCExport,
				      ROUND(AVG(iv.RealPowerPhaseA), 2) AS RealPowerPhaseA,
				      ROUND(AVG(iv.RealPowerPhaseB), 2) AS RealPowerPhaseB,
				      ROUND(AVG(iv.RealPowerPhaseC), 2) AS RealPowerPhaseC,
				      ROUND(AVG(iv.ReactivePowerPhaseA), 2) AS ReactivePowerPhaseA,
				      ROUND(AVG(iv.ReactivePowerPhaseB), 2) AS ReactivePowerPhaseB,
				      ROUND(AVG(iv.ReactivePowerPhaseC), 2) AS ReactivePowerPhaseC,
				      ROUND(AVG(iv.ApparentPowerPhaseA), 2) AS ApparentPowerPhaseA,
				      ROUND(AVG(iv.ApparentPowerPhaseB), 2) AS ApparentPowerPhaseB,
				      ROUND(AVG(iv.ApparentPowerPhaseC), 2) AS ApparentPowerPhaseC,
				      ROUND(AVG(iv.PowerFactorPhaseA), 2) AS PowerFactorPhaseA,
				      ROUND(AVG(iv.PowerFactorPhaseB), 2) AS PowerFactorPhaseB,
				      ROUND(AVG(iv.PowerFactorPhaseC), 2) AS PowerFactorPhaseC,
				      ROUND(AVG(iv.VoltagePhaseAB), 2) AS VoltagePhaseAB,
				      ROUND(AVG(iv.VoltagePhaseBC), 2) AS VoltagePhaseBC,
				      ROUND(AVG(iv.VoltagePhaseAC), 2) AS VoltagePhaseAC,
				      ROUND(AVG(iv.VoltagePhaseAN), 2) AS VoltagePhaseAN,
				      ROUND(AVG(iv.VoltagePhaseBN), 2) AS VoltagePhaseBN,
				      ROUND(AVG(iv.VoltagePhaseCN), 2) AS VoltagePhaseCN,
				      ROUND(AVG(iv.CurrentPhaseA), 2) AS CurrentPhaseA,
				      ROUND(AVG(iv.CurrentPhaseB), 2) AS CurrentPhaseB,
				      ROUND(AVG(iv.CurrentPhaseC), 2) AS CurrentPhaseC,
				    </when>
				    
				    
				    <when test="datatablename == 'model_imtsolar_class8000'">
				      ROUND(AVG(iv.irradiance * 0.1), 2) AS irradiance,
				      ROUND(AVG(iv.tcell), 2) AS tcell,
				    </when>
				    
				    
				    <when test="datatablename == 'model_pvp_inverter'">
				      ROUND(AVG(iv.total_kwh_delivered), 2) AS total_kwh_delivered,
				      ROUND(AVG(iv.volts_a_l_n), 2) AS volts_a_l_n,
				      ROUND(AVG(iv.volts_b_l_n), 2) AS volts_b_l_n,
				      ROUND(AVG(iv.volts_c_l_n), 2) AS volts_c_l_n,
				      ROUND(AVG(iv.current_a), 2) AS current_a,
				      ROUND(AVG(iv.current_b), 2) AS current_b,
				      ROUND(AVG(iv.current_c), 2) AS current_c,
				      ROUND(AVG(iv.dc_output_voltage), 2) AS dc_output_voltage,
				      ROUND(AVG(iv.dc_output_current), 2) AS dc_output_current,
				      ROUND(AVG(iv.line_frenquency), 2) AS line_frenquency,
				      ROUND(AVG(iv.line_kw), 2) AS line_kw,
				      ROUND(COUNT(iv.inverter_fault_word0), 2) AS inverter_fault_word0,
				      ROUND(COUNT(iv.inverter_fault_word1), 2) AS inverter_fault_word1,
				      ROUND(COUNT(iv.inverter_fault_word2), 2) AS inverter_fault_word2,
				      
				    </when>
				    
				    <when test="datatablename == 'model_advanced_energy_solaron'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.ambient_temperature), 2) AS ambient_temperature,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				    </when>
				    
				    
				    <when test="datatablename == 'model_chint_solectria_inverter_class9725'">
				      ROUND(AVG(iv.PowerOnOff), 2) AS PowerOnOff,
				      ROUND(AVG(iv.PActiveSet), 2) AS PActiveSet,
				      ROUND(AVG(iv.PFactorSet), 2) AS PFactorSet,
				      ROUND(AVG(iv.PReactiveSet), 2) AS PReactiveSet,
				      ROUND(AVG(iv.GridVMax), 2) AS GridVMax,
				      ROUND(AVG(iv.GridVmaxTripT), 2) AS GridVmaxTripT,
				      ROUND(AVG(iv.GridVMin), 2) AS GridVMin,
				      ROUND(AVG(iv.GridVminTripT), 2) AS GridVminTripT,
				      ROUND(AVG(iv.GridFMax), 2) AS GridFMax,
				      ROUND(AVG(iv.GridFMin), 2) AS GridFMin,
				      ROUND(AVG(iv.GridFTripT), 2) AS GridFTripT,
				      ROUND(AVG(iv.ActivePower), 2) AS ActivePower,
				      ROUND(AVG(iv.PowerFactor), 2) AS PowerFactor,
				      ROUND(AVG(iv.Risomin), 2) AS Risomin,
				      ROUND(AVG(iv.PVStartVol), 2) AS PVStartVol,
				      ROUND(AVG(iv.DCIMax), 2) AS DCIMax,
				      ROUND(AVG(iv.TambientMax), 2) AS TambientMax,
				      ROUND(AVG(iv.TmoduleMax), 2) AS TmoduleMax,
				      ROUND(AVG(iv.OffsetDiffMax), 2) AS OffsetDiffMax,
				      ROUND(AVG(iv.GridVolUnbalance), 2) AS GridVolUnbalance,
				      ROUND(AVG(iv.SoftPowerStep), 2) AS SoftPowerStep,
				      ROUND(AVG(iv.TotalEnergyToEnergy), 2) AS TotalEnergyToEnergy,
				      ROUND(AVG(iv.TotalEnergyToday), 2) AS TotalEnergyToday,
				      ROUND(AVG(iv.InverterEfficiency), 2) AS InverterEfficiency,
				      ROUND(AVG(iv.PowerFactor1), 2) AS PowerFactor1,
				      ROUND(AVG(iv.MaxActivePowerToday), 2) AS MaxActivePowerToday,
				      ROUND(AVG(iv.RunTimeToGrid), 2) AS RunTimeToGrid,
				      ROUND(AVG(iv.AC_ActivePower), 2) AS AC_ActivePower,
				      ROUND(AVG(iv.AC_ApparentPower), 2) AS AC_ApparentPower,
				      ROUND(AVG(iv.GridVoltageUab), 2) AS GridVoltageUab,
				      ROUND(AVG(iv.GridVoltageUbc), 2) AS GridVoltageUbc,
				      ROUND(AVG(iv.GridVoltageUca), 2) AS GridVoltageUca,
				      ROUND(AVG(iv.GridA_PhaseCurrent), 2) AS GridA_PhaseCurrent,
				      ROUND(AVG(iv.GridB_PhaseCurrent), 2) AS GridB_PhaseCurrent,
				      ROUND(AVG(iv.GridC_PhaseCurrent), 2) AS GridC_PhaseCurrent,
				      ROUND(AVG(iv.PV1_Voltage), 2) AS PV1_Voltage,
				      ROUND(AVG(iv.PV1_Current), 2) AS PV1_Current,
				      ROUND(AVG(iv.PV2_Voltage), 2) AS PV2_Voltage,
				      ROUND(AVG(iv.PV2_Current), 2) AS PV2_Current,
				      ROUND(AVG(iv.PV3_Voltage), 2) AS PV3_Voltage,
				      ROUND(AVG(iv.PV3_Current), 2) AS PV3_Current,
				      ROUND(AVG(iv.Grid_Frequency), 2) AS Grid_Frequency,
				      ROUND(AVG(iv.ModuleTemp), 2) AS ModuleTemp,
				      ROUND(AVG(iv.InternalTemp), 2) AS InternalTemp,
				      ROUND(AVG(iv.TransformerTemp), 2) AS TransformerTemp,
				      ROUND(COUNT(iv.PermanentFaultCode), 2) AS PermanentFaultCode,
				      ROUND(COUNT(iv.WarnCode), 2) AS WarnCode,
				      ROUND(COUNT(iv.FaultCode0), 2) AS FaultCode0,
				      ROUND(COUNT(iv.FaultCode1), 2) AS FaultCode1,
				      ROUND(COUNT(iv.FaultCode2), 2) AS FaultCode2,
				    </when>
				    
				    <when test="datatablename == 'model_elkor_wattson_pv_meter'">
				      ROUND(AVG(iv.TotalEnergyConsumption), 2) AS TotalEnergyConsumption,
				      ROUND(AVG(iv.TotalRealPower), 2) AS TotalRealPower,
				      ROUND(AVG(iv.TotalReactivePower), 2) AS TotalReactivePower,
				      ROUND(AVG(iv.TotalApparentPower), 2) AS TotalApparentPower,
				      ROUND(AVG(iv.AverageVoltageLN), 2) AS AverageVoltageLN,
				      ROUND(AVG(iv.AverageVoltageLL), 2) AS AverageVoltageLL,
				      ROUND(AVG(iv.AverageCurrent), 2) AS AverageCurrent,
				      ROUND(AVG(iv.TotalSystemPowerFactor), 2) AS TotalSystemPowerFactor,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.SlidingWindowRealPowerDemand), 2) AS SlidingWindowRealPowerDemand,
				      ROUND(AVG(iv.VoltageAN), 2) AS VoltageAN,
				      ROUND(AVG(iv.VoltageBN), 2) AS VoltageBN,
				      ROUND(AVG(iv.VoltageCN), 2) AS VoltageCN,
				      ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				      ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				      ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				      ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				      ROUND(COUNT(iv.CurrentB), 2) AS CurrentB,
				      ROUND(COUNT(iv.CurrentC), 2) AS CurrentC,
				      ROUND(COUNT(iv.RealPowerA), 2) AS RealPowerA,
				      ROUND(COUNT(iv.RealPowerB), 2) AS RealPowerB,
				      ROUND(COUNT(iv.RealPowerC), 2) AS RealPowerC,
				      ROUND(COUNT(iv.ReactivePowerA), 2) AS ReactivePowerA,
				      
				      ROUND(COUNT(iv.ReactivePowerB), 2) AS ReactivePowerB,
				      ROUND(COUNT(iv.ReactivePowerC), 2) AS ReactivePowerC,
				      ROUND(COUNT(iv.ApparentPowerA), 2) AS ApparentPowerA,
				      ROUND(COUNT(iv.ApparentPowerB), 2) AS ApparentPowerB,
				      ROUND(COUNT(iv.ApparentPowerC), 2) AS ApparentPowerC,
				      ROUND(COUNT(iv.PowerFactorA), 2) AS PowerFactorA,
				      ROUND(COUNT(iv.PowerFactorB), 2) AS PowerFactorB,
				      ROUND(COUNT(iv.PowerFactorC), 2) AS PowerFactorC,
				    </when>
				    
				    <when test="datatablename == 'model_satcon_pvs357_inverter'">
				      ROUND(AVG(iv.Software_Identification_Number), 2) AS Software_Identification_Number,
				      ROUND(AVG(iv.Fault_Word1), 2) AS Fault_Word1,
				      ROUND(AVG(iv.Fault_Word2), 2) AS Fault_Word2,
				      ROUND(AVG(iv.Fault_Word3), 2) AS Fault_Word3,
				      ROUND(AVG(iv.Fault_Word4), 2) AS Fault_Word4,
				      ROUND(AVG(iv.Fault_Word5), 2) AS Fault_Word5,
				      ROUND(AVG(iv.Fault_Word6), 2) AS Fault_Word6,
				      ROUND(COUNT(iv.Fault_Word7), 2) AS Fault_Word7,
				      ROUND(AVG(iv.Number_of_Faults), 2) AS Number_of_Faults,
				      ROUND(AVG(iv.Program_Checksum), 2) AS Program_Checksum,
				      ROUND(AVG(iv.DC_Input_Volts), 2) AS DC_Input_Volts,
				      ROUND(AVG(iv.DC_Link_Volts), 2) AS DC_Link_Volts,
				      ROUND(AVG(iv.DC_Link_Amps), 2) AS DC_Link_Amps,
				      ROUND(AVG(iv.DC_Ground_Current), 2) AS DC_Ground_Current,
				      ROUND(AVG(iv.Line_Amps_A), 2) AS Line_Amps_A,
				      ROUND(AVG(iv.Line_Amps_B), 2) AS Line_Amps_B,
				      ROUND(AVG(iv.Line_Amps_C), 2) AS Line_Amps_C,
				      ROUND(AVG(iv.Line_Amps_Average), 2) AS Line_Amps_Average,
				      ROUND(AVG(iv.Neutral_Current), 2) AS Neutral_Current,
				      ROUND(AVG(iv.Line_Volts_A), 2) AS Line_Volts_A,
				      ROUND(AVG(iv.Line_Volts_B), 2) AS Line_Volts_B,
				      ROUND(AVG(iv.Line_Volts_C), 2) AS Line_Volts_C,
				      ROUND(AVG(iv.Line_Volts_Average), 2) AS Line_Volts_Average,
				      ROUND(AVG(iv.Line_Voltage_Unbalance), 2) AS Line_Voltage_Unbalance,
				      ROUND(AVG(iv.Line_Current_Unbalance), 2) AS Line_Current_Unbalance,
				      ROUND(AVG(iv.Input_kW), 2) AS Input_kW,
				      ROUND(AVG(iv.Output_kw), 2) AS Output_kw,
				      ROUND(AVG(iv.Output_kvar), 2) AS Output_kvar,
				      ROUND(AVG(iv.Output_kva), 2) AS Output_kva,
				      ROUND(AVG(iv.Power_Factor), 2) AS Power_Factor,
				      ROUND(AVG(iv.Ground_Impedance), 2) AS Ground_Impedance,
				      ROUND(AVG(iv.String_Amps1), 2) AS String_Amps1,
				      ROUND(AVG(iv.String_Amps2), 2) AS String_Amps2,
				      ROUND(AVG(iv.String_Amps3), 2) AS String_Amps3,
				      ROUND(AVG(iv.String_Amps4), 2) AS String_Amps4,
				      ROUND(AVG(iv.String_Amps5), 2) AS String_Amps5,
				      ROUND(AVG(iv.String_Amps6), 2) AS String_Amps6,
				      ROUND(AVG(iv.String_Amps7), 2) AS String_Amps7,
				      ROUND(AVG(iv.String_Amps8), 2) AS String_Amps8,
				      ROUND(AVG(iv.String_Amps9), 2) AS String_Amps9,
				      ROUND(AVG(iv.String_Amps10), 2) AS String_Amps10,
				      ROUND(AVG(iv.String_Amps11), 2) AS String_Amps11,
				      ROUND(AVG(iv.String_Amps12), 2) AS String_Amps12,
				      ROUND(AVG(iv.String_Amps13), 2) AS String_Amps13,
				      ROUND(AVG(iv.String_Amps14), 2) AS String_Amps14,
				      ROUND(AVG(iv.String_Amps15), 2) AS String_Amps15,
				      ROUND(AVG(iv.String_Amps16), 2) AS String_Amps16,
				      ROUND(AVG(iv.String_Amps17), 2) AS String_Amps17,
				      ROUND(AVG(iv.String_Amps18), 2) AS String_Amps18,
				      ROUND(AVG(iv.String_Amps19), 2) AS String_Amps19,
				      ROUND(AVG(iv.String_Amps20), 2) AS String_Amps20,
				      ROUND(AVG(iv.String_Amps21), 2) AS String_Amps21,
				      ROUND(AVG(iv.String_Amps22), 2) AS String_Amps22,
				      ROUND(AVG(iv.String_Amps23), 2) AS String_Amps23,
				      ROUND(AVG(iv.String_Amps24), 2) AS String_Amps24,
				      ROUND(AVG(iv.String_Amps25), 2) AS String_Amps25,
				      ROUND(AVG(iv.String_Amps26), 2) AS String_Amps26,
				      ROUND(AVG(iv.String_Amps27), 2) AS String_Amps27,
				      ROUND(AVG(iv.String_Amps28), 2) AS String_Amps28,
				      ROUND(AVG(iv.String_Amps29), 2) AS String_Amps29,
				      ROUND(AVG(iv.String_Amps30), 2) AS String_Amps30,
				      ROUND(AVG(iv.String_Amps31), 2) AS String_Amps31,
				      ROUND(AVG(iv.String_Amps32), 2) AS String_Amps32,
				      
				      
				      ROUND(AVG(iv.String_Amps_Average), 2) AS String_Amps_Average,
				      ROUND(AVG(iv.String_kwh1), 2) AS String_kwh1,
				      ROUND(AVG(iv.String_kwh2), 2) AS String_kwh2,
				      ROUND(AVG(iv.String_kwh3), 2) AS String_kwh3,
				      ROUND(AVG(iv.String_kwh4), 2) AS String_kwh4,
				      ROUND(AVG(iv.String_kwh5), 2) AS String_kwh5,
				      ROUND(AVG(iv.String_kwh6), 2) AS String_kwh6,
				      ROUND(AVG(iv.String_kwh7), 2) AS String_kwh7,
				      ROUND(AVG(iv.String_kwh8), 2) AS String_kwh8,
				      ROUND(AVG(iv.String_kwh9), 2) AS String_kwh9,
				      ROUND(AVG(iv.String_kwh10), 2) AS String_kwh10,
				      ROUND(AVG(iv.String_kwh11), 2) AS String_kwh11,
				      ROUND(AVG(iv.String_kwh12), 2) AS String_kwh12,
				      ROUND(AVG(iv.String_kwh13), 2) AS String_kwh13,
				      ROUND(AVG(iv.String_kwh14), 2) AS String_kwh14,
				      ROUND(AVG(iv.String_kwh15), 2) AS String_kwh15,
				      ROUND(AVG(iv.String_kwh16), 2) AS String_kwh16,
				      ROUND(AVG(iv.String_kwh17), 2) AS String_kwh17,
				      ROUND(AVG(iv.String_kwh18), 2) AS String_kwh18,
				      ROUND(AVG(iv.String_kwh19), 2) AS String_kwh19,
				      ROUND(AVG(iv.String_kwh20), 2) AS String_kwh20,
				      ROUND(AVG(iv.String_kwh21), 2) AS String_kwh21,
				      ROUND(AVG(iv.String_kwh22), 2) AS String_kwh22,
				      ROUND(AVG(iv.String_kwh23), 2) AS String_kwh23,
				      ROUND(AVG(iv.String_kwh24), 2) AS String_kwh24,
				      ROUND(AVG(iv.String_kwh25), 2) AS String_kwh25,
				      ROUND(AVG(iv.String_kwh26), 2) AS String_kwh26,
				      ROUND(AVG(iv.String_kwh27), 2) AS String_kwh27,
				      ROUND(AVG(iv.String_kwh28), 2) AS String_kwh28,
				      ROUND(AVG(iv.String_kwh29), 2) AS String_kwh29,
				      ROUND(AVG(iv.String_kwh30), 2) AS String_kwh30,
				      ROUND(AVG(iv.String_kwh31), 2) AS String_kwh31,
				      ROUND(AVG(iv.String_kwh32), 2) AS String_kwh32,
				      
				      ROUND(AVG(iv.String_kwh_Average), 2) AS String_kwh_Average,
				      ROUND(AVG(iv.Total_kwh), 2) AS Total_kwh,
				      ROUND(AVG(iv.Total_mwh), 2) AS Total_mwh,
				      ROUND(AVG(iv.kwh_Today), 2) AS kwh_Today,
				      ROUND(AVG(iv.kwh_Yesterday), 2) AS kwh_Yesterday,
				      ROUND(AVG(iv.Total_kwh7_days), 2) AS Total_kwh7_days,
				      ROUND(AVG(iv.Total_kwh30_days), 2) AS Total_kwh30_days,
				      ROUND(AVG(iv.Average_kwh7_days), 2) AS Average_kwh7_days,
				      ROUND(AVG(iv.Average_kwh30_Days), 2) AS Average_kwh30_Days,
				      ROUND(AVG(iv.Average_Line_Frequency), 2) AS Average_Line_Frequency,
				      ROUND(AVG(iv.Average_Line_Frequency_Error), 2) AS Average_Line_Frequency_Error,
				      ROUND(AVG(iv.FPGA_Identification_Number), 2) AS FPGA_Identification_Number,
				      ROUND(AVG(iv.DC_Input_Voltage_Timer), 2) AS DC_Input_Voltage_Timer,
				      ROUND(AVG(iv.AC_Line_Voltage_Timer), 2) AS AC_Line_Voltage_Timer,
				      ROUND(AVG(iv.Operating_State), 2) AS Operating_State,
				      ROUND(AVG(iv.Internal_Air_Temperature), 2) AS Internal_Air_Temperature,
				      ROUND(AVG(iv.Inverter_Air_Temperature), 2) AS Inverter_Air_Temperature,
				      ROUND(AVG(iv.Heatsink_Temperature1), 2) AS Heatsink_Temperature1,
				      ROUND(AVG(iv.Heatsink_Temperature2), 2) AS Heatsink_Temperature2,
				      ROUND(AVG(iv.Heatsink_Temperature3), 2) AS Heatsink_Temperature3,
				      ROUND(AVG(iv.Heatsink_Temperature4), 2) AS Heatsink_Temperature4,
				      ROUND(AVG(iv.Heatsink_Temperature5), 2) AS Heatsink_Temperature5,
				      ROUND(AVG(iv.Heatsink_Temperature6), 2) AS Heatsink_Temperature6,
				      ROUND(AVG(iv.Heatsink_Maximum_Temparature1), 2) AS Heatsink_Maximum_Temparature1,
				      ROUND(AVG(iv.Fan_Speed_Command1), 2) AS Fan_Speed_Command1,
				      ROUND(AVG(iv.Heatsink_Maximum_Temperature2), 2) AS Heatsink_Maximum_Temperature2,
				      ROUND(AVG(iv.Fan_Speed_Command2), 2) AS Fan_Speed_Command2,
				      ROUND(AVG(iv.Number_of_Temperature_Feedbacks), 2) AS Number_of_Temperature_Feedbacks,
				      ROUND(AVG(iv.Serial_number_word1), 2) AS Serial_number_word1,
				      ROUND(AVG(iv.Serial_number_word2), 2) AS Serial_number_word2,
				      ROUND(AVG(iv.Serial_number_word3), 2) AS Serial_number_word3,
				      ROUND(AVG(iv.Serial_number_word4), 2) AS Serial_number_word4,
				      ROUND(AVG(iv.Number_of_Strings), 2) AS Number_of_Strings,
				      
				    </when>
				    
				    
				    <when test="datatablename == 'model_w_kipp_zonen_rt1'">
				    	ROUND(AVG(iv.DeviceType), 2) AS DeviceType,
				    	ROUND(AVG(iv.DataModelVersion), 2) AS DataModelVersion,
				    	ROUND(AVG(iv.OperationalMode), 2) AS OperationalMode,
				    	ROUND(AVG(iv.StatusFlags), 2) AS StatusFlags,
				    	ROUND(AVG(iv.SunPOATempComp), 2) AS SunPOATempComp,
				    	ROUND(AVG(iv.PanelTemperature), 2) AS PanelTemperature,
				    	ROUND(AVG(iv.ExtPowerSensor), 2) AS ExtPowerSensor,
				    	ROUND(AVG(iv.BatchNumber), 2) AS BatchNumber,
				    	ROUND(AVG(iv.SerialNumber), 2) AS SerialNumber,
				    	ROUND(AVG(iv.CalibrationDateYYMMDD), 2) AS CalibrationDateYYMMDD,
				    </when>
				    
				    <when test="datatablename == 'model_elkor_production_meter'">
				    	ROUND(AVG(iv.ActivePowerTotal), 2) AS ActivePowerTotal,
				    	ROUND(AVG(iv.ReactivePowerTotal), 2) AS ReactivePowerTotal,
				    	ROUND(AVG(iv.ApparentPowerTotal), 2) AS ApparentPowerTotal,
				    	ROUND(AVG(iv.VoltageAverage), 2) AS VoltageAverage,
				    	ROUND(AVG(iv.VoltageLLAverage), 2) AS VoltageLLAverage,
				    	ROUND(AVG(iv.CurrentAverage), 2) AS CurrentAverage,
				    	ROUND(AVG(iv.SystemPowerFactor), 2) AS SystemPowerFactor,
				    	ROUND(AVG(iv.SystemFrequency), 2) AS SystemFrequency,
				    	ROUND(AVG(iv.VoltageAverageAngle), 2) AS VoltageAverageAngle,
				    	ROUND(AVG(iv.SystemQuadrant), 2) AS SystemQuadrant,
				    	ROUND(AVG(iv.VoltageA), 2) AS VoltageA,
				    	ROUND(AVG(iv.VoltageB), 2) AS VoltageB,
				    	ROUND(AVG(iv.VoltageC), 2) AS VoltageC,
				    	ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				    	ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				    	ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				    	ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				    	ROUND(AVG(iv.CurrentB), 2) AS CurrentB,
				    	ROUND(AVG(iv.CurrentC), 2) AS CurrentC,
				    	ROUND(AVG(iv.ActivePowerA), 2) AS ActivePowerA,
				    	ROUND(AVG(iv.ActivePowerB), 2) AS ActivePowerB,
				    	ROUND(AVG(iv.ActivePowerC), 2) AS ActivePowerC,
				    	ROUND(AVG(iv.ReactivePowerA), 2) AS ReactivePowerA,
				    	ROUND(AVG(iv.ReactivePowerB), 2) AS ReactivePowerB,
				    	ROUND(AVG(iv.ReactivePowerC), 2) AS ReactivePowerC,
				    	ROUND(AVG(iv.ApparentPowerA), 2) AS ApparentPowerA,
				    	ROUND(AVG(iv.ApparentPowerB), 2) AS ApparentPowerB,
				    	ROUND(AVG(iv.ApparentPowerC), 2) AS ApparentPowerC,
				    	ROUND(AVG(iv.PowerFactorA), 2) AS PowerFactorA,
				    	ROUND(AVG(iv.PowerFactorB), 2) AS PowerFactorB,
				    	ROUND(AVG(iv.PowerFactorC), 2) AS PowerFactorC,
				    	ROUND(AVG(iv.VoltageAngleAB), 2) AS VoltageAngleAB,
				    	ROUND(AVG(iv.VoltageAngleBC), 2) AS VoltageAngleBC,
				    	ROUND(AVG(iv.VoltageAngleCA), 2) AS VoltageAngleCA,
				    	ROUND(AVG(iv.QuadrantA), 2) AS QuadrantA,
				    	ROUND(AVG(iv.QuadrantB), 2) AS QuadrantB,
				    	ROUND(AVG(iv.QuadrantC), 2) AS QuadrantC,
				    	ROUND(AVG(iv.SlidingWindowPower), 2) AS SlidingWindowPower,
				    	ROUND(AVG(iv.NetTotalEnergy), 2) AS NetTotalEnergy,
				    	ROUND(AVG(iv.TotalNetApparentEnergy), 2) AS TotalNetApparentEnergy,
				    	ROUND(AVG(iv.TotalImportEnergy), 2) AS TotalImportEnergy,
				    	ROUND(AVG(iv.TotalExportEnergy), 2) AS TotalExportEnergy,
				    	ROUND(AVG(iv.TotalImportApparentEnergy), 2) AS TotalImportApparentEnergy,
				    	ROUND(AVG(iv.TotalExportApparentEnergy), 2) AS TotalExportApparentEnergy,
				    	ROUND(AVG(iv.Q1TotalReactiveEnergy), 2) AS Q1TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q2TotalReactiveEnergy), 2) AS Q2TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q3TotalReactiveEnergy), 2) AS Q3TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q4TotalReactiveEnergy), 2) AS Q4TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q1Q2TotalInductiveReactiveEnergy), 2) AS Q1Q2TotalInductiveReactiveEnergy,
				    	ROUND(AVG(iv.Q3Q4TotalCapacitiveReactiveEnergy), 2) AS Q3Q4TotalCapacitiveReactiveEnergy,
				    	ROUND(AVG(iv.NetEnergyA), 2) AS NetEnergyA,
				    	ROUND(AVG(iv.NetEnergyB), 2) AS NetEnergyB,
				    	ROUND(AVG(iv.NetEnergyC), 2) AS NetEnergyC,
				    	ROUND(AVG(iv.NetApparentEnergyA), 2) AS NetApparentEnergyA,
				    	ROUND(AVG(iv.NetApparentEnergyB), 2) AS NetApparentEnergyB,
				    	ROUND(AVG(iv.NetApparentEnergyC), 2) AS NetApparentEnergyC,
				    	ROUND(AVG(iv.ImportEnergyA), 2) AS ImportEnergyA,
				    	ROUND(AVG(iv.ImportEnergyB), 2) AS ImportEnergyB,
				    	ROUND(AVG(iv.ImportEnergyC), 2) AS ImportEnergyC,
				    	ROUND(AVG(iv.ExportEnergyA), 2) AS ExportEnergyA,
				    	ROUND(AVG(iv.ExportEnergyB), 2) AS ExportEnergyB,
				    	ROUND(AVG(iv.ExportEnergyC), 2) AS ExportEnergyC,
				    	ROUND(AVG(iv.ImportApparentEnergyA), 2) AS ImportApparentEnergyA,
				    	ROUND(AVG(iv.ImportApparentEnergyB), 2) AS ImportApparentEnergyB,
				    	ROUND(AVG(iv.ImportApparentEnergyC), 2) AS ImportApparentEnergyC,
				    	ROUND(AVG(iv.ExportApparentEnergyA), 2) AS ExportApparentEnergyA,
				    	ROUND(AVG(iv.ExportApparentEnergyB), 2) AS ExportApparentEnergyB,
				    	ROUND(AVG(iv.ExportApparentEnergyC), 2) AS ExportApparentEnergyC,
				    	ROUND(AVG(iv.Q1ReactiveEnergyA), 2) AS Q1ReactiveEnergyA,
				    	ROUND(AVG(iv.Q1ReactiveEnergyB), 2) AS Q1ReactiveEnergyB,
				    	ROUND(AVG(iv.Q1ReactiveEnergyC), 2) AS Q1ReactiveEnergyC,
				    	ROUND(AVG(iv.Q2ReactiveEnergyA), 2) AS Q2ReactiveEnergyA,
				    	ROUND(AVG(iv.Q2ReactiveEnergyB), 2) AS Q2ReactiveEnergyB,
				    	ROUND(AVG(iv.Q2ReactiveEnergyC), 2) AS Q2ReactiveEnergyC,
				    	ROUND(AVG(iv.Q3ReactiveEnergyA), 2) AS Q3ReactiveEnergyA,
				    	ROUND(AVG(iv.Q3ReactiveEnergyB), 2) AS Q3ReactiveEnergyB,
				    	ROUND(AVG(iv.Q3ReactiveEnergyC), 2) AS Q3ReactiveEnergyC,
				    	ROUND(AVG(iv.Q4ReactiveEnergyA), 2) AS Q4ReactiveEnergyA,
				    	ROUND(AVG(iv.Q4ReactiveEnergyB), 2) AS Q4ReactiveEnergyB,
				    	ROUND(AVG(iv.Q4ReactiveEnergyC), 2) AS Q4ReactiveEnergyC,
				    </when>
				    
				    
			    </choose>
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i' ) AS full_time,
				FLOOR(UNIX_TIMESTAMP(CONVERT_TZ( iv.time, '+00:00', t.`offset` ))/(15 * 60)) AS timekey
			FROM
				site si
				LEFT JOIN site_customer_map scm ON scm.id_site = si.id
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN ${datatablename} iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id_site}
				AND scm.id_customer = #{id_customer}
				AND d.id = #{id_device} 
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} 
				AND #{end_date}
				GROUP BY timekey
        </if>
        
        <if test="(filterBy == 'today' or filterBy == 'yesterday' or filterBy == 'last_3day' or filterBy == 'last_7day') and setup_send_time == 1 and data_send_time == 3">
			SELECT
				<choose>
					<when test="datatablename == 'model_lufft_class8020'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.IrradianceActual), 2) AS IrradianceActual,
				      ROUND(COUNT(iv.IrradianceMin), 2) AS IrradianceMin,
				      ROUND(COUNT(iv.IrradianceMax), 2) AS IrradianceMax,
				      ROUND(COUNT(iv.IrradianceAvg), 2) AS IrradianceAvg,
				      ROUND(COUNT(iv.AirTemperatureActual), 2) AS AirTemperatureActual,
				      ROUND(COUNT(iv.AirTemperatureMin), 2) AS AirTemperatureMin,
				      ROUND(COUNT(iv.AirTemperatureMax), 2) AS AirTemperatureMax,
				      ROUND(COUNT(iv.AirTemperatureAvg), 2) AS AirTemperatureAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationQuantityAbsolute), 2) AS PrecipitationQuantityAbsolute,
				      ROUND(COUNT(iv.PrecipitationQuantityDifferential), 2) AS PrecipitationQuantityDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AbsoluteHumidityActual), 2) AS AbsoluteHumidityActual,
				      ROUND(COUNT(iv.AbsoluteHumidityMin), 2) AS AbsoluteHumidityMin,
				      ROUND(COUNT(iv.AbsoluteHumidityMax), 2) AS AbsoluteHumidityMax,
				      ROUND(COUNT(iv.AbsoluteHumidityAvg), 2) AS AbsoluteHumidityAvg,
				      ROUND(COUNT(iv.MixingRatioActual), 2) AS MixingRatioActual,
				      ROUND(COUNT(iv.MixingRatioMin), 2) AS MixingRatioMin,
				      ROUND(COUNT(iv.MixingRatioMax), 2) AS MixingRatioMax,
				      ROUND(COUNT(iv.MixingRatioAvg), 2) AS MixingRatioAvg,
				      ROUND(COUNT(iv.AbsoluteAirPressureActual), 2) AS AbsoluteAirPressureActual,
				      ROUND(COUNT(iv.AbsoluteAirPressureMin), 2) AS AbsoluteAirPressureMin,
				      ROUND(COUNT(iv.AbsoluteAirPressureMax), 2) AS AbsoluteAirPressureMax,
				      ROUND(COUNT(iv.AbsoluteAirPressureAvg), 2) AS AbsoluteAirPressureAvg,
				      ROUND(COUNT(iv.WindSpeedStandardDeviation), 2) AS WindSpeedStandardDeviation,
				      ROUND(COUNT(iv.WindDirectionStandardDeviation), 2) AS WindDirectionStandardDeviation,
				      ROUND(COUNT(iv.WetBulbTemperature), 2) AS WetBulbTemperature,
				      ROUND(COUNT(iv.SpecificEnthalpy), 2) AS SpecificEnthalpy,
				      ROUND(COUNT(iv.AirDensityActual), 2) AS AirDensityActual,
				      ROUND(COUNT(iv.LeafWetnessActual), 2) AS LeafWetnessActual,
				      ROUND(COUNT(iv.LeafWetnessMin), 2) AS LeafWetnessMin,
				      ROUND(COUNT(iv.LeafWetnessMax), 2) AS LeafWetnessMax,
				      ROUND(COUNT(iv.LeafWetnessAvg), 2) AS LeafWetnessAvg,
				      ROUND(COUNT(iv.LeafWetnessState), 2) AS LeafWetnessState,
				      ROUND(COUNT(iv.ExternalTemperature), 2) AS ExternalTemperature,
				      ROUND(COUNT(iv.WindValueQualityFast), 2) AS WindValueQualityFast,
				    </when>
				    
				    <when test="datatablename == 'model_lufft_ws501_umb_weather'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.GlobalRadiation), 2) AS GlobalRadiation,
				      ROUND(COUNT(iv.GlobalRadiation2), 2) AS GlobalRadiation2,
				      ROUND(COUNT(iv.GlobalRadiation3), 2) AS GlobalRadiation3,
				      ROUND(COUNT(iv.GlobalRadiation4), 2) AS GlobalRadiation4,
				      ROUND(COUNT(iv.AirTemperatureCActual), 2) AS AirTemperatureCActual,
				      ROUND(COUNT(iv.AirTemperatureCMin), 2) AS AirTemperatureCMin,
				      ROUND(COUNT(iv.AirTemperatureCMax), 2) AS AirTemperatureCMax,
				      ROUND(COUNT(iv.AirTemperatureCAvg), 2) AS AirTemperatureCAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationAbsolute), 2) AS PrecipitationAbsolute,
				      ROUND(COUNT(iv.PrecipitationDifferential), 2) AS PrecipitationDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AirTemperatureFActual), 2) AS AirTemperatureFActual,
				      ROUND(COUNT(iv.AirTemperatureFMin), 2) AS AirTemperatureFMin,
				      ROUND(COUNT(iv.AirTemperatureFMax), 2) AS AirTemperatureFMax,
				      ROUND(COUNT(iv.AirTemperatureFAvg), 2) AS AirTemperatureFAvg,
				      ROUND(COUNT(iv.ExternalTemperatureC), 2) AS ExternalTemperatureC,
				      ROUND(COUNT(iv.ExternalTemperatureF), 2) AS ExternalTemperatureF,
				    </when>
				    
					<when test="datatablename == 'model_abb_trio_class6210'">
				      ROUND(AVG(iv.AuroraType), 2) AS AuroraType,
				      ROUND(AVG(iv.GridType), 2) AS GridType,
				      ROUND(AVG(iv.TransformerType), 2) AS TransformerType,
				      ROUND(COUNT(iv.StatesByte0), 2) AS StatesByte0,
				      ROUND(COUNT(iv.StatesByte1), 2) AS StatesByte1,
				      ROUND(COUNT(iv.StatesByte2), 2) AS StatesByte2,
				      ROUND(COUNT(iv.StatesByte3), 2) AS StatesByte3,
				      ROUND(COUNT(iv.StatesByte4), 2) AS StatesByte4,
				      ROUND(COUNT(iv.TotalEnergy), 2) AS TotalEnergy,
				      ROUND(COUNT(iv.GridVoltage), 2) AS GridVoltage,
				      ROUND(COUNT(iv.GridCurrent), 2) AS GridCurrent,
				      ROUND(COUNT(iv.GridPower), 2) AS GridPower,
				      ROUND(COUNT(iv.Frequency), 2) AS Frequency,
				      ROUND(COUNT(iv.Input1Power), 2) AS Input1Power,
				      ROUND(COUNT(iv.Input1Voltage), 2) AS Input1Voltage,
				      ROUND(COUNT(iv.Input1Current), 2) AS Input1Current,
				      ROUND(COUNT(iv.Input2Power), 2) AS Input2Power,
				      ROUND(COUNT(iv.Input2Voltage), 2) AS Input2Voltage,
				      ROUND(COUNT(iv.Input2Current), 2) AS Input2Current,
				      ROUND(COUNT(iv.InverterTemperature), 2) AS InverterTemperature,
				      ROUND(COUNT(iv.BooseterTemperature), 2) AS BooseterTemperature,
				      ROUND(COUNT(iv.IslolationResistance), 2) AS IslolationResistance,
				    </when>
				    
				    <when test="datatablename == 'model_kippzonen_rt1_class8009'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    <when test="datatablename == 'model_rt1_class30000'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    
				    
				    <when test="datatablename == 'model_shark100'">
				      ROUND(AVG(iv.volts_a_n), 2) AS volts_a_n,
				      ROUND(AVG(iv.volts_b_n), 2) AS volts_b_n,
				      ROUND(AVG(iv.volts_c_n), 2) AS volts_c_n,
				      ROUND(AVG(iv.volts_a_b), 2) AS volts_a_b,
				      ROUND(AVG(iv.volts_c_a), 2) AS volts_c_a,
				      ROUND(AVG(iv.amps_a), 2) AS amps_a,
				      ROUND(AVG(iv.amps_b), 2) AS amps_b,
				      ROUND(AVG(iv.amps_c), 2) AS amps_c,
				      ROUND(AVG(iv.watts_3ph_total), 2) AS watts_3ph_total,
				      ROUND(AVG(iv.vars_3ph_total), 2) AS vars_3ph_total,
				      ROUND(AVG(iv.vas_3ph_total), 2) AS vas_3ph_total,
				      ROUND(AVG(iv.power_factor_3ph_total), 2) AS power_factor_3ph_total,
				      ROUND(AVG(iv.frequency), 2) AS frequency,
				      ROUND(AVG(iv.neutral_current), 2) AS neutral_current,
				      ROUND(AVG(iv.w_hours_received), 2) AS w_hours_received,
				      ROUND(AVG(iv.w_hours_delivered), 2) AS w_hours_delivered,
				      ROUND(AVG(iv.w_hours_net), 2) AS w_hours_net,
				      ROUND(AVG(iv.w_hours_total), 2) AS w_hours_total,
				      ROUND(AVG(iv.var_hours_positive), 2) AS var_hours_positive,
				      ROUND(AVG(iv.var_hours_negative), 2) AS var_hours_negative,
				      ROUND(AVG(iv.var_hours_net), 2) AS var_hours_net,
				      ROUND(AVG(iv.var_hours_total), 2) AS var_hours_total,
				      ROUND(AVG(iv.va_hours_total), 2) AS va_hours_total,
				      ROUND(AVG(iv.amps_a_average), 2) AS amps_a_average,
				      ROUND(AVG(iv.amps_b_average), 2) AS amps_b_average,
				      ROUND(AVG(iv.amps_c_average), 2) AS amps_c_average,
				      ROUND(AVG(iv.positive_watts_3ph_average), 2) AS positive_watts_3ph_average,
				      ROUND(AVG(iv.positive_vars_3ph_average), 2) AS positive_vars_3ph_average,
				      ROUND(AVG(iv.negative_watts_3ph_average), 2) AS negative_watts_3ph_average,
				      ROUND(AVG(iv.negative_vars_3ph_average), 2) AS negative_vars_3ph_average,
				      ROUND(AVG(iv.vas_3ph_average), 2) AS vas_3ph_average,
				      ROUND(AVG(iv.positive_pf_3ph_average), 2) AS positive_pf_3ph_average,
				      ROUND(AVG(iv.negative_pf_3ph_average), 2) AS negative_pf_3ph_average,
				      ROUND(AVG(iv.volts_a_n_min), 2) AS volts_a_n_min,
				      ROUND(AVG(iv.volts_b_n_min), 2) AS volts_b_n_min,
				      ROUND(AVG(iv.volts_c_n_min), 2) AS volts_c_n_min,
				      ROUND(AVG(iv.volts_a_b_min), 2) AS volts_a_b_min,
				      ROUND(AVG(iv.volts_b_c_min), 2) AS volts_b_c_min,
				      ROUND(AVG(iv.volts_c_a_min), 2) AS volts_c_a_min,
				      ROUND(AVG(iv.amps_a_min_avg_demand), 2) AS amps_a_min_avg_demand,
				      ROUND(AVG(iv.amps_b_min_avg_demand), 2) AS amps_b_min_avg_demand,
				      ROUND(AVG(iv.amps_c_min_avg_demand), 2) AS amps_c_min_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_min_avg_demand), 2) AS positive_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_min_avg_demand), 2) AS positive_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_min_avg_demand), 2) AS negative_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_min_avg_demand), 2) AS negative_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.vas_3ph_min_avg_demand), 2) AS vas_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_min_avg_demand), 2) AS positive_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_min_avg_demand), 2) AS negative_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.frequency_min), 2) AS frequency_min,
				      ROUND(AVG(iv.volts_a_n_max), 2) AS volts_a_n_max,
				      ROUND(AVG(iv.volts_b_n_max), 2) AS volts_b_n_max,
				      ROUND(AVG(iv.volts_c_n_max), 2) AS volts_c_n_max,
				      ROUND(AVG(iv.volts_a_b_max), 2) AS volts_a_b_max,
				      ROUND(AVG(iv.volts_b_c_max), 2) AS volts_b_c_max,
				      ROUND(AVG(iv.volts_c_a_max), 2) AS volts_c_a_max,
				      ROUND(AVG(iv.amps_a_max_avg_demand), 2) AS amps_a_max_avg_demand,
				      ROUND(AVG(iv.amps_b_max_avg_demand), 2) AS amps_b_max_avg_demand,
				      ROUND(AVG(iv.amps_c_max_avg_demand), 2) AS amps_c_max_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_max_avg_demand), 2) AS positive_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_max_avg_demand), 2) AS positive_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_max_avg_demand), 2) AS negative_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_max_avg_demand), 2) AS negative_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.vas_3ph_max_avg_demand), 2) AS vas_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_max_avg_demand), 2) AS positive_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_max_avg_demand), 2) AS negative_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.frequency_max), 2) AS frequency_max,
				      ROUND(AVG(iv.volts_a_n_thd), 2) AS volts_a_n_thd,
				      ROUND(AVG(iv.volts_b_n_thd), 2) AS volts_b_n_thd,
				      ROUND(AVG(iv.volts_c_n_thd), 2) AS volts_c_n_thd,
				      ROUND(AVG(iv.amps_a_thd), 2) AS amps_a_thd,
				      ROUND(AVG(iv.amps_b_thd), 2) AS amps_b_thd,
				      ROUND(AVG(iv.amps_c_thd), 2) AS amps_c_thd,
				      ROUND(AVG(iv.phase_a_current_0th), 2) AS phase_a_current_0th,
				      ROUND(AVG(iv.phase_a_current_1st), 2) AS phase_a_current_1st,
				      ROUND(AVG(iv.phase_a_current_2nd), 2) AS phase_a_current_2nd,
				      ROUND(AVG(iv.phase_a_current_3rd), 2) AS phase_a_current_3rd,
				      ROUND(AVG(iv.phase_a_current_4th), 2) AS phase_a_current_4th,
				      ROUND(AVG(iv.phase_a_current_5th), 2) AS phase_a_current_5th,
				      ROUND(AVG(iv.phase_a_current_6th), 2) AS phase_a_current_6th,
				      ROUND(AVG(iv.phase_a_current_7th), 2) AS phase_a_current_7th,
				      ROUND(AVG(iv.phase_a_voltage_0th), 2) AS phase_a_voltage_0th,
				      ROUND(AVG(iv.phase_a_voltage_1st), 2) AS phase_a_voltage_1st,
				      ROUND(AVG(iv.phase_a_voltage_2nd), 2) AS phase_a_voltage_2nd,
				      ROUND(AVG(iv.phase_a_voltage_3rd), 2) AS phase_a_voltage_3rd,
				      ROUND(AVG(iv.phase_b_current_0th), 2) AS phase_b_current_0th,
				      ROUND(AVG(iv.phase_b_current_1st), 2) AS phase_b_current_1st,
				      ROUND(AVG(iv.phase_b_current_2nd), 2) AS phase_b_current_2nd,
				      ROUND(AVG(iv.phase_b_current_3rd), 2) AS phase_b_current_3rd,
				      ROUND(AVG(iv.phase_b_current_4th), 2) AS phase_b_current_4th,
				      ROUND(AVG(iv.phase_b_current_5th), 2) AS phase_b_current_5th,
				      ROUND(AVG(iv.phase_b_current_6th), 2) AS phase_b_current_6th,
				      ROUND(AVG(iv.phase_b_current_7th), 2) AS phase_b_current_7th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_2nd), 2) AS phase_b_voltage_2nd,
				      ROUND(AVG(iv.phase_b_voltage_3rd), 2) AS phase_b_voltage_3rd,
				      ROUND(AVG(iv.phase_c_current_0th), 2) AS phase_c_current_0th,
				      ROUND(AVG(iv.phase_c_current_1st), 2) AS phase_c_current_1st,
				      ROUND(AVG(iv.phase_c_current_2nd), 2) AS phase_c_current_2nd,
				      ROUND(AVG(iv.phase_c_current_3rd), 2) AS phase_c_current_3rd,
				      ROUND(AVG(iv.phase_c_current_4th), 2) AS phase_c_current_4th,
				      ROUND(AVG(iv.phase_c_current_5th), 2) AS phase_c_current_5th,
				      ROUND(AVG(iv.phase_c_current_6th), 2) AS phase_c_current_6th,
				      ROUND(AVG(iv.phase_c_current_7th), 2) AS phase_c_current_7th,
				      ROUND(AVG(iv.phase_c_voltage_0th), 2) AS phase_c_voltage_0th,
				      ROUND(AVG(iv.phase_c_voltage_1st), 2) AS phase_c_voltage_1st,
				      ROUND(AVG(iv.phase_c_voltage_2nd), 2) AS phase_c_voltage_2nd,
				      ROUND(AVG(iv.phase_c_voltage_3rd), 2) AS phase_c_voltage_3rd,
				      ROUND(AVG(iv.angle_phase_a_current), 2) AS angle_phase_a_current,
				      ROUND(AVG(iv.angle_phase_b_current), 2) AS angle_phase_b_current,
				      ROUND(AVG(iv.angle_phase_c_current), 2) AS angle_phase_c_current,
				      ROUND(AVG(iv.angle_volts_a_b), 2) AS angle_volts_a_b,
				      ROUND(AVG(iv.angle_volts_b_c), 2) AS angle_volts_b_c,
				      ROUND(AVG(iv.angle_volts_c_a), 2) AS angle_volts_c_a,
				    </when>
				    
				    <when test="datatablename == 'model_ivt_solaron_ext'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.common_mode), 2) AS common_mode,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				      ROUND(AVG(iv.ac_current), 2) AS ac_current,
				    </when>
				    
				    <when test="datatablename == 'model_veris_industries_e51c2_power_meter'">
				      ROUND(AVG(iv.AccumulatedRealEnergyNet), 2) AS AccumulatedRealEnergyNet,
				      ROUND(AVG(iv.RealEnergyQuadrants14Import), 2) AS RealEnergyQuadrants14Import,
				      ROUND(AVG(iv.RealEnergyQuadrants23Export), 2) AS RealEnergyQuadrants23Export,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant1), 2) AS ReactiveEnergyQuadrant1,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant2), 2) AS ReactiveEnergyQuadrant2,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant3), 2) AS ReactiveEnergyQuadrant3,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant4), 2) AS ReactiveEnergyQuadrant4,
				      ROUND(AVG(iv.ApparentEnergyNet), 2) AS ApparentEnergyNet,
				      ROUND(AVG(iv.ApparentEnergyQuadrants14), 2) AS ApparentEnergyQuadrants14,
				      ROUND(AVG(iv.ApparentEnergyQuadrants23), 2) AS ApparentEnergyQuadrants23,
				      ROUND(AVG(iv.TotalNetInstantaneousRealPower), 2) AS TotalNetInstantaneousRealPower,
				      ROUND(AVG(iv.TotalNetInstantaneousReactivePower), 2) AS TotalNetInstantaneousReactivePower,
				      ROUND(AVG(iv.TotalNetInstantaneousApparentPower), 2) AS TotalNetInstantaneousApparentPower,
				      ROUND(AVG(iv.TotalPowerFactor), 2) AS TotalPowerFactor,
				      ROUND(AVG(iv.VoltageLL3pAve), 2) AS VoltageLL3pAve,
				      ROUND(AVG(iv.VoltageLN3pAve), 2) AS VoltageLN3pAve,
				      ROUND(AVG(iv.Current3pAve), 2) AS Current3pAve,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.TotalRealPowerPresentDemand), 2) AS TotalRealPowerPresentDemand,
				      ROUND(AVG(iv.TotalReactivePowerPresentDemand), 2) AS TotalReactivePowerPresentDemand,
				      ROUND(AVG(iv.TotalApparentPowerPresentDemand), 2) AS TotalApparentPowerPresentDemand,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandImport), 2) AS TotalRealPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandImport), 2) AS TotalReactivePowerMaxDemandImport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandImport), 2) AS TotalApparentPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandExport), 2) AS TotalRealPowerMaxDemandExport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandExport), 2) AS TotalReactivePowerMaxDemandExport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandExport), 2) AS TotalApparentPowerMaxDemandExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAImport), 2) AS AccumulatedRealEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBImport), 2) AS AccumulatedRealEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCImport), 2) AS AccumulatedRealEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAExport), 2) AS AccumulatedRealEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBExport), 2) AS AccumulatedRealEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCExport), 2) AS AccumulatedRealEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAImport), 2) AS AccumulatedApparentEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBImport), 2) AS AccumulatedApparentEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCImport), 2) AS AccumulatedApparentEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAExport), 2) AS AccumulatedApparentEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBExport), 2) AS AccumulatedApparentEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCExport), 2) AS AccumulatedApparentEnergyPhaseCExport,
				      ROUND(AVG(iv.RealPowerPhaseA), 2) AS RealPowerPhaseA,
				      ROUND(AVG(iv.RealPowerPhaseB), 2) AS RealPowerPhaseB,
				      ROUND(AVG(iv.RealPowerPhaseC), 2) AS RealPowerPhaseC,
				      ROUND(AVG(iv.ReactivePowerPhaseA), 2) AS ReactivePowerPhaseA,
				      ROUND(AVG(iv.ReactivePowerPhaseB), 2) AS ReactivePowerPhaseB,
				      ROUND(AVG(iv.ReactivePowerPhaseC), 2) AS ReactivePowerPhaseC,
				      ROUND(AVG(iv.ApparentPowerPhaseA), 2) AS ApparentPowerPhaseA,
				      ROUND(AVG(iv.ApparentPowerPhaseB), 2) AS ApparentPowerPhaseB,
				      ROUND(AVG(iv.ApparentPowerPhaseC), 2) AS ApparentPowerPhaseC,
				      ROUND(AVG(iv.PowerFactorPhaseA), 2) AS PowerFactorPhaseA,
				      ROUND(AVG(iv.PowerFactorPhaseB), 2) AS PowerFactorPhaseB,
				      ROUND(AVG(iv.PowerFactorPhaseC), 2) AS PowerFactorPhaseC,
				      ROUND(AVG(iv.VoltagePhaseAB), 2) AS VoltagePhaseAB,
				      ROUND(AVG(iv.VoltagePhaseBC), 2) AS VoltagePhaseBC,
				      ROUND(AVG(iv.VoltagePhaseAC), 2) AS VoltagePhaseAC,
				      ROUND(AVG(iv.VoltagePhaseAN), 2) AS VoltagePhaseAN,
				      ROUND(AVG(iv.VoltagePhaseBN), 2) AS VoltagePhaseBN,
				      ROUND(AVG(iv.VoltagePhaseCN), 2) AS VoltagePhaseCN,
				      ROUND(AVG(iv.CurrentPhaseA), 2) AS CurrentPhaseA,
				      ROUND(AVG(iv.CurrentPhaseB), 2) AS CurrentPhaseB,
				      ROUND(AVG(iv.CurrentPhaseC), 2) AS CurrentPhaseC,
				    </when>
				    
				    
				    <when test="datatablename == 'model_imtsolar_class8000'">
				      ROUND(AVG(iv.irradiance * 0.1), 2) AS irradiance,
				      ROUND(AVG(iv.tcell), 2) AS tcell,
				    </when>
				    
				    
				    <when test="datatablename == 'model_pvp_inverter'">
				      ROUND(AVG(iv.total_kwh_delivered), 2) AS total_kwh_delivered,
				      ROUND(AVG(iv.volts_a_l_n), 2) AS volts_a_l_n,
				      ROUND(AVG(iv.volts_b_l_n), 2) AS volts_b_l_n,
				      ROUND(AVG(iv.volts_c_l_n), 2) AS volts_c_l_n,
				      ROUND(AVG(iv.current_a), 2) AS current_a,
				      ROUND(AVG(iv.current_b), 2) AS current_b,
				      ROUND(AVG(iv.current_c), 2) AS current_c,
				      ROUND(AVG(iv.dc_output_voltage), 2) AS dc_output_voltage,
				      ROUND(AVG(iv.dc_output_current), 2) AS dc_output_current,
				      ROUND(AVG(iv.line_frenquency), 2) AS line_frenquency,
				      ROUND(AVG(iv.line_kw), 2) AS line_kw,
				      ROUND(COUNT(iv.inverter_fault_word0), 2) AS inverter_fault_word0,
				      ROUND(COUNT(iv.inverter_fault_word1), 2) AS inverter_fault_word1,
				      ROUND(COUNT(iv.inverter_fault_word2), 2) AS inverter_fault_word2,
				      
				    </when>
				    
				    <when test="datatablename == 'model_advanced_energy_solaron'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.ambient_temperature), 2) AS ambient_temperature,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				    </when>
				    
				    
				    <when test="datatablename == 'model_chint_solectria_inverter_class9725'">
				      ROUND(AVG(iv.PowerOnOff), 2) AS PowerOnOff,
				      ROUND(AVG(iv.PActiveSet), 2) AS PActiveSet,
				      ROUND(AVG(iv.PFactorSet), 2) AS PFactorSet,
				      ROUND(AVG(iv.PReactiveSet), 2) AS PReactiveSet,
				      ROUND(AVG(iv.GridVMax), 2) AS GridVMax,
				      ROUND(AVG(iv.GridVmaxTripT), 2) AS GridVmaxTripT,
				      ROUND(AVG(iv.GridVMin), 2) AS GridVMin,
				      ROUND(AVG(iv.GridVminTripT), 2) AS GridVminTripT,
				      ROUND(AVG(iv.GridFMax), 2) AS GridFMax,
				      ROUND(AVG(iv.GridFMin), 2) AS GridFMin,
				      ROUND(AVG(iv.GridFTripT), 2) AS GridFTripT,
				      ROUND(AVG(iv.ActivePower), 2) AS ActivePower,
				      ROUND(AVG(iv.PowerFactor), 2) AS PowerFactor,
				      ROUND(AVG(iv.Risomin), 2) AS Risomin,
				      ROUND(AVG(iv.PVStartVol), 2) AS PVStartVol,
				      ROUND(AVG(iv.DCIMax), 2) AS DCIMax,
				      ROUND(AVG(iv.TambientMax), 2) AS TambientMax,
				      ROUND(AVG(iv.TmoduleMax), 2) AS TmoduleMax,
				      ROUND(AVG(iv.OffsetDiffMax), 2) AS OffsetDiffMax,
				      ROUND(AVG(iv.GridVolUnbalance), 2) AS GridVolUnbalance,
				      ROUND(AVG(iv.SoftPowerStep), 2) AS SoftPowerStep,
				      ROUND(AVG(iv.TotalEnergyToEnergy), 2) AS TotalEnergyToEnergy,
				      ROUND(AVG(iv.TotalEnergyToday), 2) AS TotalEnergyToday,
				      ROUND(AVG(iv.InverterEfficiency), 2) AS InverterEfficiency,
				      ROUND(AVG(iv.PowerFactor1), 2) AS PowerFactor1,
				      ROUND(AVG(iv.MaxActivePowerToday), 2) AS MaxActivePowerToday,
				      ROUND(AVG(iv.RunTimeToGrid), 2) AS RunTimeToGrid,
				      ROUND(AVG(iv.AC_ActivePower), 2) AS AC_ActivePower,
				      ROUND(AVG(iv.AC_ApparentPower), 2) AS AC_ApparentPower,
				      ROUND(AVG(iv.GridVoltageUab), 2) AS GridVoltageUab,
				      ROUND(AVG(iv.GridVoltageUbc), 2) AS GridVoltageUbc,
				      ROUND(AVG(iv.GridVoltageUca), 2) AS GridVoltageUca,
				      ROUND(AVG(iv.GridA_PhaseCurrent), 2) AS GridA_PhaseCurrent,
				      ROUND(AVG(iv.GridB_PhaseCurrent), 2) AS GridB_PhaseCurrent,
				      ROUND(AVG(iv.GridC_PhaseCurrent), 2) AS GridC_PhaseCurrent,
				      ROUND(AVG(iv.PV1_Voltage), 2) AS PV1_Voltage,
				      ROUND(AVG(iv.PV1_Current), 2) AS PV1_Current,
				      ROUND(AVG(iv.PV2_Voltage), 2) AS PV2_Voltage,
				      ROUND(AVG(iv.PV2_Current), 2) AS PV2_Current,
				      ROUND(AVG(iv.PV3_Voltage), 2) AS PV3_Voltage,
				      ROUND(AVG(iv.PV3_Current), 2) AS PV3_Current,
				      ROUND(AVG(iv.Grid_Frequency), 2) AS Grid_Frequency,
				      ROUND(AVG(iv.ModuleTemp), 2) AS ModuleTemp,
				      ROUND(AVG(iv.InternalTemp), 2) AS InternalTemp,
				      ROUND(AVG(iv.TransformerTemp), 2) AS TransformerTemp,
				      ROUND(COUNT(iv.PermanentFaultCode), 2) AS PermanentFaultCode,
				      ROUND(COUNT(iv.WarnCode), 2) AS WarnCode,
				      ROUND(COUNT(iv.FaultCode0), 2) AS FaultCode0,
				      ROUND(COUNT(iv.FaultCode1), 2) AS FaultCode1,
				      ROUND(COUNT(iv.FaultCode2), 2) AS FaultCode2,
				    </when>
				    <when test="datatablename == 'model_elkor_wattson_pv_meter'">
				      ROUND(AVG(iv.TotalEnergyConsumption), 2) AS TotalEnergyConsumption,
				      ROUND(AVG(iv.TotalRealPower), 2) AS TotalRealPower,
				      ROUND(AVG(iv.TotalReactivePower), 2) AS TotalReactivePower,
				      ROUND(AVG(iv.TotalApparentPower), 2) AS TotalApparentPower,
				      ROUND(AVG(iv.AverageVoltageLN), 2) AS AverageVoltageLN,
				      ROUND(AVG(iv.AverageVoltageLL), 2) AS AverageVoltageLL,
				      ROUND(AVG(iv.AverageCurrent), 2) AS AverageCurrent,
				      ROUND(AVG(iv.TotalSystemPowerFactor), 2) AS TotalSystemPowerFactor,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.SlidingWindowRealPowerDemand), 2) AS SlidingWindowRealPowerDemand,
				      ROUND(AVG(iv.VoltageAN), 2) AS VoltageAN,
				      ROUND(AVG(iv.VoltageBN), 2) AS VoltageBN,
				      ROUND(AVG(iv.VoltageCN), 2) AS VoltageCN,
				      ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				      ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				      ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				      ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				      ROUND(COUNT(iv.CurrentB), 2) AS CurrentB,
				      ROUND(COUNT(iv.CurrentC), 2) AS CurrentC,
				      ROUND(COUNT(iv.RealPowerA), 2) AS RealPowerA,
				      ROUND(COUNT(iv.RealPowerB), 2) AS RealPowerB,
				      ROUND(COUNT(iv.RealPowerC), 2) AS RealPowerC,
				      ROUND(COUNT(iv.ReactivePowerA), 2) AS ReactivePowerA,
				      
				      ROUND(COUNT(iv.ReactivePowerB), 2) AS ReactivePowerB,
				      ROUND(COUNT(iv.ReactivePowerC), 2) AS ReactivePowerC,
				      ROUND(COUNT(iv.ApparentPowerA), 2) AS ApparentPowerA,
				      ROUND(COUNT(iv.ApparentPowerB), 2) AS ApparentPowerB,
				      ROUND(COUNT(iv.ApparentPowerC), 2) AS ApparentPowerC,
				      ROUND(COUNT(iv.PowerFactorA), 2) AS PowerFactorA,
				      ROUND(COUNT(iv.PowerFactorB), 2) AS PowerFactorB,
				      ROUND(COUNT(iv.PowerFactorC), 2) AS PowerFactorC,
				    </when>
				    
				    <when test="datatablename == 'model_satcon_pvs357_inverter'">
				      ROUND(AVG(iv.Software_Identification_Number), 2) AS Software_Identification_Number,
				      ROUND(AVG(iv.Fault_Word1), 2) AS Fault_Word1,
				      ROUND(AVG(iv.Fault_Word2), 2) AS Fault_Word2,
				      ROUND(AVG(iv.Fault_Word3), 2) AS Fault_Word3,
				      ROUND(AVG(iv.Fault_Word4), 2) AS Fault_Word4,
				      ROUND(AVG(iv.Fault_Word5), 2) AS Fault_Word5,
				      ROUND(AVG(iv.Fault_Word6), 2) AS Fault_Word6,
				      ROUND(COUNT(iv.Fault_Word7), 2) AS Fault_Word7,
				      ROUND(AVG(iv.Number_of_Faults), 2) AS Number_of_Faults,
				      ROUND(AVG(iv.Program_Checksum), 2) AS Program_Checksum,
				      ROUND(AVG(iv.DC_Input_Volts), 2) AS DC_Input_Volts,
				      ROUND(AVG(iv.DC_Link_Volts), 2) AS DC_Link_Volts,
				      ROUND(AVG(iv.DC_Link_Amps), 2) AS DC_Link_Amps,
				      ROUND(AVG(iv.DC_Ground_Current), 2) AS DC_Ground_Current,
				      ROUND(AVG(iv.Line_Amps_A), 2) AS Line_Amps_A,
				      ROUND(AVG(iv.Line_Amps_B), 2) AS Line_Amps_B,
				      ROUND(AVG(iv.Line_Amps_C), 2) AS Line_Amps_C,
				      ROUND(AVG(iv.Line_Amps_Average), 2) AS Line_Amps_Average,
				      ROUND(AVG(iv.Neutral_Current), 2) AS Neutral_Current,
				      ROUND(AVG(iv.Line_Volts_A), 2) AS Line_Volts_A,
				      ROUND(AVG(iv.Line_Volts_B), 2) AS Line_Volts_B,
				      ROUND(AVG(iv.Line_Volts_C), 2) AS Line_Volts_C,
				      ROUND(AVG(iv.Line_Volts_Average), 2) AS Line_Volts_Average,
				      ROUND(AVG(iv.Line_Voltage_Unbalance), 2) AS Line_Voltage_Unbalance,
				      ROUND(AVG(iv.Line_Current_Unbalance), 2) AS Line_Current_Unbalance,
				      ROUND(AVG(iv.Input_kW), 2) AS Input_kW,
				      ROUND(AVG(iv.Output_kw), 2) AS Output_kw,
				      ROUND(AVG(iv.Output_kvar), 2) AS Output_kvar,
				      ROUND(AVG(iv.Output_kva), 2) AS Output_kva,
				      ROUND(AVG(iv.Power_Factor), 2) AS Power_Factor,
				      ROUND(AVG(iv.Ground_Impedance), 2) AS Ground_Impedance,
				      ROUND(AVG(iv.String_Amps1), 2) AS String_Amps1,
				      ROUND(AVG(iv.String_Amps2), 2) AS String_Amps2,
				      ROUND(AVG(iv.String_Amps3), 2) AS String_Amps3,
				      ROUND(AVG(iv.String_Amps4), 2) AS String_Amps4,
				      ROUND(AVG(iv.String_Amps5), 2) AS String_Amps5,
				      ROUND(AVG(iv.String_Amps6), 2) AS String_Amps6,
				      ROUND(AVG(iv.String_Amps7), 2) AS String_Amps7,
				      ROUND(AVG(iv.String_Amps8), 2) AS String_Amps8,
				      ROUND(AVG(iv.String_Amps9), 2) AS String_Amps9,
				      ROUND(AVG(iv.String_Amps10), 2) AS String_Amps10,
				      ROUND(AVG(iv.String_Amps11), 2) AS String_Amps11,
				      ROUND(AVG(iv.String_Amps12), 2) AS String_Amps12,
				      ROUND(AVG(iv.String_Amps13), 2) AS String_Amps13,
				      ROUND(AVG(iv.String_Amps14), 2) AS String_Amps14,
				      ROUND(AVG(iv.String_Amps15), 2) AS String_Amps15,
				      ROUND(AVG(iv.String_Amps16), 2) AS String_Amps16,
				      ROUND(AVG(iv.String_Amps17), 2) AS String_Amps17,
				      ROUND(AVG(iv.String_Amps18), 2) AS String_Amps18,
				      ROUND(AVG(iv.String_Amps19), 2) AS String_Amps19,
				      ROUND(AVG(iv.String_Amps20), 2) AS String_Amps20,
				      ROUND(AVG(iv.String_Amps21), 2) AS String_Amps21,
				      ROUND(AVG(iv.String_Amps22), 2) AS String_Amps22,
				      ROUND(AVG(iv.String_Amps23), 2) AS String_Amps23,
				      ROUND(AVG(iv.String_Amps24), 2) AS String_Amps24,
				      ROUND(AVG(iv.String_Amps25), 2) AS String_Amps25,
				      ROUND(AVG(iv.String_Amps26), 2) AS String_Amps26,
				      ROUND(AVG(iv.String_Amps27), 2) AS String_Amps27,
				      ROUND(AVG(iv.String_Amps28), 2) AS String_Amps28,
				      ROUND(AVG(iv.String_Amps29), 2) AS String_Amps29,
				      ROUND(AVG(iv.String_Amps30), 2) AS String_Amps30,
				      ROUND(AVG(iv.String_Amps31), 2) AS String_Amps31,
				      ROUND(AVG(iv.String_Amps32), 2) AS String_Amps32,
				      
				      
				      ROUND(AVG(iv.String_Amps_Average), 2) AS String_Amps_Average,
				      ROUND(AVG(iv.String_kwh1), 2) AS String_kwh1,
				      ROUND(AVG(iv.String_kwh2), 2) AS String_kwh2,
				      ROUND(AVG(iv.String_kwh3), 2) AS String_kwh3,
				      ROUND(AVG(iv.String_kwh4), 2) AS String_kwh4,
				      ROUND(AVG(iv.String_kwh5), 2) AS String_kwh5,
				      ROUND(AVG(iv.String_kwh6), 2) AS String_kwh6,
				      ROUND(AVG(iv.String_kwh7), 2) AS String_kwh7,
				      ROUND(AVG(iv.String_kwh8), 2) AS String_kwh8,
				      ROUND(AVG(iv.String_kwh9), 2) AS String_kwh9,
				      ROUND(AVG(iv.String_kwh10), 2) AS String_kwh10,
				      ROUND(AVG(iv.String_kwh11), 2) AS String_kwh11,
				      ROUND(AVG(iv.String_kwh12), 2) AS String_kwh12,
				      ROUND(AVG(iv.String_kwh13), 2) AS String_kwh13,
				      ROUND(AVG(iv.String_kwh14), 2) AS String_kwh14,
				      ROUND(AVG(iv.String_kwh15), 2) AS String_kwh15,
				      ROUND(AVG(iv.String_kwh16), 2) AS String_kwh16,
				      ROUND(AVG(iv.String_kwh17), 2) AS String_kwh17,
				      ROUND(AVG(iv.String_kwh18), 2) AS String_kwh18,
				      ROUND(AVG(iv.String_kwh19), 2) AS String_kwh19,
				      ROUND(AVG(iv.String_kwh20), 2) AS String_kwh20,
				      ROUND(AVG(iv.String_kwh21), 2) AS String_kwh21,
				      ROUND(AVG(iv.String_kwh22), 2) AS String_kwh22,
				      ROUND(AVG(iv.String_kwh23), 2) AS String_kwh23,
				      ROUND(AVG(iv.String_kwh24), 2) AS String_kwh24,
				      ROUND(AVG(iv.String_kwh25), 2) AS String_kwh25,
				      ROUND(AVG(iv.String_kwh26), 2) AS String_kwh26,
				      ROUND(AVG(iv.String_kwh27), 2) AS String_kwh27,
				      ROUND(AVG(iv.String_kwh28), 2) AS String_kwh28,
				      ROUND(AVG(iv.String_kwh29), 2) AS String_kwh29,
				      ROUND(AVG(iv.String_kwh30), 2) AS String_kwh30,
				      ROUND(AVG(iv.String_kwh31), 2) AS String_kwh31,
				      ROUND(AVG(iv.String_kwh32), 2) AS String_kwh32,
				      
				      ROUND(AVG(iv.String_kwh_Average), 2) AS String_kwh_Average,
				      ROUND(AVG(iv.Total_kwh), 2) AS Total_kwh,
				      ROUND(AVG(iv.Total_mwh), 2) AS Total_mwh,
				      ROUND(AVG(iv.kwh_Today), 2) AS kwh_Today,
				      ROUND(AVG(iv.kwh_Yesterday), 2) AS kwh_Yesterday,
				      ROUND(AVG(iv.Total_kwh7_days), 2) AS Total_kwh7_days,
				      ROUND(AVG(iv.Total_kwh30_days), 2) AS Total_kwh30_days,
				      ROUND(AVG(iv.Average_kwh7_days), 2) AS Average_kwh7_days,
				      ROUND(AVG(iv.Average_kwh30_Days), 2) AS Average_kwh30_Days,
				      ROUND(AVG(iv.Average_Line_Frequency), 2) AS Average_Line_Frequency,
				      ROUND(AVG(iv.Average_Line_Frequency_Error), 2) AS Average_Line_Frequency_Error,
				      ROUND(AVG(iv.FPGA_Identification_Number), 2) AS FPGA_Identification_Number,
				      ROUND(AVG(iv.DC_Input_Voltage_Timer), 2) AS DC_Input_Voltage_Timer,
				      ROUND(AVG(iv.AC_Line_Voltage_Timer), 2) AS AC_Line_Voltage_Timer,
				      ROUND(AVG(iv.Operating_State), 2) AS Operating_State,
				      ROUND(AVG(iv.Internal_Air_Temperature), 2) AS Internal_Air_Temperature,
				      ROUND(AVG(iv.Inverter_Air_Temperature), 2) AS Inverter_Air_Temperature,
				      ROUND(AVG(iv.Heatsink_Temperature1), 2) AS Heatsink_Temperature1,
				      ROUND(AVG(iv.Heatsink_Temperature2), 2) AS Heatsink_Temperature2,
				      ROUND(AVG(iv.Heatsink_Temperature3), 2) AS Heatsink_Temperature3,
				      ROUND(AVG(iv.Heatsink_Temperature4), 2) AS Heatsink_Temperature4,
				      ROUND(AVG(iv.Heatsink_Temperature5), 2) AS Heatsink_Temperature5,
				      ROUND(AVG(iv.Heatsink_Temperature6), 2) AS Heatsink_Temperature6,
				      ROUND(AVG(iv.Heatsink_Maximum_Temparature1), 2) AS Heatsink_Maximum_Temparature1,
				      ROUND(AVG(iv.Fan_Speed_Command1), 2) AS Fan_Speed_Command1,
				      ROUND(AVG(iv.Heatsink_Maximum_Temperature2), 2) AS Heatsink_Maximum_Temperature2,
				      ROUND(AVG(iv.Fan_Speed_Command2), 2) AS Fan_Speed_Command2,
				      ROUND(AVG(iv.Number_of_Temperature_Feedbacks), 2) AS Number_of_Temperature_Feedbacks,
				      ROUND(AVG(iv.Serial_number_word1), 2) AS Serial_number_word1,
				      ROUND(AVG(iv.Serial_number_word2), 2) AS Serial_number_word2,
				      ROUND(AVG(iv.Serial_number_word3), 2) AS Serial_number_word3,
				      ROUND(AVG(iv.Serial_number_word4), 2) AS Serial_number_word4,
				      ROUND(AVG(iv.Number_of_Strings), 2) AS Number_of_Strings,
				      
				    </when>
				    
				    
				    <when test="datatablename == 'model_w_kipp_zonen_rt1'">
				    	ROUND(AVG(iv.DeviceType), 2) AS DeviceType,
				    	ROUND(AVG(iv.DataModelVersion), 2) AS DataModelVersion,
				    	ROUND(AVG(iv.OperationalMode), 2) AS OperationalMode,
				    	ROUND(AVG(iv.StatusFlags), 2) AS StatusFlags,
				    	ROUND(AVG(iv.SunPOATempComp), 2) AS SunPOATempComp,
				    	ROUND(AVG(iv.PanelTemperature), 2) AS PanelTemperature,
				    	ROUND(AVG(iv.ExtPowerSensor), 2) AS ExtPowerSensor,
				    	ROUND(AVG(iv.BatchNumber), 2) AS BatchNumber,
				    	ROUND(AVG(iv.SerialNumber), 2) AS SerialNumber,
				    	ROUND(AVG(iv.CalibrationDateYYMMDD), 2) AS CalibrationDateYYMMDD,
				    </when>
				    
				    <when test="datatablename == 'model_elkor_production_meter'">
				    	ROUND(AVG(iv.ActivePowerTotal), 2) AS ActivePowerTotal,
				    	ROUND(AVG(iv.ReactivePowerTotal), 2) AS ReactivePowerTotal,
				    	ROUND(AVG(iv.ApparentPowerTotal), 2) AS ApparentPowerTotal,
				    	ROUND(AVG(iv.VoltageAverage), 2) AS VoltageAverage,
				    	ROUND(AVG(iv.VoltageLLAverage), 2) AS VoltageLLAverage,
				    	ROUND(AVG(iv.CurrentAverage), 2) AS CurrentAverage,
				    	ROUND(AVG(iv.SystemPowerFactor), 2) AS SystemPowerFactor,
				    	ROUND(AVG(iv.SystemFrequency), 2) AS SystemFrequency,
				    	ROUND(AVG(iv.VoltageAverageAngle), 2) AS VoltageAverageAngle,
				    	ROUND(AVG(iv.SystemQuadrant), 2) AS SystemQuadrant,
				    	ROUND(AVG(iv.VoltageA), 2) AS VoltageA,
				    	ROUND(AVG(iv.VoltageB), 2) AS VoltageB,
				    	ROUND(AVG(iv.VoltageC), 2) AS VoltageC,
				    	ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				    	ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				    	ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				    	ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				    	ROUND(AVG(iv.CurrentB), 2) AS CurrentB,
				    	ROUND(AVG(iv.CurrentC), 2) AS CurrentC,
				    	ROUND(AVG(iv.ActivePowerA), 2) AS ActivePowerA,
				    	ROUND(AVG(iv.ActivePowerB), 2) AS ActivePowerB,
				    	ROUND(AVG(iv.ActivePowerC), 2) AS ActivePowerC,
				    	ROUND(AVG(iv.ReactivePowerA), 2) AS ReactivePowerA,
				    	ROUND(AVG(iv.ReactivePowerB), 2) AS ReactivePowerB,
				    	ROUND(AVG(iv.ReactivePowerC), 2) AS ReactivePowerC,
				    	ROUND(AVG(iv.ApparentPowerA), 2) AS ApparentPowerA,
				    	ROUND(AVG(iv.ApparentPowerB), 2) AS ApparentPowerB,
				    	ROUND(AVG(iv.ApparentPowerC), 2) AS ApparentPowerC,
				    	ROUND(AVG(iv.PowerFactorA), 2) AS PowerFactorA,
				    	ROUND(AVG(iv.PowerFactorB), 2) AS PowerFactorB,
				    	ROUND(AVG(iv.PowerFactorC), 2) AS PowerFactorC,
				    	ROUND(AVG(iv.VoltageAngleAB), 2) AS VoltageAngleAB,
				    	ROUND(AVG(iv.VoltageAngleBC), 2) AS VoltageAngleBC,
				    	ROUND(AVG(iv.VoltageAngleCA), 2) AS VoltageAngleCA,
				    	ROUND(AVG(iv.QuadrantA), 2) AS QuadrantA,
				    	ROUND(AVG(iv.QuadrantB), 2) AS QuadrantB,
				    	ROUND(AVG(iv.QuadrantC), 2) AS QuadrantC,
				    	ROUND(AVG(iv.SlidingWindowPower), 2) AS SlidingWindowPower,
				    	ROUND(AVG(iv.NetTotalEnergy), 2) AS NetTotalEnergy,
				    	ROUND(AVG(iv.TotalNetApparentEnergy), 2) AS TotalNetApparentEnergy,
				    	ROUND(AVG(iv.TotalImportEnergy), 2) AS TotalImportEnergy,
				    	ROUND(AVG(iv.TotalExportEnergy), 2) AS TotalExportEnergy,
				    	ROUND(AVG(iv.TotalImportApparentEnergy), 2) AS TotalImportApparentEnergy,
				    	ROUND(AVG(iv.TotalExportApparentEnergy), 2) AS TotalExportApparentEnergy,
				    	ROUND(AVG(iv.Q1TotalReactiveEnergy), 2) AS Q1TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q2TotalReactiveEnergy), 2) AS Q2TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q3TotalReactiveEnergy), 2) AS Q3TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q4TotalReactiveEnergy), 2) AS Q4TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q1Q2TotalInductiveReactiveEnergy), 2) AS Q1Q2TotalInductiveReactiveEnergy,
				    	ROUND(AVG(iv.Q3Q4TotalCapacitiveReactiveEnergy), 2) AS Q3Q4TotalCapacitiveReactiveEnergy,
				    	ROUND(AVG(iv.NetEnergyA), 2) AS NetEnergyA,
				    	ROUND(AVG(iv.NetEnergyB), 2) AS NetEnergyB,
				    	ROUND(AVG(iv.NetEnergyC), 2) AS NetEnergyC,
				    	ROUND(AVG(iv.NetApparentEnergyA), 2) AS NetApparentEnergyA,
				    	ROUND(AVG(iv.NetApparentEnergyB), 2) AS NetApparentEnergyB,
				    	ROUND(AVG(iv.NetApparentEnergyC), 2) AS NetApparentEnergyC,
				    	ROUND(AVG(iv.ImportEnergyA), 2) AS ImportEnergyA,
				    	ROUND(AVG(iv.ImportEnergyB), 2) AS ImportEnergyB,
				    	ROUND(AVG(iv.ImportEnergyC), 2) AS ImportEnergyC,
				    	ROUND(AVG(iv.ExportEnergyA), 2) AS ExportEnergyA,
				    	ROUND(AVG(iv.ExportEnergyB), 2) AS ExportEnergyB,
				    	ROUND(AVG(iv.ExportEnergyC), 2) AS ExportEnergyC,
				    	ROUND(AVG(iv.ImportApparentEnergyA), 2) AS ImportApparentEnergyA,
				    	ROUND(AVG(iv.ImportApparentEnergyB), 2) AS ImportApparentEnergyB,
				    	ROUND(AVG(iv.ImportApparentEnergyC), 2) AS ImportApparentEnergyC,
				    	ROUND(AVG(iv.ExportApparentEnergyA), 2) AS ExportApparentEnergyA,
				    	ROUND(AVG(iv.ExportApparentEnergyB), 2) AS ExportApparentEnergyB,
				    	ROUND(AVG(iv.ExportApparentEnergyC), 2) AS ExportApparentEnergyC,
				    	ROUND(AVG(iv.Q1ReactiveEnergyA), 2) AS Q1ReactiveEnergyA,
				    	ROUND(AVG(iv.Q1ReactiveEnergyB), 2) AS Q1ReactiveEnergyB,
				    	ROUND(AVG(iv.Q1ReactiveEnergyC), 2) AS Q1ReactiveEnergyC,
				    	ROUND(AVG(iv.Q2ReactiveEnergyA), 2) AS Q2ReactiveEnergyA,
				    	ROUND(AVG(iv.Q2ReactiveEnergyB), 2) AS Q2ReactiveEnergyB,
				    	ROUND(AVG(iv.Q2ReactiveEnergyC), 2) AS Q2ReactiveEnergyC,
				    	ROUND(AVG(iv.Q3ReactiveEnergyA), 2) AS Q3ReactiveEnergyA,
				    	ROUND(AVG(iv.Q3ReactiveEnergyB), 2) AS Q3ReactiveEnergyB,
				    	ROUND(AVG(iv.Q3ReactiveEnergyC), 2) AS Q3ReactiveEnergyC,
				    	ROUND(AVG(iv.Q4ReactiveEnergyA), 2) AS Q4ReactiveEnergyA,
				    	ROUND(AVG(iv.Q4ReactiveEnergyB), 2) AS Q4ReactiveEnergyB,
				    	ROUND(AVG(iv.Q4ReactiveEnergyC), 2) AS Q4ReactiveEnergyC,
				    </when>
				    
				    
			    </choose>
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i' ) AS full_time,
				FLOOR(UNIX_TIMESTAMP(CONVERT_TZ( iv.time, '+00:00', t.`offset` ))/(60 * 60)) AS timekey
			FROM
				site si
				LEFT JOIN site_customer_map scm ON scm.id_site = si.id
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN ${datatablename} iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id_site}
				AND scm.id_customer = #{id_customer}
				AND d.id = #{id_device} 
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} 
				AND #{end_date}
				GROUP BY timekey
        </if>
        
        
        
        <if test="(filterBy == 'today' or filterBy == 'yesterday' or filterBy == 'last_3day' or filterBy == 'last_7day') and setup_send_time == 2 and data_send_time == 2">
			SELECT
				<choose>
					<when test="datatablename == 'model_lufft_class8020'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.IrradianceActual), 2) AS IrradianceActual,
				      ROUND(COUNT(iv.IrradianceMin), 2) AS IrradianceMin,
				      ROUND(COUNT(iv.IrradianceMax), 2) AS IrradianceMax,
				      ROUND(COUNT(iv.IrradianceAvg), 2) AS IrradianceAvg,
				      ROUND(COUNT(iv.AirTemperatureActual), 2) AS AirTemperatureActual,
				      ROUND(COUNT(iv.AirTemperatureMin), 2) AS AirTemperatureMin,
				      ROUND(COUNT(iv.AirTemperatureMax), 2) AS AirTemperatureMax,
				      ROUND(COUNT(iv.AirTemperatureAvg), 2) AS AirTemperatureAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationQuantityAbsolute), 2) AS PrecipitationQuantityAbsolute,
				      ROUND(COUNT(iv.PrecipitationQuantityDifferential), 2) AS PrecipitationQuantityDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AbsoluteHumidityActual), 2) AS AbsoluteHumidityActual,
				      ROUND(COUNT(iv.AbsoluteHumidityMin), 2) AS AbsoluteHumidityMin,
				      ROUND(COUNT(iv.AbsoluteHumidityMax), 2) AS AbsoluteHumidityMax,
				      ROUND(COUNT(iv.AbsoluteHumidityAvg), 2) AS AbsoluteHumidityAvg,
				      ROUND(COUNT(iv.MixingRatioActual), 2) AS MixingRatioActual,
				      ROUND(COUNT(iv.MixingRatioMin), 2) AS MixingRatioMin,
				      ROUND(COUNT(iv.MixingRatioMax), 2) AS MixingRatioMax,
				      ROUND(COUNT(iv.MixingRatioAvg), 2) AS MixingRatioAvg,
				      ROUND(COUNT(iv.AbsoluteAirPressureActual), 2) AS AbsoluteAirPressureActual,
				      ROUND(COUNT(iv.AbsoluteAirPressureMin), 2) AS AbsoluteAirPressureMin,
				      ROUND(COUNT(iv.AbsoluteAirPressureMax), 2) AS AbsoluteAirPressureMax,
				      ROUND(COUNT(iv.AbsoluteAirPressureAvg), 2) AS AbsoluteAirPressureAvg,
				      ROUND(COUNT(iv.WindSpeedStandardDeviation), 2) AS WindSpeedStandardDeviation,
				      ROUND(COUNT(iv.WindDirectionStandardDeviation), 2) AS WindDirectionStandardDeviation,
				      ROUND(COUNT(iv.WetBulbTemperature), 2) AS WetBulbTemperature,
				      ROUND(COUNT(iv.SpecificEnthalpy), 2) AS SpecificEnthalpy,
				      ROUND(COUNT(iv.AirDensityActual), 2) AS AirDensityActual,
				      ROUND(COUNT(iv.LeafWetnessActual), 2) AS LeafWetnessActual,
				      ROUND(COUNT(iv.LeafWetnessMin), 2) AS LeafWetnessMin,
				      ROUND(COUNT(iv.LeafWetnessMax), 2) AS LeafWetnessMax,
				      ROUND(COUNT(iv.LeafWetnessAvg), 2) AS LeafWetnessAvg,
				      ROUND(COUNT(iv.LeafWetnessState), 2) AS LeafWetnessState,
				      ROUND(COUNT(iv.ExternalTemperature), 2) AS ExternalTemperature,
				      ROUND(COUNT(iv.WindValueQualityFast), 2) AS WindValueQualityFast,
				    </when>
				    
				    <when test="datatablename == 'model_lufft_ws501_umb_weather'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.GlobalRadiation), 2) AS GlobalRadiation,
				      ROUND(COUNT(iv.GlobalRadiation2), 2) AS GlobalRadiation2,
				      ROUND(COUNT(iv.GlobalRadiation3), 2) AS GlobalRadiation3,
				      ROUND(COUNT(iv.GlobalRadiation4), 2) AS GlobalRadiation4,
				      ROUND(COUNT(iv.AirTemperatureCActual), 2) AS AirTemperatureCActual,
				      ROUND(COUNT(iv.AirTemperatureCMin), 2) AS AirTemperatureCMin,
				      ROUND(COUNT(iv.AirTemperatureCMax), 2) AS AirTemperatureCMax,
				      ROUND(COUNT(iv.AirTemperatureCAvg), 2) AS AirTemperatureCAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationAbsolute), 2) AS PrecipitationAbsolute,
				      ROUND(COUNT(iv.PrecipitationDifferential), 2) AS PrecipitationDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AirTemperatureFActual), 2) AS AirTemperatureFActual,
				      ROUND(COUNT(iv.AirTemperatureFMin), 2) AS AirTemperatureFMin,
				      ROUND(COUNT(iv.AirTemperatureFMax), 2) AS AirTemperatureFMax,
				      ROUND(COUNT(iv.AirTemperatureFAvg), 2) AS AirTemperatureFAvg,
				      ROUND(COUNT(iv.ExternalTemperatureC), 2) AS ExternalTemperatureC,
				      ROUND(COUNT(iv.ExternalTemperatureF), 2) AS ExternalTemperatureF,
				    </when>
				    
					<when test="datatablename == 'model_abb_trio_class6210'">
				      ROUND(AVG(iv.AuroraType), 2) AS AuroraType,
				      ROUND(AVG(iv.GridType), 2) AS GridType,
				      ROUND(AVG(iv.TransformerType), 2) AS TransformerType,
				      ROUND(COUNT(iv.StatesByte0), 2) AS StatesByte0,
				      ROUND(COUNT(iv.StatesByte1), 2) AS StatesByte1,
				      ROUND(COUNT(iv.StatesByte2), 2) AS StatesByte2,
				      ROUND(COUNT(iv.StatesByte3), 2) AS StatesByte3,
				      ROUND(COUNT(iv.StatesByte4), 2) AS StatesByte4,
				      ROUND(COUNT(iv.TotalEnergy), 2) AS TotalEnergy,
				      ROUND(COUNT(iv.GridVoltage), 2) AS GridVoltage,
				      ROUND(COUNT(iv.GridCurrent), 2) AS GridCurrent,
				      ROUND(COUNT(iv.GridPower), 2) AS GridPower,
				      ROUND(COUNT(iv.Frequency), 2) AS Frequency,
				      ROUND(COUNT(iv.Input1Power), 2) AS Input1Power,
				      ROUND(COUNT(iv.Input1Voltage), 2) AS Input1Voltage,
				      ROUND(COUNT(iv.Input1Current), 2) AS Input1Current,
				      ROUND(COUNT(iv.Input2Power), 2) AS Input2Power,
				      ROUND(COUNT(iv.Input2Voltage), 2) AS Input2Voltage,
				      ROUND(COUNT(iv.Input2Current), 2) AS Input2Current,
				      ROUND(COUNT(iv.InverterTemperature), 2) AS InverterTemperature,
				      ROUND(COUNT(iv.BooseterTemperature), 2) AS BooseterTemperature,
				      ROUND(COUNT(iv.IslolationResistance), 2) AS IslolationResistance,
				    </when>
				    
				    <when test="datatablename == 'model_kippzonen_rt1_class8009'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    <when test="datatablename == 'model_rt1_class30000'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    
				    
				    <when test="datatablename == 'model_shark100'">
				      ROUND(AVG(iv.volts_a_n), 2) AS volts_a_n,
				      ROUND(AVG(iv.volts_b_n), 2) AS volts_b_n,
				      ROUND(AVG(iv.volts_c_n), 2) AS volts_c_n,
				      ROUND(AVG(iv.volts_a_b), 2) AS volts_a_b,
				      ROUND(AVG(iv.volts_c_a), 2) AS volts_c_a,
				      ROUND(AVG(iv.amps_a), 2) AS amps_a,
				      ROUND(AVG(iv.amps_b), 2) AS amps_b,
				      ROUND(AVG(iv.amps_c), 2) AS amps_c,
				      ROUND(AVG(iv.watts_3ph_total), 2) AS watts_3ph_total,
				      ROUND(AVG(iv.vars_3ph_total), 2) AS vars_3ph_total,
				      ROUND(AVG(iv.vas_3ph_total), 2) AS vas_3ph_total,
				      ROUND(AVG(iv.power_factor_3ph_total), 2) AS power_factor_3ph_total,
				      ROUND(AVG(iv.frequency), 2) AS frequency,
				      ROUND(AVG(iv.neutral_current), 2) AS neutral_current,
				      ROUND(AVG(iv.w_hours_received), 2) AS w_hours_received,
				      ROUND(AVG(iv.w_hours_delivered), 2) AS w_hours_delivered,
				      ROUND(AVG(iv.w_hours_net), 2) AS w_hours_net,
				      ROUND(AVG(iv.w_hours_total), 2) AS w_hours_total,
				      ROUND(AVG(iv.var_hours_positive), 2) AS var_hours_positive,
				      ROUND(AVG(iv.var_hours_negative), 2) AS var_hours_negative,
				      ROUND(AVG(iv.var_hours_net), 2) AS var_hours_net,
				      ROUND(AVG(iv.var_hours_total), 2) AS var_hours_total,
				      ROUND(AVG(iv.va_hours_total), 2) AS va_hours_total,
				      ROUND(AVG(iv.amps_a_average), 2) AS amps_a_average,
				      ROUND(AVG(iv.amps_b_average), 2) AS amps_b_average,
				      ROUND(AVG(iv.amps_c_average), 2) AS amps_c_average,
				      ROUND(AVG(iv.positive_watts_3ph_average), 2) AS positive_watts_3ph_average,
				      ROUND(AVG(iv.positive_vars_3ph_average), 2) AS positive_vars_3ph_average,
				      ROUND(AVG(iv.negative_watts_3ph_average), 2) AS negative_watts_3ph_average,
				      ROUND(AVG(iv.negative_vars_3ph_average), 2) AS negative_vars_3ph_average,
				      ROUND(AVG(iv.vas_3ph_average), 2) AS vas_3ph_average,
				      ROUND(AVG(iv.positive_pf_3ph_average), 2) AS positive_pf_3ph_average,
				      ROUND(AVG(iv.negative_pf_3ph_average), 2) AS negative_pf_3ph_average,
				      ROUND(AVG(iv.volts_a_n_min), 2) AS volts_a_n_min,
				      ROUND(AVG(iv.volts_b_n_min), 2) AS volts_b_n_min,
				      ROUND(AVG(iv.volts_c_n_min), 2) AS volts_c_n_min,
				      ROUND(AVG(iv.volts_a_b_min), 2) AS volts_a_b_min,
				      ROUND(AVG(iv.volts_b_c_min), 2) AS volts_b_c_min,
				      ROUND(AVG(iv.volts_c_a_min), 2) AS volts_c_a_min,
				      ROUND(AVG(iv.amps_a_min_avg_demand), 2) AS amps_a_min_avg_demand,
				      ROUND(AVG(iv.amps_b_min_avg_demand), 2) AS amps_b_min_avg_demand,
				      ROUND(AVG(iv.amps_c_min_avg_demand), 2) AS amps_c_min_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_min_avg_demand), 2) AS positive_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_min_avg_demand), 2) AS positive_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_min_avg_demand), 2) AS negative_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_min_avg_demand), 2) AS negative_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.vas_3ph_min_avg_demand), 2) AS vas_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_min_avg_demand), 2) AS positive_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_min_avg_demand), 2) AS negative_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.frequency_min), 2) AS frequency_min,
				      ROUND(AVG(iv.volts_a_n_max), 2) AS volts_a_n_max,
				      ROUND(AVG(iv.volts_b_n_max), 2) AS volts_b_n_max,
				      ROUND(AVG(iv.volts_c_n_max), 2) AS volts_c_n_max,
				      ROUND(AVG(iv.volts_a_b_max), 2) AS volts_a_b_max,
				      ROUND(AVG(iv.volts_b_c_max), 2) AS volts_b_c_max,
				      ROUND(AVG(iv.volts_c_a_max), 2) AS volts_c_a_max,
				      ROUND(AVG(iv.amps_a_max_avg_demand), 2) AS amps_a_max_avg_demand,
				      ROUND(AVG(iv.amps_b_max_avg_demand), 2) AS amps_b_max_avg_demand,
				      ROUND(AVG(iv.amps_c_max_avg_demand), 2) AS amps_c_max_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_max_avg_demand), 2) AS positive_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_max_avg_demand), 2) AS positive_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_max_avg_demand), 2) AS negative_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_max_avg_demand), 2) AS negative_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.vas_3ph_max_avg_demand), 2) AS vas_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_max_avg_demand), 2) AS positive_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_max_avg_demand), 2) AS negative_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.frequency_max), 2) AS frequency_max,
				      ROUND(AVG(iv.volts_a_n_thd), 2) AS volts_a_n_thd,
				      ROUND(AVG(iv.volts_b_n_thd), 2) AS volts_b_n_thd,
				      ROUND(AVG(iv.volts_c_n_thd), 2) AS volts_c_n_thd,
				      ROUND(AVG(iv.amps_a_thd), 2) AS amps_a_thd,
				      ROUND(AVG(iv.amps_b_thd), 2) AS amps_b_thd,
				      ROUND(AVG(iv.amps_c_thd), 2) AS amps_c_thd,
				      ROUND(AVG(iv.phase_a_current_0th), 2) AS phase_a_current_0th,
				      ROUND(AVG(iv.phase_a_current_1st), 2) AS phase_a_current_1st,
				      ROUND(AVG(iv.phase_a_current_2nd), 2) AS phase_a_current_2nd,
				      ROUND(AVG(iv.phase_a_current_3rd), 2) AS phase_a_current_3rd,
				      ROUND(AVG(iv.phase_a_current_4th), 2) AS phase_a_current_4th,
				      ROUND(AVG(iv.phase_a_current_5th), 2) AS phase_a_current_5th,
				      ROUND(AVG(iv.phase_a_current_6th), 2) AS phase_a_current_6th,
				      ROUND(AVG(iv.phase_a_current_7th), 2) AS phase_a_current_7th,
				      ROUND(AVG(iv.phase_a_voltage_0th), 2) AS phase_a_voltage_0th,
				      ROUND(AVG(iv.phase_a_voltage_1st), 2) AS phase_a_voltage_1st,
				      ROUND(AVG(iv.phase_a_voltage_2nd), 2) AS phase_a_voltage_2nd,
				      ROUND(AVG(iv.phase_a_voltage_3rd), 2) AS phase_a_voltage_3rd,
				      ROUND(AVG(iv.phase_b_current_0th), 2) AS phase_b_current_0th,
				      ROUND(AVG(iv.phase_b_current_1st), 2) AS phase_b_current_1st,
				      ROUND(AVG(iv.phase_b_current_2nd), 2) AS phase_b_current_2nd,
				      ROUND(AVG(iv.phase_b_current_3rd), 2) AS phase_b_current_3rd,
				      ROUND(AVG(iv.phase_b_current_4th), 2) AS phase_b_current_4th,
				      ROUND(AVG(iv.phase_b_current_5th), 2) AS phase_b_current_5th,
				      ROUND(AVG(iv.phase_b_current_6th), 2) AS phase_b_current_6th,
				      ROUND(AVG(iv.phase_b_current_7th), 2) AS phase_b_current_7th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_2nd), 2) AS phase_b_voltage_2nd,
				      ROUND(AVG(iv.phase_b_voltage_3rd), 2) AS phase_b_voltage_3rd,
				      ROUND(AVG(iv.phase_c_current_0th), 2) AS phase_c_current_0th,
				      ROUND(AVG(iv.phase_c_current_1st), 2) AS phase_c_current_1st,
				      ROUND(AVG(iv.phase_c_current_2nd), 2) AS phase_c_current_2nd,
				      ROUND(AVG(iv.phase_c_current_3rd), 2) AS phase_c_current_3rd,
				      ROUND(AVG(iv.phase_c_current_4th), 2) AS phase_c_current_4th,
				      ROUND(AVG(iv.phase_c_current_5th), 2) AS phase_c_current_5th,
				      ROUND(AVG(iv.phase_c_current_6th), 2) AS phase_c_current_6th,
				      ROUND(AVG(iv.phase_c_current_7th), 2) AS phase_c_current_7th,
				      ROUND(AVG(iv.phase_c_voltage_0th), 2) AS phase_c_voltage_0th,
				      ROUND(AVG(iv.phase_c_voltage_1st), 2) AS phase_c_voltage_1st,
				      ROUND(AVG(iv.phase_c_voltage_2nd), 2) AS phase_c_voltage_2nd,
				      ROUND(AVG(iv.phase_c_voltage_3rd), 2) AS phase_c_voltage_3rd,
				      ROUND(AVG(iv.angle_phase_a_current), 2) AS angle_phase_a_current,
				      ROUND(AVG(iv.angle_phase_b_current), 2) AS angle_phase_b_current,
				      ROUND(AVG(iv.angle_phase_c_current), 2) AS angle_phase_c_current,
				      ROUND(AVG(iv.angle_volts_a_b), 2) AS angle_volts_a_b,
				      ROUND(AVG(iv.angle_volts_b_c), 2) AS angle_volts_b_c,
				      ROUND(AVG(iv.angle_volts_c_a), 2) AS angle_volts_c_a,
				    </when>
				    
				    <when test="datatablename == 'model_ivt_solaron_ext'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.common_mode), 2) AS common_mode,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				      ROUND(AVG(iv.ac_current), 2) AS ac_current,
				    </when>
				    
				    <when test="datatablename == 'model_veris_industries_e51c2_power_meter'">
				      ROUND(AVG(iv.AccumulatedRealEnergyNet), 2) AS AccumulatedRealEnergyNet,
				      ROUND(AVG(iv.RealEnergyQuadrants14Import), 2) AS RealEnergyQuadrants14Import,
				      ROUND(AVG(iv.RealEnergyQuadrants23Export), 2) AS RealEnergyQuadrants23Export,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant1), 2) AS ReactiveEnergyQuadrant1,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant2), 2) AS ReactiveEnergyQuadrant2,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant3), 2) AS ReactiveEnergyQuadrant3,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant4), 2) AS ReactiveEnergyQuadrant4,
				      ROUND(AVG(iv.ApparentEnergyNet), 2) AS ApparentEnergyNet,
				      ROUND(AVG(iv.ApparentEnergyQuadrants14), 2) AS ApparentEnergyQuadrants14,
				      ROUND(AVG(iv.ApparentEnergyQuadrants23), 2) AS ApparentEnergyQuadrants23,
				      ROUND(AVG(iv.TotalNetInstantaneousRealPower), 2) AS TotalNetInstantaneousRealPower,
				      ROUND(AVG(iv.TotalNetInstantaneousReactivePower), 2) AS TotalNetInstantaneousReactivePower,
				      ROUND(AVG(iv.TotalNetInstantaneousApparentPower), 2) AS TotalNetInstantaneousApparentPower,
				      ROUND(AVG(iv.TotalPowerFactor), 2) AS TotalPowerFactor,
				      ROUND(AVG(iv.VoltageLL3pAve), 2) AS VoltageLL3pAve,
				      ROUND(AVG(iv.VoltageLN3pAve), 2) AS VoltageLN3pAve,
				      ROUND(AVG(iv.Current3pAve), 2) AS Current3pAve,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.TotalRealPowerPresentDemand), 2) AS TotalRealPowerPresentDemand,
				      ROUND(AVG(iv.TotalReactivePowerPresentDemand), 2) AS TotalReactivePowerPresentDemand,
				      ROUND(AVG(iv.TotalApparentPowerPresentDemand), 2) AS TotalApparentPowerPresentDemand,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandImport), 2) AS TotalRealPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandImport), 2) AS TotalReactivePowerMaxDemandImport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandImport), 2) AS TotalApparentPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandExport), 2) AS TotalRealPowerMaxDemandExport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandExport), 2) AS TotalReactivePowerMaxDemandExport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandExport), 2) AS TotalApparentPowerMaxDemandExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAImport), 2) AS AccumulatedRealEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBImport), 2) AS AccumulatedRealEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCImport), 2) AS AccumulatedRealEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAExport), 2) AS AccumulatedRealEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBExport), 2) AS AccumulatedRealEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCExport), 2) AS AccumulatedRealEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAImport), 2) AS AccumulatedApparentEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBImport), 2) AS AccumulatedApparentEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCImport), 2) AS AccumulatedApparentEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAExport), 2) AS AccumulatedApparentEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBExport), 2) AS AccumulatedApparentEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCExport), 2) AS AccumulatedApparentEnergyPhaseCExport,
				      ROUND(AVG(iv.RealPowerPhaseA), 2) AS RealPowerPhaseA,
				      ROUND(AVG(iv.RealPowerPhaseB), 2) AS RealPowerPhaseB,
				      ROUND(AVG(iv.RealPowerPhaseC), 2) AS RealPowerPhaseC,
				      ROUND(AVG(iv.ReactivePowerPhaseA), 2) AS ReactivePowerPhaseA,
				      ROUND(AVG(iv.ReactivePowerPhaseB), 2) AS ReactivePowerPhaseB,
				      ROUND(AVG(iv.ReactivePowerPhaseC), 2) AS ReactivePowerPhaseC,
				      ROUND(AVG(iv.ApparentPowerPhaseA), 2) AS ApparentPowerPhaseA,
				      ROUND(AVG(iv.ApparentPowerPhaseB), 2) AS ApparentPowerPhaseB,
				      ROUND(AVG(iv.ApparentPowerPhaseC), 2) AS ApparentPowerPhaseC,
				      ROUND(AVG(iv.PowerFactorPhaseA), 2) AS PowerFactorPhaseA,
				      ROUND(AVG(iv.PowerFactorPhaseB), 2) AS PowerFactorPhaseB,
				      ROUND(AVG(iv.PowerFactorPhaseC), 2) AS PowerFactorPhaseC,
				      ROUND(AVG(iv.VoltagePhaseAB), 2) AS VoltagePhaseAB,
				      ROUND(AVG(iv.VoltagePhaseBC), 2) AS VoltagePhaseBC,
				      ROUND(AVG(iv.VoltagePhaseAC), 2) AS VoltagePhaseAC,
				      ROUND(AVG(iv.VoltagePhaseAN), 2) AS VoltagePhaseAN,
				      ROUND(AVG(iv.VoltagePhaseBN), 2) AS VoltagePhaseBN,
				      ROUND(AVG(iv.VoltagePhaseCN), 2) AS VoltagePhaseCN,
				      ROUND(AVG(iv.CurrentPhaseA), 2) AS CurrentPhaseA,
				      ROUND(AVG(iv.CurrentPhaseB), 2) AS CurrentPhaseB,
				      ROUND(AVG(iv.CurrentPhaseC), 2) AS CurrentPhaseC,
				    </when>
				    
				    
				    <when test="datatablename == 'model_imtsolar_class8000'">
				      ROUND(AVG(iv.irradiance * 0.1), 2) AS irradiance,
				      ROUND(AVG(iv.tcell), 2) AS tcell,
				    </when>
				    
				    
				    <when test="datatablename == 'model_pvp_inverter'">
				      ROUND(AVG(iv.total_kwh_delivered), 2) AS total_kwh_delivered,
				      ROUND(AVG(iv.volts_a_l_n), 2) AS volts_a_l_n,
				      ROUND(AVG(iv.volts_b_l_n), 2) AS volts_b_l_n,
				      ROUND(AVG(iv.volts_c_l_n), 2) AS volts_c_l_n,
				      ROUND(AVG(iv.current_a), 2) AS current_a,
				      ROUND(AVG(iv.current_b), 2) AS current_b,
				      ROUND(AVG(iv.current_c), 2) AS current_c,
				      ROUND(AVG(iv.dc_output_voltage), 2) AS dc_output_voltage,
				      ROUND(AVG(iv.dc_output_current), 2) AS dc_output_current,
				      ROUND(AVG(iv.line_frenquency), 2) AS line_frenquency,
				      ROUND(AVG(iv.line_kw), 2) AS line_kw,
				      ROUND(COUNT(iv.inverter_fault_word0), 2) AS inverter_fault_word0,
				      ROUND(COUNT(iv.inverter_fault_word1), 2) AS inverter_fault_word1,
				      ROUND(COUNT(iv.inverter_fault_word2), 2) AS inverter_fault_word2,
				      
				    </when>
				    
				    <when test="datatablename == 'model_advanced_energy_solaron'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.ambient_temperature), 2) AS ambient_temperature,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				    </when>
				    
				    
				    <when test="datatablename == 'model_chint_solectria_inverter_class9725'">
				      ROUND(AVG(iv.PowerOnOff), 2) AS PowerOnOff,
				      ROUND(AVG(iv.PActiveSet), 2) AS PActiveSet,
				      ROUND(AVG(iv.PFactorSet), 2) AS PFactorSet,
				      ROUND(AVG(iv.PReactiveSet), 2) AS PReactiveSet,
				      ROUND(AVG(iv.GridVMax), 2) AS GridVMax,
				      ROUND(AVG(iv.GridVmaxTripT), 2) AS GridVmaxTripT,
				      ROUND(AVG(iv.GridVMin), 2) AS GridVMin,
				      ROUND(AVG(iv.GridVminTripT), 2) AS GridVminTripT,
				      ROUND(AVG(iv.GridFMax), 2) AS GridFMax,
				      ROUND(AVG(iv.GridFMin), 2) AS GridFMin,
				      ROUND(AVG(iv.GridFTripT), 2) AS GridFTripT,
				      ROUND(AVG(iv.ActivePower), 2) AS ActivePower,
				      ROUND(AVG(iv.PowerFactor), 2) AS PowerFactor,
				      ROUND(AVG(iv.Risomin), 2) AS Risomin,
				      ROUND(AVG(iv.PVStartVol), 2) AS PVStartVol,
				      ROUND(AVG(iv.DCIMax), 2) AS DCIMax,
				      ROUND(AVG(iv.TambientMax), 2) AS TambientMax,
				      ROUND(AVG(iv.TmoduleMax), 2) AS TmoduleMax,
				      ROUND(AVG(iv.OffsetDiffMax), 2) AS OffsetDiffMax,
				      ROUND(AVG(iv.GridVolUnbalance), 2) AS GridVolUnbalance,
				      ROUND(AVG(iv.SoftPowerStep), 2) AS SoftPowerStep,
				      ROUND(AVG(iv.TotalEnergyToEnergy), 2) AS TotalEnergyToEnergy,
				      ROUND(AVG(iv.TotalEnergyToday), 2) AS TotalEnergyToday,
				      ROUND(AVG(iv.InverterEfficiency), 2) AS InverterEfficiency,
				      ROUND(AVG(iv.PowerFactor1), 2) AS PowerFactor1,
				      ROUND(AVG(iv.MaxActivePowerToday), 2) AS MaxActivePowerToday,
				      ROUND(AVG(iv.RunTimeToGrid), 2) AS RunTimeToGrid,
				      ROUND(AVG(iv.AC_ActivePower), 2) AS AC_ActivePower,
				      ROUND(AVG(iv.AC_ApparentPower), 2) AS AC_ApparentPower,
				      ROUND(AVG(iv.GridVoltageUab), 2) AS GridVoltageUab,
				      ROUND(AVG(iv.GridVoltageUbc), 2) AS GridVoltageUbc,
				      ROUND(AVG(iv.GridVoltageUca), 2) AS GridVoltageUca,
				      ROUND(AVG(iv.GridA_PhaseCurrent), 2) AS GridA_PhaseCurrent,
				      ROUND(AVG(iv.GridB_PhaseCurrent), 2) AS GridB_PhaseCurrent,
				      ROUND(AVG(iv.GridC_PhaseCurrent), 2) AS GridC_PhaseCurrent,
				      ROUND(AVG(iv.PV1_Voltage), 2) AS PV1_Voltage,
				      ROUND(AVG(iv.PV1_Current), 2) AS PV1_Current,
				      ROUND(AVG(iv.PV2_Voltage), 2) AS PV2_Voltage,
				      ROUND(AVG(iv.PV2_Current), 2) AS PV2_Current,
				      ROUND(AVG(iv.PV3_Voltage), 2) AS PV3_Voltage,
				      ROUND(AVG(iv.PV3_Current), 2) AS PV3_Current,
				      ROUND(AVG(iv.Grid_Frequency), 2) AS Grid_Frequency,
				      ROUND(AVG(iv.ModuleTemp), 2) AS ModuleTemp,
				      ROUND(AVG(iv.InternalTemp), 2) AS InternalTemp,
				      ROUND(AVG(iv.TransformerTemp), 2) AS TransformerTemp,
				      ROUND(COUNT(iv.PermanentFaultCode), 2) AS PermanentFaultCode,
				      ROUND(COUNT(iv.WarnCode), 2) AS WarnCode,
				      ROUND(COUNT(iv.FaultCode0), 2) AS FaultCode0,
				      ROUND(COUNT(iv.FaultCode1), 2) AS FaultCode1,
				      ROUND(COUNT(iv.FaultCode2), 2) AS FaultCode2,
				    </when>
				    <when test="datatablename == 'model_elkor_wattson_pv_meter'">
				      ROUND(AVG(iv.TotalEnergyConsumption), 2) AS TotalEnergyConsumption,
				      ROUND(AVG(iv.TotalRealPower), 2) AS TotalRealPower,
				      ROUND(AVG(iv.TotalReactivePower), 2) AS TotalReactivePower,
				      ROUND(AVG(iv.TotalApparentPower), 2) AS TotalApparentPower,
				      ROUND(AVG(iv.AverageVoltageLN), 2) AS AverageVoltageLN,
				      ROUND(AVG(iv.AverageVoltageLL), 2) AS AverageVoltageLL,
				      ROUND(AVG(iv.AverageCurrent), 2) AS AverageCurrent,
				      ROUND(AVG(iv.TotalSystemPowerFactor), 2) AS TotalSystemPowerFactor,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.SlidingWindowRealPowerDemand), 2) AS SlidingWindowRealPowerDemand,
				      ROUND(AVG(iv.VoltageAN), 2) AS VoltageAN,
				      ROUND(AVG(iv.VoltageBN), 2) AS VoltageBN,
				      ROUND(AVG(iv.VoltageCN), 2) AS VoltageCN,
				      ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				      ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				      ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				      ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				      ROUND(COUNT(iv.CurrentB), 2) AS CurrentB,
				      ROUND(COUNT(iv.CurrentC), 2) AS CurrentC,
				      ROUND(COUNT(iv.RealPowerA), 2) AS RealPowerA,
				      ROUND(COUNT(iv.RealPowerB), 2) AS RealPowerB,
				      ROUND(COUNT(iv.RealPowerC), 2) AS RealPowerC,
				      ROUND(COUNT(iv.ReactivePowerA), 2) AS ReactivePowerA,
				      
				      ROUND(COUNT(iv.ReactivePowerB), 2) AS ReactivePowerB,
				      ROUND(COUNT(iv.ReactivePowerC), 2) AS ReactivePowerC,
				      ROUND(COUNT(iv.ApparentPowerA), 2) AS ApparentPowerA,
				      ROUND(COUNT(iv.ApparentPowerB), 2) AS ApparentPowerB,
				      ROUND(COUNT(iv.ApparentPowerC), 2) AS ApparentPowerC,
				      ROUND(COUNT(iv.PowerFactorA), 2) AS PowerFactorA,
				      ROUND(COUNT(iv.PowerFactorB), 2) AS PowerFactorB,
				      ROUND(COUNT(iv.PowerFactorC), 2) AS PowerFactorC,
				    </when>
				    
				    <when test="datatablename == 'model_satcon_pvs357_inverter'">
				      ROUND(AVG(iv.Software_Identification_Number), 2) AS Software_Identification_Number,
				      ROUND(AVG(iv.Fault_Word1), 2) AS Fault_Word1,
				      ROUND(AVG(iv.Fault_Word2), 2) AS Fault_Word2,
				      ROUND(AVG(iv.Fault_Word3), 2) AS Fault_Word3,
				      ROUND(AVG(iv.Fault_Word4), 2) AS Fault_Word4,
				      ROUND(AVG(iv.Fault_Word5), 2) AS Fault_Word5,
				      ROUND(AVG(iv.Fault_Word6), 2) AS Fault_Word6,
				      ROUND(COUNT(iv.Fault_Word7), 2) AS Fault_Word7,
				      ROUND(AVG(iv.Number_of_Faults), 2) AS Number_of_Faults,
				      ROUND(AVG(iv.Program_Checksum), 2) AS Program_Checksum,
				      ROUND(AVG(iv.DC_Input_Volts), 2) AS DC_Input_Volts,
				      ROUND(AVG(iv.DC_Link_Volts), 2) AS DC_Link_Volts,
				      ROUND(AVG(iv.DC_Link_Amps), 2) AS DC_Link_Amps,
				      ROUND(AVG(iv.DC_Ground_Current), 2) AS DC_Ground_Current,
				      ROUND(AVG(iv.Line_Amps_A), 2) AS Line_Amps_A,
				      ROUND(AVG(iv.Line_Amps_B), 2) AS Line_Amps_B,
				      ROUND(AVG(iv.Line_Amps_C), 2) AS Line_Amps_C,
				      ROUND(AVG(iv.Line_Amps_Average), 2) AS Line_Amps_Average,
				      ROUND(AVG(iv.Neutral_Current), 2) AS Neutral_Current,
				      ROUND(AVG(iv.Line_Volts_A), 2) AS Line_Volts_A,
				      ROUND(AVG(iv.Line_Volts_B), 2) AS Line_Volts_B,
				      ROUND(AVG(iv.Line_Volts_C), 2) AS Line_Volts_C,
				      ROUND(AVG(iv.Line_Volts_Average), 2) AS Line_Volts_Average,
				      ROUND(AVG(iv.Line_Voltage_Unbalance), 2) AS Line_Voltage_Unbalance,
				      ROUND(AVG(iv.Line_Current_Unbalance), 2) AS Line_Current_Unbalance,
				      ROUND(AVG(iv.Input_kW), 2) AS Input_kW,
				      ROUND(AVG(iv.Output_kw), 2) AS Output_kw,
				      ROUND(AVG(iv.Output_kvar), 2) AS Output_kvar,
				      ROUND(AVG(iv.Output_kva), 2) AS Output_kva,
				      ROUND(AVG(iv.Power_Factor), 2) AS Power_Factor,
				      ROUND(AVG(iv.Ground_Impedance), 2) AS Ground_Impedance,
				      ROUND(AVG(iv.String_Amps1), 2) AS String_Amps1,
				      ROUND(AVG(iv.String_Amps2), 2) AS String_Amps2,
				      ROUND(AVG(iv.String_Amps3), 2) AS String_Amps3,
				      ROUND(AVG(iv.String_Amps4), 2) AS String_Amps4,
				      ROUND(AVG(iv.String_Amps5), 2) AS String_Amps5,
				      ROUND(AVG(iv.String_Amps6), 2) AS String_Amps6,
				      ROUND(AVG(iv.String_Amps7), 2) AS String_Amps7,
				      ROUND(AVG(iv.String_Amps8), 2) AS String_Amps8,
				      ROUND(AVG(iv.String_Amps9), 2) AS String_Amps9,
				      ROUND(AVG(iv.String_Amps10), 2) AS String_Amps10,
				      ROUND(AVG(iv.String_Amps11), 2) AS String_Amps11,
				      ROUND(AVG(iv.String_Amps12), 2) AS String_Amps12,
				      ROUND(AVG(iv.String_Amps13), 2) AS String_Amps13,
				      ROUND(AVG(iv.String_Amps14), 2) AS String_Amps14,
				      ROUND(AVG(iv.String_Amps15), 2) AS String_Amps15,
				      ROUND(AVG(iv.String_Amps16), 2) AS String_Amps16,
				      ROUND(AVG(iv.String_Amps17), 2) AS String_Amps17,
				      ROUND(AVG(iv.String_Amps18), 2) AS String_Amps18,
				      ROUND(AVG(iv.String_Amps19), 2) AS String_Amps19,
				      ROUND(AVG(iv.String_Amps20), 2) AS String_Amps20,
				      ROUND(AVG(iv.String_Amps21), 2) AS String_Amps21,
				      ROUND(AVG(iv.String_Amps22), 2) AS String_Amps22,
				      ROUND(AVG(iv.String_Amps23), 2) AS String_Amps23,
				      ROUND(AVG(iv.String_Amps24), 2) AS String_Amps24,
				      ROUND(AVG(iv.String_Amps25), 2) AS String_Amps25,
				      ROUND(AVG(iv.String_Amps26), 2) AS String_Amps26,
				      ROUND(AVG(iv.String_Amps27), 2) AS String_Amps27,
				      ROUND(AVG(iv.String_Amps28), 2) AS String_Amps28,
				      ROUND(AVG(iv.String_Amps29), 2) AS String_Amps29,
				      ROUND(AVG(iv.String_Amps30), 2) AS String_Amps30,
				      ROUND(AVG(iv.String_Amps31), 2) AS String_Amps31,
				      ROUND(AVG(iv.String_Amps32), 2) AS String_Amps32,
				      
				      
				      ROUND(AVG(iv.String_Amps_Average), 2) AS String_Amps_Average,
				      ROUND(AVG(iv.String_kwh1), 2) AS String_kwh1,
				      ROUND(AVG(iv.String_kwh2), 2) AS String_kwh2,
				      ROUND(AVG(iv.String_kwh3), 2) AS String_kwh3,
				      ROUND(AVG(iv.String_kwh4), 2) AS String_kwh4,
				      ROUND(AVG(iv.String_kwh5), 2) AS String_kwh5,
				      ROUND(AVG(iv.String_kwh6), 2) AS String_kwh6,
				      ROUND(AVG(iv.String_kwh7), 2) AS String_kwh7,
				      ROUND(AVG(iv.String_kwh8), 2) AS String_kwh8,
				      ROUND(AVG(iv.String_kwh9), 2) AS String_kwh9,
				      ROUND(AVG(iv.String_kwh10), 2) AS String_kwh10,
				      ROUND(AVG(iv.String_kwh11), 2) AS String_kwh11,
				      ROUND(AVG(iv.String_kwh12), 2) AS String_kwh12,
				      ROUND(AVG(iv.String_kwh13), 2) AS String_kwh13,
				      ROUND(AVG(iv.String_kwh14), 2) AS String_kwh14,
				      ROUND(AVG(iv.String_kwh15), 2) AS String_kwh15,
				      ROUND(AVG(iv.String_kwh16), 2) AS String_kwh16,
				      ROUND(AVG(iv.String_kwh17), 2) AS String_kwh17,
				      ROUND(AVG(iv.String_kwh18), 2) AS String_kwh18,
				      ROUND(AVG(iv.String_kwh19), 2) AS String_kwh19,
				      ROUND(AVG(iv.String_kwh20), 2) AS String_kwh20,
				      ROUND(AVG(iv.String_kwh21), 2) AS String_kwh21,
				      ROUND(AVG(iv.String_kwh22), 2) AS String_kwh22,
				      ROUND(AVG(iv.String_kwh23), 2) AS String_kwh23,
				      ROUND(AVG(iv.String_kwh24), 2) AS String_kwh24,
				      ROUND(AVG(iv.String_kwh25), 2) AS String_kwh25,
				      ROUND(AVG(iv.String_kwh26), 2) AS String_kwh26,
				      ROUND(AVG(iv.String_kwh27), 2) AS String_kwh27,
				      ROUND(AVG(iv.String_kwh28), 2) AS String_kwh28,
				      ROUND(AVG(iv.String_kwh29), 2) AS String_kwh29,
				      ROUND(AVG(iv.String_kwh30), 2) AS String_kwh30,
				      ROUND(AVG(iv.String_kwh31), 2) AS String_kwh31,
				      ROUND(AVG(iv.String_kwh32), 2) AS String_kwh32,
				      
				      ROUND(AVG(iv.String_kwh_Average), 2) AS String_kwh_Average,
				      ROUND(AVG(iv.Total_kwh), 2) AS Total_kwh,
				      ROUND(AVG(iv.Total_mwh), 2) AS Total_mwh,
				      ROUND(AVG(iv.kwh_Today), 2) AS kwh_Today,
				      ROUND(AVG(iv.kwh_Yesterday), 2) AS kwh_Yesterday,
				      ROUND(AVG(iv.Total_kwh7_days), 2) AS Total_kwh7_days,
				      ROUND(AVG(iv.Total_kwh30_days), 2) AS Total_kwh30_days,
				      ROUND(AVG(iv.Average_kwh7_days), 2) AS Average_kwh7_days,
				      ROUND(AVG(iv.Average_kwh30_Days), 2) AS Average_kwh30_Days,
				      ROUND(AVG(iv.Average_Line_Frequency), 2) AS Average_Line_Frequency,
				      ROUND(AVG(iv.Average_Line_Frequency_Error), 2) AS Average_Line_Frequency_Error,
				      ROUND(AVG(iv.FPGA_Identification_Number), 2) AS FPGA_Identification_Number,
				      ROUND(AVG(iv.DC_Input_Voltage_Timer), 2) AS DC_Input_Voltage_Timer,
				      ROUND(AVG(iv.AC_Line_Voltage_Timer), 2) AS AC_Line_Voltage_Timer,
				      ROUND(AVG(iv.Operating_State), 2) AS Operating_State,
				      ROUND(AVG(iv.Internal_Air_Temperature), 2) AS Internal_Air_Temperature,
				      ROUND(AVG(iv.Inverter_Air_Temperature), 2) AS Inverter_Air_Temperature,
				      ROUND(AVG(iv.Heatsink_Temperature1), 2) AS Heatsink_Temperature1,
				      ROUND(AVG(iv.Heatsink_Temperature2), 2) AS Heatsink_Temperature2,
				      ROUND(AVG(iv.Heatsink_Temperature3), 2) AS Heatsink_Temperature3,
				      ROUND(AVG(iv.Heatsink_Temperature4), 2) AS Heatsink_Temperature4,
				      ROUND(AVG(iv.Heatsink_Temperature5), 2) AS Heatsink_Temperature5,
				      ROUND(AVG(iv.Heatsink_Temperature6), 2) AS Heatsink_Temperature6,
				      ROUND(AVG(iv.Heatsink_Maximum_Temparature1), 2) AS Heatsink_Maximum_Temparature1,
				      ROUND(AVG(iv.Fan_Speed_Command1), 2) AS Fan_Speed_Command1,
				      ROUND(AVG(iv.Heatsink_Maximum_Temperature2), 2) AS Heatsink_Maximum_Temperature2,
				      ROUND(AVG(iv.Fan_Speed_Command2), 2) AS Fan_Speed_Command2,
				      ROUND(AVG(iv.Number_of_Temperature_Feedbacks), 2) AS Number_of_Temperature_Feedbacks,
				      ROUND(AVG(iv.Serial_number_word1), 2) AS Serial_number_word1,
				      ROUND(AVG(iv.Serial_number_word2), 2) AS Serial_number_word2,
				      ROUND(AVG(iv.Serial_number_word3), 2) AS Serial_number_word3,
				      ROUND(AVG(iv.Serial_number_word4), 2) AS Serial_number_word4,
				      ROUND(AVG(iv.Number_of_Strings), 2) AS Number_of_Strings,
				      
				    </when>
				    
				    
				    <when test="datatablename == 'model_w_kipp_zonen_rt1'">
				    	ROUND(AVG(iv.DeviceType), 2) AS DeviceType,
				    	ROUND(AVG(iv.DataModelVersion), 2) AS DataModelVersion,
				    	ROUND(AVG(iv.OperationalMode), 2) AS OperationalMode,
				    	ROUND(AVG(iv.StatusFlags), 2) AS StatusFlags,
				    	ROUND(AVG(iv.SunPOATempComp), 2) AS SunPOATempComp,
				    	ROUND(AVG(iv.PanelTemperature), 2) AS PanelTemperature,
				    	ROUND(AVG(iv.ExtPowerSensor), 2) AS ExtPowerSensor,
				    	ROUND(AVG(iv.BatchNumber), 2) AS BatchNumber,
				    	ROUND(AVG(iv.SerialNumber), 2) AS SerialNumber,
				    	ROUND(AVG(iv.CalibrationDateYYMMDD), 2) AS CalibrationDateYYMMDD,
				    </when>
				    
				    <when test="datatablename == 'model_elkor_production_meter'">
				    	ROUND(AVG(iv.ActivePowerTotal), 2) AS ActivePowerTotal,
				    	ROUND(AVG(iv.ReactivePowerTotal), 2) AS ReactivePowerTotal,
				    	ROUND(AVG(iv.ApparentPowerTotal), 2) AS ApparentPowerTotal,
				    	ROUND(AVG(iv.VoltageAverage), 2) AS VoltageAverage,
				    	ROUND(AVG(iv.VoltageLLAverage), 2) AS VoltageLLAverage,
				    	ROUND(AVG(iv.CurrentAverage), 2) AS CurrentAverage,
				    	ROUND(AVG(iv.SystemPowerFactor), 2) AS SystemPowerFactor,
				    	ROUND(AVG(iv.SystemFrequency), 2) AS SystemFrequency,
				    	ROUND(AVG(iv.VoltageAverageAngle), 2) AS VoltageAverageAngle,
				    	ROUND(AVG(iv.SystemQuadrant), 2) AS SystemQuadrant,
				    	ROUND(AVG(iv.VoltageA), 2) AS VoltageA,
				    	ROUND(AVG(iv.VoltageB), 2) AS VoltageB,
				    	ROUND(AVG(iv.VoltageC), 2) AS VoltageC,
				    	ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				    	ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				    	ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				    	ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				    	ROUND(AVG(iv.CurrentB), 2) AS CurrentB,
				    	ROUND(AVG(iv.CurrentC), 2) AS CurrentC,
				    	ROUND(AVG(iv.ActivePowerA), 2) AS ActivePowerA,
				    	ROUND(AVG(iv.ActivePowerB), 2) AS ActivePowerB,
				    	ROUND(AVG(iv.ActivePowerC), 2) AS ActivePowerC,
				    	ROUND(AVG(iv.ReactivePowerA), 2) AS ReactivePowerA,
				    	ROUND(AVG(iv.ReactivePowerB), 2) AS ReactivePowerB,
				    	ROUND(AVG(iv.ReactivePowerC), 2) AS ReactivePowerC,
				    	ROUND(AVG(iv.ApparentPowerA), 2) AS ApparentPowerA,
				    	ROUND(AVG(iv.ApparentPowerB), 2) AS ApparentPowerB,
				    	ROUND(AVG(iv.ApparentPowerC), 2) AS ApparentPowerC,
				    	ROUND(AVG(iv.PowerFactorA), 2) AS PowerFactorA,
				    	ROUND(AVG(iv.PowerFactorB), 2) AS PowerFactorB,
				    	ROUND(AVG(iv.PowerFactorC), 2) AS PowerFactorC,
				    	ROUND(AVG(iv.VoltageAngleAB), 2) AS VoltageAngleAB,
				    	ROUND(AVG(iv.VoltageAngleBC), 2) AS VoltageAngleBC,
				    	ROUND(AVG(iv.VoltageAngleCA), 2) AS VoltageAngleCA,
				    	ROUND(AVG(iv.QuadrantA), 2) AS QuadrantA,
				    	ROUND(AVG(iv.QuadrantB), 2) AS QuadrantB,
				    	ROUND(AVG(iv.QuadrantC), 2) AS QuadrantC,
				    	ROUND(AVG(iv.SlidingWindowPower), 2) AS SlidingWindowPower,
				    	ROUND(AVG(iv.NetTotalEnergy), 2) AS NetTotalEnergy,
				    	ROUND(AVG(iv.TotalNetApparentEnergy), 2) AS TotalNetApparentEnergy,
				    	ROUND(AVG(iv.TotalImportEnergy), 2) AS TotalImportEnergy,
				    	ROUND(AVG(iv.TotalExportEnergy), 2) AS TotalExportEnergy,
				    	ROUND(AVG(iv.TotalImportApparentEnergy), 2) AS TotalImportApparentEnergy,
				    	ROUND(AVG(iv.TotalExportApparentEnergy), 2) AS TotalExportApparentEnergy,
				    	ROUND(AVG(iv.Q1TotalReactiveEnergy), 2) AS Q1TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q2TotalReactiveEnergy), 2) AS Q2TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q3TotalReactiveEnergy), 2) AS Q3TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q4TotalReactiveEnergy), 2) AS Q4TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q1Q2TotalInductiveReactiveEnergy), 2) AS Q1Q2TotalInductiveReactiveEnergy,
				    	ROUND(AVG(iv.Q3Q4TotalCapacitiveReactiveEnergy), 2) AS Q3Q4TotalCapacitiveReactiveEnergy,
				    	ROUND(AVG(iv.NetEnergyA), 2) AS NetEnergyA,
				    	ROUND(AVG(iv.NetEnergyB), 2) AS NetEnergyB,
				    	ROUND(AVG(iv.NetEnergyC), 2) AS NetEnergyC,
				    	ROUND(AVG(iv.NetApparentEnergyA), 2) AS NetApparentEnergyA,
				    	ROUND(AVG(iv.NetApparentEnergyB), 2) AS NetApparentEnergyB,
				    	ROUND(AVG(iv.NetApparentEnergyC), 2) AS NetApparentEnergyC,
				    	ROUND(AVG(iv.ImportEnergyA), 2) AS ImportEnergyA,
				    	ROUND(AVG(iv.ImportEnergyB), 2) AS ImportEnergyB,
				    	ROUND(AVG(iv.ImportEnergyC), 2) AS ImportEnergyC,
				    	ROUND(AVG(iv.ExportEnergyA), 2) AS ExportEnergyA,
				    	ROUND(AVG(iv.ExportEnergyB), 2) AS ExportEnergyB,
				    	ROUND(AVG(iv.ExportEnergyC), 2) AS ExportEnergyC,
				    	ROUND(AVG(iv.ImportApparentEnergyA), 2) AS ImportApparentEnergyA,
				    	ROUND(AVG(iv.ImportApparentEnergyB), 2) AS ImportApparentEnergyB,
				    	ROUND(AVG(iv.ImportApparentEnergyC), 2) AS ImportApparentEnergyC,
				    	ROUND(AVG(iv.ExportApparentEnergyA), 2) AS ExportApparentEnergyA,
				    	ROUND(AVG(iv.ExportApparentEnergyB), 2) AS ExportApparentEnergyB,
				    	ROUND(AVG(iv.ExportApparentEnergyC), 2) AS ExportApparentEnergyC,
				    	ROUND(AVG(iv.Q1ReactiveEnergyA), 2) AS Q1ReactiveEnergyA,
				    	ROUND(AVG(iv.Q1ReactiveEnergyB), 2) AS Q1ReactiveEnergyB,
				    	ROUND(AVG(iv.Q1ReactiveEnergyC), 2) AS Q1ReactiveEnergyC,
				    	ROUND(AVG(iv.Q2ReactiveEnergyA), 2) AS Q2ReactiveEnergyA,
				    	ROUND(AVG(iv.Q2ReactiveEnergyB), 2) AS Q2ReactiveEnergyB,
				    	ROUND(AVG(iv.Q2ReactiveEnergyC), 2) AS Q2ReactiveEnergyC,
				    	ROUND(AVG(iv.Q3ReactiveEnergyA), 2) AS Q3ReactiveEnergyA,
				    	ROUND(AVG(iv.Q3ReactiveEnergyB), 2) AS Q3ReactiveEnergyB,
				    	ROUND(AVG(iv.Q3ReactiveEnergyC), 2) AS Q3ReactiveEnergyC,
				    	ROUND(AVG(iv.Q4ReactiveEnergyA), 2) AS Q4ReactiveEnergyA,
				    	ROUND(AVG(iv.Q4ReactiveEnergyB), 2) AS Q4ReactiveEnergyB,
				    	ROUND(AVG(iv.Q4ReactiveEnergyC), 2) AS Q4ReactiveEnergyC,
				    </when>
				    
				    
			    </choose>
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i' ) AS full_time,
				FLOOR(UNIX_TIMESTAMP(CONVERT_TZ( iv.time, '+00:00', t.`offset` ))/(15 * 60)) AS timekey
			FROM
				site si
				LEFT JOIN site_customer_map scm ON scm.id_site = si.id
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN ${datatablename} iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id_site}
				AND scm.id_customer = #{id_customer}
				AND d.id = #{id_device} 
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} 
				AND #{end_date}
				GROUP BY timekey
        </if>
        
        
        <if test="(filterBy == 'today' or filterBy == 'yesterday' or filterBy == 'last_3day' or filterBy == 'last_7day') and setup_send_time == 2 and data_send_time == 3">
			SELECT
				<choose>
					<when test="datatablename == 'model_lufft_class8020'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.IrradianceActual), 2) AS IrradianceActual,
				      ROUND(COUNT(iv.IrradianceMin), 2) AS IrradianceMin,
				      ROUND(COUNT(iv.IrradianceMax), 2) AS IrradianceMax,
				      ROUND(COUNT(iv.IrradianceAvg), 2) AS IrradianceAvg,
				      ROUND(COUNT(iv.AirTemperatureActual), 2) AS AirTemperatureActual,
				      ROUND(COUNT(iv.AirTemperatureMin), 2) AS AirTemperatureMin,
				      ROUND(COUNT(iv.AirTemperatureMax), 2) AS AirTemperatureMax,
				      ROUND(COUNT(iv.AirTemperatureAvg), 2) AS AirTemperatureAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationQuantityAbsolute), 2) AS PrecipitationQuantityAbsolute,
				      ROUND(COUNT(iv.PrecipitationQuantityDifferential), 2) AS PrecipitationQuantityDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AbsoluteHumidityActual), 2) AS AbsoluteHumidityActual,
				      ROUND(COUNT(iv.AbsoluteHumidityMin), 2) AS AbsoluteHumidityMin,
				      ROUND(COUNT(iv.AbsoluteHumidityMax), 2) AS AbsoluteHumidityMax,
				      ROUND(COUNT(iv.AbsoluteHumidityAvg), 2) AS AbsoluteHumidityAvg,
				      ROUND(COUNT(iv.MixingRatioActual), 2) AS MixingRatioActual,
				      ROUND(COUNT(iv.MixingRatioMin), 2) AS MixingRatioMin,
				      ROUND(COUNT(iv.MixingRatioMax), 2) AS MixingRatioMax,
				      ROUND(COUNT(iv.MixingRatioAvg), 2) AS MixingRatioAvg,
				      ROUND(COUNT(iv.AbsoluteAirPressureActual), 2) AS AbsoluteAirPressureActual,
				      ROUND(COUNT(iv.AbsoluteAirPressureMin), 2) AS AbsoluteAirPressureMin,
				      ROUND(COUNT(iv.AbsoluteAirPressureMax), 2) AS AbsoluteAirPressureMax,
				      ROUND(COUNT(iv.AbsoluteAirPressureAvg), 2) AS AbsoluteAirPressureAvg,
				      ROUND(COUNT(iv.WindSpeedStandardDeviation), 2) AS WindSpeedStandardDeviation,
				      ROUND(COUNT(iv.WindDirectionStandardDeviation), 2) AS WindDirectionStandardDeviation,
				      ROUND(COUNT(iv.WetBulbTemperature), 2) AS WetBulbTemperature,
				      ROUND(COUNT(iv.SpecificEnthalpy), 2) AS SpecificEnthalpy,
				      ROUND(COUNT(iv.AirDensityActual), 2) AS AirDensityActual,
				      ROUND(COUNT(iv.LeafWetnessActual), 2) AS LeafWetnessActual,
				      ROUND(COUNT(iv.LeafWetnessMin), 2) AS LeafWetnessMin,
				      ROUND(COUNT(iv.LeafWetnessMax), 2) AS LeafWetnessMax,
				      ROUND(COUNT(iv.LeafWetnessAvg), 2) AS LeafWetnessAvg,
				      ROUND(COUNT(iv.LeafWetnessState), 2) AS LeafWetnessState,
				      ROUND(COUNT(iv.ExternalTemperature), 2) AS ExternalTemperature,
				      ROUND(COUNT(iv.WindValueQualityFast), 2) AS WindValueQualityFast,
				    </when>
				    
				    <when test="datatablename == 'model_lufft_ws501_umb_weather'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.GlobalRadiation), 2) AS GlobalRadiation,
				      ROUND(COUNT(iv.GlobalRadiation2), 2) AS GlobalRadiation2,
				      ROUND(COUNT(iv.GlobalRadiation3), 2) AS GlobalRadiation3,
				      ROUND(COUNT(iv.GlobalRadiation4), 2) AS GlobalRadiation4,
				      ROUND(COUNT(iv.AirTemperatureCActual), 2) AS AirTemperatureCActual,
				      ROUND(COUNT(iv.AirTemperatureCMin), 2) AS AirTemperatureCMin,
				      ROUND(COUNT(iv.AirTemperatureCMax), 2) AS AirTemperatureCMax,
				      ROUND(COUNT(iv.AirTemperatureCAvg), 2) AS AirTemperatureCAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationAbsolute), 2) AS PrecipitationAbsolute,
				      ROUND(COUNT(iv.PrecipitationDifferential), 2) AS PrecipitationDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AirTemperatureFActual), 2) AS AirTemperatureFActual,
				      ROUND(COUNT(iv.AirTemperatureFMin), 2) AS AirTemperatureFMin,
				      ROUND(COUNT(iv.AirTemperatureFMax), 2) AS AirTemperatureFMax,
				      ROUND(COUNT(iv.AirTemperatureFAvg), 2) AS AirTemperatureFAvg,
				      ROUND(COUNT(iv.ExternalTemperatureC), 2) AS ExternalTemperatureC,
				      ROUND(COUNT(iv.ExternalTemperatureF), 2) AS ExternalTemperatureF,
				    </when>
				    
				 	<when test="datatablename == 'model_abb_trio_class6210'">
				      ROUND(AVG(iv.AuroraType), 2) AS AuroraType,
				      ROUND(AVG(iv.GridType), 2) AS GridType,
				      ROUND(AVG(iv.TransformerType), 2) AS TransformerType,
				      ROUND(COUNT(iv.StatesByte0), 2) AS StatesByte0,
				      ROUND(COUNT(iv.StatesByte1), 2) AS StatesByte1,
				      ROUND(COUNT(iv.StatesByte2), 2) AS StatesByte2,
				      ROUND(COUNT(iv.StatesByte3), 2) AS StatesByte3,
				      ROUND(COUNT(iv.StatesByte4), 2) AS StatesByte4,
				      ROUND(COUNT(iv.TotalEnergy), 2) AS TotalEnergy,
				      ROUND(COUNT(iv.GridVoltage), 2) AS GridVoltage,
				      ROUND(COUNT(iv.GridCurrent), 2) AS GridCurrent,
				      ROUND(COUNT(iv.GridPower), 2) AS GridPower,
				      ROUND(COUNT(iv.Frequency), 2) AS Frequency,
				      ROUND(COUNT(iv.Input1Power), 2) AS Input1Power,
				      ROUND(COUNT(iv.Input1Voltage), 2) AS Input1Voltage,
				      ROUND(COUNT(iv.Input1Current), 2) AS Input1Current,
				      ROUND(COUNT(iv.Input2Power), 2) AS Input2Power,
				      ROUND(COUNT(iv.Input2Voltage), 2) AS Input2Voltage,
				      ROUND(COUNT(iv.Input2Current), 2) AS Input2Current,
				      ROUND(COUNT(iv.InverterTemperature), 2) AS InverterTemperature,
				      ROUND(COUNT(iv.BooseterTemperature), 2) AS BooseterTemperature,
				      ROUND(COUNT(iv.IslolationResistance), 2) AS IslolationResistance,
				    </when>
				    
				    <when test="datatablename == 'model_kippzonen_rt1_class8009'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    <when test="datatablename == 'model_rt1_class30000'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    
				    
				    <when test="datatablename == 'model_shark100'">
				      ROUND(AVG(iv.volts_a_n), 2) AS volts_a_n,
				      ROUND(AVG(iv.volts_b_n), 2) AS volts_b_n,
				      ROUND(AVG(iv.volts_c_n), 2) AS volts_c_n,
				      ROUND(AVG(iv.volts_a_b), 2) AS volts_a_b,
				      ROUND(AVG(iv.volts_c_a), 2) AS volts_c_a,
				      ROUND(AVG(iv.amps_a), 2) AS amps_a,
				      ROUND(AVG(iv.amps_b), 2) AS amps_b,
				      ROUND(AVG(iv.amps_c), 2) AS amps_c,
				      ROUND(AVG(iv.watts_3ph_total), 2) AS watts_3ph_total,
				      ROUND(AVG(iv.vars_3ph_total), 2) AS vars_3ph_total,
				      ROUND(AVG(iv.vas_3ph_total), 2) AS vas_3ph_total,
				      ROUND(AVG(iv.power_factor_3ph_total), 2) AS power_factor_3ph_total,
				      ROUND(AVG(iv.frequency), 2) AS frequency,
				      ROUND(AVG(iv.neutral_current), 2) AS neutral_current,
				      ROUND(AVG(iv.w_hours_received), 2) AS w_hours_received,
				      ROUND(AVG(iv.w_hours_delivered), 2) AS w_hours_delivered,
				      ROUND(AVG(iv.w_hours_net), 2) AS w_hours_net,
				      ROUND(AVG(iv.w_hours_total), 2) AS w_hours_total,
				      ROUND(AVG(iv.var_hours_positive), 2) AS var_hours_positive,
				      ROUND(AVG(iv.var_hours_negative), 2) AS var_hours_negative,
				      ROUND(AVG(iv.var_hours_net), 2) AS var_hours_net,
				      ROUND(AVG(iv.var_hours_total), 2) AS var_hours_total,
				      ROUND(AVG(iv.va_hours_total), 2) AS va_hours_total,
				      ROUND(AVG(iv.amps_a_average), 2) AS amps_a_average,
				      ROUND(AVG(iv.amps_b_average), 2) AS amps_b_average,
				      ROUND(AVG(iv.amps_c_average), 2) AS amps_c_average,
				      ROUND(AVG(iv.positive_watts_3ph_average), 2) AS positive_watts_3ph_average,
				      ROUND(AVG(iv.positive_vars_3ph_average), 2) AS positive_vars_3ph_average,
				      ROUND(AVG(iv.negative_watts_3ph_average), 2) AS negative_watts_3ph_average,
				      ROUND(AVG(iv.negative_vars_3ph_average), 2) AS negative_vars_3ph_average,
				      ROUND(AVG(iv.vas_3ph_average), 2) AS vas_3ph_average,
				      ROUND(AVG(iv.positive_pf_3ph_average), 2) AS positive_pf_3ph_average,
				      ROUND(AVG(iv.negative_pf_3ph_average), 2) AS negative_pf_3ph_average,
				      ROUND(AVG(iv.volts_a_n_min), 2) AS volts_a_n_min,
				      ROUND(AVG(iv.volts_b_n_min), 2) AS volts_b_n_min,
				      ROUND(AVG(iv.volts_c_n_min), 2) AS volts_c_n_min,
				      ROUND(AVG(iv.volts_a_b_min), 2) AS volts_a_b_min,
				      ROUND(AVG(iv.volts_b_c_min), 2) AS volts_b_c_min,
				      ROUND(AVG(iv.volts_c_a_min), 2) AS volts_c_a_min,
				      ROUND(AVG(iv.amps_a_min_avg_demand), 2) AS amps_a_min_avg_demand,
				      ROUND(AVG(iv.amps_b_min_avg_demand), 2) AS amps_b_min_avg_demand,
				      ROUND(AVG(iv.amps_c_min_avg_demand), 2) AS amps_c_min_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_min_avg_demand), 2) AS positive_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_min_avg_demand), 2) AS positive_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_min_avg_demand), 2) AS negative_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_min_avg_demand), 2) AS negative_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.vas_3ph_min_avg_demand), 2) AS vas_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_min_avg_demand), 2) AS positive_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_min_avg_demand), 2) AS negative_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.frequency_min), 2) AS frequency_min,
				      ROUND(AVG(iv.volts_a_n_max), 2) AS volts_a_n_max,
				      ROUND(AVG(iv.volts_b_n_max), 2) AS volts_b_n_max,
				      ROUND(AVG(iv.volts_c_n_max), 2) AS volts_c_n_max,
				      ROUND(AVG(iv.volts_a_b_max), 2) AS volts_a_b_max,
				      ROUND(AVG(iv.volts_b_c_max), 2) AS volts_b_c_max,
				      ROUND(AVG(iv.volts_c_a_max), 2) AS volts_c_a_max,
				      ROUND(AVG(iv.amps_a_max_avg_demand), 2) AS amps_a_max_avg_demand,
				      ROUND(AVG(iv.amps_b_max_avg_demand), 2) AS amps_b_max_avg_demand,
				      ROUND(AVG(iv.amps_c_max_avg_demand), 2) AS amps_c_max_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_max_avg_demand), 2) AS positive_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_max_avg_demand), 2) AS positive_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_max_avg_demand), 2) AS negative_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_max_avg_demand), 2) AS negative_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.vas_3ph_max_avg_demand), 2) AS vas_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_max_avg_demand), 2) AS positive_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_max_avg_demand), 2) AS negative_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.frequency_max), 2) AS frequency_max,
				      ROUND(AVG(iv.volts_a_n_thd), 2) AS volts_a_n_thd,
				      ROUND(AVG(iv.volts_b_n_thd), 2) AS volts_b_n_thd,
				      ROUND(AVG(iv.volts_c_n_thd), 2) AS volts_c_n_thd,
				      ROUND(AVG(iv.amps_a_thd), 2) AS amps_a_thd,
				      ROUND(AVG(iv.amps_b_thd), 2) AS amps_b_thd,
				      ROUND(AVG(iv.amps_c_thd), 2) AS amps_c_thd,
				      ROUND(AVG(iv.phase_a_current_0th), 2) AS phase_a_current_0th,
				      ROUND(AVG(iv.phase_a_current_1st), 2) AS phase_a_current_1st,
				      ROUND(AVG(iv.phase_a_current_2nd), 2) AS phase_a_current_2nd,
				      ROUND(AVG(iv.phase_a_current_3rd), 2) AS phase_a_current_3rd,
				      ROUND(AVG(iv.phase_a_current_4th), 2) AS phase_a_current_4th,
				      ROUND(AVG(iv.phase_a_current_5th), 2) AS phase_a_current_5th,
				      ROUND(AVG(iv.phase_a_current_6th), 2) AS phase_a_current_6th,
				      ROUND(AVG(iv.phase_a_current_7th), 2) AS phase_a_current_7th,
				      ROUND(AVG(iv.phase_a_voltage_0th), 2) AS phase_a_voltage_0th,
				      ROUND(AVG(iv.phase_a_voltage_1st), 2) AS phase_a_voltage_1st,
				      ROUND(AVG(iv.phase_a_voltage_2nd), 2) AS phase_a_voltage_2nd,
				      ROUND(AVG(iv.phase_a_voltage_3rd), 2) AS phase_a_voltage_3rd,
				      ROUND(AVG(iv.phase_b_current_0th), 2) AS phase_b_current_0th,
				      ROUND(AVG(iv.phase_b_current_1st), 2) AS phase_b_current_1st,
				      ROUND(AVG(iv.phase_b_current_2nd), 2) AS phase_b_current_2nd,
				      ROUND(AVG(iv.phase_b_current_3rd), 2) AS phase_b_current_3rd,
				      ROUND(AVG(iv.phase_b_current_4th), 2) AS phase_b_current_4th,
				      ROUND(AVG(iv.phase_b_current_5th), 2) AS phase_b_current_5th,
				      ROUND(AVG(iv.phase_b_current_6th), 2) AS phase_b_current_6th,
				      ROUND(AVG(iv.phase_b_current_7th), 2) AS phase_b_current_7th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_2nd), 2) AS phase_b_voltage_2nd,
				      ROUND(AVG(iv.phase_b_voltage_3rd), 2) AS phase_b_voltage_3rd,
				      ROUND(AVG(iv.phase_c_current_0th), 2) AS phase_c_current_0th,
				      ROUND(AVG(iv.phase_c_current_1st), 2) AS phase_c_current_1st,
				      ROUND(AVG(iv.phase_c_current_2nd), 2) AS phase_c_current_2nd,
				      ROUND(AVG(iv.phase_c_current_3rd), 2) AS phase_c_current_3rd,
				      ROUND(AVG(iv.phase_c_current_4th), 2) AS phase_c_current_4th,
				      ROUND(AVG(iv.phase_c_current_5th), 2) AS phase_c_current_5th,
				      ROUND(AVG(iv.phase_c_current_6th), 2) AS phase_c_current_6th,
				      ROUND(AVG(iv.phase_c_current_7th), 2) AS phase_c_current_7th,
				      ROUND(AVG(iv.phase_c_voltage_0th), 2) AS phase_c_voltage_0th,
				      ROUND(AVG(iv.phase_c_voltage_1st), 2) AS phase_c_voltage_1st,
				      ROUND(AVG(iv.phase_c_voltage_2nd), 2) AS phase_c_voltage_2nd,
				      ROUND(AVG(iv.phase_c_voltage_3rd), 2) AS phase_c_voltage_3rd,
				      ROUND(AVG(iv.angle_phase_a_current), 2) AS angle_phase_a_current,
				      ROUND(AVG(iv.angle_phase_b_current), 2) AS angle_phase_b_current,
				      ROUND(AVG(iv.angle_phase_c_current), 2) AS angle_phase_c_current,
				      ROUND(AVG(iv.angle_volts_a_b), 2) AS angle_volts_a_b,
				      ROUND(AVG(iv.angle_volts_b_c), 2) AS angle_volts_b_c,
				      ROUND(AVG(iv.angle_volts_c_a), 2) AS angle_volts_c_a,
				    </when>
				    
				    <when test="datatablename == 'model_ivt_solaron_ext'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.common_mode), 2) AS common_mode,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				      ROUND(AVG(iv.ac_current), 2) AS ac_current,
				    </when>
				    
				    <when test="datatablename == 'model_veris_industries_e51c2_power_meter'">
				      ROUND(AVG(iv.AccumulatedRealEnergyNet), 2) AS AccumulatedRealEnergyNet,
				      ROUND(AVG(iv.RealEnergyQuadrants14Import), 2) AS RealEnergyQuadrants14Import,
				      ROUND(AVG(iv.RealEnergyQuadrants23Export), 2) AS RealEnergyQuadrants23Export,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant1), 2) AS ReactiveEnergyQuadrant1,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant2), 2) AS ReactiveEnergyQuadrant2,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant3), 2) AS ReactiveEnergyQuadrant3,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant4), 2) AS ReactiveEnergyQuadrant4,
				      ROUND(AVG(iv.ApparentEnergyNet), 2) AS ApparentEnergyNet,
				      ROUND(AVG(iv.ApparentEnergyQuadrants14), 2) AS ApparentEnergyQuadrants14,
				      ROUND(AVG(iv.ApparentEnergyQuadrants23), 2) AS ApparentEnergyQuadrants23,
				      ROUND(AVG(iv.TotalNetInstantaneousRealPower), 2) AS TotalNetInstantaneousRealPower,
				      ROUND(AVG(iv.TotalNetInstantaneousReactivePower), 2) AS TotalNetInstantaneousReactivePower,
				      ROUND(AVG(iv.TotalNetInstantaneousApparentPower), 2) AS TotalNetInstantaneousApparentPower,
				      ROUND(AVG(iv.TotalPowerFactor), 2) AS TotalPowerFactor,
				      ROUND(AVG(iv.VoltageLL3pAve), 2) AS VoltageLL3pAve,
				      ROUND(AVG(iv.VoltageLN3pAve), 2) AS VoltageLN3pAve,
				      ROUND(AVG(iv.Current3pAve), 2) AS Current3pAve,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.TotalRealPowerPresentDemand), 2) AS TotalRealPowerPresentDemand,
				      ROUND(AVG(iv.TotalReactivePowerPresentDemand), 2) AS TotalReactivePowerPresentDemand,
				      ROUND(AVG(iv.TotalApparentPowerPresentDemand), 2) AS TotalApparentPowerPresentDemand,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandImport), 2) AS TotalRealPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandImport), 2) AS TotalReactivePowerMaxDemandImport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandImport), 2) AS TotalApparentPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandExport), 2) AS TotalRealPowerMaxDemandExport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandExport), 2) AS TotalReactivePowerMaxDemandExport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandExport), 2) AS TotalApparentPowerMaxDemandExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAImport), 2) AS AccumulatedRealEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBImport), 2) AS AccumulatedRealEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCImport), 2) AS AccumulatedRealEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAExport), 2) AS AccumulatedRealEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBExport), 2) AS AccumulatedRealEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCExport), 2) AS AccumulatedRealEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAImport), 2) AS AccumulatedApparentEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBImport), 2) AS AccumulatedApparentEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCImport), 2) AS AccumulatedApparentEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAExport), 2) AS AccumulatedApparentEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBExport), 2) AS AccumulatedApparentEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCExport), 2) AS AccumulatedApparentEnergyPhaseCExport,
				      ROUND(AVG(iv.RealPowerPhaseA), 2) AS RealPowerPhaseA,
				      ROUND(AVG(iv.RealPowerPhaseB), 2) AS RealPowerPhaseB,
				      ROUND(AVG(iv.RealPowerPhaseC), 2) AS RealPowerPhaseC,
				      ROUND(AVG(iv.ReactivePowerPhaseA), 2) AS ReactivePowerPhaseA,
				      ROUND(AVG(iv.ReactivePowerPhaseB), 2) AS ReactivePowerPhaseB,
				      ROUND(AVG(iv.ReactivePowerPhaseC), 2) AS ReactivePowerPhaseC,
				      ROUND(AVG(iv.ApparentPowerPhaseA), 2) AS ApparentPowerPhaseA,
				      ROUND(AVG(iv.ApparentPowerPhaseB), 2) AS ApparentPowerPhaseB,
				      ROUND(AVG(iv.ApparentPowerPhaseC), 2) AS ApparentPowerPhaseC,
				      ROUND(AVG(iv.PowerFactorPhaseA), 2) AS PowerFactorPhaseA,
				      ROUND(AVG(iv.PowerFactorPhaseB), 2) AS PowerFactorPhaseB,
				      ROUND(AVG(iv.PowerFactorPhaseC), 2) AS PowerFactorPhaseC,
				      ROUND(AVG(iv.VoltagePhaseAB), 2) AS VoltagePhaseAB,
				      ROUND(AVG(iv.VoltagePhaseBC), 2) AS VoltagePhaseBC,
				      ROUND(AVG(iv.VoltagePhaseAC), 2) AS VoltagePhaseAC,
				      ROUND(AVG(iv.VoltagePhaseAN), 2) AS VoltagePhaseAN,
				      ROUND(AVG(iv.VoltagePhaseBN), 2) AS VoltagePhaseBN,
				      ROUND(AVG(iv.VoltagePhaseCN), 2) AS VoltagePhaseCN,
				      ROUND(AVG(iv.CurrentPhaseA), 2) AS CurrentPhaseA,
				      ROUND(AVG(iv.CurrentPhaseB), 2) AS CurrentPhaseB,
				      ROUND(AVG(iv.CurrentPhaseC), 2) AS CurrentPhaseC,
				    </when>
				    
				    
				    <when test="datatablename == 'model_imtsolar_class8000'">
				      ROUND(AVG(iv.irradiance * 0.1), 2) AS irradiance,
				      ROUND(AVG(iv.tcell), 2) AS tcell,
				    </when>
				    
				    
				    <when test="datatablename == 'model_pvp_inverter'">
				      ROUND(AVG(iv.total_kwh_delivered), 2) AS total_kwh_delivered,
				      ROUND(AVG(iv.volts_a_l_n), 2) AS volts_a_l_n,
				      ROUND(AVG(iv.volts_b_l_n), 2) AS volts_b_l_n,
				      ROUND(AVG(iv.volts_c_l_n), 2) AS volts_c_l_n,
				      ROUND(AVG(iv.current_a), 2) AS current_a,
				      ROUND(AVG(iv.current_b), 2) AS current_b,
				      ROUND(AVG(iv.current_c), 2) AS current_c,
				      ROUND(AVG(iv.dc_output_voltage), 2) AS dc_output_voltage,
				      ROUND(AVG(iv.dc_output_current), 2) AS dc_output_current,
				      ROUND(AVG(iv.line_frenquency), 2) AS line_frenquency,
				      ROUND(AVG(iv.line_kw), 2) AS line_kw,
				      ROUND(COUNT(iv.inverter_fault_word0), 2) AS inverter_fault_word0,
				      ROUND(COUNT(iv.inverter_fault_word1), 2) AS inverter_fault_word1,
				      ROUND(COUNT(iv.inverter_fault_word2), 2) AS inverter_fault_word2,
				      
				    </when>
				    
				    <when test="datatablename == 'model_advanced_energy_solaron'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.ambient_temperature), 2) AS ambient_temperature,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				    </when>
				    
				    
				    <when test="datatablename == 'model_chint_solectria_inverter_class9725'">
				      ROUND(AVG(iv.PowerOnOff), 2) AS PowerOnOff,
				      ROUND(AVG(iv.PActiveSet), 2) AS PActiveSet,
				      ROUND(AVG(iv.PFactorSet), 2) AS PFactorSet,
				      ROUND(AVG(iv.PReactiveSet), 2) AS PReactiveSet,
				      ROUND(AVG(iv.GridVMax), 2) AS GridVMax,
				      ROUND(AVG(iv.GridVmaxTripT), 2) AS GridVmaxTripT,
				      ROUND(AVG(iv.GridVMin), 2) AS GridVMin,
				      ROUND(AVG(iv.GridVminTripT), 2) AS GridVminTripT,
				      ROUND(AVG(iv.GridFMax), 2) AS GridFMax,
				      ROUND(AVG(iv.GridFMin), 2) AS GridFMin,
				      ROUND(AVG(iv.GridFTripT), 2) AS GridFTripT,
				      ROUND(AVG(iv.ActivePower), 2) AS ActivePower,
				      ROUND(AVG(iv.PowerFactor), 2) AS PowerFactor,
				      ROUND(AVG(iv.Risomin), 2) AS Risomin,
				      ROUND(AVG(iv.PVStartVol), 2) AS PVStartVol,
				      ROUND(AVG(iv.DCIMax), 2) AS DCIMax,
				      ROUND(AVG(iv.TambientMax), 2) AS TambientMax,
				      ROUND(AVG(iv.TmoduleMax), 2) AS TmoduleMax,
				      ROUND(AVG(iv.OffsetDiffMax), 2) AS OffsetDiffMax,
				      ROUND(AVG(iv.GridVolUnbalance), 2) AS GridVolUnbalance,
				      ROUND(AVG(iv.SoftPowerStep), 2) AS SoftPowerStep,
				      ROUND(AVG(iv.TotalEnergyToEnergy), 2) AS TotalEnergyToEnergy,
				      ROUND(AVG(iv.TotalEnergyToday), 2) AS TotalEnergyToday,
				      ROUND(AVG(iv.InverterEfficiency), 2) AS InverterEfficiency,
				      ROUND(AVG(iv.PowerFactor1), 2) AS PowerFactor1,
				      ROUND(AVG(iv.MaxActivePowerToday), 2) AS MaxActivePowerToday,
				      ROUND(AVG(iv.RunTimeToGrid), 2) AS RunTimeToGrid,
				      ROUND(AVG(iv.AC_ActivePower), 2) AS AC_ActivePower,
				      ROUND(AVG(iv.AC_ApparentPower), 2) AS AC_ApparentPower,
				      ROUND(AVG(iv.GridVoltageUab), 2) AS GridVoltageUab,
				      ROUND(AVG(iv.GridVoltageUbc), 2) AS GridVoltageUbc,
				      ROUND(AVG(iv.GridVoltageUca), 2) AS GridVoltageUca,
				      ROUND(AVG(iv.GridA_PhaseCurrent), 2) AS GridA_PhaseCurrent,
				      ROUND(AVG(iv.GridB_PhaseCurrent), 2) AS GridB_PhaseCurrent,
				      ROUND(AVG(iv.GridC_PhaseCurrent), 2) AS GridC_PhaseCurrent,
				      ROUND(AVG(iv.PV1_Voltage), 2) AS PV1_Voltage,
				      ROUND(AVG(iv.PV1_Current), 2) AS PV1_Current,
				      ROUND(AVG(iv.PV2_Voltage), 2) AS PV2_Voltage,
				      ROUND(AVG(iv.PV2_Current), 2) AS PV2_Current,
				      ROUND(AVG(iv.PV3_Voltage), 2) AS PV3_Voltage,
				      ROUND(AVG(iv.PV3_Current), 2) AS PV3_Current,
				      ROUND(AVG(iv.Grid_Frequency), 2) AS Grid_Frequency,
				      ROUND(AVG(iv.ModuleTemp), 2) AS ModuleTemp,
				      ROUND(AVG(iv.InternalTemp), 2) AS InternalTemp,
				      ROUND(AVG(iv.TransformerTemp), 2) AS TransformerTemp,
				      ROUND(COUNT(iv.PermanentFaultCode), 2) AS PermanentFaultCode,
				      ROUND(COUNT(iv.WarnCode), 2) AS WarnCode,
				      ROUND(COUNT(iv.FaultCode0), 2) AS FaultCode0,
				      ROUND(COUNT(iv.FaultCode1), 2) AS FaultCode1,
				      ROUND(COUNT(iv.FaultCode2), 2) AS FaultCode2,
				    </when>
				    
				    <when test="datatablename == 'model_elkor_wattson_pv_meter'">
				      ROUND(AVG(iv.TotalEnergyConsumption), 2) AS TotalEnergyConsumption,
				      ROUND(AVG(iv.TotalRealPower), 2) AS TotalRealPower,
				      ROUND(AVG(iv.TotalReactivePower), 2) AS TotalReactivePower,
				      ROUND(AVG(iv.TotalApparentPower), 2) AS TotalApparentPower,
				      ROUND(AVG(iv.AverageVoltageLN), 2) AS AverageVoltageLN,
				      ROUND(AVG(iv.AverageVoltageLL), 2) AS AverageVoltageLL,
				      ROUND(AVG(iv.AverageCurrent), 2) AS AverageCurrent,
				      ROUND(AVG(iv.TotalSystemPowerFactor), 2) AS TotalSystemPowerFactor,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.SlidingWindowRealPowerDemand), 2) AS SlidingWindowRealPowerDemand,
				      ROUND(AVG(iv.VoltageAN), 2) AS VoltageAN,
				      ROUND(AVG(iv.VoltageBN), 2) AS VoltageBN,
				      ROUND(AVG(iv.VoltageCN), 2) AS VoltageCN,
				      ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				      ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				      ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				      ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				      ROUND(COUNT(iv.CurrentB), 2) AS CurrentB,
				      ROUND(COUNT(iv.CurrentC), 2) AS CurrentC,
				      ROUND(COUNT(iv.RealPowerA), 2) AS RealPowerA,
				      ROUND(COUNT(iv.RealPowerB), 2) AS RealPowerB,
				      ROUND(COUNT(iv.RealPowerC), 2) AS RealPowerC,
				      ROUND(COUNT(iv.ReactivePowerA), 2) AS ReactivePowerA,
				      
				      ROUND(COUNT(iv.ReactivePowerB), 2) AS ReactivePowerB,
				      ROUND(COUNT(iv.ReactivePowerC), 2) AS ReactivePowerC,
				      ROUND(COUNT(iv.ApparentPowerA), 2) AS ApparentPowerA,
				      ROUND(COUNT(iv.ApparentPowerB), 2) AS ApparentPowerB,
				      ROUND(COUNT(iv.ApparentPowerC), 2) AS ApparentPowerC,
				      ROUND(COUNT(iv.PowerFactorA), 2) AS PowerFactorA,
				      ROUND(COUNT(iv.PowerFactorB), 2) AS PowerFactorB,
				      ROUND(COUNT(iv.PowerFactorC), 2) AS PowerFactorC,
				    </when>
				    <when test="datatablename == 'model_satcon_pvs357_inverter'">
				      ROUND(AVG(iv.Software_Identification_Number), 2) AS Software_Identification_Number,
				      ROUND(AVG(iv.Fault_Word1), 2) AS Fault_Word1,
				      ROUND(AVG(iv.Fault_Word2), 2) AS Fault_Word2,
				      ROUND(AVG(iv.Fault_Word3), 2) AS Fault_Word3,
				      ROUND(AVG(iv.Fault_Word4), 2) AS Fault_Word4,
				      ROUND(AVG(iv.Fault_Word5), 2) AS Fault_Word5,
				      ROUND(AVG(iv.Fault_Word6), 2) AS Fault_Word6,
				      ROUND(COUNT(iv.Fault_Word7), 2) AS Fault_Word7,
				      ROUND(AVG(iv.Number_of_Faults), 2) AS Number_of_Faults,
				      ROUND(AVG(iv.Program_Checksum), 2) AS Program_Checksum,
				      ROUND(AVG(iv.DC_Input_Volts), 2) AS DC_Input_Volts,
				      ROUND(AVG(iv.DC_Link_Volts), 2) AS DC_Link_Volts,
				      ROUND(AVG(iv.DC_Link_Amps), 2) AS DC_Link_Amps,
				      ROUND(AVG(iv.DC_Ground_Current), 2) AS DC_Ground_Current,
				      ROUND(AVG(iv.Line_Amps_A), 2) AS Line_Amps_A,
				      ROUND(AVG(iv.Line_Amps_B), 2) AS Line_Amps_B,
				      ROUND(AVG(iv.Line_Amps_C), 2) AS Line_Amps_C,
				      ROUND(AVG(iv.Line_Amps_Average), 2) AS Line_Amps_Average,
				      ROUND(AVG(iv.Neutral_Current), 2) AS Neutral_Current,
				      ROUND(AVG(iv.Line_Volts_A), 2) AS Line_Volts_A,
				      ROUND(AVG(iv.Line_Volts_B), 2) AS Line_Volts_B,
				      ROUND(AVG(iv.Line_Volts_C), 2) AS Line_Volts_C,
				      ROUND(AVG(iv.Line_Volts_Average), 2) AS Line_Volts_Average,
				      ROUND(AVG(iv.Line_Voltage_Unbalance), 2) AS Line_Voltage_Unbalance,
				      ROUND(AVG(iv.Line_Current_Unbalance), 2) AS Line_Current_Unbalance,
				      ROUND(AVG(iv.Input_kW), 2) AS Input_kW,
				      ROUND(AVG(iv.Output_kw), 2) AS Output_kw,
				      ROUND(AVG(iv.Output_kvar), 2) AS Output_kvar,
				      ROUND(AVG(iv.Output_kva), 2) AS Output_kva,
				      ROUND(AVG(iv.Power_Factor), 2) AS Power_Factor,
				      ROUND(AVG(iv.Ground_Impedance), 2) AS Ground_Impedance,
				      ROUND(AVG(iv.String_Amps1), 2) AS String_Amps1,
				      ROUND(AVG(iv.String_Amps2), 2) AS String_Amps2,
				      ROUND(AVG(iv.String_Amps3), 2) AS String_Amps3,
				      ROUND(AVG(iv.String_Amps4), 2) AS String_Amps4,
				      ROUND(AVG(iv.String_Amps5), 2) AS String_Amps5,
				      ROUND(AVG(iv.String_Amps6), 2) AS String_Amps6,
				      ROUND(AVG(iv.String_Amps7), 2) AS String_Amps7,
				      ROUND(AVG(iv.String_Amps8), 2) AS String_Amps8,
				      ROUND(AVG(iv.String_Amps9), 2) AS String_Amps9,
				      ROUND(AVG(iv.String_Amps10), 2) AS String_Amps10,
				      ROUND(AVG(iv.String_Amps11), 2) AS String_Amps11,
				      ROUND(AVG(iv.String_Amps12), 2) AS String_Amps12,
				      ROUND(AVG(iv.String_Amps13), 2) AS String_Amps13,
				      ROUND(AVG(iv.String_Amps14), 2) AS String_Amps14,
				      ROUND(AVG(iv.String_Amps15), 2) AS String_Amps15,
				      ROUND(AVG(iv.String_Amps16), 2) AS String_Amps16,
				      ROUND(AVG(iv.String_Amps17), 2) AS String_Amps17,
				      ROUND(AVG(iv.String_Amps18), 2) AS String_Amps18,
				      ROUND(AVG(iv.String_Amps19), 2) AS String_Amps19,
				      ROUND(AVG(iv.String_Amps20), 2) AS String_Amps20,
				      ROUND(AVG(iv.String_Amps21), 2) AS String_Amps21,
				      ROUND(AVG(iv.String_Amps22), 2) AS String_Amps22,
				      ROUND(AVG(iv.String_Amps23), 2) AS String_Amps23,
				      ROUND(AVG(iv.String_Amps24), 2) AS String_Amps24,
				      ROUND(AVG(iv.String_Amps25), 2) AS String_Amps25,
				      ROUND(AVG(iv.String_Amps26), 2) AS String_Amps26,
				      ROUND(AVG(iv.String_Amps27), 2) AS String_Amps27,
				      ROUND(AVG(iv.String_Amps28), 2) AS String_Amps28,
				      ROUND(AVG(iv.String_Amps29), 2) AS String_Amps29,
				      ROUND(AVG(iv.String_Amps30), 2) AS String_Amps30,
				      ROUND(AVG(iv.String_Amps31), 2) AS String_Amps31,
				      ROUND(AVG(iv.String_Amps32), 2) AS String_Amps32,
				      
				      
				      ROUND(AVG(iv.String_Amps_Average), 2) AS String_Amps_Average,
				      ROUND(AVG(iv.String_kwh1), 2) AS String_kwh1,
				      ROUND(AVG(iv.String_kwh2), 2) AS String_kwh2,
				      ROUND(AVG(iv.String_kwh3), 2) AS String_kwh3,
				      ROUND(AVG(iv.String_kwh4), 2) AS String_kwh4,
				      ROUND(AVG(iv.String_kwh5), 2) AS String_kwh5,
				      ROUND(AVG(iv.String_kwh6), 2) AS String_kwh6,
				      ROUND(AVG(iv.String_kwh7), 2) AS String_kwh7,
				      ROUND(AVG(iv.String_kwh8), 2) AS String_kwh8,
				      ROUND(AVG(iv.String_kwh9), 2) AS String_kwh9,
				      ROUND(AVG(iv.String_kwh10), 2) AS String_kwh10,
				      ROUND(AVG(iv.String_kwh11), 2) AS String_kwh11,
				      ROUND(AVG(iv.String_kwh12), 2) AS String_kwh12,
				      ROUND(AVG(iv.String_kwh13), 2) AS String_kwh13,
				      ROUND(AVG(iv.String_kwh14), 2) AS String_kwh14,
				      ROUND(AVG(iv.String_kwh15), 2) AS String_kwh15,
				      ROUND(AVG(iv.String_kwh16), 2) AS String_kwh16,
				      ROUND(AVG(iv.String_kwh17), 2) AS String_kwh17,
				      ROUND(AVG(iv.String_kwh18), 2) AS String_kwh18,
				      ROUND(AVG(iv.String_kwh19), 2) AS String_kwh19,
				      ROUND(AVG(iv.String_kwh20), 2) AS String_kwh20,
				      ROUND(AVG(iv.String_kwh21), 2) AS String_kwh21,
				      ROUND(AVG(iv.String_kwh22), 2) AS String_kwh22,
				      ROUND(AVG(iv.String_kwh23), 2) AS String_kwh23,
				      ROUND(AVG(iv.String_kwh24), 2) AS String_kwh24,
				      ROUND(AVG(iv.String_kwh25), 2) AS String_kwh25,
				      ROUND(AVG(iv.String_kwh26), 2) AS String_kwh26,
				      ROUND(AVG(iv.String_kwh27), 2) AS String_kwh27,
				      ROUND(AVG(iv.String_kwh28), 2) AS String_kwh28,
				      ROUND(AVG(iv.String_kwh29), 2) AS String_kwh29,
				      ROUND(AVG(iv.String_kwh30), 2) AS String_kwh30,
				      ROUND(AVG(iv.String_kwh31), 2) AS String_kwh31,
				      ROUND(AVG(iv.String_kwh32), 2) AS String_kwh32,
				      
				      ROUND(AVG(iv.String_kwh_Average), 2) AS String_kwh_Average,
				      ROUND(AVG(iv.Total_kwh), 2) AS Total_kwh,
				      ROUND(AVG(iv.Total_mwh), 2) AS Total_mwh,
				      ROUND(AVG(iv.kwh_Today), 2) AS kwh_Today,
				      ROUND(AVG(iv.kwh_Yesterday), 2) AS kwh_Yesterday,
				      ROUND(AVG(iv.Total_kwh7_days), 2) AS Total_kwh7_days,
				      ROUND(AVG(iv.Total_kwh30_days), 2) AS Total_kwh30_days,
				      ROUND(AVG(iv.Average_kwh7_days), 2) AS Average_kwh7_days,
				      ROUND(AVG(iv.Average_kwh30_Days), 2) AS Average_kwh30_Days,
				      ROUND(AVG(iv.Average_Line_Frequency), 2) AS Average_Line_Frequency,
				      ROUND(AVG(iv.Average_Line_Frequency_Error), 2) AS Average_Line_Frequency_Error,
				      ROUND(AVG(iv.FPGA_Identification_Number), 2) AS FPGA_Identification_Number,
				      ROUND(AVG(iv.DC_Input_Voltage_Timer), 2) AS DC_Input_Voltage_Timer,
				      ROUND(AVG(iv.AC_Line_Voltage_Timer), 2) AS AC_Line_Voltage_Timer,
				      ROUND(AVG(iv.Operating_State), 2) AS Operating_State,
				      ROUND(AVG(iv.Internal_Air_Temperature), 2) AS Internal_Air_Temperature,
				      ROUND(AVG(iv.Inverter_Air_Temperature), 2) AS Inverter_Air_Temperature,
				      ROUND(AVG(iv.Heatsink_Temperature1), 2) AS Heatsink_Temperature1,
				      ROUND(AVG(iv.Heatsink_Temperature2), 2) AS Heatsink_Temperature2,
				      ROUND(AVG(iv.Heatsink_Temperature3), 2) AS Heatsink_Temperature3,
				      ROUND(AVG(iv.Heatsink_Temperature4), 2) AS Heatsink_Temperature4,
				      ROUND(AVG(iv.Heatsink_Temperature5), 2) AS Heatsink_Temperature5,
				      ROUND(AVG(iv.Heatsink_Temperature6), 2) AS Heatsink_Temperature6,
				      ROUND(AVG(iv.Heatsink_Maximum_Temparature1), 2) AS Heatsink_Maximum_Temparature1,
				      ROUND(AVG(iv.Fan_Speed_Command1), 2) AS Fan_Speed_Command1,
				      ROUND(AVG(iv.Heatsink_Maximum_Temperature2), 2) AS Heatsink_Maximum_Temperature2,
				      ROUND(AVG(iv.Fan_Speed_Command2), 2) AS Fan_Speed_Command2,
				      ROUND(AVG(iv.Number_of_Temperature_Feedbacks), 2) AS Number_of_Temperature_Feedbacks,
				      ROUND(AVG(iv.Serial_number_word1), 2) AS Serial_number_word1,
				      ROUND(AVG(iv.Serial_number_word2), 2) AS Serial_number_word2,
				      ROUND(AVG(iv.Serial_number_word3), 2) AS Serial_number_word3,
				      ROUND(AVG(iv.Serial_number_word4), 2) AS Serial_number_word4,
				      ROUND(AVG(iv.Number_of_Strings), 2) AS Number_of_Strings,
				      
				    </when>
				    
				    
				    <when test="datatablename == 'model_w_kipp_zonen_rt1'">
				    	ROUND(AVG(iv.DeviceType), 2) AS DeviceType,
				    	ROUND(AVG(iv.DataModelVersion), 2) AS DataModelVersion,
				    	ROUND(AVG(iv.OperationalMode), 2) AS OperationalMode,
				    	ROUND(AVG(iv.StatusFlags), 2) AS StatusFlags,
				    	ROUND(AVG(iv.SunPOATempComp), 2) AS SunPOATempComp,
				    	ROUND(AVG(iv.PanelTemperature), 2) AS PanelTemperature,
				    	ROUND(AVG(iv.ExtPowerSensor), 2) AS ExtPowerSensor,
				    	ROUND(AVG(iv.BatchNumber), 2) AS BatchNumber,
				    	ROUND(AVG(iv.SerialNumber), 2) AS SerialNumber,
				    	ROUND(AVG(iv.CalibrationDateYYMMDD), 2) AS CalibrationDateYYMMDD,
				    </when>
				    
				    <when test="datatablename == 'model_elkor_production_meter'">
				    	ROUND(AVG(iv.ActivePowerTotal), 2) AS ActivePowerTotal,
				    	ROUND(AVG(iv.ReactivePowerTotal), 2) AS ReactivePowerTotal,
				    	ROUND(AVG(iv.ApparentPowerTotal), 2) AS ApparentPowerTotal,
				    	ROUND(AVG(iv.VoltageAverage), 2) AS VoltageAverage,
				    	ROUND(AVG(iv.VoltageLLAverage), 2) AS VoltageLLAverage,
				    	ROUND(AVG(iv.CurrentAverage), 2) AS CurrentAverage,
				    	ROUND(AVG(iv.SystemPowerFactor), 2) AS SystemPowerFactor,
				    	ROUND(AVG(iv.SystemFrequency), 2) AS SystemFrequency,
				    	ROUND(AVG(iv.VoltageAverageAngle), 2) AS VoltageAverageAngle,
				    	ROUND(AVG(iv.SystemQuadrant), 2) AS SystemQuadrant,
				    	ROUND(AVG(iv.VoltageA), 2) AS VoltageA,
				    	ROUND(AVG(iv.VoltageB), 2) AS VoltageB,
				    	ROUND(AVG(iv.VoltageC), 2) AS VoltageC,
				    	ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				    	ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				    	ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				    	ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				    	ROUND(AVG(iv.CurrentB), 2) AS CurrentB,
				    	ROUND(AVG(iv.CurrentC), 2) AS CurrentC,
				    	ROUND(AVG(iv.ActivePowerA), 2) AS ActivePowerA,
				    	ROUND(AVG(iv.ActivePowerB), 2) AS ActivePowerB,
				    	ROUND(AVG(iv.ActivePowerC), 2) AS ActivePowerC,
				    	ROUND(AVG(iv.ReactivePowerA), 2) AS ReactivePowerA,
				    	ROUND(AVG(iv.ReactivePowerB), 2) AS ReactivePowerB,
				    	ROUND(AVG(iv.ReactivePowerC), 2) AS ReactivePowerC,
				    	ROUND(AVG(iv.ApparentPowerA), 2) AS ApparentPowerA,
				    	ROUND(AVG(iv.ApparentPowerB), 2) AS ApparentPowerB,
				    	ROUND(AVG(iv.ApparentPowerC), 2) AS ApparentPowerC,
				    	ROUND(AVG(iv.PowerFactorA), 2) AS PowerFactorA,
				    	ROUND(AVG(iv.PowerFactorB), 2) AS PowerFactorB,
				    	ROUND(AVG(iv.PowerFactorC), 2) AS PowerFactorC,
				    	ROUND(AVG(iv.VoltageAngleAB), 2) AS VoltageAngleAB,
				    	ROUND(AVG(iv.VoltageAngleBC), 2) AS VoltageAngleBC,
				    	ROUND(AVG(iv.VoltageAngleCA), 2) AS VoltageAngleCA,
				    	ROUND(AVG(iv.QuadrantA), 2) AS QuadrantA,
				    	ROUND(AVG(iv.QuadrantB), 2) AS QuadrantB,
				    	ROUND(AVG(iv.QuadrantC), 2) AS QuadrantC,
				    	ROUND(AVG(iv.SlidingWindowPower), 2) AS SlidingWindowPower,
				    	ROUND(AVG(iv.NetTotalEnergy), 2) AS NetTotalEnergy,
				    	ROUND(AVG(iv.TotalNetApparentEnergy), 2) AS TotalNetApparentEnergy,
				    	ROUND(AVG(iv.TotalImportEnergy), 2) AS TotalImportEnergy,
				    	ROUND(AVG(iv.TotalExportEnergy), 2) AS TotalExportEnergy,
				    	ROUND(AVG(iv.TotalImportApparentEnergy), 2) AS TotalImportApparentEnergy,
				    	ROUND(AVG(iv.TotalExportApparentEnergy), 2) AS TotalExportApparentEnergy,
				    	ROUND(AVG(iv.Q1TotalReactiveEnergy), 2) AS Q1TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q2TotalReactiveEnergy), 2) AS Q2TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q3TotalReactiveEnergy), 2) AS Q3TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q4TotalReactiveEnergy), 2) AS Q4TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q1Q2TotalInductiveReactiveEnergy), 2) AS Q1Q2TotalInductiveReactiveEnergy,
				    	ROUND(AVG(iv.Q3Q4TotalCapacitiveReactiveEnergy), 2) AS Q3Q4TotalCapacitiveReactiveEnergy,
				    	ROUND(AVG(iv.NetEnergyA), 2) AS NetEnergyA,
				    	ROUND(AVG(iv.NetEnergyB), 2) AS NetEnergyB,
				    	ROUND(AVG(iv.NetEnergyC), 2) AS NetEnergyC,
				    	ROUND(AVG(iv.NetApparentEnergyA), 2) AS NetApparentEnergyA,
				    	ROUND(AVG(iv.NetApparentEnergyB), 2) AS NetApparentEnergyB,
				    	ROUND(AVG(iv.NetApparentEnergyC), 2) AS NetApparentEnergyC,
				    	ROUND(AVG(iv.ImportEnergyA), 2) AS ImportEnergyA,
				    	ROUND(AVG(iv.ImportEnergyB), 2) AS ImportEnergyB,
				    	ROUND(AVG(iv.ImportEnergyC), 2) AS ImportEnergyC,
				    	ROUND(AVG(iv.ExportEnergyA), 2) AS ExportEnergyA,
				    	ROUND(AVG(iv.ExportEnergyB), 2) AS ExportEnergyB,
				    	ROUND(AVG(iv.ExportEnergyC), 2) AS ExportEnergyC,
				    	ROUND(AVG(iv.ImportApparentEnergyA), 2) AS ImportApparentEnergyA,
				    	ROUND(AVG(iv.ImportApparentEnergyB), 2) AS ImportApparentEnergyB,
				    	ROUND(AVG(iv.ImportApparentEnergyC), 2) AS ImportApparentEnergyC,
				    	ROUND(AVG(iv.ExportApparentEnergyA), 2) AS ExportApparentEnergyA,
				    	ROUND(AVG(iv.ExportApparentEnergyB), 2) AS ExportApparentEnergyB,
				    	ROUND(AVG(iv.ExportApparentEnergyC), 2) AS ExportApparentEnergyC,
				    	ROUND(AVG(iv.Q1ReactiveEnergyA), 2) AS Q1ReactiveEnergyA,
				    	ROUND(AVG(iv.Q1ReactiveEnergyB), 2) AS Q1ReactiveEnergyB,
				    	ROUND(AVG(iv.Q1ReactiveEnergyC), 2) AS Q1ReactiveEnergyC,
				    	ROUND(AVG(iv.Q2ReactiveEnergyA), 2) AS Q2ReactiveEnergyA,
				    	ROUND(AVG(iv.Q2ReactiveEnergyB), 2) AS Q2ReactiveEnergyB,
				    	ROUND(AVG(iv.Q2ReactiveEnergyC), 2) AS Q2ReactiveEnergyC,
				    	ROUND(AVG(iv.Q3ReactiveEnergyA), 2) AS Q3ReactiveEnergyA,
				    	ROUND(AVG(iv.Q3ReactiveEnergyB), 2) AS Q3ReactiveEnergyB,
				    	ROUND(AVG(iv.Q3ReactiveEnergyC), 2) AS Q3ReactiveEnergyC,
				    	ROUND(AVG(iv.Q4ReactiveEnergyA), 2) AS Q4ReactiveEnergyA,
				    	ROUND(AVG(iv.Q4ReactiveEnergyB), 2) AS Q4ReactiveEnergyB,
				    	ROUND(AVG(iv.Q4ReactiveEnergyC), 2) AS Q4ReactiveEnergyC,
				    </when>
				    
				    
			    </choose>
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%H:%i' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i' ) AS full_time,
				FLOOR(UNIX_TIMESTAMP(CONVERT_TZ( iv.time, '+00:00', t.`offset` ))/(60 * 60)) AS timekey
			FROM
				site si
				LEFT JOIN site_customer_map scm ON scm.id_site = si.id
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN ${datatablename} iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id_site}
				AND scm.id_customer = #{id_customer}
				AND d.id = #{id_device} 
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} 
				AND #{end_date}
				GROUP BY timekey
        </if>
        
        <if test="filterBy == 'this_month' or filterBy == 'last_month' ">
			SELECT
				<choose>
					<when test="datatablename == 'model_lufft_class8020'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.IrradianceActual), 2) AS IrradianceActual,
				      ROUND(COUNT(iv.IrradianceMin), 2) AS IrradianceMin,
				      ROUND(COUNT(iv.IrradianceMax), 2) AS IrradianceMax,
				      ROUND(COUNT(iv.IrradianceAvg), 2) AS IrradianceAvg,
				      ROUND(COUNT(iv.AirTemperatureActual), 2) AS AirTemperatureActual,
				      ROUND(COUNT(iv.AirTemperatureMin), 2) AS AirTemperatureMin,
				      ROUND(COUNT(iv.AirTemperatureMax), 2) AS AirTemperatureMax,
				      ROUND(COUNT(iv.AirTemperatureAvg), 2) AS AirTemperatureAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationQuantityAbsolute), 2) AS PrecipitationQuantityAbsolute,
				      ROUND(COUNT(iv.PrecipitationQuantityDifferential), 2) AS PrecipitationQuantityDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AbsoluteHumidityActual), 2) AS AbsoluteHumidityActual,
				      ROUND(COUNT(iv.AbsoluteHumidityMin), 2) AS AbsoluteHumidityMin,
				      ROUND(COUNT(iv.AbsoluteHumidityMax), 2) AS AbsoluteHumidityMax,
				      ROUND(COUNT(iv.AbsoluteHumidityAvg), 2) AS AbsoluteHumidityAvg,
				      ROUND(COUNT(iv.MixingRatioActual), 2) AS MixingRatioActual,
				      ROUND(COUNT(iv.MixingRatioMin), 2) AS MixingRatioMin,
				      ROUND(COUNT(iv.MixingRatioMax), 2) AS MixingRatioMax,
				      ROUND(COUNT(iv.MixingRatioAvg), 2) AS MixingRatioAvg,
				      ROUND(COUNT(iv.AbsoluteAirPressureActual), 2) AS AbsoluteAirPressureActual,
				      ROUND(COUNT(iv.AbsoluteAirPressureMin), 2) AS AbsoluteAirPressureMin,
				      ROUND(COUNT(iv.AbsoluteAirPressureMax), 2) AS AbsoluteAirPressureMax,
				      ROUND(COUNT(iv.AbsoluteAirPressureAvg), 2) AS AbsoluteAirPressureAvg,
				      ROUND(COUNT(iv.WindSpeedStandardDeviation), 2) AS WindSpeedStandardDeviation,
				      ROUND(COUNT(iv.WindDirectionStandardDeviation), 2) AS WindDirectionStandardDeviation,
				      ROUND(COUNT(iv.WetBulbTemperature), 2) AS WetBulbTemperature,
				      ROUND(COUNT(iv.SpecificEnthalpy), 2) AS SpecificEnthalpy,
				      ROUND(COUNT(iv.AirDensityActual), 2) AS AirDensityActual,
				      ROUND(COUNT(iv.LeafWetnessActual), 2) AS LeafWetnessActual,
				      ROUND(COUNT(iv.LeafWetnessMin), 2) AS LeafWetnessMin,
				      ROUND(COUNT(iv.LeafWetnessMax), 2) AS LeafWetnessMax,
				      ROUND(COUNT(iv.LeafWetnessAvg), 2) AS LeafWetnessAvg,
				      ROUND(COUNT(iv.LeafWetnessState), 2) AS LeafWetnessState,
				      ROUND(COUNT(iv.ExternalTemperature), 2) AS ExternalTemperature,
				      ROUND(COUNT(iv.WindValueQualityFast), 2) AS WindValueQualityFast,
				    </when>
				    
				    <when test="datatablename == 'model_lufft_ws501_umb_weather'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.GlobalRadiation), 2) AS GlobalRadiation,
				      ROUND(COUNT(iv.GlobalRadiation2), 2) AS GlobalRadiation2,
				      ROUND(COUNT(iv.GlobalRadiation3), 2) AS GlobalRadiation3,
				      ROUND(COUNT(iv.GlobalRadiation4), 2) AS GlobalRadiation4,
				      ROUND(COUNT(iv.AirTemperatureCActual), 2) AS AirTemperatureCActual,
				      ROUND(COUNT(iv.AirTemperatureCMin), 2) AS AirTemperatureCMin,
				      ROUND(COUNT(iv.AirTemperatureCMax), 2) AS AirTemperatureCMax,
				      ROUND(COUNT(iv.AirTemperatureCAvg), 2) AS AirTemperatureCAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationAbsolute), 2) AS PrecipitationAbsolute,
				      ROUND(COUNT(iv.PrecipitationDifferential), 2) AS PrecipitationDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AirTemperatureFActual), 2) AS AirTemperatureFActual,
				      ROUND(COUNT(iv.AirTemperatureFMin), 2) AS AirTemperatureFMin,
				      ROUND(COUNT(iv.AirTemperatureFMax), 2) AS AirTemperatureFMax,
				      ROUND(COUNT(iv.AirTemperatureFAvg), 2) AS AirTemperatureFAvg,
				      ROUND(COUNT(iv.ExternalTemperatureC), 2) AS ExternalTemperatureC,
				      ROUND(COUNT(iv.ExternalTemperatureF), 2) AS ExternalTemperatureF,
				    </when>
				    
					<when test="datatablename == 'model_abb_trio_class6210'">
				      ROUND(AVG(iv.AuroraType), 2) AS AuroraType,
				      ROUND(AVG(iv.GridType), 2) AS GridType,
				      ROUND(AVG(iv.TransformerType), 2) AS TransformerType,
				      ROUND(COUNT(iv.StatesByte0), 2) AS StatesByte0,
				      ROUND(COUNT(iv.StatesByte1), 2) AS StatesByte1,
				      ROUND(COUNT(iv.StatesByte2), 2) AS StatesByte2,
				      ROUND(COUNT(iv.StatesByte3), 2) AS StatesByte3,
				      ROUND(COUNT(iv.StatesByte4), 2) AS StatesByte4,
				      ROUND(COUNT(iv.TotalEnergy), 2) AS TotalEnergy,
				      ROUND(COUNT(iv.GridVoltage), 2) AS GridVoltage,
				      ROUND(COUNT(iv.GridCurrent), 2) AS GridCurrent,
				      ROUND(COUNT(iv.GridPower), 2) AS GridPower,
				      ROUND(COUNT(iv.Frequency), 2) AS Frequency,
				      ROUND(COUNT(iv.Input1Power), 2) AS Input1Power,
				      ROUND(COUNT(iv.Input1Voltage), 2) AS Input1Voltage,
				      ROUND(COUNT(iv.Input1Current), 2) AS Input1Current,
				      ROUND(COUNT(iv.Input2Power), 2) AS Input2Power,
				      ROUND(COUNT(iv.Input2Voltage), 2) AS Input2Voltage,
				      ROUND(COUNT(iv.Input2Current), 2) AS Input2Current,
				      ROUND(COUNT(iv.InverterTemperature), 2) AS InverterTemperature,
				      ROUND(COUNT(iv.BooseterTemperature), 2) AS BooseterTemperature,
				      ROUND(COUNT(iv.IslolationResistance), 2) AS IslolationResistance,
				    </when>
				    
				    <when test="datatablename == 'model_kippzonen_rt1_class8009'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    <when test="datatablename == 'model_rt1_class30000'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    
				    
				    <when test="datatablename == 'model_shark100'">
				      ROUND(AVG(iv.volts_a_n), 2) AS volts_a_n,
				      ROUND(AVG(iv.volts_b_n), 2) AS volts_b_n,
				      ROUND(AVG(iv.volts_c_n), 2) AS volts_c_n,
				      ROUND(AVG(iv.volts_a_b), 2) AS volts_a_b,
				      ROUND(AVG(iv.volts_c_a), 2) AS volts_c_a,
				      ROUND(AVG(iv.amps_a), 2) AS amps_a,
				      ROUND(AVG(iv.amps_b), 2) AS amps_b,
				      ROUND(AVG(iv.amps_c), 2) AS amps_c,
				      ROUND(AVG(iv.watts_3ph_total), 2) AS watts_3ph_total,
				      ROUND(AVG(iv.vars_3ph_total), 2) AS vars_3ph_total,
				      ROUND(AVG(iv.vas_3ph_total), 2) AS vas_3ph_total,
				      ROUND(AVG(iv.power_factor_3ph_total), 2) AS power_factor_3ph_total,
				      ROUND(AVG(iv.frequency), 2) AS frequency,
				      ROUND(AVG(iv.neutral_current), 2) AS neutral_current,
				      ROUND(AVG(iv.w_hours_received), 2) AS w_hours_received,
				      ROUND(AVG(iv.w_hours_delivered), 2) AS w_hours_delivered,
				      ROUND(AVG(iv.w_hours_net), 2) AS w_hours_net,
				      ROUND(AVG(iv.w_hours_total), 2) AS w_hours_total,
				      ROUND(AVG(iv.var_hours_positive), 2) AS var_hours_positive,
				      ROUND(AVG(iv.var_hours_negative), 2) AS var_hours_negative,
				      ROUND(AVG(iv.var_hours_net), 2) AS var_hours_net,
				      ROUND(AVG(iv.var_hours_total), 2) AS var_hours_total,
				      ROUND(AVG(iv.va_hours_total), 2) AS va_hours_total,
				      ROUND(AVG(iv.amps_a_average), 2) AS amps_a_average,
				      ROUND(AVG(iv.amps_b_average), 2) AS amps_b_average,
				      ROUND(AVG(iv.amps_c_average), 2) AS amps_c_average,
				      ROUND(AVG(iv.positive_watts_3ph_average), 2) AS positive_watts_3ph_average,
				      ROUND(AVG(iv.positive_vars_3ph_average), 2) AS positive_vars_3ph_average,
				      ROUND(AVG(iv.negative_watts_3ph_average), 2) AS negative_watts_3ph_average,
				      ROUND(AVG(iv.negative_vars_3ph_average), 2) AS negative_vars_3ph_average,
				      ROUND(AVG(iv.vas_3ph_average), 2) AS vas_3ph_average,
				      ROUND(AVG(iv.positive_pf_3ph_average), 2) AS positive_pf_3ph_average,
				      ROUND(AVG(iv.negative_pf_3ph_average), 2) AS negative_pf_3ph_average,
				      ROUND(AVG(iv.volts_a_n_min), 2) AS volts_a_n_min,
				      ROUND(AVG(iv.volts_b_n_min), 2) AS volts_b_n_min,
				      ROUND(AVG(iv.volts_c_n_min), 2) AS volts_c_n_min,
				      ROUND(AVG(iv.volts_a_b_min), 2) AS volts_a_b_min,
				      ROUND(AVG(iv.volts_b_c_min), 2) AS volts_b_c_min,
				      ROUND(AVG(iv.volts_c_a_min), 2) AS volts_c_a_min,
				      ROUND(AVG(iv.amps_a_min_avg_demand), 2) AS amps_a_min_avg_demand,
				      ROUND(AVG(iv.amps_b_min_avg_demand), 2) AS amps_b_min_avg_demand,
				      ROUND(AVG(iv.amps_c_min_avg_demand), 2) AS amps_c_min_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_min_avg_demand), 2) AS positive_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_min_avg_demand), 2) AS positive_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_min_avg_demand), 2) AS negative_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_min_avg_demand), 2) AS negative_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.vas_3ph_min_avg_demand), 2) AS vas_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_min_avg_demand), 2) AS positive_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_min_avg_demand), 2) AS negative_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.frequency_min), 2) AS frequency_min,
				      ROUND(AVG(iv.volts_a_n_max), 2) AS volts_a_n_max,
				      ROUND(AVG(iv.volts_b_n_max), 2) AS volts_b_n_max,
				      ROUND(AVG(iv.volts_c_n_max), 2) AS volts_c_n_max,
				      ROUND(AVG(iv.volts_a_b_max), 2) AS volts_a_b_max,
				      ROUND(AVG(iv.volts_b_c_max), 2) AS volts_b_c_max,
				      ROUND(AVG(iv.volts_c_a_max), 2) AS volts_c_a_max,
				      ROUND(AVG(iv.amps_a_max_avg_demand), 2) AS amps_a_max_avg_demand,
				      ROUND(AVG(iv.amps_b_max_avg_demand), 2) AS amps_b_max_avg_demand,
				      ROUND(AVG(iv.amps_c_max_avg_demand), 2) AS amps_c_max_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_max_avg_demand), 2) AS positive_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_max_avg_demand), 2) AS positive_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_max_avg_demand), 2) AS negative_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_max_avg_demand), 2) AS negative_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.vas_3ph_max_avg_demand), 2) AS vas_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_max_avg_demand), 2) AS positive_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_max_avg_demand), 2) AS negative_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.frequency_max), 2) AS frequency_max,
				      ROUND(AVG(iv.volts_a_n_thd), 2) AS volts_a_n_thd,
				      ROUND(AVG(iv.volts_b_n_thd), 2) AS volts_b_n_thd,
				      ROUND(AVG(iv.volts_c_n_thd), 2) AS volts_c_n_thd,
				      ROUND(AVG(iv.amps_a_thd), 2) AS amps_a_thd,
				      ROUND(AVG(iv.amps_b_thd), 2) AS amps_b_thd,
				      ROUND(AVG(iv.amps_c_thd), 2) AS amps_c_thd,
				      ROUND(AVG(iv.phase_a_current_0th), 2) AS phase_a_current_0th,
				      ROUND(AVG(iv.phase_a_current_1st), 2) AS phase_a_current_1st,
				      ROUND(AVG(iv.phase_a_current_2nd), 2) AS phase_a_current_2nd,
				      ROUND(AVG(iv.phase_a_current_3rd), 2) AS phase_a_current_3rd,
				      ROUND(AVG(iv.phase_a_current_4th), 2) AS phase_a_current_4th,
				      ROUND(AVG(iv.phase_a_current_5th), 2) AS phase_a_current_5th,
				      ROUND(AVG(iv.phase_a_current_6th), 2) AS phase_a_current_6th,
				      ROUND(AVG(iv.phase_a_current_7th), 2) AS phase_a_current_7th,
				      ROUND(AVG(iv.phase_a_voltage_0th), 2) AS phase_a_voltage_0th,
				      ROUND(AVG(iv.phase_a_voltage_1st), 2) AS phase_a_voltage_1st,
				      ROUND(AVG(iv.phase_a_voltage_2nd), 2) AS phase_a_voltage_2nd,
				      ROUND(AVG(iv.phase_a_voltage_3rd), 2) AS phase_a_voltage_3rd,
				      ROUND(AVG(iv.phase_b_current_0th), 2) AS phase_b_current_0th,
				      ROUND(AVG(iv.phase_b_current_1st), 2) AS phase_b_current_1st,
				      ROUND(AVG(iv.phase_b_current_2nd), 2) AS phase_b_current_2nd,
				      ROUND(AVG(iv.phase_b_current_3rd), 2) AS phase_b_current_3rd,
				      ROUND(AVG(iv.phase_b_current_4th), 2) AS phase_b_current_4th,
				      ROUND(AVG(iv.phase_b_current_5th), 2) AS phase_b_current_5th,
				      ROUND(AVG(iv.phase_b_current_6th), 2) AS phase_b_current_6th,
				      ROUND(AVG(iv.phase_b_current_7th), 2) AS phase_b_current_7th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_2nd), 2) AS phase_b_voltage_2nd,
				      ROUND(AVG(iv.phase_b_voltage_3rd), 2) AS phase_b_voltage_3rd,
				      ROUND(AVG(iv.phase_c_current_0th), 2) AS phase_c_current_0th,
				      ROUND(AVG(iv.phase_c_current_1st), 2) AS phase_c_current_1st,
				      ROUND(AVG(iv.phase_c_current_2nd), 2) AS phase_c_current_2nd,
				      ROUND(AVG(iv.phase_c_current_3rd), 2) AS phase_c_current_3rd,
				      ROUND(AVG(iv.phase_c_current_4th), 2) AS phase_c_current_4th,
				      ROUND(AVG(iv.phase_c_current_5th), 2) AS phase_c_current_5th,
				      ROUND(AVG(iv.phase_c_current_6th), 2) AS phase_c_current_6th,
				      ROUND(AVG(iv.phase_c_current_7th), 2) AS phase_c_current_7th,
				      ROUND(AVG(iv.phase_c_voltage_0th), 2) AS phase_c_voltage_0th,
				      ROUND(AVG(iv.phase_c_voltage_1st), 2) AS phase_c_voltage_1st,
				      ROUND(AVG(iv.phase_c_voltage_2nd), 2) AS phase_c_voltage_2nd,
				      ROUND(AVG(iv.phase_c_voltage_3rd), 2) AS phase_c_voltage_3rd,
				      ROUND(AVG(iv.angle_phase_a_current), 2) AS angle_phase_a_current,
				      ROUND(AVG(iv.angle_phase_b_current), 2) AS angle_phase_b_current,
				      ROUND(AVG(iv.angle_phase_c_current), 2) AS angle_phase_c_current,
				      ROUND(AVG(iv.angle_volts_a_b), 2) AS angle_volts_a_b,
				      ROUND(AVG(iv.angle_volts_b_c), 2) AS angle_volts_b_c,
				      ROUND(AVG(iv.angle_volts_c_a), 2) AS angle_volts_c_a,
				    </when>
				    
				    <when test="datatablename == 'model_ivt_solaron_ext'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.common_mode), 2) AS common_mode,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				      ROUND(AVG(iv.ac_current), 2) AS ac_current,
				    </when>
				    
				    <when test="datatablename == 'model_veris_industries_e51c2_power_meter'">
				      ROUND(AVG(iv.AccumulatedRealEnergyNet), 2) AS AccumulatedRealEnergyNet,
				      ROUND(AVG(iv.RealEnergyQuadrants14Import), 2) AS RealEnergyQuadrants14Import,
				      ROUND(AVG(iv.RealEnergyQuadrants23Export), 2) AS RealEnergyQuadrants23Export,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant1), 2) AS ReactiveEnergyQuadrant1,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant2), 2) AS ReactiveEnergyQuadrant2,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant3), 2) AS ReactiveEnergyQuadrant3,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant4), 2) AS ReactiveEnergyQuadrant4,
				      ROUND(AVG(iv.ApparentEnergyNet), 2) AS ApparentEnergyNet,
				      ROUND(AVG(iv.ApparentEnergyQuadrants14), 2) AS ApparentEnergyQuadrants14,
				      ROUND(AVG(iv.ApparentEnergyQuadrants23), 2) AS ApparentEnergyQuadrants23,
				      ROUND(AVG(iv.TotalNetInstantaneousRealPower), 2) AS TotalNetInstantaneousRealPower,
				      ROUND(AVG(iv.TotalNetInstantaneousReactivePower), 2) AS TotalNetInstantaneousReactivePower,
				      ROUND(AVG(iv.TotalNetInstantaneousApparentPower), 2) AS TotalNetInstantaneousApparentPower,
				      ROUND(AVG(iv.TotalPowerFactor), 2) AS TotalPowerFactor,
				      ROUND(AVG(iv.VoltageLL3pAve), 2) AS VoltageLL3pAve,
				      ROUND(AVG(iv.VoltageLN3pAve), 2) AS VoltageLN3pAve,
				      ROUND(AVG(iv.Current3pAve), 2) AS Current3pAve,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.TotalRealPowerPresentDemand), 2) AS TotalRealPowerPresentDemand,
				      ROUND(AVG(iv.TotalReactivePowerPresentDemand), 2) AS TotalReactivePowerPresentDemand,
				      ROUND(AVG(iv.TotalApparentPowerPresentDemand), 2) AS TotalApparentPowerPresentDemand,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandImport), 2) AS TotalRealPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandImport), 2) AS TotalReactivePowerMaxDemandImport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandImport), 2) AS TotalApparentPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandExport), 2) AS TotalRealPowerMaxDemandExport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandExport), 2) AS TotalReactivePowerMaxDemandExport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandExport), 2) AS TotalApparentPowerMaxDemandExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAImport), 2) AS AccumulatedRealEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBImport), 2) AS AccumulatedRealEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCImport), 2) AS AccumulatedRealEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAExport), 2) AS AccumulatedRealEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBExport), 2) AS AccumulatedRealEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCExport), 2) AS AccumulatedRealEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAImport), 2) AS AccumulatedApparentEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBImport), 2) AS AccumulatedApparentEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCImport), 2) AS AccumulatedApparentEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAExport), 2) AS AccumulatedApparentEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBExport), 2) AS AccumulatedApparentEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCExport), 2) AS AccumulatedApparentEnergyPhaseCExport,
				      ROUND(AVG(iv.RealPowerPhaseA), 2) AS RealPowerPhaseA,
				      ROUND(AVG(iv.RealPowerPhaseB), 2) AS RealPowerPhaseB,
				      ROUND(AVG(iv.RealPowerPhaseC), 2) AS RealPowerPhaseC,
				      ROUND(AVG(iv.ReactivePowerPhaseA), 2) AS ReactivePowerPhaseA,
				      ROUND(AVG(iv.ReactivePowerPhaseB), 2) AS ReactivePowerPhaseB,
				      ROUND(AVG(iv.ReactivePowerPhaseC), 2) AS ReactivePowerPhaseC,
				      ROUND(AVG(iv.ApparentPowerPhaseA), 2) AS ApparentPowerPhaseA,
				      ROUND(AVG(iv.ApparentPowerPhaseB), 2) AS ApparentPowerPhaseB,
				      ROUND(AVG(iv.ApparentPowerPhaseC), 2) AS ApparentPowerPhaseC,
				      ROUND(AVG(iv.PowerFactorPhaseA), 2) AS PowerFactorPhaseA,
				      ROUND(AVG(iv.PowerFactorPhaseB), 2) AS PowerFactorPhaseB,
				      ROUND(AVG(iv.PowerFactorPhaseC), 2) AS PowerFactorPhaseC,
				      ROUND(AVG(iv.VoltagePhaseAB), 2) AS VoltagePhaseAB,
				      ROUND(AVG(iv.VoltagePhaseBC), 2) AS VoltagePhaseBC,
				      ROUND(AVG(iv.VoltagePhaseAC), 2) AS VoltagePhaseAC,
				      ROUND(AVG(iv.VoltagePhaseAN), 2) AS VoltagePhaseAN,
				      ROUND(AVG(iv.VoltagePhaseBN), 2) AS VoltagePhaseBN,
				      ROUND(AVG(iv.VoltagePhaseCN), 2) AS VoltagePhaseCN,
				      ROUND(AVG(iv.CurrentPhaseA), 2) AS CurrentPhaseA,
				      ROUND(AVG(iv.CurrentPhaseB), 2) AS CurrentPhaseB,
				      ROUND(AVG(iv.CurrentPhaseC), 2) AS CurrentPhaseC,
				    </when>
				    
				    
				    <when test="datatablename == 'model_imtsolar_class8000'">
				      ROUND(AVG(iv.irradiance * 0.1), 2) AS irradiance,
				      ROUND(AVG(iv.tcell), 2) AS tcell,
				    </when>
				    
				    
				    <when test="datatablename == 'model_pvp_inverter'">
				      ROUND(AVG(iv.total_kwh_delivered), 2) AS total_kwh_delivered,
				      ROUND(AVG(iv.volts_a_l_n), 2) AS volts_a_l_n,
				      ROUND(AVG(iv.volts_b_l_n), 2) AS volts_b_l_n,
				      ROUND(AVG(iv.volts_c_l_n), 2) AS volts_c_l_n,
				      ROUND(AVG(iv.current_a), 2) AS current_a,
				      ROUND(AVG(iv.current_b), 2) AS current_b,
				      ROUND(AVG(iv.current_c), 2) AS current_c,
				      ROUND(AVG(iv.dc_output_voltage), 2) AS dc_output_voltage,
				      ROUND(AVG(iv.dc_output_current), 2) AS dc_output_current,
				      ROUND(AVG(iv.line_frenquency), 2) AS line_frenquency,
				      ROUND(AVG(iv.line_kw), 2) AS line_kw,
				      ROUND(COUNT(iv.inverter_fault_word0), 2) AS inverter_fault_word0,
				      ROUND(COUNT(iv.inverter_fault_word1), 2) AS inverter_fault_word1,
				      ROUND(COUNT(iv.inverter_fault_word2), 2) AS inverter_fault_word2,
				      
				    </when>
				    
				    <when test="datatablename == 'model_advanced_energy_solaron'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.ambient_temperature), 2) AS ambient_temperature,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				    </when>
				    
				    
				    <when test="datatablename == 'model_chint_solectria_inverter_class9725'">
				      ROUND(AVG(iv.PowerOnOff), 2) AS PowerOnOff,
				      ROUND(AVG(iv.PActiveSet), 2) AS PActiveSet,
				      ROUND(AVG(iv.PFactorSet), 2) AS PFactorSet,
				      ROUND(AVG(iv.PReactiveSet), 2) AS PReactiveSet,
				      ROUND(AVG(iv.GridVMax), 2) AS GridVMax,
				      ROUND(AVG(iv.GridVmaxTripT), 2) AS GridVmaxTripT,
				      ROUND(AVG(iv.GridVMin), 2) AS GridVMin,
				      ROUND(AVG(iv.GridVminTripT), 2) AS GridVminTripT,
				      ROUND(AVG(iv.GridFMax), 2) AS GridFMax,
				      ROUND(AVG(iv.GridFMin), 2) AS GridFMin,
				      ROUND(AVG(iv.GridFTripT), 2) AS GridFTripT,
				      ROUND(AVG(iv.ActivePower), 2) AS ActivePower,
				      ROUND(AVG(iv.PowerFactor), 2) AS PowerFactor,
				      ROUND(AVG(iv.Risomin), 2) AS Risomin,
				      ROUND(AVG(iv.PVStartVol), 2) AS PVStartVol,
				      ROUND(AVG(iv.DCIMax), 2) AS DCIMax,
				      ROUND(AVG(iv.TambientMax), 2) AS TambientMax,
				      ROUND(AVG(iv.TmoduleMax), 2) AS TmoduleMax,
				      ROUND(AVG(iv.OffsetDiffMax), 2) AS OffsetDiffMax,
				      ROUND(AVG(iv.GridVolUnbalance), 2) AS GridVolUnbalance,
				      ROUND(AVG(iv.SoftPowerStep), 2) AS SoftPowerStep,
				      ROUND(AVG(iv.TotalEnergyToEnergy), 2) AS TotalEnergyToEnergy,
				      ROUND(AVG(iv.TotalEnergyToday), 2) AS TotalEnergyToday,
				      ROUND(AVG(iv.InverterEfficiency), 2) AS InverterEfficiency,
				      ROUND(AVG(iv.PowerFactor1), 2) AS PowerFactor1,
				      ROUND(AVG(iv.MaxActivePowerToday), 2) AS MaxActivePowerToday,
				      ROUND(AVG(iv.RunTimeToGrid), 2) AS RunTimeToGrid,
				      ROUND(AVG(iv.AC_ActivePower), 2) AS AC_ActivePower,
				      ROUND(AVG(iv.AC_ApparentPower), 2) AS AC_ApparentPower,
				      ROUND(AVG(iv.GridVoltageUab), 2) AS GridVoltageUab,
				      ROUND(AVG(iv.GridVoltageUbc), 2) AS GridVoltageUbc,
				      ROUND(AVG(iv.GridVoltageUca), 2) AS GridVoltageUca,
				      ROUND(AVG(iv.GridA_PhaseCurrent), 2) AS GridA_PhaseCurrent,
				      ROUND(AVG(iv.GridB_PhaseCurrent), 2) AS GridB_PhaseCurrent,
				      ROUND(AVG(iv.GridC_PhaseCurrent), 2) AS GridC_PhaseCurrent,
				      ROUND(AVG(iv.PV1_Voltage), 2) AS PV1_Voltage,
				      ROUND(AVG(iv.PV1_Current), 2) AS PV1_Current,
				      ROUND(AVG(iv.PV2_Voltage), 2) AS PV2_Voltage,
				      ROUND(AVG(iv.PV2_Current), 2) AS PV2_Current,
				      ROUND(AVG(iv.PV3_Voltage), 2) AS PV3_Voltage,
				      ROUND(AVG(iv.PV3_Current), 2) AS PV3_Current,
				      ROUND(AVG(iv.Grid_Frequency), 2) AS Grid_Frequency,
				      ROUND(AVG(iv.ModuleTemp), 2) AS ModuleTemp,
				      ROUND(AVG(iv.InternalTemp), 2) AS InternalTemp,
				      ROUND(AVG(iv.TransformerTemp), 2) AS TransformerTemp,
				      ROUND(COUNT(iv.PermanentFaultCode), 2) AS PermanentFaultCode,
				      ROUND(COUNT(iv.WarnCode), 2) AS WarnCode,
				      ROUND(COUNT(iv.FaultCode0), 2) AS FaultCode0,
				      ROUND(COUNT(iv.FaultCode1), 2) AS FaultCode1,
				      ROUND(COUNT(iv.FaultCode2), 2) AS FaultCode2,
				    </when>
				    
				    <when test="datatablename == 'model_elkor_wattson_pv_meter'">
				      ROUND(AVG(iv.TotalEnergyConsumption), 2) AS TotalEnergyConsumption,
				      ROUND(AVG(iv.TotalRealPower), 2) AS TotalRealPower,
				      ROUND(AVG(iv.TotalReactivePower), 2) AS TotalReactivePower,
				      ROUND(AVG(iv.TotalApparentPower), 2) AS TotalApparentPower,
				      ROUND(AVG(iv.AverageVoltageLN), 2) AS AverageVoltageLN,
				      ROUND(AVG(iv.AverageVoltageLL), 2) AS AverageVoltageLL,
				      ROUND(AVG(iv.AverageCurrent), 2) AS AverageCurrent,
				      ROUND(AVG(iv.TotalSystemPowerFactor), 2) AS TotalSystemPowerFactor,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.SlidingWindowRealPowerDemand), 2) AS SlidingWindowRealPowerDemand,
				      ROUND(AVG(iv.VoltageAN), 2) AS VoltageAN,
				      ROUND(AVG(iv.VoltageBN), 2) AS VoltageBN,
				      ROUND(AVG(iv.VoltageCN), 2) AS VoltageCN,
				      ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				      ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				      ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				      ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				      ROUND(COUNT(iv.CurrentB), 2) AS CurrentB,
				      ROUND(COUNT(iv.CurrentC), 2) AS CurrentC,
				      ROUND(COUNT(iv.RealPowerA), 2) AS RealPowerA,
				      ROUND(COUNT(iv.RealPowerB), 2) AS RealPowerB,
				      ROUND(COUNT(iv.RealPowerC), 2) AS RealPowerC,
				      ROUND(COUNT(iv.ReactivePowerA), 2) AS ReactivePowerA,
				      
				      ROUND(COUNT(iv.ReactivePowerB), 2) AS ReactivePowerB,
				      ROUND(COUNT(iv.ReactivePowerC), 2) AS ReactivePowerC,
				      ROUND(COUNT(iv.ApparentPowerA), 2) AS ApparentPowerA,
				      ROUND(COUNT(iv.ApparentPowerB), 2) AS ApparentPowerB,
				      ROUND(COUNT(iv.ApparentPowerC), 2) AS ApparentPowerC,
				      ROUND(COUNT(iv.PowerFactorA), 2) AS PowerFactorA,
				      ROUND(COUNT(iv.PowerFactorB), 2) AS PowerFactorB,
				      ROUND(COUNT(iv.PowerFactorC), 2) AS PowerFactorC,
				    </when>
				    
				    <when test="datatablename == 'model_satcon_pvs357_inverter'">
				      ROUND(AVG(iv.Software_Identification_Number), 2) AS Software_Identification_Number,
				      ROUND(AVG(iv.Fault_Word1), 2) AS Fault_Word1,
				      ROUND(AVG(iv.Fault_Word2), 2) AS Fault_Word2,
				      ROUND(AVG(iv.Fault_Word3), 2) AS Fault_Word3,
				      ROUND(AVG(iv.Fault_Word4), 2) AS Fault_Word4,
				      ROUND(AVG(iv.Fault_Word5), 2) AS Fault_Word5,
				      ROUND(AVG(iv.Fault_Word6), 2) AS Fault_Word6,
				      ROUND(COUNT(iv.Fault_Word7), 2) AS Fault_Word7,
				      ROUND(AVG(iv.Number_of_Faults), 2) AS Number_of_Faults,
				      ROUND(AVG(iv.Program_Checksum), 2) AS Program_Checksum,
				      ROUND(AVG(iv.DC_Input_Volts), 2) AS DC_Input_Volts,
				      ROUND(AVG(iv.DC_Link_Volts), 2) AS DC_Link_Volts,
				      ROUND(AVG(iv.DC_Link_Amps), 2) AS DC_Link_Amps,
				      ROUND(AVG(iv.DC_Ground_Current), 2) AS DC_Ground_Current,
				      ROUND(AVG(iv.Line_Amps_A), 2) AS Line_Amps_A,
				      ROUND(AVG(iv.Line_Amps_B), 2) AS Line_Amps_B,
				      ROUND(AVG(iv.Line_Amps_C), 2) AS Line_Amps_C,
				      ROUND(AVG(iv.Line_Amps_Average), 2) AS Line_Amps_Average,
				      ROUND(AVG(iv.Neutral_Current), 2) AS Neutral_Current,
				      ROUND(AVG(iv.Line_Volts_A), 2) AS Line_Volts_A,
				      ROUND(AVG(iv.Line_Volts_B), 2) AS Line_Volts_B,
				      ROUND(AVG(iv.Line_Volts_C), 2) AS Line_Volts_C,
				      ROUND(AVG(iv.Line_Volts_Average), 2) AS Line_Volts_Average,
				      ROUND(AVG(iv.Line_Voltage_Unbalance), 2) AS Line_Voltage_Unbalance,
				      ROUND(AVG(iv.Line_Current_Unbalance), 2) AS Line_Current_Unbalance,
				      ROUND(AVG(iv.Input_kW), 2) AS Input_kW,
				      ROUND(AVG(iv.Output_kw), 2) AS Output_kw,
				      ROUND(AVG(iv.Output_kvar), 2) AS Output_kvar,
				      ROUND(AVG(iv.Output_kva), 2) AS Output_kva,
				      ROUND(AVG(iv.Power_Factor), 2) AS Power_Factor,
				      ROUND(AVG(iv.Ground_Impedance), 2) AS Ground_Impedance,
				      ROUND(AVG(iv.String_Amps1), 2) AS String_Amps1,
				      ROUND(AVG(iv.String_Amps2), 2) AS String_Amps2,
				      ROUND(AVG(iv.String_Amps3), 2) AS String_Amps3,
				      ROUND(AVG(iv.String_Amps4), 2) AS String_Amps4,
				      ROUND(AVG(iv.String_Amps5), 2) AS String_Amps5,
				      ROUND(AVG(iv.String_Amps6), 2) AS String_Amps6,
				      ROUND(AVG(iv.String_Amps7), 2) AS String_Amps7,
				      ROUND(AVG(iv.String_Amps8), 2) AS String_Amps8,
				      ROUND(AVG(iv.String_Amps9), 2) AS String_Amps9,
				      ROUND(AVG(iv.String_Amps10), 2) AS String_Amps10,
				      ROUND(AVG(iv.String_Amps11), 2) AS String_Amps11,
				      ROUND(AVG(iv.String_Amps12), 2) AS String_Amps12,
				      ROUND(AVG(iv.String_Amps13), 2) AS String_Amps13,
				      ROUND(AVG(iv.String_Amps14), 2) AS String_Amps14,
				      ROUND(AVG(iv.String_Amps15), 2) AS String_Amps15,
				      ROUND(AVG(iv.String_Amps16), 2) AS String_Amps16,
				      ROUND(AVG(iv.String_Amps17), 2) AS String_Amps17,
				      ROUND(AVG(iv.String_Amps18), 2) AS String_Amps18,
				      ROUND(AVG(iv.String_Amps19), 2) AS String_Amps19,
				      ROUND(AVG(iv.String_Amps20), 2) AS String_Amps20,
				      ROUND(AVG(iv.String_Amps21), 2) AS String_Amps21,
				      ROUND(AVG(iv.String_Amps22), 2) AS String_Amps22,
				      ROUND(AVG(iv.String_Amps23), 2) AS String_Amps23,
				      ROUND(AVG(iv.String_Amps24), 2) AS String_Amps24,
				      ROUND(AVG(iv.String_Amps25), 2) AS String_Amps25,
				      ROUND(AVG(iv.String_Amps26), 2) AS String_Amps26,
				      ROUND(AVG(iv.String_Amps27), 2) AS String_Amps27,
				      ROUND(AVG(iv.String_Amps28), 2) AS String_Amps28,
				      ROUND(AVG(iv.String_Amps29), 2) AS String_Amps29,
				      ROUND(AVG(iv.String_Amps30), 2) AS String_Amps30,
				      ROUND(AVG(iv.String_Amps31), 2) AS String_Amps31,
				      ROUND(AVG(iv.String_Amps32), 2) AS String_Amps32,
				      
				      
				      ROUND(AVG(iv.String_Amps_Average), 2) AS String_Amps_Average,
				      ROUND(AVG(iv.String_kwh1), 2) AS String_kwh1,
				      ROUND(AVG(iv.String_kwh2), 2) AS String_kwh2,
				      ROUND(AVG(iv.String_kwh3), 2) AS String_kwh3,
				      ROUND(AVG(iv.String_kwh4), 2) AS String_kwh4,
				      ROUND(AVG(iv.String_kwh5), 2) AS String_kwh5,
				      ROUND(AVG(iv.String_kwh6), 2) AS String_kwh6,
				      ROUND(AVG(iv.String_kwh7), 2) AS String_kwh7,
				      ROUND(AVG(iv.String_kwh8), 2) AS String_kwh8,
				      ROUND(AVG(iv.String_kwh9), 2) AS String_kwh9,
				      ROUND(AVG(iv.String_kwh10), 2) AS String_kwh10,
				      ROUND(AVG(iv.String_kwh11), 2) AS String_kwh11,
				      ROUND(AVG(iv.String_kwh12), 2) AS String_kwh12,
				      ROUND(AVG(iv.String_kwh13), 2) AS String_kwh13,
				      ROUND(AVG(iv.String_kwh14), 2) AS String_kwh14,
				      ROUND(AVG(iv.String_kwh15), 2) AS String_kwh15,
				      ROUND(AVG(iv.String_kwh16), 2) AS String_kwh16,
				      ROUND(AVG(iv.String_kwh17), 2) AS String_kwh17,
				      ROUND(AVG(iv.String_kwh18), 2) AS String_kwh18,
				      ROUND(AVG(iv.String_kwh19), 2) AS String_kwh19,
				      ROUND(AVG(iv.String_kwh20), 2) AS String_kwh20,
				      ROUND(AVG(iv.String_kwh21), 2) AS String_kwh21,
				      ROUND(AVG(iv.String_kwh22), 2) AS String_kwh22,
				      ROUND(AVG(iv.String_kwh23), 2) AS String_kwh23,
				      ROUND(AVG(iv.String_kwh24), 2) AS String_kwh24,
				      ROUND(AVG(iv.String_kwh25), 2) AS String_kwh25,
				      ROUND(AVG(iv.String_kwh26), 2) AS String_kwh26,
				      ROUND(AVG(iv.String_kwh27), 2) AS String_kwh27,
				      ROUND(AVG(iv.String_kwh28), 2) AS String_kwh28,
				      ROUND(AVG(iv.String_kwh29), 2) AS String_kwh29,
				      ROUND(AVG(iv.String_kwh30), 2) AS String_kwh30,
				      ROUND(AVG(iv.String_kwh31), 2) AS String_kwh31,
				      ROUND(AVG(iv.String_kwh32), 2) AS String_kwh32,
				      
				      ROUND(AVG(iv.String_kwh_Average), 2) AS String_kwh_Average,
				      ROUND(AVG(iv.Total_kwh), 2) AS Total_kwh,
				      ROUND(AVG(iv.Total_mwh), 2) AS Total_mwh,
				      ROUND(AVG(iv.kwh_Today), 2) AS kwh_Today,
				      ROUND(AVG(iv.kwh_Yesterday), 2) AS kwh_Yesterday,
				      ROUND(AVG(iv.Total_kwh7_days), 2) AS Total_kwh7_days,
				      ROUND(AVG(iv.Total_kwh30_days), 2) AS Total_kwh30_days,
				      ROUND(AVG(iv.Average_kwh7_days), 2) AS Average_kwh7_days,
				      ROUND(AVG(iv.Average_kwh30_Days), 2) AS Average_kwh30_Days,
				      ROUND(AVG(iv.Average_Line_Frequency), 2) AS Average_Line_Frequency,
				      ROUND(AVG(iv.Average_Line_Frequency_Error), 2) AS Average_Line_Frequency_Error,
				      ROUND(AVG(iv.FPGA_Identification_Number), 2) AS FPGA_Identification_Number,
				      ROUND(AVG(iv.DC_Input_Voltage_Timer), 2) AS DC_Input_Voltage_Timer,
				      ROUND(AVG(iv.AC_Line_Voltage_Timer), 2) AS AC_Line_Voltage_Timer,
				      ROUND(AVG(iv.Operating_State), 2) AS Operating_State,
				      ROUND(AVG(iv.Internal_Air_Temperature), 2) AS Internal_Air_Temperature,
				      ROUND(AVG(iv.Inverter_Air_Temperature), 2) AS Inverter_Air_Temperature,
				      ROUND(AVG(iv.Heatsink_Temperature1), 2) AS Heatsink_Temperature1,
				      ROUND(AVG(iv.Heatsink_Temperature2), 2) AS Heatsink_Temperature2,
				      ROUND(AVG(iv.Heatsink_Temperature3), 2) AS Heatsink_Temperature3,
				      ROUND(AVG(iv.Heatsink_Temperature4), 2) AS Heatsink_Temperature4,
				      ROUND(AVG(iv.Heatsink_Temperature5), 2) AS Heatsink_Temperature5,
				      ROUND(AVG(iv.Heatsink_Temperature6), 2) AS Heatsink_Temperature6,
				      ROUND(AVG(iv.Heatsink_Maximum_Temparature1), 2) AS Heatsink_Maximum_Temparature1,
				      ROUND(AVG(iv.Fan_Speed_Command1), 2) AS Fan_Speed_Command1,
				      ROUND(AVG(iv.Heatsink_Maximum_Temperature2), 2) AS Heatsink_Maximum_Temperature2,
				      ROUND(AVG(iv.Fan_Speed_Command2), 2) AS Fan_Speed_Command2,
				      ROUND(AVG(iv.Number_of_Temperature_Feedbacks), 2) AS Number_of_Temperature_Feedbacks,
				      ROUND(AVG(iv.Serial_number_word1), 2) AS Serial_number_word1,
				      ROUND(AVG(iv.Serial_number_word2), 2) AS Serial_number_word2,
				      ROUND(AVG(iv.Serial_number_word3), 2) AS Serial_number_word3,
				      ROUND(AVG(iv.Serial_number_word4), 2) AS Serial_number_word4,
				      ROUND(AVG(iv.Number_of_Strings), 2) AS Number_of_Strings,
				      
				    </when>
				    
				    
				    <when test="datatablename == 'model_w_kipp_zonen_rt1'">
				    	ROUND(AVG(iv.DeviceType), 2) AS DeviceType,
				    	ROUND(AVG(iv.DataModelVersion), 2) AS DataModelVersion,
				    	ROUND(AVG(iv.OperationalMode), 2) AS OperationalMode,
				    	ROUND(AVG(iv.StatusFlags), 2) AS StatusFlags,
				    	ROUND(AVG(iv.SunPOATempComp), 2) AS SunPOATempComp,
				    	ROUND(AVG(iv.PanelTemperature), 2) AS PanelTemperature,
				    	ROUND(AVG(iv.ExtPowerSensor), 2) AS ExtPowerSensor,
				    	ROUND(AVG(iv.BatchNumber), 2) AS BatchNumber,
				    	ROUND(AVG(iv.SerialNumber), 2) AS SerialNumber,
				    	ROUND(AVG(iv.CalibrationDateYYMMDD), 2) AS CalibrationDateYYMMDD,
				    </when>
				    
				    
				    <when test="datatablename == 'model_elkor_production_meter'">
				    	ROUND(AVG(iv.ActivePowerTotal), 2) AS ActivePowerTotal,
				    	ROUND(AVG(iv.ReactivePowerTotal), 2) AS ReactivePowerTotal,
				    	ROUND(AVG(iv.ApparentPowerTotal), 2) AS ApparentPowerTotal,
				    	ROUND(AVG(iv.VoltageAverage), 2) AS VoltageAverage,
				    	ROUND(AVG(iv.VoltageLLAverage), 2) AS VoltageLLAverage,
				    	ROUND(AVG(iv.CurrentAverage), 2) AS CurrentAverage,
				    	ROUND(AVG(iv.SystemPowerFactor), 2) AS SystemPowerFactor,
				    	ROUND(AVG(iv.SystemFrequency), 2) AS SystemFrequency,
				    	ROUND(AVG(iv.VoltageAverageAngle), 2) AS VoltageAverageAngle,
				    	ROUND(AVG(iv.SystemQuadrant), 2) AS SystemQuadrant,
				    	ROUND(AVG(iv.VoltageA), 2) AS VoltageA,
				    	ROUND(AVG(iv.VoltageB), 2) AS VoltageB,
				    	ROUND(AVG(iv.VoltageC), 2) AS VoltageC,
				    	ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				    	ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				    	ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				    	ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				    	ROUND(AVG(iv.CurrentB), 2) AS CurrentB,
				    	ROUND(AVG(iv.CurrentC), 2) AS CurrentC,
				    	ROUND(AVG(iv.ActivePowerA), 2) AS ActivePowerA,
				    	ROUND(AVG(iv.ActivePowerB), 2) AS ActivePowerB,
				    	ROUND(AVG(iv.ActivePowerC), 2) AS ActivePowerC,
				    	ROUND(AVG(iv.ReactivePowerA), 2) AS ReactivePowerA,
				    	ROUND(AVG(iv.ReactivePowerB), 2) AS ReactivePowerB,
				    	ROUND(AVG(iv.ReactivePowerC), 2) AS ReactivePowerC,
				    	ROUND(AVG(iv.ApparentPowerA), 2) AS ApparentPowerA,
				    	ROUND(AVG(iv.ApparentPowerB), 2) AS ApparentPowerB,
				    	ROUND(AVG(iv.ApparentPowerC), 2) AS ApparentPowerC,
				    	ROUND(AVG(iv.PowerFactorA), 2) AS PowerFactorA,
				    	ROUND(AVG(iv.PowerFactorB), 2) AS PowerFactorB,
				    	ROUND(AVG(iv.PowerFactorC), 2) AS PowerFactorC,
				    	ROUND(AVG(iv.VoltageAngleAB), 2) AS VoltageAngleAB,
				    	ROUND(AVG(iv.VoltageAngleBC), 2) AS VoltageAngleBC,
				    	ROUND(AVG(iv.VoltageAngleCA), 2) AS VoltageAngleCA,
				    	ROUND(AVG(iv.QuadrantA), 2) AS QuadrantA,
				    	ROUND(AVG(iv.QuadrantB), 2) AS QuadrantB,
				    	ROUND(AVG(iv.QuadrantC), 2) AS QuadrantC,
				    	ROUND(AVG(iv.SlidingWindowPower), 2) AS SlidingWindowPower,
				    	ROUND(AVG(iv.NetTotalEnergy), 2) AS NetTotalEnergy,
				    	ROUND(AVG(iv.TotalNetApparentEnergy), 2) AS TotalNetApparentEnergy,
				    	ROUND(AVG(iv.TotalImportEnergy), 2) AS TotalImportEnergy,
				    	ROUND(AVG(iv.TotalExportEnergy), 2) AS TotalExportEnergy,
				    	ROUND(AVG(iv.TotalImportApparentEnergy), 2) AS TotalImportApparentEnergy,
				    	ROUND(AVG(iv.TotalExportApparentEnergy), 2) AS TotalExportApparentEnergy,
				    	ROUND(AVG(iv.Q1TotalReactiveEnergy), 2) AS Q1TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q2TotalReactiveEnergy), 2) AS Q2TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q3TotalReactiveEnergy), 2) AS Q3TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q4TotalReactiveEnergy), 2) AS Q4TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q1Q2TotalInductiveReactiveEnergy), 2) AS Q1Q2TotalInductiveReactiveEnergy,
				    	ROUND(AVG(iv.Q3Q4TotalCapacitiveReactiveEnergy), 2) AS Q3Q4TotalCapacitiveReactiveEnergy,
				    	ROUND(AVG(iv.NetEnergyA), 2) AS NetEnergyA,
				    	ROUND(AVG(iv.NetEnergyB), 2) AS NetEnergyB,
				    	ROUND(AVG(iv.NetEnergyC), 2) AS NetEnergyC,
				    	ROUND(AVG(iv.NetApparentEnergyA), 2) AS NetApparentEnergyA,
				    	ROUND(AVG(iv.NetApparentEnergyB), 2) AS NetApparentEnergyB,
				    	ROUND(AVG(iv.NetApparentEnergyC), 2) AS NetApparentEnergyC,
				    	ROUND(AVG(iv.ImportEnergyA), 2) AS ImportEnergyA,
				    	ROUND(AVG(iv.ImportEnergyB), 2) AS ImportEnergyB,
				    	ROUND(AVG(iv.ImportEnergyC), 2) AS ImportEnergyC,
				    	ROUND(AVG(iv.ExportEnergyA), 2) AS ExportEnergyA,
				    	ROUND(AVG(iv.ExportEnergyB), 2) AS ExportEnergyB,
				    	ROUND(AVG(iv.ExportEnergyC), 2) AS ExportEnergyC,
				    	ROUND(AVG(iv.ImportApparentEnergyA), 2) AS ImportApparentEnergyA,
				    	ROUND(AVG(iv.ImportApparentEnergyB), 2) AS ImportApparentEnergyB,
				    	ROUND(AVG(iv.ImportApparentEnergyC), 2) AS ImportApparentEnergyC,
				    	ROUND(AVG(iv.ExportApparentEnergyA), 2) AS ExportApparentEnergyA,
				    	ROUND(AVG(iv.ExportApparentEnergyB), 2) AS ExportApparentEnergyB,
				    	ROUND(AVG(iv.ExportApparentEnergyC), 2) AS ExportApparentEnergyC,
				    	ROUND(AVG(iv.Q1ReactiveEnergyA), 2) AS Q1ReactiveEnergyA,
				    	ROUND(AVG(iv.Q1ReactiveEnergyB), 2) AS Q1ReactiveEnergyB,
				    	ROUND(AVG(iv.Q1ReactiveEnergyC), 2) AS Q1ReactiveEnergyC,
				    	ROUND(AVG(iv.Q2ReactiveEnergyA), 2) AS Q2ReactiveEnergyA,
				    	ROUND(AVG(iv.Q2ReactiveEnergyB), 2) AS Q2ReactiveEnergyB,
				    	ROUND(AVG(iv.Q2ReactiveEnergyC), 2) AS Q2ReactiveEnergyC,
				    	ROUND(AVG(iv.Q3ReactiveEnergyA), 2) AS Q3ReactiveEnergyA,
				    	ROUND(AVG(iv.Q3ReactiveEnergyB), 2) AS Q3ReactiveEnergyB,
				    	ROUND(AVG(iv.Q3ReactiveEnergyC), 2) AS Q3ReactiveEnergyC,
				    	ROUND(AVG(iv.Q4ReactiveEnergyA), 2) AS Q4ReactiveEnergyA,
				    	ROUND(AVG(iv.Q4ReactiveEnergyB), 2) AS Q4ReactiveEnergyB,
				    	ROUND(AVG(iv.Q4ReactiveEnergyC), 2) AS Q4ReactiveEnergyC,
				    </when>
				    
				    
			    </choose>
				
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%d. %b' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%m-%d-%Y' ) AS full_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%m-%d-%Y' ) AS timekey
			FROM
				site si
				LEFT JOIN site_customer_map scm ON scm.id_site = si.id
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN ${datatablename} iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id_site}
				AND scm.id_customer = #{id_customer}
				AND d.id = #{id_device} 
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} 
				AND #{end_date}
				GROUP BY timekey
        </if>
        
        <if test="filterBy == '12_month'">
			SELECT
				<choose>
					
					<when test="datatablename == 'model_lufft_class8020'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.IrradianceActual), 2) AS IrradianceActual,
				      ROUND(COUNT(iv.IrradianceMin), 2) AS IrradianceMin,
				      ROUND(COUNT(iv.IrradianceMax), 2) AS IrradianceMax,
				      ROUND(COUNT(iv.IrradianceAvg), 2) AS IrradianceAvg,
				      ROUND(COUNT(iv.AirTemperatureActual), 2) AS AirTemperatureActual,
				      ROUND(COUNT(iv.AirTemperatureMin), 2) AS AirTemperatureMin,
				      ROUND(COUNT(iv.AirTemperatureMax), 2) AS AirTemperatureMax,
				      ROUND(COUNT(iv.AirTemperatureAvg), 2) AS AirTemperatureAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationQuantityAbsolute), 2) AS PrecipitationQuantityAbsolute,
				      ROUND(COUNT(iv.PrecipitationQuantityDifferential), 2) AS PrecipitationQuantityDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AbsoluteHumidityActual), 2) AS AbsoluteHumidityActual,
				      ROUND(COUNT(iv.AbsoluteHumidityMin), 2) AS AbsoluteHumidityMin,
				      ROUND(COUNT(iv.AbsoluteHumidityMax), 2) AS AbsoluteHumidityMax,
				      ROUND(COUNT(iv.AbsoluteHumidityAvg), 2) AS AbsoluteHumidityAvg,
				      ROUND(COUNT(iv.MixingRatioActual), 2) AS MixingRatioActual,
				      ROUND(COUNT(iv.MixingRatioMin), 2) AS MixingRatioMin,
				      ROUND(COUNT(iv.MixingRatioMax), 2) AS MixingRatioMax,
				      ROUND(COUNT(iv.MixingRatioAvg), 2) AS MixingRatioAvg,
				      ROUND(COUNT(iv.AbsoluteAirPressureActual), 2) AS AbsoluteAirPressureActual,
				      ROUND(COUNT(iv.AbsoluteAirPressureMin), 2) AS AbsoluteAirPressureMin,
				      ROUND(COUNT(iv.AbsoluteAirPressureMax), 2) AS AbsoluteAirPressureMax,
				      ROUND(COUNT(iv.AbsoluteAirPressureAvg), 2) AS AbsoluteAirPressureAvg,
				      ROUND(COUNT(iv.WindSpeedStandardDeviation), 2) AS WindSpeedStandardDeviation,
				      ROUND(COUNT(iv.WindDirectionStandardDeviation), 2) AS WindDirectionStandardDeviation,
				      ROUND(COUNT(iv.WetBulbTemperature), 2) AS WetBulbTemperature,
				      ROUND(COUNT(iv.SpecificEnthalpy), 2) AS SpecificEnthalpy,
				      ROUND(COUNT(iv.AirDensityActual), 2) AS AirDensityActual,
				      ROUND(COUNT(iv.LeafWetnessActual), 2) AS LeafWetnessActual,
				      ROUND(COUNT(iv.LeafWetnessMin), 2) AS LeafWetnessMin,
				      ROUND(COUNT(iv.LeafWetnessMax), 2) AS LeafWetnessMax,
				      ROUND(COUNT(iv.LeafWetnessAvg), 2) AS LeafWetnessAvg,
				      ROUND(COUNT(iv.LeafWetnessState), 2) AS LeafWetnessState,
				      ROUND(COUNT(iv.ExternalTemperature), 2) AS ExternalTemperature,
				      ROUND(COUNT(iv.WindValueQualityFast), 2) AS WindValueQualityFast,
				    </when>
				    
				    <when test="datatablename == 'model_lufft_ws501_umb_weather'">
				      ROUND(AVG(iv.RelativeHumidityActual), 2) AS RelativeHumidityActual,
				      ROUND(AVG(iv.RelativeHumidityMin), 2) AS RelativeHumidityMin,
				      ROUND(AVG(iv.RelativeHumidityMax), 2) AS RelativeHumidityMax,
				      ROUND(COUNT(iv.RelativeHumidityAvg), 2) AS RelativeHumidityAvg,
				      ROUND(COUNT(iv.RelativeAirPressureActual), 2) AS RelativeAirPressureActual,
				      ROUND(COUNT(iv.RelativeAirPressureMin), 2) AS RelativeAirPressureMin,
				      ROUND(COUNT(iv.RelativeAirPressureMax), 2) AS RelativeAirPressureMax,
				      ROUND(COUNT(iv.RelativeAirPressureAvg), 2) AS RelativeAirPressureAvg,
				      ROUND(COUNT(iv.WindDirectionActual), 2) AS WindDirectionActual,
				      ROUND(COUNT(iv.WindDirectionMin), 2) AS WindDirectionMin,
				      ROUND(COUNT(iv.WindDirectionMax), 2) AS WindDirectionMax,
				      ROUND(COUNT(iv.WindDirectionVct), 2) AS WindDirectionVct,
				      ROUND(COUNT(iv.WindDirectionFast), 2) AS WindDirectionFast,
				      ROUND(COUNT(iv.WindDirectionCompassCorrected), 2) AS WindDirectionCompassCorrected,
				      ROUND(COUNT(iv.Compass), 2) AS Compass,
				      ROUND(COUNT(iv.WindMeasurementQuality), 2) AS WindMeasurementQuality,
				      ROUND(COUNT(iv.PrecipitationType), 2) AS PrecipitationType,
				      ROUND(COUNT(iv.GlobalRadiation), 2) AS GlobalRadiation,
				      ROUND(COUNT(iv.GlobalRadiation2), 2) AS GlobalRadiation2,
				      ROUND(COUNT(iv.GlobalRadiation3), 2) AS GlobalRadiation3,
				      ROUND(COUNT(iv.GlobalRadiation4), 2) AS GlobalRadiation4,
				      ROUND(COUNT(iv.AirTemperatureCActual), 2) AS AirTemperatureCActual,
				      ROUND(COUNT(iv.AirTemperatureCMin), 2) AS AirTemperatureCMin,
				      ROUND(COUNT(iv.AirTemperatureCMax), 2) AS AirTemperatureCMax,
				      ROUND(COUNT(iv.AirTemperatureCAvg), 2) AS AirTemperatureCAvg,
				      ROUND(COUNT(iv.DewPointActual), 2) AS DewPointActual,
				      ROUND(COUNT(iv.DewPointMin), 2) AS DewPointMin,
				      ROUND(COUNT(ivDewPointMax.), 2) AS DewPointMax,
				      ROUND(COUNT(iv.DewPointAvg), 2) AS DewPointAvg,
				      ROUND(COUNT(iv.WindChillTemperature), 2) AS WindChillTemperature,
				      ROUND(COUNT(iv.HeatingTemperatureWind), 2) AS HeatingTemperatureWind,
				      ROUND(COUNT(iv.HeatingTemperatureR2S), 2) AS HeatingTemperatureR2S,
				      ROUND(COUNT(iv.WindSpeedActual), 2) AS WindSpeedActual,
				      ROUND(COUNT(iv.WindSpeedMin), 2) AS WindSpeedMin,
				      ROUND(COUNT(iv.WindSpeedMax), 2) AS WindSpeedMax,
				      ROUND(COUNT(iv.WindSpeedAvg), 2) AS WindSpeedAvg,
				      ROUND(COUNT(iv.WindSpeedVct), 2) AS WindSpeedVct,
				      ROUND(COUNT(iv.WindSpeedFast), 2) AS WindSpeedFast,
				      ROUND(COUNT(iv.PrecipitationAbsolute), 2) AS PrecipitationAbsolute,
				      ROUND(COUNT(iv.PrecipitationDifferential), 2) AS PrecipitationDifferential,
				      ROUND(COUNT(iv.PrecipitationIntensity), 2) AS PrecipitationIntensity,
				      ROUND(COUNT(iv.AirTemperatureFActual), 2) AS AirTemperatureFActual,
				      ROUND(COUNT(iv.AirTemperatureFMin), 2) AS AirTemperatureFMin,
				      ROUND(COUNT(iv.AirTemperatureFMax), 2) AS AirTemperatureFMax,
				      ROUND(COUNT(iv.AirTemperatureFAvg), 2) AS AirTemperatureFAvg,
				      ROUND(COUNT(iv.ExternalTemperatureC), 2) AS ExternalTemperatureC,
				      ROUND(COUNT(iv.ExternalTemperatureF), 2) AS ExternalTemperatureF,
				    </when>
				    
					<when test="datatablename == 'model_abb_trio_class6210'">
				      ROUND(AVG(iv.AuroraType), 2) AS AuroraType,
				      ROUND(AVG(iv.GridType), 2) AS GridType,
				      ROUND(AVG(iv.TransformerType), 2) AS TransformerType,
				      ROUND(COUNT(iv.StatesByte0), 2) AS StatesByte0,
				      ROUND(COUNT(iv.StatesByte1), 2) AS StatesByte1,
				      ROUND(COUNT(iv.StatesByte2), 2) AS StatesByte2,
				      ROUND(COUNT(iv.StatesByte3), 2) AS StatesByte3,
				      ROUND(COUNT(iv.StatesByte4), 2) AS StatesByte4,
				      ROUND(COUNT(iv.TotalEnergy), 2) AS TotalEnergy,
				      ROUND(COUNT(iv.GridVoltage), 2) AS GridVoltage,
				      ROUND(COUNT(iv.GridCurrent), 2) AS GridCurrent,
				      ROUND(COUNT(iv.GridPower), 2) AS GridPower,
				      ROUND(COUNT(iv.Frequency), 2) AS Frequency,
				      ROUND(COUNT(iv.Input1Power), 2) AS Input1Power,
				      ROUND(COUNT(iv.Input1Voltage), 2) AS Input1Voltage,
				      ROUND(COUNT(iv.Input1Current), 2) AS Input1Current,
				      ROUND(COUNT(iv.Input2Power), 2) AS Input2Power,
				      ROUND(COUNT(iv.Input2Voltage), 2) AS Input2Voltage,
				      ROUND(COUNT(iv.Input2Current), 2) AS Input2Current,
				      ROUND(COUNT(iv.InverterTemperature), 2) AS InverterTemperature,
				      ROUND(COUNT(iv.BooseterTemperature), 2) AS BooseterTemperature,
				      ROUND(COUNT(iv.IslolationResistance), 2) AS IslolationResistance,
				    </when>
				    
				    <when test="datatablename == 'model_kippzonen_rt1_class8009'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    <when test="datatablename == 'model_rt1_class30000'">
				      ROUND(AVG(iv.sensor1_data), 2) AS sensor1_data,
				      ROUND(AVG(iv.panel_temperature), 2) AS panel_temperature,
				      ROUND(AVG(iv.external_power_sensor), 2) AS external_power_sensor,
				      ROUND(COUNT(iv.error_code), 2) AS error_code,
				    </when>
				    
				    
				    
				    <when test="datatablename == 'model_shark100'">
				      ROUND(AVG(iv.volts_a_n), 2) AS volts_a_n,
				      ROUND(AVG(iv.volts_b_n), 2) AS volts_b_n,
				      ROUND(AVG(iv.volts_c_n), 2) AS volts_c_n,
				      ROUND(AVG(iv.volts_a_b), 2) AS volts_a_b,
				      ROUND(AVG(iv.volts_c_a), 2) AS volts_c_a,
				      ROUND(AVG(iv.amps_a), 2) AS amps_a,
				      ROUND(AVG(iv.amps_b), 2) AS amps_b,
				      ROUND(AVG(iv.amps_c), 2) AS amps_c,
				      ROUND(AVG(iv.watts_3ph_total), 2) AS watts_3ph_total,
				      ROUND(AVG(iv.vars_3ph_total), 2) AS vars_3ph_total,
				      ROUND(AVG(iv.vas_3ph_total), 2) AS vas_3ph_total,
				      ROUND(AVG(iv.power_factor_3ph_total), 2) AS power_factor_3ph_total,
				      ROUND(AVG(iv.frequency), 2) AS frequency,
				      ROUND(AVG(iv.neutral_current), 2) AS neutral_current,
				      ROUND(AVG(iv.w_hours_received), 2) AS w_hours_received,
				      ROUND(AVG(iv.w_hours_delivered), 2) AS w_hours_delivered,
				      ROUND(AVG(iv.w_hours_net), 2) AS w_hours_net,
				      ROUND(AVG(iv.w_hours_total), 2) AS w_hours_total,
				      ROUND(AVG(iv.var_hours_positive), 2) AS var_hours_positive,
				      ROUND(AVG(iv.var_hours_negative), 2) AS var_hours_negative,
				      ROUND(AVG(iv.var_hours_net), 2) AS var_hours_net,
				      ROUND(AVG(iv.var_hours_total), 2) AS var_hours_total,
				      ROUND(AVG(iv.va_hours_total), 2) AS va_hours_total,
				      ROUND(AVG(iv.amps_a_average), 2) AS amps_a_average,
				      ROUND(AVG(iv.amps_b_average), 2) AS amps_b_average,
				      ROUND(AVG(iv.amps_c_average), 2) AS amps_c_average,
				      ROUND(AVG(iv.positive_watts_3ph_average), 2) AS positive_watts_3ph_average,
				      ROUND(AVG(iv.positive_vars_3ph_average), 2) AS positive_vars_3ph_average,
				      ROUND(AVG(iv.negative_watts_3ph_average), 2) AS negative_watts_3ph_average,
				      ROUND(AVG(iv.negative_vars_3ph_average), 2) AS negative_vars_3ph_average,
				      ROUND(AVG(iv.vas_3ph_average), 2) AS vas_3ph_average,
				      ROUND(AVG(iv.positive_pf_3ph_average), 2) AS positive_pf_3ph_average,
				      ROUND(AVG(iv.negative_pf_3ph_average), 2) AS negative_pf_3ph_average,
				      ROUND(AVG(iv.volts_a_n_min), 2) AS volts_a_n_min,
				      ROUND(AVG(iv.volts_b_n_min), 2) AS volts_b_n_min,
				      ROUND(AVG(iv.volts_c_n_min), 2) AS volts_c_n_min,
				      ROUND(AVG(iv.volts_a_b_min), 2) AS volts_a_b_min,
				      ROUND(AVG(iv.volts_b_c_min), 2) AS volts_b_c_min,
				      ROUND(AVG(iv.volts_c_a_min), 2) AS volts_c_a_min,
				      ROUND(AVG(iv.amps_a_min_avg_demand), 2) AS amps_a_min_avg_demand,
				      ROUND(AVG(iv.amps_b_min_avg_demand), 2) AS amps_b_min_avg_demand,
				      ROUND(AVG(iv.amps_c_min_avg_demand), 2) AS amps_c_min_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_min_avg_demand), 2) AS positive_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_min_avg_demand), 2) AS positive_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_min_avg_demand), 2) AS negative_watts_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_min_avg_demand), 2) AS negative_vars_3ph_min_avg_demand,
				      ROUND(AVG(iv.vas_3ph_min_avg_demand), 2) AS vas_3ph_min_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_min_avg_demand), 2) AS positive_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_min_avg_demand), 2) AS negative_pf_3ph_min_avg_demand,
				      ROUND(AVG(iv.frequency_min), 2) AS frequency_min,
				      ROUND(AVG(iv.volts_a_n_max), 2) AS volts_a_n_max,
				      ROUND(AVG(iv.volts_b_n_max), 2) AS volts_b_n_max,
				      ROUND(AVG(iv.volts_c_n_max), 2) AS volts_c_n_max,
				      ROUND(AVG(iv.volts_a_b_max), 2) AS volts_a_b_max,
				      ROUND(AVG(iv.volts_b_c_max), 2) AS volts_b_c_max,
				      ROUND(AVG(iv.volts_c_a_max), 2) AS volts_c_a_max,
				      ROUND(AVG(iv.amps_a_max_avg_demand), 2) AS amps_a_max_avg_demand,
				      ROUND(AVG(iv.amps_b_max_avg_demand), 2) AS amps_b_max_avg_demand,
				      ROUND(AVG(iv.amps_c_max_avg_demand), 2) AS amps_c_max_avg_demand,
				      ROUND(AVG(iv.positive_watts_3ph_max_avg_demand), 2) AS positive_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_vars_3ph_max_avg_demand), 2) AS positive_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_watts_3ph_max_avg_demand), 2) AS negative_watts_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_vars_3ph_max_avg_demand), 2) AS negative_vars_3ph_max_avg_demand,
				      ROUND(AVG(iv.vas_3ph_max_avg_demand), 2) AS vas_3ph_max_avg_demand,
				      ROUND(AVG(iv.positive_pf_3ph_max_avg_demand), 2) AS positive_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.negative_pf_3ph_max_avg_demand), 2) AS negative_pf_3ph_max_avg_demand,
				      ROUND(AVG(iv.frequency_max), 2) AS frequency_max,
				      ROUND(AVG(iv.volts_a_n_thd), 2) AS volts_a_n_thd,
				      ROUND(AVG(iv.volts_b_n_thd), 2) AS volts_b_n_thd,
				      ROUND(AVG(iv.volts_c_n_thd), 2) AS volts_c_n_thd,
				      ROUND(AVG(iv.amps_a_thd), 2) AS amps_a_thd,
				      ROUND(AVG(iv.amps_b_thd), 2) AS amps_b_thd,
				      ROUND(AVG(iv.amps_c_thd), 2) AS amps_c_thd,
				      ROUND(AVG(iv.phase_a_current_0th), 2) AS phase_a_current_0th,
				      ROUND(AVG(iv.phase_a_current_1st), 2) AS phase_a_current_1st,
				      ROUND(AVG(iv.phase_a_current_2nd), 2) AS phase_a_current_2nd,
				      ROUND(AVG(iv.phase_a_current_3rd), 2) AS phase_a_current_3rd,
				      ROUND(AVG(iv.phase_a_current_4th), 2) AS phase_a_current_4th,
				      ROUND(AVG(iv.phase_a_current_5th), 2) AS phase_a_current_5th,
				      ROUND(AVG(iv.phase_a_current_6th), 2) AS phase_a_current_6th,
				      ROUND(AVG(iv.phase_a_current_7th), 2) AS phase_a_current_7th,
				      ROUND(AVG(iv.phase_a_voltage_0th), 2) AS phase_a_voltage_0th,
				      ROUND(AVG(iv.phase_a_voltage_1st), 2) AS phase_a_voltage_1st,
				      ROUND(AVG(iv.phase_a_voltage_2nd), 2) AS phase_a_voltage_2nd,
				      ROUND(AVG(iv.phase_a_voltage_3rd), 2) AS phase_a_voltage_3rd,
				      ROUND(AVG(iv.phase_b_current_0th), 2) AS phase_b_current_0th,
				      ROUND(AVG(iv.phase_b_current_1st), 2) AS phase_b_current_1st,
				      ROUND(AVG(iv.phase_b_current_2nd), 2) AS phase_b_current_2nd,
				      ROUND(AVG(iv.phase_b_current_3rd), 2) AS phase_b_current_3rd,
				      ROUND(AVG(iv.phase_b_current_4th), 2) AS phase_b_current_4th,
				      ROUND(AVG(iv.phase_b_current_5th), 2) AS phase_b_current_5th,
				      ROUND(AVG(iv.phase_b_current_6th), 2) AS phase_b_current_6th,
				      ROUND(AVG(iv.phase_b_current_7th), 2) AS phase_b_current_7th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_0th), 2) AS phase_b_voltage_0th,
				      ROUND(AVG(iv.phase_b_voltage_2nd), 2) AS phase_b_voltage_2nd,
				      ROUND(AVG(iv.phase_b_voltage_3rd), 2) AS phase_b_voltage_3rd,
				      ROUND(AVG(iv.phase_c_current_0th), 2) AS phase_c_current_0th,
				      ROUND(AVG(iv.phase_c_current_1st), 2) AS phase_c_current_1st,
				      ROUND(AVG(iv.phase_c_current_2nd), 2) AS phase_c_current_2nd,
				      ROUND(AVG(iv.phase_c_current_3rd), 2) AS phase_c_current_3rd,
				      ROUND(AVG(iv.phase_c_current_4th), 2) AS phase_c_current_4th,
				      ROUND(AVG(iv.phase_c_current_5th), 2) AS phase_c_current_5th,
				      ROUND(AVG(iv.phase_c_current_6th), 2) AS phase_c_current_6th,
				      ROUND(AVG(iv.phase_c_current_7th), 2) AS phase_c_current_7th,
				      ROUND(AVG(iv.phase_c_voltage_0th), 2) AS phase_c_voltage_0th,
				      ROUND(AVG(iv.phase_c_voltage_1st), 2) AS phase_c_voltage_1st,
				      ROUND(AVG(iv.phase_c_voltage_2nd), 2) AS phase_c_voltage_2nd,
				      ROUND(AVG(iv.phase_c_voltage_3rd), 2) AS phase_c_voltage_3rd,
				      ROUND(AVG(iv.angle_phase_a_current), 2) AS angle_phase_a_current,
				      ROUND(AVG(iv.angle_phase_b_current), 2) AS angle_phase_b_current,
				      ROUND(AVG(iv.angle_phase_c_current), 2) AS angle_phase_c_current,
				      ROUND(AVG(iv.angle_volts_a_b), 2) AS angle_volts_a_b,
				      ROUND(AVG(iv.angle_volts_b_c), 2) AS angle_volts_b_c,
				      ROUND(AVG(iv.angle_volts_c_a), 2) AS angle_volts_c_a,
				    </when>
				    
				    <when test="datatablename == 'model_ivt_solaron_ext'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.common_mode), 2) AS common_mode,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				      ROUND(AVG(iv.ac_current), 2) AS ac_current,
				    </when>
				    
				    <when test="datatablename == 'model_veris_industries_e51c2_power_meter'">
				      ROUND(AVG(iv.AccumulatedRealEnergyNet), 2) AS AccumulatedRealEnergyNet,
				      ROUND(AVG(iv.RealEnergyQuadrants14Import), 2) AS RealEnergyQuadrants14Import,
				      ROUND(AVG(iv.RealEnergyQuadrants23Export), 2) AS RealEnergyQuadrants23Export,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant1), 2) AS ReactiveEnergyQuadrant1,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant2), 2) AS ReactiveEnergyQuadrant2,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant3), 2) AS ReactiveEnergyQuadrant3,
				      ROUND(AVG(iv.ReactiveEnergyQuadrant4), 2) AS ReactiveEnergyQuadrant4,
				      ROUND(AVG(iv.ApparentEnergyNet), 2) AS ApparentEnergyNet,
				      ROUND(AVG(iv.ApparentEnergyQuadrants14), 2) AS ApparentEnergyQuadrants14,
				      ROUND(AVG(iv.ApparentEnergyQuadrants23), 2) AS ApparentEnergyQuadrants23,
				      ROUND(AVG(iv.TotalNetInstantaneousRealPower), 2) AS TotalNetInstantaneousRealPower,
				      ROUND(AVG(iv.TotalNetInstantaneousReactivePower), 2) AS TotalNetInstantaneousReactivePower,
				      ROUND(AVG(iv.TotalNetInstantaneousApparentPower), 2) AS TotalNetInstantaneousApparentPower,
				      ROUND(AVG(iv.TotalPowerFactor), 2) AS TotalPowerFactor,
				      ROUND(AVG(iv.VoltageLL3pAve), 2) AS VoltageLL3pAve,
				      ROUND(AVG(iv.VoltageLN3pAve), 2) AS VoltageLN3pAve,
				      ROUND(AVG(iv.Current3pAve), 2) AS Current3pAve,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.TotalRealPowerPresentDemand), 2) AS TotalRealPowerPresentDemand,
				      ROUND(AVG(iv.TotalReactivePowerPresentDemand), 2) AS TotalReactivePowerPresentDemand,
				      ROUND(AVG(iv.TotalApparentPowerPresentDemand), 2) AS TotalApparentPowerPresentDemand,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandImport), 2) AS TotalRealPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandImport), 2) AS TotalReactivePowerMaxDemandImport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandImport), 2) AS TotalApparentPowerMaxDemandImport,
				      ROUND(AVG(iv.TotalRealPowerMaxDemandExport), 2) AS TotalRealPowerMaxDemandExport,
				      ROUND(AVG(iv.TotalReactivePowerMaxDemandExport), 2) AS TotalReactivePowerMaxDemandExport,
				      ROUND(AVG(iv.TotalApparentPowerMaxDemandExport), 2) AS TotalApparentPowerMaxDemandExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAImport), 2) AS AccumulatedRealEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBImport), 2) AS AccumulatedRealEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCImport), 2) AS AccumulatedRealEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseAExport), 2) AS AccumulatedRealEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseBExport), 2) AS AccumulatedRealEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedRealEnergyPhaseCExport), 2) AS AccumulatedRealEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ1ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ1ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseAImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseBImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedQ2ReactiveEnergyPhaseCImport), 2) AS AccumulatedQ2ReactiveEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ3ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ3ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseAExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseBExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedQ4ReactiveEnergyPhaseCExport), 2) AS AccumulatedQ4ReactiveEnergyPhaseCExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAImport), 2) AS AccumulatedApparentEnergyPhaseAImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBImport), 2) AS AccumulatedApparentEnergyPhaseBImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCImport), 2) AS AccumulatedApparentEnergyPhaseCImport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseAExport), 2) AS AccumulatedApparentEnergyPhaseAExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseBExport), 2) AS AccumulatedApparentEnergyPhaseBExport,
				      ROUND(AVG(iv.AccumulatedApparentEnergyPhaseCExport), 2) AS AccumulatedApparentEnergyPhaseCExport,
				      ROUND(AVG(iv.RealPowerPhaseA), 2) AS RealPowerPhaseA,
				      ROUND(AVG(iv.RealPowerPhaseB), 2) AS RealPowerPhaseB,
				      ROUND(AVG(iv.RealPowerPhaseC), 2) AS RealPowerPhaseC,
				      ROUND(AVG(iv.ReactivePowerPhaseA), 2) AS ReactivePowerPhaseA,
				      ROUND(AVG(iv.ReactivePowerPhaseB), 2) AS ReactivePowerPhaseB,
				      ROUND(AVG(iv.ReactivePowerPhaseC), 2) AS ReactivePowerPhaseC,
				      ROUND(AVG(iv.ApparentPowerPhaseA), 2) AS ApparentPowerPhaseA,
				      ROUND(AVG(iv.ApparentPowerPhaseB), 2) AS ApparentPowerPhaseB,
				      ROUND(AVG(iv.ApparentPowerPhaseC), 2) AS ApparentPowerPhaseC,
				      ROUND(AVG(iv.PowerFactorPhaseA), 2) AS PowerFactorPhaseA,
				      ROUND(AVG(iv.PowerFactorPhaseB), 2) AS PowerFactorPhaseB,
				      ROUND(AVG(iv.PowerFactorPhaseC), 2) AS PowerFactorPhaseC,
				      ROUND(AVG(iv.VoltagePhaseAB), 2) AS VoltagePhaseAB,
				      ROUND(AVG(iv.VoltagePhaseBC), 2) AS VoltagePhaseBC,
				      ROUND(AVG(iv.VoltagePhaseAC), 2) AS VoltagePhaseAC,
				      ROUND(AVG(iv.VoltagePhaseAN), 2) AS VoltagePhaseAN,
				      ROUND(AVG(iv.VoltagePhaseBN), 2) AS VoltagePhaseBN,
				      ROUND(AVG(iv.VoltagePhaseCN), 2) AS VoltagePhaseCN,
				      ROUND(AVG(iv.CurrentPhaseA), 2) AS CurrentPhaseA,
				      ROUND(AVG(iv.CurrentPhaseB), 2) AS CurrentPhaseB,
				      ROUND(AVG(iv.CurrentPhaseC), 2) AS CurrentPhaseC,
				    </when>
				    
				    
				    <when test="datatablename == 'model_imtsolar_class8000'">
				      ROUND(AVG(iv.irradiance * 0.1), 2) AS irradiance,
				      ROUND(AVG(iv.tcell), 2) AS tcell,
				    </when>
				    
				    
				    <when test="datatablename == 'model_pvp_inverter'">
				      ROUND(AVG(iv.total_kwh_delivered), 2) AS total_kwh_delivered,
				      ROUND(AVG(iv.volts_a_l_n), 2) AS volts_a_l_n,
				      ROUND(AVG(iv.volts_b_l_n), 2) AS volts_b_l_n,
				      ROUND(AVG(iv.volts_c_l_n), 2) AS volts_c_l_n,
				      ROUND(AVG(iv.current_a), 2) AS current_a,
				      ROUND(AVG(iv.current_b), 2) AS current_b,
				      ROUND(AVG(iv.current_c), 2) AS current_c,
				      ROUND(AVG(iv.dc_output_voltage), 2) AS dc_output_voltage,
				      ROUND(AVG(iv.dc_output_current), 2) AS dc_output_current,
				      ROUND(AVG(iv.line_frenquency), 2) AS line_frenquency,
				      ROUND(AVG(iv.line_kw), 2) AS line_kw,
				      ROUND(COUNT(iv.inverter_fault_word0), 2) AS inverter_fault_word0,
				      ROUND(COUNT(iv.inverter_fault_word1), 2) AS inverter_fault_word1,
				      ROUND(COUNT(iv.inverter_fault_word2), 2) AS inverter_fault_word2,
				      
				    </when>
				    
				    <when test="datatablename == 'model_advanced_energy_solaron'">
				      ROUND(AVG(iv.today_kwh), 2) AS today_kwh,
				      ROUND(AVG(iv.ytd_kwh_total), 2) AS ytd_kwh_total,
				      ROUND(AVG(iv.life_kwh_total), 2) AS life_kwh_total,
				      ROUND(AVG(iv.ytd_kwh), 2) AS ytd_kwh,
				      ROUND(AVG(iv.life_kwh), 2) AS life_kwh,
				      ROUND(AVG(iv.last_15min_kwh), 2) AS last_15min_kwh,
				      ROUND(AVG(iv.ac_power), 2) AS ac_power,
				      ROUND(AVG(iv.ac_frequency), 2) AS ac_frequency,
				      ROUND(AVG(iv.pv_voltage), 2) AS pv_voltage,
				      ROUND(AVG(iv.pv_current), 2) AS pv_current,
				      ROUND(AVG(iv.ambient_temperature), 2) AS ambient_temperature,
				      ROUND(AVG(iv.coolant_temperature), 2) AS coolant_temperature,
				      ROUND(AVG(iv.reactor_temperature), 2) AS reactor_temperature,
				      ROUND(AVG(iv.cabinet_temperature), 2) AS cabinet_temperature,
				      ROUND(AVG(iv.bus_voltage), 2) AS bus_voltage,
				      ROUND(AVG(iv.ground_current), 2) AS ground_current,
				      ROUND(AVG(iv.reactive_power), 2) AS reactive_power,
				      ROUND(COUNT(iv.active_faults1), 2) AS active_faults1,
				      ROUND(COUNT(iv.active_faults2), 2) AS active_faults2,
				      ROUND(COUNT(iv.active_faults3), 2) AS active_faults3,
				      ROUND(COUNT(iv.warnings1), 2) AS warnings1,
				      ROUND(COUNT(iv.warnings2_reserved), 2) AS warnings2_reserved,
				      ROUND(COUNT(iv.warnings3_reserved), 2) AS warnings3_reserved,
				    </when>
				    
				    
				    <when test="datatablename == 'model_chint_solectria_inverter_class9725'">
				      ROUND(AVG(iv.PowerOnOff), 2) AS PowerOnOff,
				      ROUND(AVG(iv.PActiveSet), 2) AS PActiveSet,
				      ROUND(AVG(iv.PFactorSet), 2) AS PFactorSet,
				      ROUND(AVG(iv.PReactiveSet), 2) AS PReactiveSet,
				      ROUND(AVG(iv.GridVMax), 2) AS GridVMax,
				      ROUND(AVG(iv.GridVmaxTripT), 2) AS GridVmaxTripT,
				      ROUND(AVG(iv.GridVMin), 2) AS GridVMin,
				      ROUND(AVG(iv.GridVminTripT), 2) AS GridVminTripT,
				      ROUND(AVG(iv.GridFMax), 2) AS GridFMax,
				      ROUND(AVG(iv.GridFMin), 2) AS GridFMin,
				      ROUND(AVG(iv.GridFTripT), 2) AS GridFTripT,
				      ROUND(AVG(iv.ActivePower), 2) AS ActivePower,
				      ROUND(AVG(iv.PowerFactor), 2) AS PowerFactor,
				      ROUND(AVG(iv.Risomin), 2) AS Risomin,
				      ROUND(AVG(iv.PVStartVol), 2) AS PVStartVol,
				      ROUND(AVG(iv.DCIMax), 2) AS DCIMax,
				      ROUND(AVG(iv.TambientMax), 2) AS TambientMax,
				      ROUND(AVG(iv.TmoduleMax), 2) AS TmoduleMax,
				      ROUND(AVG(iv.OffsetDiffMax), 2) AS OffsetDiffMax,
				      ROUND(AVG(iv.GridVolUnbalance), 2) AS GridVolUnbalance,
				      ROUND(AVG(iv.SoftPowerStep), 2) AS SoftPowerStep,
				      ROUND(AVG(iv.TotalEnergyToEnergy), 2) AS TotalEnergyToEnergy,
				      ROUND(AVG(iv.TotalEnergyToday), 2) AS TotalEnergyToday,
				      ROUND(AVG(iv.InverterEfficiency), 2) AS InverterEfficiency,
				      ROUND(AVG(iv.PowerFactor1), 2) AS PowerFactor1,
				      ROUND(AVG(iv.MaxActivePowerToday), 2) AS MaxActivePowerToday,
				      ROUND(AVG(iv.RunTimeToGrid), 2) AS RunTimeToGrid,
				      ROUND(AVG(iv.AC_ActivePower), 2) AS AC_ActivePower,
				      ROUND(AVG(iv.AC_ApparentPower), 2) AS AC_ApparentPower,
				      ROUND(AVG(iv.GridVoltageUab), 2) AS GridVoltageUab,
				      ROUND(AVG(iv.GridVoltageUbc), 2) AS GridVoltageUbc,
				      ROUND(AVG(iv.GridVoltageUca), 2) AS GridVoltageUca,
				      ROUND(AVG(iv.GridA_PhaseCurrent), 2) AS GridA_PhaseCurrent,
				      ROUND(AVG(iv.GridB_PhaseCurrent), 2) AS GridB_PhaseCurrent,
				      ROUND(AVG(iv.GridC_PhaseCurrent), 2) AS GridC_PhaseCurrent,
				      ROUND(AVG(iv.PV1_Voltage), 2) AS PV1_Voltage,
				      ROUND(AVG(iv.PV1_Current), 2) AS PV1_Current,
				      ROUND(AVG(iv.PV2_Voltage), 2) AS PV2_Voltage,
				      ROUND(AVG(iv.PV2_Current), 2) AS PV2_Current,
				      ROUND(AVG(iv.PV3_Voltage), 2) AS PV3_Voltage,
				      ROUND(AVG(iv.PV3_Current), 2) AS PV3_Current,
				      ROUND(AVG(iv.Grid_Frequency), 2) AS Grid_Frequency,
				      ROUND(AVG(iv.ModuleTemp), 2) AS ModuleTemp,
				      ROUND(AVG(iv.InternalTemp), 2) AS InternalTemp,
				      ROUND(AVG(iv.TransformerTemp), 2) AS TransformerTemp,
				      ROUND(COUNT(iv.PermanentFaultCode), 2) AS PermanentFaultCode,
				      ROUND(COUNT(iv.WarnCode), 2) AS WarnCode,
				      ROUND(COUNT(iv.FaultCode0), 2) AS FaultCode0,
				      ROUND(COUNT(iv.FaultCode1), 2) AS FaultCode1,
				      ROUND(COUNT(iv.FaultCode2), 2) AS FaultCode2,
				    </when>
				    
				    <when test="datatablename == 'model_elkor_wattson_pv_meter'">
				      ROUND(AVG(iv.TotalEnergyConsumption), 2) AS TotalEnergyConsumption,
				      ROUND(AVG(iv.TotalRealPower), 2) AS TotalRealPower,
				      ROUND(AVG(iv.TotalReactivePower), 2) AS TotalReactivePower,
				      ROUND(AVG(iv.TotalApparentPower), 2) AS TotalApparentPower,
				      ROUND(AVG(iv.AverageVoltageLN), 2) AS AverageVoltageLN,
				      ROUND(AVG(iv.AverageVoltageLL), 2) AS AverageVoltageLL,
				      ROUND(AVG(iv.AverageCurrent), 2) AS AverageCurrent,
				      ROUND(AVG(iv.TotalSystemPowerFactor), 2) AS TotalSystemPowerFactor,
				      ROUND(AVG(iv.Frequency), 2) AS Frequency,
				      ROUND(AVG(iv.SlidingWindowRealPowerDemand), 2) AS SlidingWindowRealPowerDemand,
				      ROUND(AVG(iv.VoltageAN), 2) AS VoltageAN,
				      ROUND(AVG(iv.VoltageBN), 2) AS VoltageBN,
				      ROUND(AVG(iv.VoltageCN), 2) AS VoltageCN,
				      ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				      ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				      ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				      ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				      ROUND(COUNT(iv.CurrentB), 2) AS CurrentB,
				      ROUND(COUNT(iv.CurrentC), 2) AS CurrentC,
				      ROUND(COUNT(iv.RealPowerA), 2) AS RealPowerA,
				      ROUND(COUNT(iv.RealPowerB), 2) AS RealPowerB,
				      ROUND(COUNT(iv.RealPowerC), 2) AS RealPowerC,
				      ROUND(COUNT(iv.ReactivePowerA), 2) AS ReactivePowerA,
				      
				      ROUND(COUNT(iv.ReactivePowerB), 2) AS ReactivePowerB,
				      ROUND(COUNT(iv.ReactivePowerC), 2) AS ReactivePowerC,
				      ROUND(COUNT(iv.ApparentPowerA), 2) AS ApparentPowerA,
				      ROUND(COUNT(iv.ApparentPowerB), 2) AS ApparentPowerB,
				      ROUND(COUNT(iv.ApparentPowerC), 2) AS ApparentPowerC,
				      ROUND(COUNT(iv.PowerFactorA), 2) AS PowerFactorA,
				      ROUND(COUNT(iv.PowerFactorB), 2) AS PowerFactorB,
				      ROUND(COUNT(iv.PowerFactorC), 2) AS PowerFactorC,
				    </when>
				    
				    <when test="datatablename == 'model_satcon_pvs357_inverter'">
				      ROUND(AVG(iv.Software_Identification_Number), 2) AS Software_Identification_Number,
				      ROUND(AVG(iv.Fault_Word1), 2) AS Fault_Word1,
				      ROUND(AVG(iv.Fault_Word2), 2) AS Fault_Word2,
				      ROUND(AVG(iv.Fault_Word3), 2) AS Fault_Word3,
				      ROUND(AVG(iv.Fault_Word4), 2) AS Fault_Word4,
				      ROUND(AVG(iv.Fault_Word5), 2) AS Fault_Word5,
				      ROUND(AVG(iv.Fault_Word6), 2) AS Fault_Word6,
				      ROUND(COUNT(iv.Fault_Word7), 2) AS Fault_Word7,
				      ROUND(AVG(iv.Number_of_Faults), 2) AS Number_of_Faults,
				      ROUND(AVG(iv.Program_Checksum), 2) AS Program_Checksum,
				      ROUND(AVG(iv.DC_Input_Volts), 2) AS DC_Input_Volts,
				      ROUND(AVG(iv.DC_Link_Volts), 2) AS DC_Link_Volts,
				      ROUND(AVG(iv.DC_Link_Amps), 2) AS DC_Link_Amps,
				      ROUND(AVG(iv.DC_Ground_Current), 2) AS DC_Ground_Current,
				      ROUND(AVG(iv.Line_Amps_A), 2) AS Line_Amps_A,
				      ROUND(AVG(iv.Line_Amps_B), 2) AS Line_Amps_B,
				      ROUND(AVG(iv.Line_Amps_C), 2) AS Line_Amps_C,
				      ROUND(AVG(iv.Line_Amps_Average), 2) AS Line_Amps_Average,
				      ROUND(AVG(iv.Neutral_Current), 2) AS Neutral_Current,
				      ROUND(AVG(iv.Line_Volts_A), 2) AS Line_Volts_A,
				      ROUND(AVG(iv.Line_Volts_B), 2) AS Line_Volts_B,
				      ROUND(AVG(iv.Line_Volts_C), 2) AS Line_Volts_C,
				      ROUND(AVG(iv.Line_Volts_Average), 2) AS Line_Volts_Average,
				      ROUND(AVG(iv.Line_Voltage_Unbalance), 2) AS Line_Voltage_Unbalance,
				      ROUND(AVG(iv.Line_Current_Unbalance), 2) AS Line_Current_Unbalance,
				      ROUND(AVG(iv.Input_kW), 2) AS Input_kW,
				      ROUND(AVG(iv.Output_kw), 2) AS Output_kw,
				      ROUND(AVG(iv.Output_kvar), 2) AS Output_kvar,
				      ROUND(AVG(iv.Output_kva), 2) AS Output_kva,
				      ROUND(AVG(iv.Power_Factor), 2) AS Power_Factor,
				      ROUND(AVG(iv.Ground_Impedance), 2) AS Ground_Impedance,
				      ROUND(AVG(iv.String_Amps1), 2) AS String_Amps1,
				      ROUND(AVG(iv.String_Amps2), 2) AS String_Amps2,
				      ROUND(AVG(iv.String_Amps3), 2) AS String_Amps3,
				      ROUND(AVG(iv.String_Amps4), 2) AS String_Amps4,
				      ROUND(AVG(iv.String_Amps5), 2) AS String_Amps5,
				      ROUND(AVG(iv.String_Amps6), 2) AS String_Amps6,
				      ROUND(AVG(iv.String_Amps7), 2) AS String_Amps7,
				      ROUND(AVG(iv.String_Amps8), 2) AS String_Amps8,
				      ROUND(AVG(iv.String_Amps9), 2) AS String_Amps9,
				      ROUND(AVG(iv.String_Amps10), 2) AS String_Amps10,
				      ROUND(AVG(iv.String_Amps11), 2) AS String_Amps11,
				      ROUND(AVG(iv.String_Amps12), 2) AS String_Amps12,
				      ROUND(AVG(iv.String_Amps13), 2) AS String_Amps13,
				      ROUND(AVG(iv.String_Amps14), 2) AS String_Amps14,
				      ROUND(AVG(iv.String_Amps15), 2) AS String_Amps15,
				      ROUND(AVG(iv.String_Amps16), 2) AS String_Amps16,
				      ROUND(AVG(iv.String_Amps17), 2) AS String_Amps17,
				      ROUND(AVG(iv.String_Amps18), 2) AS String_Amps18,
				      ROUND(AVG(iv.String_Amps19), 2) AS String_Amps19,
				      ROUND(AVG(iv.String_Amps20), 2) AS String_Amps20,
				      ROUND(AVG(iv.String_Amps21), 2) AS String_Amps21,
				      ROUND(AVG(iv.String_Amps22), 2) AS String_Amps22,
				      ROUND(AVG(iv.String_Amps23), 2) AS String_Amps23,
				      ROUND(AVG(iv.String_Amps24), 2) AS String_Amps24,
				      ROUND(AVG(iv.String_Amps25), 2) AS String_Amps25,
				      ROUND(AVG(iv.String_Amps26), 2) AS String_Amps26,
				      ROUND(AVG(iv.String_Amps27), 2) AS String_Amps27,
				      ROUND(AVG(iv.String_Amps28), 2) AS String_Amps28,
				      ROUND(AVG(iv.String_Amps29), 2) AS String_Amps29,
				      ROUND(AVG(iv.String_Amps30), 2) AS String_Amps30,
				      ROUND(AVG(iv.String_Amps31), 2) AS String_Amps31,
				      ROUND(AVG(iv.String_Amps32), 2) AS String_Amps32,
				      
				      
				      ROUND(AVG(iv.String_Amps_Average), 2) AS String_Amps_Average,
				      ROUND(AVG(iv.String_kwh1), 2) AS String_kwh1,
				      ROUND(AVG(iv.String_kwh2), 2) AS String_kwh2,
				      ROUND(AVG(iv.String_kwh3), 2) AS String_kwh3,
				      ROUND(AVG(iv.String_kwh4), 2) AS String_kwh4,
				      ROUND(AVG(iv.String_kwh5), 2) AS String_kwh5,
				      ROUND(AVG(iv.String_kwh6), 2) AS String_kwh6,
				      ROUND(AVG(iv.String_kwh7), 2) AS String_kwh7,
				      ROUND(AVG(iv.String_kwh8), 2) AS String_kwh8,
				      ROUND(AVG(iv.String_kwh9), 2) AS String_kwh9,
				      ROUND(AVG(iv.String_kwh10), 2) AS String_kwh10,
				      ROUND(AVG(iv.String_kwh11), 2) AS String_kwh11,
				      ROUND(AVG(iv.String_kwh12), 2) AS String_kwh12,
				      ROUND(AVG(iv.String_kwh13), 2) AS String_kwh13,
				      ROUND(AVG(iv.String_kwh14), 2) AS String_kwh14,
				      ROUND(AVG(iv.String_kwh15), 2) AS String_kwh15,
				      ROUND(AVG(iv.String_kwh16), 2) AS String_kwh16,
				      ROUND(AVG(iv.String_kwh17), 2) AS String_kwh17,
				      ROUND(AVG(iv.String_kwh18), 2) AS String_kwh18,
				      ROUND(AVG(iv.String_kwh19), 2) AS String_kwh19,
				      ROUND(AVG(iv.String_kwh20), 2) AS String_kwh20,
				      ROUND(AVG(iv.String_kwh21), 2) AS String_kwh21,
				      ROUND(AVG(iv.String_kwh22), 2) AS String_kwh22,
				      ROUND(AVG(iv.String_kwh23), 2) AS String_kwh23,
				      ROUND(AVG(iv.String_kwh24), 2) AS String_kwh24,
				      ROUND(AVG(iv.String_kwh25), 2) AS String_kwh25,
				      ROUND(AVG(iv.String_kwh26), 2) AS String_kwh26,
				      ROUND(AVG(iv.String_kwh27), 2) AS String_kwh27,
				      ROUND(AVG(iv.String_kwh28), 2) AS String_kwh28,
				      ROUND(AVG(iv.String_kwh29), 2) AS String_kwh29,
				      ROUND(AVG(iv.String_kwh30), 2) AS String_kwh30,
				      ROUND(AVG(iv.String_kwh31), 2) AS String_kwh31,
				      ROUND(AVG(iv.String_kwh32), 2) AS String_kwh32,
				      
				      ROUND(AVG(iv.String_kwh_Average), 2) AS String_kwh_Average,
				      ROUND(AVG(iv.Total_kwh), 2) AS Total_kwh,
				      ROUND(AVG(iv.Total_mwh), 2) AS Total_mwh,
				      ROUND(AVG(iv.kwh_Today), 2) AS kwh_Today,
				      ROUND(AVG(iv.kwh_Yesterday), 2) AS kwh_Yesterday,
				      ROUND(AVG(iv.Total_kwh7_days), 2) AS Total_kwh7_days,
				      ROUND(AVG(iv.Total_kwh30_days), 2) AS Total_kwh30_days,
				      ROUND(AVG(iv.Average_kwh7_days), 2) AS Average_kwh7_days,
				      ROUND(AVG(iv.Average_kwh30_Days), 2) AS Average_kwh30_Days,
				      ROUND(AVG(iv.Average_Line_Frequency), 2) AS Average_Line_Frequency,
				      ROUND(AVG(iv.Average_Line_Frequency_Error), 2) AS Average_Line_Frequency_Error,
				      ROUND(AVG(iv.FPGA_Identification_Number), 2) AS FPGA_Identification_Number,
				      ROUND(AVG(iv.DC_Input_Voltage_Timer), 2) AS DC_Input_Voltage_Timer,
				      ROUND(AVG(iv.AC_Line_Voltage_Timer), 2) AS AC_Line_Voltage_Timer,
				      ROUND(AVG(iv.Operating_State), 2) AS Operating_State,
				      ROUND(AVG(iv.Internal_Air_Temperature), 2) AS Internal_Air_Temperature,
				      ROUND(AVG(iv.Inverter_Air_Temperature), 2) AS Inverter_Air_Temperature,
				      ROUND(AVG(iv.Heatsink_Temperature1), 2) AS Heatsink_Temperature1,
				      ROUND(AVG(iv.Heatsink_Temperature2), 2) AS Heatsink_Temperature2,
				      ROUND(AVG(iv.Heatsink_Temperature3), 2) AS Heatsink_Temperature3,
				      ROUND(AVG(iv.Heatsink_Temperature4), 2) AS Heatsink_Temperature4,
				      ROUND(AVG(iv.Heatsink_Temperature5), 2) AS Heatsink_Temperature5,
				      ROUND(AVG(iv.Heatsink_Temperature6), 2) AS Heatsink_Temperature6,
				      ROUND(AVG(iv.Heatsink_Maximum_Temparature1), 2) AS Heatsink_Maximum_Temparature1,
				      ROUND(AVG(iv.Fan_Speed_Command1), 2) AS Fan_Speed_Command1,
				      ROUND(AVG(iv.Heatsink_Maximum_Temperature2), 2) AS Heatsink_Maximum_Temperature2,
				      ROUND(AVG(iv.Fan_Speed_Command2), 2) AS Fan_Speed_Command2,
				      ROUND(AVG(iv.Number_of_Temperature_Feedbacks), 2) AS Number_of_Temperature_Feedbacks,
				      ROUND(AVG(iv.Serial_number_word1), 2) AS Serial_number_word1,
				      ROUND(AVG(iv.Serial_number_word2), 2) AS Serial_number_word2,
				      ROUND(AVG(iv.Serial_number_word3), 2) AS Serial_number_word3,
				      ROUND(AVG(iv.Serial_number_word4), 2) AS Serial_number_word4,
				      ROUND(AVG(iv.Number_of_Strings), 2) AS Number_of_Strings,
				      
				    </when>
				    
				    
				    <when test="datatablename == 'model_w_kipp_zonen_rt1'">
				    	ROUND(AVG(iv.DeviceType), 2) AS DeviceType,
				    	ROUND(AVG(iv.DataModelVersion), 2) AS DataModelVersion,
				    	ROUND(AVG(iv.OperationalMode), 2) AS OperationalMode,
				    	ROUND(AVG(iv.StatusFlags), 2) AS StatusFlags,
				    	ROUND(AVG(iv.SunPOATempComp), 2) AS SunPOATempComp,
				    	ROUND(AVG(iv.PanelTemperature), 2) AS PanelTemperature,
				    	ROUND(AVG(iv.ExtPowerSensor), 2) AS ExtPowerSensor,
				    	ROUND(AVG(iv.BatchNumber), 2) AS BatchNumber,
				    	ROUND(AVG(iv.SerialNumber), 2) AS SerialNumber,
				    	ROUND(AVG(iv.CalibrationDateYYMMDD), 2) AS CalibrationDateYYMMDD,
				    </when>
				    
				    <when test="datatablename == 'model_elkor_production_meter'">
				    	ROUND(AVG(iv.ActivePowerTotal), 2) AS ActivePowerTotal,
				    	ROUND(AVG(iv.ReactivePowerTotal), 2) AS ReactivePowerTotal,
				    	ROUND(AVG(iv.ApparentPowerTotal), 2) AS ApparentPowerTotal,
				    	ROUND(AVG(iv.VoltageAverage), 2) AS VoltageAverage,
				    	ROUND(AVG(iv.VoltageLLAverage), 2) AS VoltageLLAverage,
				    	ROUND(AVG(iv.CurrentAverage), 2) AS CurrentAverage,
				    	ROUND(AVG(iv.SystemPowerFactor), 2) AS SystemPowerFactor,
				    	ROUND(AVG(iv.SystemFrequency), 2) AS SystemFrequency,
				    	ROUND(AVG(iv.VoltageAverageAngle), 2) AS VoltageAverageAngle,
				    	ROUND(AVG(iv.SystemQuadrant), 2) AS SystemQuadrant,
				    	ROUND(AVG(iv.VoltageA), 2) AS VoltageA,
				    	ROUND(AVG(iv.VoltageB), 2) AS VoltageB,
				    	ROUND(AVG(iv.VoltageC), 2) AS VoltageC,
				    	ROUND(AVG(iv.VoltageAB), 2) AS VoltageAB,
				    	ROUND(AVG(iv.VoltageBC), 2) AS VoltageBC,
				    	ROUND(AVG(iv.VoltageAC), 2) AS VoltageAC,
				    	ROUND(AVG(iv.CurrentA), 2) AS CurrentA,
				    	ROUND(AVG(iv.CurrentB), 2) AS CurrentB,
				    	ROUND(AVG(iv.CurrentC), 2) AS CurrentC,
				    	ROUND(AVG(iv.ActivePowerA), 2) AS ActivePowerA,
				    	ROUND(AVG(iv.ActivePowerB), 2) AS ActivePowerB,
				    	ROUND(AVG(iv.ActivePowerC), 2) AS ActivePowerC,
				    	ROUND(AVG(iv.ReactivePowerA), 2) AS ReactivePowerA,
				    	ROUND(AVG(iv.ReactivePowerB), 2) AS ReactivePowerB,
				    	ROUND(AVG(iv.ReactivePowerC), 2) AS ReactivePowerC,
				    	ROUND(AVG(iv.ApparentPowerA), 2) AS ApparentPowerA,
				    	ROUND(AVG(iv.ApparentPowerB), 2) AS ApparentPowerB,
				    	ROUND(AVG(iv.ApparentPowerC), 2) AS ApparentPowerC,
				    	ROUND(AVG(iv.PowerFactorA), 2) AS PowerFactorA,
				    	ROUND(AVG(iv.PowerFactorB), 2) AS PowerFactorB,
				    	ROUND(AVG(iv.PowerFactorC), 2) AS PowerFactorC,
				    	ROUND(AVG(iv.VoltageAngleAB), 2) AS VoltageAngleAB,
				    	ROUND(AVG(iv.VoltageAngleBC), 2) AS VoltageAngleBC,
				    	ROUND(AVG(iv.VoltageAngleCA), 2) AS VoltageAngleCA,
				    	ROUND(AVG(iv.QuadrantA), 2) AS QuadrantA,
				    	ROUND(AVG(iv.QuadrantB), 2) AS QuadrantB,
				    	ROUND(AVG(iv.QuadrantC), 2) AS QuadrantC,
				    	ROUND(AVG(iv.SlidingWindowPower), 2) AS SlidingWindowPower,
				    	ROUND(AVG(iv.NetTotalEnergy), 2) AS NetTotalEnergy,
				    	ROUND(AVG(iv.TotalNetApparentEnergy), 2) AS TotalNetApparentEnergy,
				    	ROUND(AVG(iv.TotalImportEnergy), 2) AS TotalImportEnergy,
				    	ROUND(AVG(iv.TotalExportEnergy), 2) AS TotalExportEnergy,
				    	ROUND(AVG(iv.TotalImportApparentEnergy), 2) AS TotalImportApparentEnergy,
				    	ROUND(AVG(iv.TotalExportApparentEnergy), 2) AS TotalExportApparentEnergy,
				    	ROUND(AVG(iv.Q1TotalReactiveEnergy), 2) AS Q1TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q2TotalReactiveEnergy), 2) AS Q2TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q3TotalReactiveEnergy), 2) AS Q3TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q4TotalReactiveEnergy), 2) AS Q4TotalReactiveEnergy,
				    	ROUND(AVG(iv.Q1Q2TotalInductiveReactiveEnergy), 2) AS Q1Q2TotalInductiveReactiveEnergy,
				    	ROUND(AVG(iv.Q3Q4TotalCapacitiveReactiveEnergy), 2) AS Q3Q4TotalCapacitiveReactiveEnergy,
				    	ROUND(AVG(iv.NetEnergyA), 2) AS NetEnergyA,
				    	ROUND(AVG(iv.NetEnergyB), 2) AS NetEnergyB,
				    	ROUND(AVG(iv.NetEnergyC), 2) AS NetEnergyC,
				    	ROUND(AVG(iv.NetApparentEnergyA), 2) AS NetApparentEnergyA,
				    	ROUND(AVG(iv.NetApparentEnergyB), 2) AS NetApparentEnergyB,
				    	ROUND(AVG(iv.NetApparentEnergyC), 2) AS NetApparentEnergyC,
				    	ROUND(AVG(iv.ImportEnergyA), 2) AS ImportEnergyA,
				    	ROUND(AVG(iv.ImportEnergyB), 2) AS ImportEnergyB,
				    	ROUND(AVG(iv.ImportEnergyC), 2) AS ImportEnergyC,
				    	ROUND(AVG(iv.ExportEnergyA), 2) AS ExportEnergyA,
				    	ROUND(AVG(iv.ExportEnergyB), 2) AS ExportEnergyB,
				    	ROUND(AVG(iv.ExportEnergyC), 2) AS ExportEnergyC,
				    	ROUND(AVG(iv.ImportApparentEnergyA), 2) AS ImportApparentEnergyA,
				    	ROUND(AVG(iv.ImportApparentEnergyB), 2) AS ImportApparentEnergyB,
				    	ROUND(AVG(iv.ImportApparentEnergyC), 2) AS ImportApparentEnergyC,
				    	ROUND(AVG(iv.ExportApparentEnergyA), 2) AS ExportApparentEnergyA,
				    	ROUND(AVG(iv.ExportApparentEnergyB), 2) AS ExportApparentEnergyB,
				    	ROUND(AVG(iv.ExportApparentEnergyC), 2) AS ExportApparentEnergyC,
				    	ROUND(AVG(iv.Q1ReactiveEnergyA), 2) AS Q1ReactiveEnergyA,
				    	ROUND(AVG(iv.Q1ReactiveEnergyB), 2) AS Q1ReactiveEnergyB,
				    	ROUND(AVG(iv.Q1ReactiveEnergyC), 2) AS Q1ReactiveEnergyC,
				    	ROUND(AVG(iv.Q2ReactiveEnergyA), 2) AS Q2ReactiveEnergyA,
				    	ROUND(AVG(iv.Q2ReactiveEnergyB), 2) AS Q2ReactiveEnergyB,
				    	ROUND(AVG(iv.Q2ReactiveEnergyC), 2) AS Q2ReactiveEnergyC,
				    	ROUND(AVG(iv.Q3ReactiveEnergyA), 2) AS Q3ReactiveEnergyA,
				    	ROUND(AVG(iv.Q3ReactiveEnergyB), 2) AS Q3ReactiveEnergyB,
				    	ROUND(AVG(iv.Q3ReactiveEnergyC), 2) AS Q3ReactiveEnergyC,
				    	ROUND(AVG(iv.Q4ReactiveEnergyA), 2) AS Q4ReactiveEnergyA,
				    	ROUND(AVG(iv.Q4ReactiveEnergyB), 2) AS Q4ReactiveEnergyB,
				    	ROUND(AVG(iv.Q4ReactiveEnergyC), 2) AS Q4ReactiveEnergyC,
				    </when>
				    
				    
			    </choose>
				
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%b. %Y' ) AS categories_first_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%m-%Y' ) AS full_time,
				DATE_FORMAT( CONVERT_TZ( iv.time, '+00:00', t.`offset` ), '%m-%Y' ) AS timekey
			FROM
				site si
				LEFT JOIN site_customer_map scm ON scm.id_site = si.id
				LEFT JOIN time_zone t ON t.id = si.id_time_zone
				LEFT JOIN device d ON d.id_site = si.id
				LEFT JOIN ${datatablename} iv ON iv.id_device = d.id 
			WHERE
				si.id = #{id_site}
				AND scm.id_customer = #{id_customer}
				AND d.id = #{id_device} 
				AND si.`status` = 1 
				AND si.is_delete = 0 
				AND CONVERT_TZ( iv.time, '+00:00', t.`offset` ) BETWEEN #{start_date} 
				AND #{end_date}
				GROUP BY timekey
        </if>
        
        
	</select>
	
</mapper>
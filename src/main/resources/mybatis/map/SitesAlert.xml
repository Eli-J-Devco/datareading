<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SitesAlert">
	<resultMap id="SitesAlertMap"
		type="com.nwm.api.entities.AlertEntity">
		<result property="id" column="id" />
		<result property="id_customer" column="id_customer" />
		<result property="id_device" column="id_device" />
		<result property="id_error" column="id_error" />
		<result property="start_date" column="start_date" />
		<result property="end_date" column="end_date" />
		<result property="asset" column="asset" />
		<result property="capacity" column="capacity" />
		<result property="status" column="status" />
		<result property="is_delete" column="is_delete" />
		<result property="created_date" column="created_date" />
		<result property="created_by" column="created_by" />
		<result property="updated_date" column="updated_date" />
		<result property="updated_by" column="updated_by" />
		<result property="id_site" column="id_site" />
		<result property="totalRecord" column="totalRecord" />
		<result property="current_time" column="current_time" />
		<result property="user_history" column="user_history" />
		
	</resultMap>
	<select id="getListBySiteId" resultType="Map">
		SELECT
			l.id,
			l.asset,
			el.name AS priority_name,
			l.capacity,
			l.`status`,
			l.alert_acknowledged,
			l.disable_notification,
			l.resolved,
			l.note,
			IFNULL(dg.title_trans, "N/A") AS device_group_title_trans,
			IFNULL(el.title_trans, "N/A") AS err_level_title_trans,
			IFNULL(dt.title_trans, "N/A") AS device_type_title_trans,
			IFNULL(e.title_trans, "N/A") AS error_title_trans,
			CASE
			WHEN COUNT(t.id_alert) > 0 THEN 
					CONCAT(
					'[',
					GROUP_CONCAT(
						JSON_OBJECT(
							'fullname',
							t.fullname,
							'created_date',
							t.date_view
						)),
					']' 
				)
			ELSE NULL
			END AS user_history,
			
			IF(l.`status` = 1, 'Opened', 'Closed') AS status_name,
			el.`name` AS `level`,
			e.message,
			e.error_code,
			d.devicename,
			<include refid="com.nwm.common.siteName"/> AS site_name,
			s.id AS id_site,
			d.id as id_device,
			i.icon AS icon_alert,
			el.id AS id_error_level,
			dt.name AS device_type_name,
			el.color AS color_error_level,
			
			d.id_device_type,
			d.datatablename,
			d.view_tablename,
			d.job_tablename,
			d.id AS id_device,
			DATE_FORMAT( CONVERT_TZ( l.start_date,'+00:00', t.`offset`), '%Y-%m-%d %H:%i:%s' ) AS start,
			DATE_FORMAT( CONVERT_TZ( l.start_date,'+00:00', t.`offset`) , '%m/%d/%Y %h:%i %p') AS start_date,
			DATE_FORMAT(CONVERT_TZ( l.end_date,'+00:00', t.`offset`), '%m/%d/%Y %h:%i %p') AS end_date,
			DATE_FORMAT(CONVERT_TZ( d.last_updated,'+00:00', t.`offset`), '%m/%d/%Y %h:%i %p') AS last_updated,
			
			
			CONCAT_WS('', 
				IF( FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / (60*24))) <![CDATA[<]]> 0 , 0, FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time}) / (60*24)))), 'd ',
				IF(MOD(FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / 60)), 24) <![CDATA[<]]> 0, 0, MOD(FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`),#{current_time}) / 60)), 24)), 'h ',
				IF( MOD((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time})), 60) <![CDATA[<]]> 0, 0, MOD((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time})), 60)), 'm'
			) AS duration,
			IFNULL( FLOOR((TIMESTAMPDIFF(MINUTE,CONVERT_TZ( l.start_date,'+00:00', t.`offset`), #{current_time}))) , 0) AS open_period,
			
			CASE
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 DAY ) THEN TIMESTAMPDIFF( DAY, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') )
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 HOUR ) THEN TIMESTAMPDIFF( HOUR, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL -1 MINUTE ) THEN TIMESTAMPDIFF( MINUTE, CONVERT_TZ( l.start_date, '+00:00', t.`offset` ), DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i') ) 
				ELSE 0
			END AS times_ago,

	
			CASE
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 DAY ) THEN 'day'
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 HOUR ) THEN 'hour'
				WHEN CONVERT_TZ( l.start_date, '+00:00', t.`offset` ) <![CDATA[<]]> DATE_ADD( DATE_FORMAT( CONVERT_TZ( NOW(), '+00:00', t.`offset` ) , '%Y-%m-%d %H:%i'), INTERVAL - 1 MINUTE ) THEN 'minute' ELSE 'now'
			END AS times_ago_unit,
			<include refid="com.nwm.common.keyIndicatorField"/>
			
		FROM
			`alert` l
			LEFT JOIN error e ON e.id = l.id_error
			LEFT JOIN error_level el ON el.id = e.id_error_level
			LEFT JOIN icon i ON i.id = el.id_icon
			LEFT JOIN device d ON d.id = l.id_device
			LEFT JOIN device_group dg ON dg.id = d.id_device_group
			LEFT JOIN device_type dt ON dt.id = d.id_device_type
			
			LEFT JOIN (
				SELECT 
				ah.id_alert,
				CONCAT_WS( ' ',e.first_name, e.last_name) AS fullname,
				DATE_FORMAT(ah.created_date, '%Y-%m-%d %H:%i:%s') AS date_view
				FROM alert_history ah 
				LEFT JOIN employee e ON ah.id_employee = e.id
				GROUP BY ah.id_alert
			) t ON t.id_alert = l.id
			
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			e.`status` = 1
			AND s.enable_alert = 1
			AND e.is_delete = 0
			AND d.is_delete = 0
			AND s.id = #{id_site}
			AND l.is_delete = 0
			AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			
			<if test="date_from != null and date_to != null">
				AND CONVERT_TZ( l.start_date, '+00:00', t.`offset` )  BETWEEN #{date_from}  AND #{date_to}
			</if>
			
			<include refid="com.nwm.common.deviceByDomainCondition"/>
			
			
			<if test="id_status != null and !id_status.isEmpty()">
				AND l.status IN  (
					<foreach item="item" index="index" collection="id_status" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			

			<if test="id_levels != null and !id_levels.isEmpty()">
				AND el.id IN  (
					<foreach item="item" index="index" collection="id_levels" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			
			<if test="id_types != null and !id_types.isEmpty()">
				AND e.id_error_type IN  (
					<foreach item="item" index="index" collection="id_types" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="!isUserNW.booleanValue()">
				AND el.id != 14
			</if>
			
		GROUP BY l.id 
			
			<choose>
				<when test="sort_column == 'id'">
			      ORDER BY l.`id` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'site_name'">
			      ORDER BY s.`name` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'priority_name'">
			      ORDER BY el.`name` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'message'">
			      ORDER BY e.`message` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'devicename'">
			      ORDER BY d.`devicename` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'start_date'">
			      ORDER BY l.`start_date` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'end_date'">
			      ORDER BY l.`end_date` ${order_by}
			    </when>
			    
			    <when test="sort_column == 'open_period'">
			      ORDER BY l.start_date ${order_by}
			    </when>
			    
			    <when test="sort_column == 'device_type_name'">
			      ORDER BY dt.name ${order_by}
			    </when>
			    
			    
			    
			    <otherwise>
			      ORDER BY l.start_date DESC
			    </otherwise>
			  </choose>
  
		LIMIT #{limit} OFFSET #{offset};
	</select>
	
	
	<select id="getListBySiteIdTotalCount" resultMap="SitesAlertMap" parameterType="String">
		SELECT
			COUNT(l.id) as totalRecord
			
		FROM
			`alert` l
			LEFT JOIN error e ON e.id = l.id_error
			LEFT JOIN error_level el ON el.id = e.id_error_level
			LEFT JOIN device d ON d.id = l.id_device
			LEFT JOIN site s ON s.id = d.id_site
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		
		WHERE 
			e.`status` = 1
			AND s.enable_alert = 1
			AND e.is_delete = 0
			AND s.id = #{id_site}
			AND l.is_delete = 0
			AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
			
			<if test="date_from != null and date_to != null">
				AND CONVERT_TZ( l.start_date, '+00:00', t.`offset` )  BETWEEN #{date_from}  AND #{date_to}
			</if>
			
			<include refid="com.nwm.common.deviceByDomainCondition"/>
		        

			<if test="id_status != null and !id_status.isEmpty()">
				AND l.status IN  (
					<foreach item="item" index="index" collection="id_status" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			
			<if test="id_levels != null and !id_levels.isEmpty()">
				AND el.id IN  (
					<foreach item="item" index="index" collection="id_levels" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="id_types != null and !id_types.isEmpty()">
				AND e.id_error_type IN  (
					<foreach item="item" index="index" collection="id_types" separator=" , ">
						#{item.id}
					</foreach>
				)
			</if>
			
			<if test="!isUserNW.booleanValue()">
				AND el.id != 14
			</if>
  	</select>
  	
  	<update id="updateStatus">
		UPDATE `alert`
		SET
			`status` = #{status},
			`end_date` = #{end_date}
		WHERE
			`id` = #{id}
	</update>
	
	<insert id="insertAlertHistory" useGeneratedKeys="true" keyProperty="id_alert">
		INSERT INTO `alert_history`(
			`id_alert`,
			`id_employee`,
			`created_date`
		)VALUES(
			#{id_alert},
			#{id_employee},
			NOW()
		);
	</insert>
	
	
	
	<update id="updateAlertHistory">
		UPDATE `alert_history`
		SET
			`created_date` = NOW()
		WHERE
			`id_alert` = #{id_alert} AND `id_employee` = #{id_employee}
	</update>
	
	
	<update id="updateAlert">
		UPDATE `alert`
		SET
			<if test="status == 0">
			`end_date` = NOW(),
			</if>
			<if test="status == 1">
			`end_date` = null,
			</if>
			`alert_acknowledged` = #{alert_acknowledged},
			`disable_notification` = #{disable_notification},
			`resolved` = #{resolved},
			`status` = #{status},
			`note` = #{note}
		WHERE
			`id` = #{id}
	</update>
	
	<select id="getACKByEmplyee" resultType="com.nwm.api.entities.AlertHistoryEntity" parameterType="com.nwm.api.entities.AlertHistoryEntity">
		SELECT
			* 
		FROM
			alert_history s 
		WHERE
			s.`id_alert` = #{id_alert} 
			AND s.`id_employee` = #{id_employee} 
			LIMIT 1;
  	</select>
	
  	
  	<select id="getAlertSummary" resultType="com.nwm.api.entities.AlertEntity" parameterType="com.nwm.api.entities.AlertEntity">
		SELECT (
			SELECT
				COUNT( e.id_error_level ) AS lowPriority 
			FROM
				alert a
				LEFT JOIN device d ON d.id = a.id_device
				LEFT JOIN error e ON a.id_error = e.id 
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE
				e.id_error_level = 13
				AND a.`status` = 1 
				AND e.`status` = 1
				AND a.is_delete = 0
				AND e.is_delete = 0
				AND d.`status` = 1
				AND s.enable_alert = 1
				AND d.is_delete = 0
				AND d.id_site = #{id_site}
				AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
				<include refid="com.nwm.common.deviceByDomainCondition"/>
			GROUP BY
				e.id_error_level
		) AS lowPriority,
		
		(
			SELECT
				COUNT( e.id_error_level ) AS highPriority 
			FROM
				alert a
				LEFT JOIN error e ON a.id_error = e.id 
				LEFT JOIN device d ON d.id = a.id_device
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE
				e.id_error_level = 11
				AND a.`status` = 1 
				AND e.`status` = 1 
				AND a.is_delete = 0
				AND e.is_delete = 0
				AND d.`status` = 1
				AND d.is_delete = 0
				AND s.enable_alert = 1
				AND d.id_site = #{id_site}
				AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
				<include refid="com.nwm.common.deviceByDomainCondition"/>
			GROUP BY
				e.id_error_level
		) AS highPriority,
		
		
		(
			SELECT
				COUNT(*) AS totalError 
			FROM
				alert a
				LEFT JOIN error e ON a.id_error = e.id 
				LEFT JOIN device d ON d.id = a.id_device
				LEFT JOIN site s ON s.id = d.id_site
				LEFT JOIN time_zone t ON t.id = s.id_time_zone
			WHERE
				a.`status` = 1 
				AND e.`status` = 1 
				AND a.is_delete = 0
				AND e.is_delete = 0
				AND d.`status` = 1
				AND d.is_delete = 0
				AND s.enable_alert = 1
				AND d.id_site = #{id_site}
				AND (CONVERT_TZ(NOW(), '+00:00', t.offset) <![CDATA[ < ]]> s.expiration OR s.expiration IS NULL)
				<include refid="com.nwm.common.deviceByDomainCondition"/>
		        <if test="!isUserNW.booleanValue()">
					AND e.id_error_level != 14
				</if>
		) AS totalError
		
				
  	</select>
  	
  	<select id="getDetailSendMail" resultType="com.nwm.api.entities.AlertEntity" parameterType="com.nwm.api.entities.AlertEntity">
		SELECT
			a.id,
			<include refid="com.nwm.common.siteName"/> AS site_name,
			d.devicename,
			IF(a.start_date IS NULL , "-", DATE_FORMAT( CONVERT_TZ( a.start_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS start_date,
			IF(a.end_date IS NULL , "-", DATE_FORMAT( CONVERT_TZ( a.end_date, '+00:00', t.`offset` ), '%m-%d-%Y %H:%i %p' ) ) AS end_date,
			e.message,
			e.error_code,
			IF(a.`status` = 0, 'Closed', 'Opened') AS `status_name`,
			a.open_send_mail,
			a.close_send_mail,
			s.cf_email_subscribers,
			a.`status`,
			s.id AS id_site
		FROM
			alert a
			LEFT JOIN error e ON e.id = a.id_error
			LEFT JOIN device d ON d.id = a.id_device
			LEFT JOIN site s ON s.id = d.id_site 
			LEFT JOIN time_zone t ON t.id = s.id_time_zone
		WHERE
			s.enable_alert = 1
			AND a.id = #{id};
  	</select>
  	

</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Company">
	<resultMap id="CompanyMap"
		type="com.nwm.api.entities.CompanyEntity">
		<result property="id" column="id" />
		<result property="name" column="name" />
		<result property="text" column="text" />
		<result property="value" column="value" />
		<result property="offset" column="offset" />
		<result property="status" column="status" />
		<result property="is_delete" column="is_delete" />
		<result property="created_date" column="created_date" />
		<result property="created_by" column="created_by" />
		<result property="updated_date" column="updated_by" />
		<result property="active" column="active" />
		<result property="description" column="description" />
	</resultMap>
	

	

	<select id="getDropdownList" resultMap="CompanyMap" parameterType="String">
		SELECT
			t.*,
			t.name AS text,
			0 as active
		FROM
			company AS t
		WHERE
			t.`status` = 1 AND t.is_delete = 0 
		ORDER BY `name` ASC;
	</select>
	
	<select id="getList" resultType="Map" >
		SELECT
			s.*,
			IF(
				COUNT(c.id) = 0,
				JSON_ARRAY(),
				JSON_ARRAYAGG(JSON_OBJECT(
					'id', c.id,
					'id_company', c.id_company,
					'first_name', c.first_name,
					'last_name', c.last_name,
					'email', c.email,
					'title_position', c.title_position,
					'primary_contact', c.primary_contact,
					'dataPhones', c.dataPhones
				))
			) AS contactInformation
		FROM
			company s 
			LEFT JOIN (
				SELECT
					c.id,
					c.id_company,
					c.first_name,
					c.last_name,
					c.email,
					c.title_position,
					c.primary_contact,
					IF(
						COUNT(p.id) = 0,
						JSON_ARRAY(),
						JSON_ARRAYAGG(JSON_OBJECT(
							'id', p.id,
							'id_conact_info_company', p.id_conact_info_company,
							'phone_type', p.phone_type,
							'phone_number', p.phone_number,
							'phone_ext', p.phone_ext
						))
					) AS dataPhones
				FROM
					contact_info_company c
					LEFT JOIN contact_info_company_phone p ON p.id_conact_info_company = c.id
				GROUP BY
					c.id
			) c ON c.id_company = s.id
		WHERE 
			s.is_delete = 0
			<if test="keyword != null">
				AND s.name LIKE CONCAT("%",#{keyword}, "%")
			</if> 	
		GROUP BY
			s.id
	    ORDER BY
	        <choose>  
	            <when test="sort_column != null and sort_column != ''">
					s.${sort_column} ${order_by}
	            </when>
	            
	            <otherwise>
					s.id DESC
			    </otherwise>                                                  
	        </choose>  
		<if test="limit > 0">
			LIMIT ${limit} OFFSET ${offset};
		</if>
	</select>
	
  	
	
	<select id="getListCount"  resultType="int" parameterType="com.nwm.api.entities.CompanyEntity">
    	SELECT count(*) as totalRow
		FROM company s WHERE s.is_delete = 0
		<if test="keyword != null">
			AND s.name LIKE CONCAT("%",#{keyword}, "%")
		</if> 
  	</select>
  	
  	<update id="updateStatus">
		UPDATE `company`
		SET
			`status` = #{status}
		WHERE
			`id` = #{id}
	</update>
	<update id="delete">
		UPDATE `company`
		SET
			`is_delete` = #{is_delete}
		WHERE
			`id` = #{id}
	</update>
	
	
	<insert id="insertCompany" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `company`(
			`name`,
			`description`,
			`entity_type`,
			`ein`,
			`state_of_incorporation`,
			`id_country`,
			`ba_street_address`,
			`ba_city`,
			`ba_id_state`,
			`ba_zip_code`,
			`ba_id_country`,
			`bill_street_address`,
			`bill_city`,
			`bill_zip_code`,
			`bill_id_state`,
			`bill_id_country`,
			`logo`,
			`primary_contact`,
			`created_date`,
			`created_by`,
			`updated_date`,
			`updated_by`,
			`bill_different_address`
		)VALUES(
			#{name},
			#{description},
			#{entity_type},
			#{ein},
			#{state_of_incorporation},
			#{id_country},
			#{ba_street_address},
			#{ba_city},
			#{ba_id_state},
			#{ba_zip_code},
			#{ba_id_country},
			#{bill_street_address},
			#{bill_city},
			#{bill_zip_code},
			#{bill_id_state},
			#{bill_id_country},
			#{logo},
			#{primary_contact},
			NOW(),
			#{created_by},
			NOW(),
			#{updated_by},
			#{bill_different_address}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	
	<insert id="insertContactInfoCompany" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `contact_info_company`(
			`id_company`,
			`first_name`,
			`last_name`,
			`email`,
			`title_position`,
			`primary_contact`
		)VALUES(
			#{id_company},
			#{first_name},
			#{last_name},
			#{email},
			#{title_position},
			#{primary_contact}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	<insert id="insertContactInfoCompanyPhone" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO `contact_info_company_phone`(
			`id_conact_info_company`,
			`phone_type`,
			`phone_number`,
			`phone_ext`
		)VALUES(
			#{id_conact_info_company},
			#{phone_type},
			#{phone_number},
			#{phone_ext}
		);
		<selectKey keyProperty="id" resultType="int">
	        SELECT 
	        LAST_INSERT_ID() as id
        </selectKey>
	</insert>
	
	
	<update id="deleteContactInfoCompany">
		DELETE from `contact_info_company` WHERE id_company = #{id};
	</update>
	
	
	<update id="updateCompany">
		UPDATE `company`
		SET
			`name` = #{name},
			`description` = #{description},
			`entity_type` = #{entity_type},
			`ein` = #{ein},
			`state_of_incorporation` = #{state_of_incorporation},
			`id_country` = #{id_country},
			`ba_street_address` = #{ba_street_address},
			`ba_city` = #{ba_city},
			`ba_id_state` = #{ba_id_state},
			`ba_zip_code` = #{ba_zip_code},
			`ba_id_country` = #{ba_id_country},
			`bill_street_address` = #{bill_street_address},
			`bill_city` = #{bill_city},
			`bill_zip_code` = #{bill_zip_code},
			`bill_id_state` = #{bill_id_state},
			`bill_id_country` = #{bill_id_country},
			`logo` = #{logo},
			`primary_contact` = #{primary_contact},
			`updated_date` = NOW(),
			`updated_by` = #{updated_by},
			`bill_different_address` = #{bill_different_address}
		WHERE
			`id` = #{id}
	</update>
	
</mapper>